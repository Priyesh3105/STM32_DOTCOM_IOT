
UART-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e8  080029e8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029f0  080029f0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080029f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000020  08002a18  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002a18  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081df  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000139b  00000000  00000000  00028227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  000295c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  00029c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001361c  00000000  00000000  0002a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000881b  00000000  00000000  0003d89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077698  00000000  00000000  000460b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd74f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016b4  00000000  00000000  000bd7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002964 	.word	0x08002964

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08002964 	.word	0x08002964

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f996 	bl	80007dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f820 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8c0 	bl	8000638 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004b8:	f000 f88e 	bl	80005d8 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, Tx_data, sizeof(Tx_data), 100);
 80004bc:	4909      	ldr	r1, [pc, #36]	; (80004e4 <main+0x3c>)
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <main+0x40>)
 80004c0:	2364      	movs	r3, #100	; 0x64
 80004c2:	2214      	movs	r2, #20
 80004c4:	f001 fbee 	bl	8001ca4 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, Rx_data, sizeof(Rx_data), 5000);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <main+0x44>)
 80004ca:	4909      	ldr	r1, [pc, #36]	; (80004f0 <main+0x48>)
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <main+0x40>)
 80004ce:	2214      	movs	r2, #20
 80004d0:	f001 fc88 	bl	8001de4 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, Rx_data, sizeof(Rx_data), 100);
 80004d4:	4906      	ldr	r1, [pc, #24]	; (80004f0 <main+0x48>)
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <main+0x40>)
 80004d8:	2364      	movs	r3, #100	; 0x64
 80004da:	2214      	movs	r2, #20
 80004dc:	f001 fbe2 	bl	8001ca4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, Tx_data, sizeof(Tx_data), 100);
 80004e0:	e7ec      	b.n	80004bc <main+0x14>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000000 	.word	0x20000000
 80004e8:	2000003c 	.word	0x2000003c
 80004ec:	00001388 	.word	0x00001388
 80004f0:	200000c4 	.word	0x200000c4

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b09d      	sub	sp, #116	; 0x74
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	2438      	movs	r4, #56	; 0x38
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2338      	movs	r3, #56	; 0x38
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f002 fa25 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050a:	2324      	movs	r3, #36	; 0x24
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	0018      	movs	r0, r3
 8000510:	2314      	movs	r3, #20
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f002 fa1d 	bl	8002954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051a:	003b      	movs	r3, r7
 800051c:	0018      	movs	r0, r3
 800051e:	2324      	movs	r3, #36	; 0x24
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f002 fa16 	bl	8002954 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <SystemClock_Config+0xdc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <SystemClock_Config+0xe0>)
 800052e:	401a      	ands	r2, r3
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <SystemClock_Config+0xdc>)
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	0109      	lsls	r1, r1, #4
 8000536:	430a      	orrs	r2, r1
 8000538:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053a:	0021      	movs	r1, r4
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2202      	movs	r2, #2
 8000540:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2210      	movs	r2, #16
 800054c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2202      	movs	r2, #2
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	02d2      	lsls	r2, r2, #11
 8000560:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	03d2      	lsls	r2, r2, #15
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	187b      	adds	r3, r7, r1
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fbcf 	bl	8000d10 <HAL_RCC_OscConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000576:	f000 f88d 	bl	8000694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	2124      	movs	r1, #36	; 0x24
 800057c:	187b      	adds	r3, r7, r1
 800057e:	220f      	movs	r2, #15
 8000580:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2203      	movs	r2, #3
 8000586:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2101      	movs	r1, #1
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 ff7a 	bl	8001498 <HAL_RCC_ClockConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005a8:	f000 f874 	bl	8000694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2201      	movs	r2, #1
 80005b0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b8:	003b      	movs	r3, r7
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 f990 	bl	80018e0 <HAL_RCCEx_PeriphCLKConfig>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005c4:	f000 f866 	bl	8000694 <Error_Handler>
  }
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b01d      	add	sp, #116	; 0x74
 80005ce:	bd90      	pop	{r4, r7, pc}
 80005d0:	40007000 	.word	0x40007000
 80005d4:	ffffe7ff 	.word	0xffffe7ff

080005d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <MX_USART1_UART_Init+0x5c>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005e4:	22e1      	movs	r2, #225	; 0xe1
 80005e6:	0252      	lsls	r2, r2, #9
 80005e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_USART1_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_USART1_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MX_USART1_UART_Init+0x58>)
 800061c:	0018      	movs	r0, r3
 800061e:	f001 faed 	bl	8001bfc <HAL_UART_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 f835 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000003c 	.word	0x2000003c
 8000634:	40013800 	.word	0x40013800

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_GPIO_Init+0x58>)
 8000640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_GPIO_Init+0x58>)
 8000644:	2104      	movs	r1, #4
 8000646:	430a      	orrs	r2, r1
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_GPIO_Init+0x58>)
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	2204      	movs	r2, #4
 8000650:	4013      	ands	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_GPIO_Init+0x58>)
 8000658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_GPIO_Init+0x58>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	430a      	orrs	r2, r1
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_GPIO_Init+0x58>)
 8000664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	4013      	ands	r3, r2
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_GPIO_Init+0x58>)
 8000670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_GPIO_Init+0x58>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <MX_GPIO_Init+0x58>)
 800067c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b004      	add	sp, #16
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	40021000 	.word	0x40021000

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_MspInit+0x24>)
 80006a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_MspInit+0x24>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_MspInit+0x24>)
 80006b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <HAL_MspInit+0x24>)
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	0549      	lsls	r1, r1, #21
 80006ba:	430a      	orrs	r2, r1
 80006bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	240c      	movs	r4, #12
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	0018      	movs	r0, r3
 80006d6:	2314      	movs	r3, #20
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f002 f93a 	bl	8002954 <memset>
  if(huart->Instance==USART1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a18      	ldr	r2, [pc, #96]	; (8000748 <HAL_UART_MspInit+0x80>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d12a      	bne.n	8000740 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_UART_MspInit+0x84>)
 80006ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_UART_MspInit+0x84>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	01c9      	lsls	r1, r1, #7
 80006f4:	430a      	orrs	r2, r1
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_UART_MspInit+0x84>)
 80006fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <HAL_UART_MspInit+0x84>)
 80006fe:	2101      	movs	r1, #1
 8000700:	430a      	orrs	r2, r1
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_UART_MspInit+0x84>)
 8000706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000708:	2201      	movs	r2, #1
 800070a:	4013      	ands	r3, r2
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	22c0      	movs	r2, #192	; 0xc0
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	0021      	movs	r1, r4
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2203      	movs	r2, #3
 800072a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2204      	movs	r2, #4
 8000730:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	187a      	adds	r2, r7, r1
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f000 f972 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b009      	add	sp, #36	; 0x24
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	40013800 	.word	0x40013800
 800074c:	40021000 	.word	0x40021000

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <NMI_Handler+0x4>

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000774:	f000 f886 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800078c:	f7ff fff7 	bl	800077e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000792:	490d      	ldr	r1, [pc, #52]	; (80007c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <LoopForever+0xe>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a8:	4c0a      	ldr	r4, [pc, #40]	; (80007d4 <LoopForever+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b6:	f002 f8a9 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ba:	f7ff fe75 	bl	80004a8 <main>

080007be <LoopForever>:

LoopForever:
    b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   r0, =_estack
 80007c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80007cc:	080029f8 	.word	0x080029f8
  ldr r2, =_sbss
 80007d0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80007d4:	200000dc 	.word	0x200000dc

080007d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_COMP_IRQHandler>
	...

080007dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_Init+0x3c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_Init+0x3c>)
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	430a      	orrs	r2, r1
 80007f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 f811 	bl	800081c <HAL_InitTick>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d003      	beq.n	8000806 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e001      	b.n	800080a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000806:	f7ff ff4b 	bl	80006a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
}
 800080e:	0018      	movs	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_InitTick+0x5c>)
 8000826:	681c      	ldr	r4, [r3, #0]
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_InitTick+0x60>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	0019      	movs	r1, r3
 800082e:	23fa      	movs	r3, #250	; 0xfa
 8000830:	0098      	lsls	r0, r3, #2
 8000832:	f7ff fc69 	bl	8000108 <__udivsi3>
 8000836:	0003      	movs	r3, r0
 8000838:	0019      	movs	r1, r3
 800083a:	0020      	movs	r0, r4
 800083c:	f7ff fc64 	bl	8000108 <__udivsi3>
 8000840:	0003      	movs	r3, r0
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f8e1 	bl	8000a0a <HAL_SYSTICK_Config>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	e00f      	b.n	8000870 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d80b      	bhi.n	800086e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	2301      	movs	r3, #1
 800085a:	425b      	negs	r3, r3
 800085c:	2200      	movs	r2, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f8be 	bl	80009e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_InitTick+0x64>)
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b003      	add	sp, #12
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	20000014 	.word	0x20000014
 800087c:	2000001c 	.word	0x2000001c
 8000880:	20000018 	.word	0x20000018

08000884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	001a      	movs	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	18d2      	adds	r2, r2, r3
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_IncTick+0x20>)
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	2000001c 	.word	0x2000001c
 80008a4:	200000d8 	.word	0x200000d8

080008a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	200000d8 	.word	0x200000d8

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	0002      	movs	r2, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b7f      	cmp	r3, #127	; 0x7f
 80008d0:	d828      	bhi.n	8000924 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d2:	4a2f      	ldr	r2, [pc, #188]	; (8000990 <__NVIC_SetPriority+0xd4>)
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	33c0      	adds	r3, #192	; 0xc0
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	589b      	ldr	r3, [r3, r2]
 80008e2:	1dfa      	adds	r2, r7, #7
 80008e4:	7812      	ldrb	r2, [r2, #0]
 80008e6:	0011      	movs	r1, r2
 80008e8:	2203      	movs	r2, #3
 80008ea:	400a      	ands	r2, r1
 80008ec:	00d2      	lsls	r2, r2, #3
 80008ee:	21ff      	movs	r1, #255	; 0xff
 80008f0:	4091      	lsls	r1, r2
 80008f2:	000a      	movs	r2, r1
 80008f4:	43d2      	mvns	r2, r2
 80008f6:	401a      	ands	r2, r3
 80008f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	401a      	ands	r2, r3
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0018      	movs	r0, r3
 8000908:	2303      	movs	r3, #3
 800090a:	4003      	ands	r3, r0
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000910:	481f      	ldr	r0, [pc, #124]	; (8000990 <__NVIC_SetPriority+0xd4>)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b25b      	sxtb	r3, r3
 8000918:	089b      	lsrs	r3, r3, #2
 800091a:	430a      	orrs	r2, r1
 800091c:	33c0      	adds	r3, #192	; 0xc0
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000922:	e031      	b.n	8000988 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000924:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <__NVIC_SetPriority+0xd8>)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	0019      	movs	r1, r3
 800092c:	230f      	movs	r3, #15
 800092e:	400b      	ands	r3, r1
 8000930:	3b08      	subs	r3, #8
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	3306      	adds	r3, #6
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	3304      	adds	r3, #4
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	1dfa      	adds	r2, r7, #7
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	0011      	movs	r1, r2
 8000944:	2203      	movs	r2, #3
 8000946:	400a      	ands	r2, r1
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	21ff      	movs	r1, #255	; 0xff
 800094c:	4091      	lsls	r1, r2
 800094e:	000a      	movs	r2, r1
 8000950:	43d2      	mvns	r2, r2
 8000952:	401a      	ands	r2, r3
 8000954:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	019b      	lsls	r3, r3, #6
 800095a:	22ff      	movs	r2, #255	; 0xff
 800095c:	401a      	ands	r2, r3
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	0018      	movs	r0, r3
 8000964:	2303      	movs	r3, #3
 8000966:	4003      	ands	r3, r0
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <__NVIC_SetPriority+0xd8>)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	001c      	movs	r4, r3
 8000974:	230f      	movs	r3, #15
 8000976:	4023      	ands	r3, r4
 8000978:	3b08      	subs	r3, #8
 800097a:	089b      	lsrs	r3, r3, #2
 800097c:	430a      	orrs	r2, r1
 800097e:	3306      	adds	r3, #6
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	18c3      	adds	r3, r0, r3
 8000984:	3304      	adds	r3, #4
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b003      	add	sp, #12
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	045b      	lsls	r3, r3, #17
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d301      	bcc.n	80009b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ac:	2301      	movs	r3, #1
 80009ae:	e010      	b.n	80009d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <SysTick_Config+0x44>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	3a01      	subs	r2, #1
 80009b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b8:	2301      	movs	r3, #1
 80009ba:	425b      	negs	r3, r3
 80009bc:	2103      	movs	r1, #3
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff ff7c 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SysTick_Config+0x44>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <SysTick_Config+0x44>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	210f      	movs	r1, #15
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	1c02      	adds	r2, r0, #0
 80009f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ff5d 	bl	80008bc <__NVIC_SetPriority>
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff ffbf 	bl	8000998 <SysTick_Config>
 8000a1a:	0003      	movs	r3, r0
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a3a:	e14f      	b.n	8000cdc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d100      	bne.n	8000a54 <HAL_GPIO_Init+0x30>
 8000a52:	e140      	b.n	8000cd6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2203      	movs	r2, #3
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d005      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2203      	movs	r2, #3
 8000a66:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	43da      	mvns	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	0013      	movs	r3, r2
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	2201      	movs	r2, #1
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d017      	beq.n	8000b0a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	43da      	mvns	r2, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2203      	movs	r2, #3
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d123      	bne.n	8000b5e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	08da      	lsrs	r2, r3, #3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3208      	adds	r2, #8
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	58d3      	ldr	r3, [r2, r3]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	2207      	movs	r2, #7
 8000b28:	4013      	ands	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	0013      	movs	r3, r2
 8000b32:	43da      	mvns	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2107      	movs	r1, #7
 8000b42:	400b      	ands	r3, r1
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	409a      	lsls	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	08da      	lsrs	r2, r3, #3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3208      	adds	r2, #8
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	6939      	ldr	r1, [r7, #16]
 8000b5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	23c0      	movs	r3, #192	; 0xc0
 8000b98:	029b      	lsls	r3, r3, #10
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <HAL_GPIO_Init+0x17c>
 8000b9e:	e09a      	b.n	8000cd6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	4b54      	ldr	r3, [pc, #336]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba4:	4b53      	ldr	r3, [pc, #332]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bac:	4a52      	ldr	r2, [pc, #328]	; (8000cf8 <HAL_GPIO_Init+0x2d4>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	589b      	ldr	r3, [r3, r2]
 8000bb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	43da      	mvns	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	23a0      	movs	r3, #160	; 0xa0
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d019      	beq.n	8000c0e <HAL_GPIO_Init+0x1ea>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a47      	ldr	r2, [pc, #284]	; (8000cfc <HAL_GPIO_Init+0x2d8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d013      	beq.n	8000c0a <HAL_GPIO_Init+0x1e6>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a46      	ldr	r2, [pc, #280]	; (8000d00 <HAL_GPIO_Init+0x2dc>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d00d      	beq.n	8000c06 <HAL_GPIO_Init+0x1e2>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a45      	ldr	r2, [pc, #276]	; (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d007      	beq.n	8000c02 <HAL_GPIO_Init+0x1de>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a44      	ldr	r2, [pc, #272]	; (8000d08 <HAL_GPIO_Init+0x2e4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_GPIO_Init+0x1da>
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	e008      	b.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000bfe:	2306      	movs	r3, #6
 8000c00:	e006      	b.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000c02:	2303      	movs	r3, #3
 8000c04:	e004      	b.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000c06:	2302      	movs	r3, #2
 8000c08:	e002      	b.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e000      	b.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	2103      	movs	r1, #3
 8000c14:	400a      	ands	r2, r1
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	4093      	lsls	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c20:	4935      	ldr	r1, [pc, #212]	; (8000cf8 <HAL_GPIO_Init+0x2d4>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2e:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	43da      	mvns	r2, r3
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	035b      	lsls	r3, r3, #13
 8000c46:	4013      	ands	r3, r2
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c52:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c58:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43da      	mvns	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	039b      	lsls	r3, r3, #14
 8000c70:	4013      	ands	r3, r2
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	029b      	lsls	r3, r3, #10
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43da      	mvns	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	025b      	lsls	r3, r3, #9
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	40da      	lsrs	r2, r3
 8000ce4:	1e13      	subs	r3, r2, #0
 8000ce6:	d000      	beq.n	8000cea <HAL_GPIO_Init+0x2c6>
 8000ce8:	e6a8      	b.n	8000a3c <HAL_GPIO_Init+0x18>
  }
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b006      	add	sp, #24
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	50000400 	.word	0x50000400
 8000d00:	50000800 	.word	0x50000800
 8000d04:	50000c00 	.word	0x50000c00
 8000d08:	50001c00 	.word	0x50001c00
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f000 fbaf 	bl	8001482 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d24:	4bcf      	ldr	r3, [pc, #828]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	220c      	movs	r2, #12
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d2e:	4bcd      	ldr	r3, [pc, #820]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	025b      	lsls	r3, r3, #9
 8000d36:	4013      	ands	r3, r2
 8000d38:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4013      	ands	r3, r2
 8000d42:	d100      	bne.n	8000d46 <HAL_RCC_OscConfig+0x36>
 8000d44:	e07e      	b.n	8000e44 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d007      	beq.n	8000d5c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	2b0c      	cmp	r3, #12
 8000d50:	d112      	bne.n	8000d78 <HAL_RCC_OscConfig+0x68>
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	025b      	lsls	r3, r3, #9
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d10d      	bne.n	8000d78 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	4bc1      	ldr	r3, [pc, #772]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	029b      	lsls	r3, r3, #10
 8000d64:	4013      	ands	r3, r2
 8000d66:	d100      	bne.n	8000d6a <HAL_RCC_OscConfig+0x5a>
 8000d68:	e06b      	b.n	8000e42 <HAL_RCC_OscConfig+0x132>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d167      	bne.n	8000e42 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	f000 fb85 	bl	8001482 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	025b      	lsls	r3, r3, #9
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d107      	bne.n	8000d94 <HAL_RCC_OscConfig+0x84>
 8000d84:	4bb7      	ldr	r3, [pc, #732]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4bb6      	ldr	r3, [pc, #728]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	0249      	lsls	r1, r1, #9
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e027      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	02db      	lsls	r3, r3, #11
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d10e      	bne.n	8000dbe <HAL_RCC_OscConfig+0xae>
 8000da0:	4bb0      	ldr	r3, [pc, #704]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4baf      	ldr	r3, [pc, #700]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	02c9      	lsls	r1, r1, #11
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	4bad      	ldr	r3, [pc, #692]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4bac      	ldr	r3, [pc, #688]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	0249      	lsls	r1, r1, #9
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	e012      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000dbe:	4ba9      	ldr	r3, [pc, #676]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4ba8      	ldr	r3, [pc, #672]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000dc4:	49a8      	ldr	r1, [pc, #672]	; (8001068 <HAL_RCC_OscConfig+0x358>)
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	4ba6      	ldr	r3, [pc, #664]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	025b      	lsls	r3, r3, #9
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4ba2      	ldr	r3, [pc, #648]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4ba1      	ldr	r3, [pc, #644]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000dde:	49a3      	ldr	r1, [pc, #652]	; (800106c <HAL_RCC_OscConfig+0x35c>)
 8000de0:	400a      	ands	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d015      	beq.n	8000e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fd5c 	bl	80008a8 <HAL_GetTick>
 8000df0:	0003      	movs	r3, r0
 8000df2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000df4:	e009      	b.n	8000e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df6:	f7ff fd57 	bl	80008a8 <HAL_GetTick>
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b64      	cmp	r3, #100	; 0x64
 8000e02:	d902      	bls.n	8000e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	f000 fb3c 	bl	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e0a:	4b96      	ldr	r3, [pc, #600]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	029b      	lsls	r3, r3, #10
 8000e12:	4013      	ands	r3, r2
 8000e14:	d0ef      	beq.n	8000df6 <HAL_RCC_OscConfig+0xe6>
 8000e16:	e015      	b.n	8000e44 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fd46 	bl	80008a8 <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e22:	f7ff fd41 	bl	80008a8 <HAL_GetTick>
 8000e26:	0002      	movs	r2, r0
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b64      	cmp	r3, #100	; 0x64
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e326      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e34:	4b8b      	ldr	r3, [pc, #556]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	029b      	lsls	r3, r3, #10
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d1f0      	bne.n	8000e22 <HAL_RCC_OscConfig+0x112>
 8000e40:	e000      	b.n	8000e44 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d100      	bne.n	8000e50 <HAL_RCC_OscConfig+0x140>
 8000e4e:	e08b      	b.n	8000f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d005      	beq.n	8000e68 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	2b0c      	cmp	r3, #12
 8000e60:	d13e      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x1d0>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d13b      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000e68:	4b7e      	ldr	r3, [pc, #504]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d004      	beq.n	8000e7c <HAL_RCC_OscConfig+0x16c>
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e302      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7c:	4b79      	ldr	r3, [pc, #484]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	4a7b      	ldr	r2, [pc, #492]	; (8001070 <HAL_RCC_OscConfig+0x360>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	0019      	movs	r1, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	021a      	lsls	r2, r3, #8
 8000e8c:	4b75      	ldr	r3, [pc, #468]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e92:	4b74      	ldr	r3, [pc, #464]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2209      	movs	r2, #9
 8000e98:	4393      	bics	r3, r2
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	4b71      	ldr	r3, [pc, #452]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ea4:	f000 fc40 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 8000ea8:	0001      	movs	r1, r0
 8000eaa:	4b6e      	ldr	r3, [pc, #440]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	4a6f      	ldr	r2, [pc, #444]	; (8001074 <HAL_RCC_OscConfig+0x364>)
 8000eb6:	5cd3      	ldrb	r3, [r2, r3]
 8000eb8:	000a      	movs	r2, r1
 8000eba:	40da      	lsrs	r2, r3
 8000ebc:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <HAL_RCC_OscConfig+0x368>)
 8000ebe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000ec0:	4b6e      	ldr	r3, [pc, #440]	; (800107c <HAL_RCC_OscConfig+0x36c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2513      	movs	r5, #19
 8000ec6:	197c      	adds	r4, r7, r5
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fca7 	bl	800081c <HAL_InitTick>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000ed2:	197b      	adds	r3, r7, r5
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d046      	beq.n	8000f68 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000eda:	197b      	adds	r3, r7, r5
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	e2d0      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d027      	beq.n	8000f36 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ee6:	4b5f      	ldr	r3, [pc, #380]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2209      	movs	r2, #9
 8000eec:	4393      	bics	r3, r2
 8000eee:	0019      	movs	r1, r3
 8000ef0:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fcd6 	bl	80008a8 <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f02:	f7ff fcd1 	bl	80008a8 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e2b6      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f14:	4b53      	ldr	r3, [pc, #332]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2204      	movs	r2, #4
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d0f1      	beq.n	8000f02 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1e:	4b51      	ldr	r3, [pc, #324]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a53      	ldr	r2, [pc, #332]	; (8001070 <HAL_RCC_OscConfig+0x360>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	0019      	movs	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	021a      	lsls	r2, r3, #8
 8000f2e:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000f30:	430a      	orrs	r2, r1
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	e018      	b.n	8000f68 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f36:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f42:	f7ff fcb1 	bl	80008a8 <HAL_GetTick>
 8000f46:	0003      	movs	r3, r0
 8000f48:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fcac 	bl	80008a8 <HAL_GetTick>
 8000f50:	0002      	movs	r2, r0
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e291      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2204      	movs	r2, #4
 8000f64:	4013      	ands	r3, r2
 8000f66:	d1f1      	bne.n	8000f4c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d100      	bne.n	8000f74 <HAL_RCC_OscConfig+0x264>
 8000f72:	e0a1      	b.n	80010b8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d140      	bne.n	8000ffc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f7a:	4b3a      	ldr	r3, [pc, #232]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4013      	ands	r3, r2
 8000f84:	d005      	beq.n	8000f92 <HAL_RCC_OscConfig+0x282>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e277      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f92:	4b34      	ldr	r3, [pc, #208]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a3a      	ldr	r2, [pc, #232]	; (8001080 <HAL_RCC_OscConfig+0x370>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa0:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa6:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	0a19      	lsrs	r1, r3, #8
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	061a      	lsls	r2, r3, #24
 8000fb4:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	0b5b      	lsrs	r3, r3, #13
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	0212      	lsls	r2, r2, #8
 8000fc6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000fc8:	4b26      	ldr	r3, [pc, #152]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	210f      	movs	r1, #15
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	4928      	ldr	r1, [pc, #160]	; (8001074 <HAL_RCC_OscConfig+0x364>)
 8000fd4:	5ccb      	ldrb	r3, [r1, r3]
 8000fd6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <HAL_RCC_OscConfig+0x368>)
 8000fda:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <HAL_RCC_OscConfig+0x36c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2513      	movs	r5, #19
 8000fe2:	197c      	adds	r4, r7, r5
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fc19 	bl	800081c <HAL_InitTick>
 8000fea:	0003      	movs	r3, r0
 8000fec:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000fee:	197b      	adds	r3, r7, r5
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d060      	beq.n	80010b8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8000ff6:	197b      	adds	r3, r7, r5
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	e242      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d03f      	beq.n	8001084 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0049      	lsls	r1, r1, #1
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fc49 	bl	80008a8 <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800101c:	f7ff fc44 	bl	80008a8 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e229      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4013      	ands	r3, r2
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_RCC_OscConfig+0x370>)
 8001040:	4013      	ands	r3, r2
 8001042:	0019      	movs	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 800104a:	430a      	orrs	r2, r1
 800104c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	0a19      	lsrs	r1, r3, #8
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	061a      	lsls	r2, r3, #24
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <HAL_RCC_OscConfig+0x354>)
 800105e:	430a      	orrs	r2, r1
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	e029      	b.n	80010b8 <HAL_RCC_OscConfig+0x3a8>
 8001064:	40021000 	.word	0x40021000
 8001068:	fffeffff 	.word	0xfffeffff
 800106c:	fffbffff 	.word	0xfffbffff
 8001070:	ffffe0ff 	.word	0xffffe0ff
 8001074:	0800297c 	.word	0x0800297c
 8001078:	20000014 	.word	0x20000014
 800107c:	20000018 	.word	0x20000018
 8001080:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001084:	4bbd      	ldr	r3, [pc, #756]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4bbc      	ldr	r3, [pc, #752]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 800108a:	49bd      	ldr	r1, [pc, #756]	; (8001380 <HAL_RCC_OscConfig+0x670>)
 800108c:	400a      	ands	r2, r1
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fc0a 	bl	80008a8 <HAL_GetTick>
 8001094:	0003      	movs	r3, r0
 8001096:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800109a:	f7ff fc05 	bl	80008a8 <HAL_GetTick>
 800109e:	0002      	movs	r2, r0
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e1ea      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80010ac:	4bb3      	ldr	r3, [pc, #716]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4013      	ands	r3, r2
 80010b6:	d1f0      	bne.n	800109a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2208      	movs	r2, #8
 80010be:	4013      	ands	r3, r2
 80010c0:	d036      	beq.n	8001130 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d019      	beq.n	80010fe <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	4bac      	ldr	r3, [pc, #688]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80010cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010ce:	4bab      	ldr	r3, [pc, #684]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	430a      	orrs	r2, r1
 80010d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fbe7 	bl	80008a8 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fbe2 	bl	80008a8 <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1c7      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010f2:	4ba2      	ldr	r3, [pc, #648]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80010f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f6:	2202      	movs	r2, #2
 80010f8:	4013      	ands	r3, r2
 80010fa:	d0f1      	beq.n	80010e0 <HAL_RCC_OscConfig+0x3d0>
 80010fc:	e018      	b.n	8001130 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fe:	4b9f      	ldr	r3, [pc, #636]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001102:	4b9e      	ldr	r3, [pc, #632]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001104:	2101      	movs	r1, #1
 8001106:	438a      	bics	r2, r1
 8001108:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fbcd 	bl	80008a8 <HAL_GetTick>
 800110e:	0003      	movs	r3, r0
 8001110:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001114:	f7ff fbc8 	bl	80008a8 <HAL_GetTick>
 8001118:	0002      	movs	r2, r0
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e1ad      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001126:	4b95      	ldr	r3, [pc, #596]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	d1f1      	bne.n	8001114 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2204      	movs	r2, #4
 8001136:	4013      	ands	r3, r2
 8001138:	d100      	bne.n	800113c <HAL_RCC_OscConfig+0x42c>
 800113a:	e0ae      	b.n	800129a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113c:	2027      	movs	r0, #39	; 0x27
 800113e:	183b      	adds	r3, r7, r0
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001144:	4b8d      	ldr	r3, [pc, #564]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	055b      	lsls	r3, r3, #21
 800114c:	4013      	ands	r3, r2
 800114e:	d109      	bne.n	8001164 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	4b8a      	ldr	r3, [pc, #552]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001154:	4b89      	ldr	r3, [pc, #548]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	0549      	lsls	r1, r1, #21
 800115a:	430a      	orrs	r2, r1
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800115e:	183b      	adds	r3, r7, r0
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	4b87      	ldr	r3, [pc, #540]	; (8001384 <HAL_RCC_OscConfig+0x674>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4013      	ands	r3, r2
 800116e:	d11a      	bne.n	80011a6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001170:	4b84      	ldr	r3, [pc, #528]	; (8001384 <HAL_RCC_OscConfig+0x674>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b83      	ldr	r3, [pc, #524]	; (8001384 <HAL_RCC_OscConfig+0x674>)
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	0049      	lsls	r1, r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117e:	f7ff fb93 	bl	80008a8 <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001188:	f7ff fb8e 	bl	80008a8 <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e173      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119a:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <HAL_RCC_OscConfig+0x674>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4013      	ands	r3, r2
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_OscConfig+0x4b2>
 80011b2:	4b72      	ldr	r3, [pc, #456]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80011b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011b6:	4b71      	ldr	r3, [pc, #452]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	0049      	lsls	r1, r1, #1
 80011bc:	430a      	orrs	r2, r1
 80011be:	651a      	str	r2, [r3, #80]	; 0x50
 80011c0:	e031      	b.n	8001226 <HAL_RCC_OscConfig+0x516>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x4d4>
 80011ca:	4b6c      	ldr	r3, [pc, #432]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80011cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011ce:	4b6b      	ldr	r3, [pc, #428]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80011d0:	496b      	ldr	r1, [pc, #428]	; (8001380 <HAL_RCC_OscConfig+0x670>)
 80011d2:	400a      	ands	r2, r1
 80011d4:	651a      	str	r2, [r3, #80]	; 0x50
 80011d6:	4b69      	ldr	r3, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80011d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011da:	4b68      	ldr	r3, [pc, #416]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80011dc:	496a      	ldr	r1, [pc, #424]	; (8001388 <HAL_RCC_OscConfig+0x678>)
 80011de:	400a      	ands	r2, r1
 80011e0:	651a      	str	r2, [r3, #80]	; 0x50
 80011e2:	e020      	b.n	8001226 <HAL_RCC_OscConfig+0x516>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	23a0      	movs	r3, #160	; 0xa0
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d10e      	bne.n	800120e <HAL_RCC_OscConfig+0x4fe>
 80011f0:	4b62      	ldr	r3, [pc, #392]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80011f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011f4:	4b61      	ldr	r3, [pc, #388]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	00c9      	lsls	r1, r1, #3
 80011fa:	430a      	orrs	r2, r1
 80011fc:	651a      	str	r2, [r3, #80]	; 0x50
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001202:	4b5e      	ldr	r3, [pc, #376]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0049      	lsls	r1, r1, #1
 8001208:	430a      	orrs	r2, r1
 800120a:	651a      	str	r2, [r3, #80]	; 0x50
 800120c:	e00b      	b.n	8001226 <HAL_RCC_OscConfig+0x516>
 800120e:	4b5b      	ldr	r3, [pc, #364]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001212:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001214:	495a      	ldr	r1, [pc, #360]	; (8001380 <HAL_RCC_OscConfig+0x670>)
 8001216:	400a      	ands	r2, r1
 8001218:	651a      	str	r2, [r3, #80]	; 0x50
 800121a:	4b58      	ldr	r3, [pc, #352]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 800121c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800121e:	4b57      	ldr	r3, [pc, #348]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001220:	4959      	ldr	r1, [pc, #356]	; (8001388 <HAL_RCC_OscConfig+0x678>)
 8001222:	400a      	ands	r2, r1
 8001224:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d015      	beq.n	800125a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb3b 	bl	80008a8 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001236:	e009      	b.n	800124c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001238:	f7ff fb36 	bl	80008a8 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_RCC_OscConfig+0x67c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e11a      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800124c:	4b4b      	ldr	r3, [pc, #300]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 800124e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4013      	ands	r3, r2
 8001256:	d0ef      	beq.n	8001238 <HAL_RCC_OscConfig+0x528>
 8001258:	e014      	b.n	8001284 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb25 	bl	80008a8 <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001262:	e009      	b.n	8001278 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f7ff fb20 	bl	80008a8 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	4a47      	ldr	r2, [pc, #284]	; (800138c <HAL_RCC_OscConfig+0x67c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e104      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001278:	4b40      	ldr	r3, [pc, #256]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 800127a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4013      	ands	r3, r2
 8001282:	d1ef      	bne.n	8001264 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001284:	2327      	movs	r3, #39	; 0x27
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d105      	bne.n	800129a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001294:	493e      	ldr	r1, [pc, #248]	; (8001390 <HAL_RCC_OscConfig+0x680>)
 8001296:	400a      	ands	r2, r1
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2220      	movs	r2, #32
 80012a0:	4013      	ands	r3, r2
 80012a2:	d049      	beq.n	8001338 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d026      	beq.n	80012fa <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012ac:	4b33      	ldr	r3, [pc, #204]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	4b32      	ldr	r3, [pc, #200]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80012ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80012be:	2101      	movs	r1, #1
 80012c0:	430a      	orrs	r2, r1
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_RCC_OscConfig+0x684>)
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_RCC_OscConfig+0x684>)
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	0189      	lsls	r1, r1, #6
 80012ce:	430a      	orrs	r2, r1
 80012d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fae9 	bl	80008a8 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012dc:	f7ff fae4 	bl	80008a8 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e0c9      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2202      	movs	r2, #2
 80012f4:	4013      	ands	r3, r2
 80012f6:	d0f1      	beq.n	80012dc <HAL_RCC_OscConfig+0x5cc>
 80012f8:	e01e      	b.n	8001338 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001300:	2101      	movs	r1, #1
 8001302:	438a      	bics	r2, r1
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_RCC_OscConfig+0x684>)
 8001308:	6a1a      	ldr	r2, [r3, #32]
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_RCC_OscConfig+0x684>)
 800130c:	4922      	ldr	r1, [pc, #136]	; (8001398 <HAL_RCC_OscConfig+0x688>)
 800130e:	400a      	ands	r2, r1
 8001310:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fac9 	bl	80008a8 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800131c:	f7ff fac4 	bl	80008a8 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e0a9      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d1f1      	bne.n	800131c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	2b00      	cmp	r3, #0
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x632>
 8001340:	e09e      	b.n	8001480 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0x63a>
 8001348:	e077      	b.n	800143a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	2b02      	cmp	r3, #2
 8001350:	d158      	bne.n	8001404 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_RCC_OscConfig+0x66c>)
 8001358:	4910      	ldr	r1, [pc, #64]	; (800139c <HAL_RCC_OscConfig+0x68c>)
 800135a:	400a      	ands	r2, r1
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff faa3 	bl	80008a8 <HAL_GetTick>
 8001362:	0003      	movs	r3, r0
 8001364:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001366:	e01b      	b.n	80013a0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff fa9e 	bl	80008a8 <HAL_GetTick>
 800136c:	0002      	movs	r2, r0
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d914      	bls.n	80013a0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e083      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	40021000 	.word	0x40021000
 8001380:	fffffeff 	.word	0xfffffeff
 8001384:	40007000 	.word	0x40007000
 8001388:	fffffbff 	.word	0xfffffbff
 800138c:	00001388 	.word	0x00001388
 8001390:	efffffff 	.word	0xefffffff
 8001394:	40010000 	.word	0x40010000
 8001398:	ffffdfff 	.word	0xffffdfff
 800139c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013a0:	4b3a      	ldr	r3, [pc, #232]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	049b      	lsls	r3, r3, #18
 80013a8:	4013      	ands	r3, r2
 80013aa:	d1dd      	bne.n	8001368 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ac:	4b37      	ldr	r3, [pc, #220]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4a37      	ldr	r2, [pc, #220]	; (8001490 <HAL_RCC_OscConfig+0x780>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	0019      	movs	r1, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c4:	431a      	orrs	r2, r3
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 80013c8:	430a      	orrs	r2, r1
 80013ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	0449      	lsls	r1, r1, #17
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fa65 	bl	80008a8 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fa60 	bl	80008a8 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e045      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	049b      	lsls	r3, r3, #18
 80013fe:	4013      	ands	r3, r2
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x6d4>
 8001402:	e03d      	b.n	8001480 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 800140a:	4922      	ldr	r1, [pc, #136]	; (8001494 <HAL_RCC_OscConfig+0x784>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fa4a 	bl	80008a8 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fa45 	bl	80008a8 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e02a      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	049b      	lsls	r3, r3, #18
 8001434:	4013      	ands	r3, r2
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x70a>
 8001438:	e022      	b.n	8001480 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e01d      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_RCC_OscConfig+0x77c>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	401a      	ands	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	429a      	cmp	r2, r3
 800145a:	d10f      	bne.n	800147c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	23f0      	movs	r3, #240	; 0xf0
 8001460:	039b      	lsls	r3, r3, #14
 8001462:	401a      	ands	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001468:	429a      	cmp	r2, r3
 800146a:	d107      	bne.n	800147c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	23c0      	movs	r3, #192	; 0xc0
 8001470:	041b      	lsls	r3, r3, #16
 8001472:	401a      	ands	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b00a      	add	sp, #40	; 0x28
 8001488:	bdb0      	pop	{r4, r5, r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	40021000 	.word	0x40021000
 8001490:	ff02ffff 	.word	0xff02ffff
 8001494:	feffffff 	.word	0xfeffffff

08001498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e128      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ac:	4b96      	ldr	r3, [pc, #600]	; (8001708 <HAL_RCC_ClockConfig+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d91e      	bls.n	80014f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b93      	ldr	r3, [pc, #588]	; (8001708 <HAL_RCC_ClockConfig+0x270>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2201      	movs	r2, #1
 80014c0:	4393      	bics	r3, r2
 80014c2:	0019      	movs	r1, r3
 80014c4:	4b90      	ldr	r3, [pc, #576]	; (8001708 <HAL_RCC_ClockConfig+0x270>)
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014cc:	f7ff f9ec 	bl	80008a8 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d4:	e009      	b.n	80014ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d6:	f7ff f9e7 	bl	80008a8 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4a8a      	ldr	r2, [pc, #552]	; (800170c <HAL_RCC_ClockConfig+0x274>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e109      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b87      	ldr	r3, [pc, #540]	; (8001708 <HAL_RCC_ClockConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2201      	movs	r2, #1
 80014f0:	4013      	ands	r3, r2
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2202      	movs	r2, #2
 80014fe:	4013      	ands	r3, r2
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001502:	4b83      	ldr	r3, [pc, #524]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	22f0      	movs	r2, #240	; 0xf0
 8001508:	4393      	bics	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 8001512:	430a      	orrs	r2, r1
 8001514:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2201      	movs	r2, #1
 800151c:	4013      	ands	r3, r2
 800151e:	d100      	bne.n	8001522 <HAL_RCC_ClockConfig+0x8a>
 8001520:	e089      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800152a:	4b79      	ldr	r3, [pc, #484]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	029b      	lsls	r3, r3, #10
 8001532:	4013      	ands	r3, r2
 8001534:	d120      	bne.n	8001578 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0e1      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001542:	4b73      	ldr	r3, [pc, #460]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	049b      	lsls	r3, r3, #18
 800154a:	4013      	ands	r3, r2
 800154c:	d114      	bne.n	8001578 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0d5      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d106      	bne.n	8001568 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155a:	4b6d      	ldr	r3, [pc, #436]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2204      	movs	r2, #4
 8001560:	4013      	ands	r3, r2
 8001562:	d109      	bne.n	8001578 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0ca      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001568:	4b69      	ldr	r3, [pc, #420]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0c2      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001578:	4b65      	ldr	r3, [pc, #404]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2203      	movs	r2, #3
 800157e:	4393      	bics	r3, r2
 8001580:	0019      	movs	r1, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4b62      	ldr	r3, [pc, #392]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 8001588:	430a      	orrs	r2, r1
 800158a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800158c:	f7ff f98c 	bl	80008a8 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d111      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800159c:	e009      	b.n	80015b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159e:	f7ff f983 	bl	80008a8 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	4a58      	ldr	r2, [pc, #352]	; (800170c <HAL_RCC_ClockConfig+0x274>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0a5      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b2:	4b57      	ldr	r3, [pc, #348]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	220c      	movs	r2, #12
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d1ef      	bne.n	800159e <HAL_RCC_ClockConfig+0x106>
 80015be:	e03a      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d111      	bne.n	80015ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c8:	e009      	b.n	80015de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ca:	f7ff f96d 	bl	80008a8 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	4a4d      	ldr	r2, [pc, #308]	; (800170c <HAL_RCC_ClockConfig+0x274>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e08f      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015de:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	220c      	movs	r2, #12
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d1ef      	bne.n	80015ca <HAL_RCC_ClockConfig+0x132>
 80015ea:	e024      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d11b      	bne.n	800162c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015f4:	e009      	b.n	800160a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f6:	f7ff f957 	bl	80008a8 <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	4a42      	ldr	r2, [pc, #264]	; (800170c <HAL_RCC_ClockConfig+0x274>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e079      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	220c      	movs	r2, #12
 8001610:	4013      	ands	r3, r2
 8001612:	2b04      	cmp	r3, #4
 8001614:	d1ef      	bne.n	80015f6 <HAL_RCC_ClockConfig+0x15e>
 8001616:	e00e      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001618:	f7ff f946 	bl	80008a8 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	4a3a      	ldr	r2, [pc, #232]	; (800170c <HAL_RCC_ClockConfig+0x274>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e068      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	220c      	movs	r2, #12
 8001632:	4013      	ands	r3, r2
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <HAL_RCC_ClockConfig+0x270>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4013      	ands	r3, r2
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d21e      	bcs.n	8001682 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_RCC_ClockConfig+0x270>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4393      	bics	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_RCC_ClockConfig+0x270>)
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001656:	f7ff f927 	bl	80008a8 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	e009      	b.n	8001674 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff f922 	bl	80008a8 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_RCC_ClockConfig+0x274>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e044      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_RCC_ClockConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	4013      	ands	r3, r2
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d1ee      	bne.n	8001660 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2204      	movs	r2, #4
 8001688:	4013      	ands	r3, r2
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <HAL_RCC_ClockConfig+0x27c>)
 8001692:	4013      	ands	r3, r2
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 800169c:	430a      	orrs	r2, r1
 800169e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2208      	movs	r2, #8
 80016a6:	4013      	ands	r3, r2
 80016a8:	d00a      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_RCC_ClockConfig+0x280>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	00da      	lsls	r2, r3, #3
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 80016bc:	430a      	orrs	r2, r1
 80016be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c0:	f000 f832 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80016c4:	0001      	movs	r1, r0
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_ClockConfig+0x278>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	220f      	movs	r2, #15
 80016ce:	4013      	ands	r3, r2
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_RCC_ClockConfig+0x284>)
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	000a      	movs	r2, r1
 80016d6:	40da      	lsrs	r2, r3
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_RCC_ClockConfig+0x288>)
 80016da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_RCC_ClockConfig+0x28c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	250b      	movs	r5, #11
 80016e2:	197c      	adds	r4, r7, r5
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff f899 	bl	800081c <HAL_InitTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80016ee:	197b      	adds	r3, r7, r5
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80016f6:	197b      	adds	r3, r7, r5
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	e000      	b.n	80016fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bdb0      	pop	{r4, r5, r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	40022000 	.word	0x40022000
 800170c:	00001388 	.word	0x00001388
 8001710:	40021000 	.word	0x40021000
 8001714:	fffff8ff 	.word	0xfffff8ff
 8001718:	ffffc7ff 	.word	0xffffc7ff
 800171c:	0800297c 	.word	0x0800297c
 8001720:	20000014 	.word	0x20000014
 8001724:	20000018 	.word	0x20000018

08001728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_GetSysClockFreq+0x138>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001736:	230c      	movs	r3, #12
 8001738:	4013      	ands	r3, r2
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d014      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x40>
 800173e:	d900      	bls.n	8001742 <HAL_RCC_GetSysClockFreq+0x1a>
 8001740:	e07b      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x112>
 8001742:	2b04      	cmp	r3, #4
 8001744:	d002      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x24>
 8001746:	2b08      	cmp	r3, #8
 8001748:	d00b      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0x3a>
 800174a:	e076      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800174c:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_RCC_GetSysClockFreq+0x138>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2210      	movs	r2, #16
 8001752:	4013      	ands	r3, r2
 8001754:	d002      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800175a:	e07c      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <HAL_RCC_GetSysClockFreq+0x140>)
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001760:	e079      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <HAL_RCC_GetSysClockFreq+0x144>)
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001766:	e076      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176a:	0c9a      	lsrs	r2, r3, #18
 800176c:	230f      	movs	r3, #15
 800176e:	401a      	ands	r2, r3
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_RCC_GetSysClockFreq+0x148>)
 8001772:	5c9b      	ldrb	r3, [r3, r2]
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	0d9a      	lsrs	r2, r3, #22
 800177a:	2303      	movs	r3, #3
 800177c:	4013      	ands	r3, r2
 800177e:	3301      	adds	r3, #1
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_RCC_GetSysClockFreq+0x138>)
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	025b      	lsls	r3, r3, #9
 800178a:	4013      	ands	r3, r2
 800178c:	d01a      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	4a35      	ldr	r2, [pc, #212]	; (800186c <HAL_RCC_GetSysClockFreq+0x144>)
 8001798:	2300      	movs	r3, #0
 800179a:	69b8      	ldr	r0, [r7, #24]
 800179c:	69f9      	ldr	r1, [r7, #28]
 800179e:	f7fe fd5f 	bl	8000260 <__aeabi_lmul>
 80017a2:	0002      	movs	r2, r0
 80017a4:	000b      	movs	r3, r1
 80017a6:	0010      	movs	r0, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f7fe fd33 	bl	8000220 <__aeabi_uldivmod>
 80017ba:	0002      	movs	r2, r0
 80017bc:	000b      	movs	r3, r1
 80017be:	0013      	movs	r3, r2
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
 80017c2:	e037      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_RCC_GetSysClockFreq+0x138>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2210      	movs	r2, #16
 80017ca:	4013      	ands	r3, r2
 80017cc:	d01a      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80017ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <HAL_RCC_GetSysClockFreq+0x13c>)
 80017d8:	2300      	movs	r3, #0
 80017da:	68b8      	ldr	r0, [r7, #8]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	f7fe fd3f 	bl	8000260 <__aeabi_lmul>
 80017e2:	0002      	movs	r2, r0
 80017e4:	000b      	movs	r3, r1
 80017e6:	0010      	movs	r0, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f7fe fd13 	bl	8000220 <__aeabi_uldivmod>
 80017fa:	0002      	movs	r2, r0
 80017fc:	000b      	movs	r3, r1
 80017fe:	0013      	movs	r3, r2
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
 8001802:	e017      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001806:	0018      	movs	r0, r3
 8001808:	2300      	movs	r3, #0
 800180a:	0019      	movs	r1, r3
 800180c:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_RCC_GetSysClockFreq+0x140>)
 800180e:	2300      	movs	r3, #0
 8001810:	f7fe fd26 	bl	8000260 <__aeabi_lmul>
 8001814:	0002      	movs	r2, r0
 8001816:	000b      	movs	r3, r1
 8001818:	0010      	movs	r0, r2
 800181a:	0019      	movs	r1, r3
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	001c      	movs	r4, r3
 8001820:	2300      	movs	r3, #0
 8001822:	001d      	movs	r5, r3
 8001824:	0022      	movs	r2, r4
 8001826:	002b      	movs	r3, r5
 8001828:	f7fe fcfa 	bl	8000220 <__aeabi_uldivmod>
 800182c:	0002      	movs	r2, r0
 800182e:	000b      	movs	r3, r1
 8001830:	0013      	movs	r3, r2
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001838:	e00d      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_GetSysClockFreq+0x138>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0b5b      	lsrs	r3, r3, #13
 8001840:	2207      	movs	r2, #7
 8001842:	4013      	ands	r3, r2
 8001844:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	3301      	adds	r3, #1
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	0212      	lsls	r2, r2, #8
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001854:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b00e      	add	sp, #56	; 0x38
 800185e:	bdb0      	pop	{r4, r5, r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	003d0900 	.word	0x003d0900
 8001868:	00f42400 	.word	0x00f42400
 800186c:	007a1200 	.word	0x007a1200
 8001870:	08002994 	.word	0x08002994

08001874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001878:	4b02      	ldr	r3, [pc, #8]	; (8001884 <HAL_RCC_GetHCLKFreq+0x10>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	20000014 	.word	0x20000014

08001888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800188c:	f7ff fff2 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 8001890:	0001      	movs	r1, r0
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	2207      	movs	r2, #7
 800189a:	4013      	ands	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	40d9      	lsrs	r1, r3
 80018a2:	000b      	movs	r3, r1
}
 80018a4:	0018      	movs	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	0800298c 	.word	0x0800298c

080018b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018b8:	f7ff ffdc 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 80018bc:	0001      	movs	r1, r0
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	0adb      	lsrs	r3, r3, #11
 80018c4:	2207      	movs	r2, #7
 80018c6:	4013      	ands	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	40d9      	lsrs	r1, r3
 80018ce:	000b      	movs	r3, r1
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	40021000 	.word	0x40021000
 80018dc:	0800298c 	.word	0x0800298c

080018e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80018e8:	2317      	movs	r3, #23
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2220      	movs	r2, #32
 80018f6:	4013      	ands	r3, r2
 80018f8:	d106      	bne.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4013      	ands	r3, r2
 8001904:	d100      	bne.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001906:	e104      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001908:	4bb1      	ldr	r3, [pc, #708]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800190a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	055b      	lsls	r3, r3, #21
 8001910:	4013      	ands	r3, r2
 8001912:	d10a      	bne.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	4bae      	ldr	r3, [pc, #696]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001918:	4bad      	ldr	r3, [pc, #692]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	0549      	lsls	r1, r1, #21
 800191e:	430a      	orrs	r2, r1
 8001920:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001922:	2317      	movs	r3, #23
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4baa      	ldr	r3, [pc, #680]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4013      	ands	r3, r2
 8001934:	d11a      	bne.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001936:	4ba7      	ldr	r3, [pc, #668]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4ba6      	ldr	r3, [pc, #664]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	0049      	lsls	r1, r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001944:	f7fe ffb0 	bl	80008a8 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7fe ffab 	bl	80008a8 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	; 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e133      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b9c      	ldr	r3, [pc, #624]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4013      	ands	r3, r2
 800196a:	d0f0      	beq.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800196c:	4b98      	ldr	r3, [pc, #608]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	039b      	lsls	r3, r3, #14
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	23c0      	movs	r3, #192	; 0xc0
 800197e:	039b      	lsls	r3, r3, #14
 8001980:	4013      	ands	r3, r2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	23c0      	movs	r3, #192	; 0xc0
 800198e:	039b      	lsls	r3, r3, #14
 8001990:	4013      	ands	r3, r2
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	429a      	cmp	r2, r3
 8001996:	d013      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	029b      	lsls	r3, r3, #10
 80019a0:	401a      	ands	r2, r3
 80019a2:	23c0      	movs	r3, #192	; 0xc0
 80019a4:	029b      	lsls	r3, r3, #10
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d10a      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	029b      	lsls	r3, r3, #10
 80019b2:	401a      	ands	r2, r3
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	029b      	lsls	r3, r3, #10
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d101      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e103      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80019c0:	4b83      	ldr	r3, [pc, #524]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80019c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c4:	23c0      	movs	r3, #192	; 0xc0
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d049      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	23c0      	movs	r3, #192	; 0xc0
 80019d8:	029b      	lsls	r3, r3, #10
 80019da:	4013      	ands	r3, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d004      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2220      	movs	r2, #32
 80019e8:	4013      	ands	r3, r2
 80019ea:	d10d      	bne.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	23c0      	movs	r3, #192	; 0xc0
 80019f2:	029b      	lsls	r3, r3, #10
 80019f4:	4013      	ands	r3, r2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d034      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4013      	ands	r3, r2
 8001a06:	d02e      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001a08:	4b71      	ldr	r3, [pc, #452]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0c:	4a72      	ldr	r2, [pc, #456]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a12:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a16:	4b6e      	ldr	r3, [pc, #440]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0309      	lsls	r1, r1, #12
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a20:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a24:	4b6a      	ldr	r3, [pc, #424]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a26:	496d      	ldr	r1, [pc, #436]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d014      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7fe ff34 	bl	80008a8 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a44:	e009      	b.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7fe ff2f 	bl	80008a8 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e0b6      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d0ef      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d01f      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	23c0      	movs	r3, #192	; 0xc0
 8001a78:	029b      	lsls	r3, r3, #10
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	23c0      	movs	r3, #192	; 0xc0
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d10c      	bne.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001a84:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a56      	ldr	r2, [pc, #344]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	23c0      	movs	r3, #192	; 0xc0
 8001a94:	039b      	lsls	r3, r3, #14
 8001a96:	401a      	ands	r2, r3
 8001a98:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aa0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	23c0      	movs	r3, #192	; 0xc0
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	401a      	ands	r2, r3
 8001aac:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d01f      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	23c0      	movs	r3, #192	; 0xc0
 8001ac2:	029b      	lsls	r3, r3, #10
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	029b      	lsls	r3, r3, #10
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001ace:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a44      	ldr	r2, [pc, #272]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	23c0      	movs	r3, #192	; 0xc0
 8001ade:	039b      	lsls	r3, r3, #14
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aea:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	23c0      	movs	r3, #192	; 0xc0
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	401a      	ands	r2, r3
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001afc:	2317      	movs	r3, #23
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d105      	bne.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b0c:	4936      	ldr	r1, [pc, #216]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	2203      	movs	r2, #3
 8001b22:	4393      	bics	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d009      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	220c      	movs	r2, #12
 8001b40:	4393      	bics	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2204      	movs	r2, #4
 8001b54:	4013      	ands	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2208      	movs	r2, #8
 8001b72:	4013      	ands	r3, r2
 8001b74:	d009      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b86:	430a      	orrs	r2, r1
 8001b88:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	4013      	ands	r3, r2
 8001b92:	d009      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1a      	ldr	r2, [r3, #32]
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b006      	add	sp, #24
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	fffcffff 	.word	0xfffcffff
 8001bdc:	fff7ffff 	.word	0xfff7ffff
 8001be0:	00001388 	.word	0x00001388
 8001be4:	ffcfffff 	.word	0xffcfffff
 8001be8:	efffffff 	.word	0xefffffff
 8001bec:	fffff3ff 	.word	0xfffff3ff
 8001bf0:	ffffcfff 	.word	0xffffcfff
 8001bf4:	fbffffff 	.word	0xfbffffff
 8001bf8:	fff3ffff 	.word	0xfff3ffff

08001bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e044      	b.n	8001c98 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2278      	movs	r2, #120	; 0x78
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7fe fd51 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2224      	movs	r2, #36	; 0x24
 8001c2a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2101      	movs	r1, #1
 8001c38:	438a      	bics	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f000 f9b6 	bl	8001fb0 <UART_SetConfig>
 8001c44:	0003      	movs	r3, r0
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e024      	b.n	8001c98 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 fc2d 	bl	80024b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	490d      	ldr	r1, [pc, #52]	; (8001ca0 <HAL_UART_Init+0xa4>)
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	212a      	movs	r1, #42	; 0x2a
 8001c7a:	438a      	bics	r2, r1
 8001c7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 fcc5 	bl	8002620 <UART_CheckIdleState>
 8001c96:	0003      	movs	r3, r0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	ffffb7ff 	.word	0xffffb7ff

08001ca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	1dbb      	adds	r3, r7, #6
 8001cb2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d000      	beq.n	8001cbe <HAL_UART_Transmit+0x1a>
 8001cbc:	e08c      	b.n	8001dd8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_UART_Transmit+0x28>
 8001cc4:	1dbb      	adds	r3, r7, #6
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e084      	b.n	8001dda <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	015b      	lsls	r3, r3, #5
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d109      	bne.n	8001cf0 <HAL_UART_Transmit+0x4c>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e074      	b.n	8001dda <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2284      	movs	r2, #132	; 0x84
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2221      	movs	r2, #33	; 0x21
 8001cfc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cfe:	f7fe fdd3 	bl	80008a8 <HAL_GetTick>
 8001d02:	0003      	movs	r3, r0
 8001d04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1dba      	adds	r2, r7, #6
 8001d0a:	2150      	movs	r1, #80	; 0x50
 8001d0c:	8812      	ldrh	r2, [r2, #0]
 8001d0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1dba      	adds	r2, r7, #6
 8001d14:	2152      	movs	r1, #82	; 0x52
 8001d16:	8812      	ldrh	r2, [r2, #0]
 8001d18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	015b      	lsls	r3, r3, #5
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d108      	bne.n	8001d38 <HAL_UART_Transmit+0x94>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d104      	bne.n	8001d38 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	e003      	b.n	8001d40 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d40:	e02f      	b.n	8001da2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	0013      	movs	r3, r2
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	f000 fd0e 	bl	8002770 <UART_WaitOnFlagUntilTimeout>
 8001d54:	1e03      	subs	r3, r0, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e03b      	b.n	8001dda <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10b      	bne.n	8001d80 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	001a      	movs	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	05d2      	lsls	r2, r2, #23
 8001d74:	0dd2      	lsrs	r2, r2, #23
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	e007      	b.n	8001d90 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2252      	movs	r2, #82	; 0x52
 8001d94:	5a9b      	ldrh	r3, [r3, r2]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b299      	uxth	r1, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2252      	movs	r2, #82	; 0x52
 8001da0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2252      	movs	r2, #82	; 0x52
 8001da6:	5a9b      	ldrh	r3, [r3, r2]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1c9      	bne.n	8001d42 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	0013      	movs	r3, r2
 8001db8:	2200      	movs	r2, #0
 8001dba:	2140      	movs	r1, #64	; 0x40
 8001dbc:	f000 fcd8 	bl	8002770 <UART_WaitOnFlagUntilTimeout>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e005      	b.n	8001dda <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
  }
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b008      	add	sp, #32
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	1dbb      	adds	r3, r7, #6
 8001df2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	589b      	ldr	r3, [r3, r2]
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d000      	beq.n	8001e00 <HAL_UART_Receive+0x1c>
 8001dfe:	e0d0      	b.n	8001fa2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_UART_Receive+0x2a>
 8001e06:	1dbb      	adds	r3, r7, #6
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0c8      	b.n	8001fa4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	015b      	lsls	r3, r3, #5
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d109      	bne.n	8001e32 <HAL_UART_Receive+0x4e>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d105      	bne.n	8001e32 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d001      	beq.n	8001e32 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0b8      	b.n	8001fa4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2284      	movs	r2, #132	; 0x84
 8001e36:	2100      	movs	r1, #0
 8001e38:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	2122      	movs	r1, #34	; 0x22
 8001e40:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e48:	f7fe fd2e 	bl	80008a8 <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1dba      	adds	r2, r7, #6
 8001e54:	2158      	movs	r1, #88	; 0x58
 8001e56:	8812      	ldrh	r2, [r2, #0]
 8001e58:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1dba      	adds	r2, r7, #6
 8001e5e:	215a      	movs	r1, #90	; 0x5a
 8001e60:	8812      	ldrh	r2, [r2, #0]
 8001e62:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	015b      	lsls	r3, r3, #5
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10d      	bne.n	8001e8c <HAL_UART_Receive+0xa8>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d104      	bne.n	8001e82 <HAL_UART_Receive+0x9e>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	225c      	movs	r2, #92	; 0x5c
 8001e7c:	494b      	ldr	r1, [pc, #300]	; (8001fac <HAL_UART_Receive+0x1c8>)
 8001e7e:	5299      	strh	r1, [r3, r2]
 8001e80:	e02e      	b.n	8001ee0 <HAL_UART_Receive+0xfc>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	225c      	movs	r2, #92	; 0x5c
 8001e86:	21ff      	movs	r1, #255	; 0xff
 8001e88:	5299      	strh	r1, [r3, r2]
 8001e8a:	e029      	b.n	8001ee0 <HAL_UART_Receive+0xfc>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10d      	bne.n	8001eb0 <HAL_UART_Receive+0xcc>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d104      	bne.n	8001ea6 <HAL_UART_Receive+0xc2>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	225c      	movs	r2, #92	; 0x5c
 8001ea0:	21ff      	movs	r1, #255	; 0xff
 8001ea2:	5299      	strh	r1, [r3, r2]
 8001ea4:	e01c      	b.n	8001ee0 <HAL_UART_Receive+0xfc>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	225c      	movs	r2, #92	; 0x5c
 8001eaa:	217f      	movs	r1, #127	; 0x7f
 8001eac:	5299      	strh	r1, [r3, r2]
 8001eae:	e017      	b.n	8001ee0 <HAL_UART_Receive+0xfc>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	055b      	lsls	r3, r3, #21
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d10d      	bne.n	8001ed8 <HAL_UART_Receive+0xf4>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <HAL_UART_Receive+0xea>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	225c      	movs	r2, #92	; 0x5c
 8001ec8:	217f      	movs	r1, #127	; 0x7f
 8001eca:	5299      	strh	r1, [r3, r2]
 8001ecc:	e008      	b.n	8001ee0 <HAL_UART_Receive+0xfc>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	225c      	movs	r2, #92	; 0x5c
 8001ed2:	213f      	movs	r1, #63	; 0x3f
 8001ed4:	5299      	strh	r1, [r3, r2]
 8001ed6:	e003      	b.n	8001ee0 <HAL_UART_Receive+0xfc>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	225c      	movs	r2, #92	; 0x5c
 8001edc:	2100      	movs	r1, #0
 8001ede:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001ee0:	2312      	movs	r3, #18
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	215c      	movs	r1, #92	; 0x5c
 8001ee8:	5a52      	ldrh	r2, [r2, r1]
 8001eea:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	015b      	lsls	r3, r3, #5
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d108      	bne.n	8001f0a <HAL_UART_Receive+0x126>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	e003      	b.n	8001f12 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001f12:	e03a      	b.n	8001f8a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2120      	movs	r1, #32
 8001f22:	f000 fc25 	bl	8002770 <UART_WaitOnFlagUntilTimeout>
 8001f26:	1e03      	subs	r3, r0, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	2120      	movs	r1, #32
 8001f30:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e036      	b.n	8001fa4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10e      	bne.n	8001f5a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2212      	movs	r2, #18
 8001f46:	18ba      	adds	r2, r7, r2
 8001f48:	8812      	ldrh	r2, [r2, #0]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	3302      	adds	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	e00e      	b.n	8001f78 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2212      	movs	r2, #18
 8001f64:	18ba      	adds	r2, r7, r2
 8001f66:	8812      	ldrh	r2, [r2, #0]
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	225a      	movs	r2, #90	; 0x5a
 8001f7c:	5a9b      	ldrh	r3, [r3, r2]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b299      	uxth	r1, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	225a      	movs	r2, #90	; 0x5a
 8001f88:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	225a      	movs	r2, #90	; 0x5a
 8001f8e:	5a9b      	ldrh	r3, [r3, r2]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1be      	bne.n	8001f14 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	2120      	movs	r1, #32
 8001f9c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
  }
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b008      	add	sp, #32
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	000001ff 	.word	0x000001ff

08001fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b08e      	sub	sp, #56	; 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fb8:	231a      	movs	r3, #26
 8001fba:	2218      	movs	r2, #24
 8001fbc:	189b      	adds	r3, r3, r2
 8001fbe:	19db      	adds	r3, r3, r7
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4ac6      	ldr	r2, [pc, #792]	; (80022fc <UART_SetConfig+0x34c>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4ac1      	ldr	r2, [pc, #772]	; (8002300 <UART_SetConfig+0x350>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4abb      	ldr	r2, [pc, #748]	; (8002304 <UART_SetConfig+0x354>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d004      	beq.n	8002024 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002020:	4313      	orrs	r3, r2
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4ab7      	ldr	r2, [pc, #732]	; (8002308 <UART_SetConfig+0x358>)
 800202c:	4013      	ands	r3, r2
 800202e:	0019      	movs	r1, r3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002036:	430a      	orrs	r2, r1
 8002038:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4ab3      	ldr	r2, [pc, #716]	; (800230c <UART_SetConfig+0x35c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d131      	bne.n	80020a8 <UART_SetConfig+0xf8>
 8002044:	4bb2      	ldr	r3, [pc, #712]	; (8002310 <UART_SetConfig+0x360>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	2203      	movs	r2, #3
 800204a:	4013      	ands	r3, r2
 800204c:	2b03      	cmp	r3, #3
 800204e:	d01d      	beq.n	800208c <UART_SetConfig+0xdc>
 8002050:	d823      	bhi.n	800209a <UART_SetConfig+0xea>
 8002052:	2b02      	cmp	r3, #2
 8002054:	d00c      	beq.n	8002070 <UART_SetConfig+0xc0>
 8002056:	d820      	bhi.n	800209a <UART_SetConfig+0xea>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <UART_SetConfig+0xb2>
 800205c:	2b01      	cmp	r3, #1
 800205e:	d00e      	beq.n	800207e <UART_SetConfig+0xce>
 8002060:	e01b      	b.n	800209a <UART_SetConfig+0xea>
 8002062:	231b      	movs	r3, #27
 8002064:	2218      	movs	r2, #24
 8002066:	189b      	adds	r3, r3, r2
 8002068:	19db      	adds	r3, r3, r7
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e09c      	b.n	80021aa <UART_SetConfig+0x1fa>
 8002070:	231b      	movs	r3, #27
 8002072:	2218      	movs	r2, #24
 8002074:	189b      	adds	r3, r3, r2
 8002076:	19db      	adds	r3, r3, r7
 8002078:	2202      	movs	r2, #2
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e095      	b.n	80021aa <UART_SetConfig+0x1fa>
 800207e:	231b      	movs	r3, #27
 8002080:	2218      	movs	r2, #24
 8002082:	189b      	adds	r3, r3, r2
 8002084:	19db      	adds	r3, r3, r7
 8002086:	2204      	movs	r2, #4
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e08e      	b.n	80021aa <UART_SetConfig+0x1fa>
 800208c:	231b      	movs	r3, #27
 800208e:	2218      	movs	r2, #24
 8002090:	189b      	adds	r3, r3, r2
 8002092:	19db      	adds	r3, r3, r7
 8002094:	2208      	movs	r2, #8
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e087      	b.n	80021aa <UART_SetConfig+0x1fa>
 800209a:	231b      	movs	r3, #27
 800209c:	2218      	movs	r2, #24
 800209e:	189b      	adds	r3, r3, r2
 80020a0:	19db      	adds	r3, r3, r7
 80020a2:	2210      	movs	r2, #16
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	e080      	b.n	80021aa <UART_SetConfig+0x1fa>
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a99      	ldr	r2, [pc, #612]	; (8002314 <UART_SetConfig+0x364>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d131      	bne.n	8002116 <UART_SetConfig+0x166>
 80020b2:	4b97      	ldr	r3, [pc, #604]	; (8002310 <UART_SetConfig+0x360>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	220c      	movs	r2, #12
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d01d      	beq.n	80020fa <UART_SetConfig+0x14a>
 80020be:	d823      	bhi.n	8002108 <UART_SetConfig+0x158>
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d00c      	beq.n	80020de <UART_SetConfig+0x12e>
 80020c4:	d820      	bhi.n	8002108 <UART_SetConfig+0x158>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <UART_SetConfig+0x120>
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d00e      	beq.n	80020ec <UART_SetConfig+0x13c>
 80020ce:	e01b      	b.n	8002108 <UART_SetConfig+0x158>
 80020d0:	231b      	movs	r3, #27
 80020d2:	2218      	movs	r2, #24
 80020d4:	189b      	adds	r3, r3, r2
 80020d6:	19db      	adds	r3, r3, r7
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e065      	b.n	80021aa <UART_SetConfig+0x1fa>
 80020de:	231b      	movs	r3, #27
 80020e0:	2218      	movs	r2, #24
 80020e2:	189b      	adds	r3, r3, r2
 80020e4:	19db      	adds	r3, r3, r7
 80020e6:	2202      	movs	r2, #2
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e05e      	b.n	80021aa <UART_SetConfig+0x1fa>
 80020ec:	231b      	movs	r3, #27
 80020ee:	2218      	movs	r2, #24
 80020f0:	189b      	adds	r3, r3, r2
 80020f2:	19db      	adds	r3, r3, r7
 80020f4:	2204      	movs	r2, #4
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e057      	b.n	80021aa <UART_SetConfig+0x1fa>
 80020fa:	231b      	movs	r3, #27
 80020fc:	2218      	movs	r2, #24
 80020fe:	189b      	adds	r3, r3, r2
 8002100:	19db      	adds	r3, r3, r7
 8002102:	2208      	movs	r2, #8
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e050      	b.n	80021aa <UART_SetConfig+0x1fa>
 8002108:	231b      	movs	r3, #27
 800210a:	2218      	movs	r2, #24
 800210c:	189b      	adds	r3, r3, r2
 800210e:	19db      	adds	r3, r3, r7
 8002110:	2210      	movs	r2, #16
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e049      	b.n	80021aa <UART_SetConfig+0x1fa>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7a      	ldr	r2, [pc, #488]	; (8002304 <UART_SetConfig+0x354>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d13e      	bne.n	800219e <UART_SetConfig+0x1ee>
 8002120:	4b7b      	ldr	r3, [pc, #492]	; (8002310 <UART_SetConfig+0x360>)
 8002122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002124:	23c0      	movs	r3, #192	; 0xc0
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4013      	ands	r3, r2
 800212a:	22c0      	movs	r2, #192	; 0xc0
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	4293      	cmp	r3, r2
 8002130:	d027      	beq.n	8002182 <UART_SetConfig+0x1d2>
 8002132:	22c0      	movs	r2, #192	; 0xc0
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	4293      	cmp	r3, r2
 8002138:	d82a      	bhi.n	8002190 <UART_SetConfig+0x1e0>
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	4293      	cmp	r3, r2
 8002140:	d011      	beq.n	8002166 <UART_SetConfig+0x1b6>
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	4293      	cmp	r3, r2
 8002148:	d822      	bhi.n	8002190 <UART_SetConfig+0x1e0>
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <UART_SetConfig+0x1a8>
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	00d2      	lsls	r2, r2, #3
 8002152:	4293      	cmp	r3, r2
 8002154:	d00e      	beq.n	8002174 <UART_SetConfig+0x1c4>
 8002156:	e01b      	b.n	8002190 <UART_SetConfig+0x1e0>
 8002158:	231b      	movs	r3, #27
 800215a:	2218      	movs	r2, #24
 800215c:	189b      	adds	r3, r3, r2
 800215e:	19db      	adds	r3, r3, r7
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e021      	b.n	80021aa <UART_SetConfig+0x1fa>
 8002166:	231b      	movs	r3, #27
 8002168:	2218      	movs	r2, #24
 800216a:	189b      	adds	r3, r3, r2
 800216c:	19db      	adds	r3, r3, r7
 800216e:	2202      	movs	r2, #2
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e01a      	b.n	80021aa <UART_SetConfig+0x1fa>
 8002174:	231b      	movs	r3, #27
 8002176:	2218      	movs	r2, #24
 8002178:	189b      	adds	r3, r3, r2
 800217a:	19db      	adds	r3, r3, r7
 800217c:	2204      	movs	r2, #4
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	e013      	b.n	80021aa <UART_SetConfig+0x1fa>
 8002182:	231b      	movs	r3, #27
 8002184:	2218      	movs	r2, #24
 8002186:	189b      	adds	r3, r3, r2
 8002188:	19db      	adds	r3, r3, r7
 800218a:	2208      	movs	r2, #8
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e00c      	b.n	80021aa <UART_SetConfig+0x1fa>
 8002190:	231b      	movs	r3, #27
 8002192:	2218      	movs	r2, #24
 8002194:	189b      	adds	r3, r3, r2
 8002196:	19db      	adds	r3, r3, r7
 8002198:	2210      	movs	r2, #16
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e005      	b.n	80021aa <UART_SetConfig+0x1fa>
 800219e:	231b      	movs	r3, #27
 80021a0:	2218      	movs	r2, #24
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	19db      	adds	r3, r3, r7
 80021a6:	2210      	movs	r2, #16
 80021a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a55      	ldr	r2, [pc, #340]	; (8002304 <UART_SetConfig+0x354>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d000      	beq.n	80021b6 <UART_SetConfig+0x206>
 80021b4:	e084      	b.n	80022c0 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80021b6:	231b      	movs	r3, #27
 80021b8:	2218      	movs	r2, #24
 80021ba:	189b      	adds	r3, r3, r2
 80021bc:	19db      	adds	r3, r3, r7
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d01d      	beq.n	8002200 <UART_SetConfig+0x250>
 80021c4:	dc20      	bgt.n	8002208 <UART_SetConfig+0x258>
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d015      	beq.n	80021f6 <UART_SetConfig+0x246>
 80021ca:	dc1d      	bgt.n	8002208 <UART_SetConfig+0x258>
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <UART_SetConfig+0x226>
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d005      	beq.n	80021e0 <UART_SetConfig+0x230>
 80021d4:	e018      	b.n	8002208 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021d6:	f7ff fb57 	bl	8001888 <HAL_RCC_GetPCLK1Freq>
 80021da:	0003      	movs	r3, r0
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021de:	e01c      	b.n	800221a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <UART_SetConfig+0x360>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2210      	movs	r2, #16
 80021e6:	4013      	ands	r3, r2
 80021e8:	d002      	beq.n	80021f0 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80021ea:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <UART_SetConfig+0x368>)
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80021ee:	e014      	b.n	800221a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80021f0:	4b4a      	ldr	r3, [pc, #296]	; (800231c <UART_SetConfig+0x36c>)
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021f4:	e011      	b.n	800221a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021f6:	f7ff fa97 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80021fa:	0003      	movs	r3, r0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021fe:	e00c      	b.n	800221a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002206:	e008      	b.n	800221a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800220c:	231a      	movs	r3, #26
 800220e:	2218      	movs	r2, #24
 8002210:	189b      	adds	r3, r3, r2
 8002212:	19db      	adds	r3, r3, r7
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
        break;
 8002218:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d100      	bne.n	8002222 <UART_SetConfig+0x272>
 8002220:	e132      	b.n	8002488 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	0013      	movs	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	189b      	adds	r3, r3, r2
 800222c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800222e:	429a      	cmp	r2, r3
 8002230:	d305      	bcc.n	800223e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223a:	429a      	cmp	r2, r3
 800223c:	d906      	bls.n	800224c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800223e:	231a      	movs	r3, #26
 8002240:	2218      	movs	r2, #24
 8002242:	189b      	adds	r3, r3, r2
 8002244:	19db      	adds	r3, r3, r7
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e11d      	b.n	8002488 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	6939      	ldr	r1, [r7, #16]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	000b      	movs	r3, r1
 800225a:	0e1b      	lsrs	r3, r3, #24
 800225c:	0010      	movs	r0, r2
 800225e:	0205      	lsls	r5, r0, #8
 8002260:	431d      	orrs	r5, r3
 8002262:	000b      	movs	r3, r1
 8002264:	021c      	lsls	r4, r3, #8
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	085b      	lsrs	r3, r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68b8      	ldr	r0, [r7, #8]
 8002274:	68f9      	ldr	r1, [r7, #12]
 8002276:	1900      	adds	r0, r0, r4
 8002278:	4169      	adcs	r1, r5
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f7fd ffca 	bl	8000220 <__aeabi_uldivmod>
 800228c:	0002      	movs	r2, r0
 800228e:	000b      	movs	r3, r1
 8002290:	0013      	movs	r3, r2
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002296:	23c0      	movs	r3, #192	; 0xc0
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	429a      	cmp	r2, r3
 800229c:	d309      	bcc.n	80022b2 <UART_SetConfig+0x302>
 800229e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	035b      	lsls	r3, r3, #13
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d204      	bcs.n	80022b2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	e0ea      	b.n	8002488 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80022b2:	231a      	movs	r3, #26
 80022b4:	2218      	movs	r2, #24
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	19db      	adds	r3, r3, r7
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e0e3      	b.n	8002488 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d000      	beq.n	80022ce <UART_SetConfig+0x31e>
 80022cc:	e085      	b.n	80023da <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80022ce:	231b      	movs	r3, #27
 80022d0:	2218      	movs	r2, #24
 80022d2:	189b      	adds	r3, r3, r2
 80022d4:	19db      	adds	r3, r3, r7
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d837      	bhi.n	800234c <UART_SetConfig+0x39c>
 80022dc:	009a      	lsls	r2, r3, #2
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <UART_SetConfig+0x370>)
 80022e0:	18d3      	adds	r3, r2, r3
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022e6:	f7ff facf 	bl	8001888 <HAL_RCC_GetPCLK1Freq>
 80022ea:	0003      	movs	r3, r0
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ee:	e036      	b.n	800235e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022f0:	f7ff fae0 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 80022f4:	0003      	movs	r3, r0
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022f8:	e031      	b.n	800235e <UART_SetConfig+0x3ae>
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	efff69f3 	.word	0xefff69f3
 8002300:	ffffcfff 	.word	0xffffcfff
 8002304:	40004800 	.word	0x40004800
 8002308:	fffff4ff 	.word	0xfffff4ff
 800230c:	40013800 	.word	0x40013800
 8002310:	40021000 	.word	0x40021000
 8002314:	40004400 	.word	0x40004400
 8002318:	003d0900 	.word	0x003d0900
 800231c:	00f42400 	.word	0x00f42400
 8002320:	080029a0 	.word	0x080029a0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002324:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <UART_SetConfig+0x4f8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2210      	movs	r2, #16
 800232a:	4013      	ands	r3, r2
 800232c:	d002      	beq.n	8002334 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800232e:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <UART_SetConfig+0x4fc>)
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002332:	e014      	b.n	800235e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002334:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <UART_SetConfig+0x500>)
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002338:	e011      	b.n	800235e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800233a:	f7ff f9f5 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 800233e:	0003      	movs	r3, r0
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002342:	e00c      	b.n	800235e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800234a:	e008      	b.n	800235e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002350:	231a      	movs	r3, #26
 8002352:	2218      	movs	r2, #24
 8002354:	189b      	adds	r3, r3, r2
 8002356:	19db      	adds	r3, r3, r7
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
        break;
 800235c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d100      	bne.n	8002366 <UART_SetConfig+0x3b6>
 8002364:	e090      	b.n	8002488 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	005a      	lsls	r2, r3, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	085b      	lsrs	r3, r3, #1
 8002370:	18d2      	adds	r2, r2, r3
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0019      	movs	r1, r3
 8002378:	0010      	movs	r0, r2
 800237a:	f7fd fec5 	bl	8000108 <__udivsi3>
 800237e:	0003      	movs	r3, r0
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	2b0f      	cmp	r3, #15
 8002386:	d921      	bls.n	80023cc <UART_SetConfig+0x41c>
 8002388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	025b      	lsls	r3, r3, #9
 800238e:	429a      	cmp	r2, r3
 8002390:	d21c      	bcs.n	80023cc <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	b29a      	uxth	r2, r3
 8002396:	200e      	movs	r0, #14
 8002398:	2418      	movs	r4, #24
 800239a:	1903      	adds	r3, r0, r4
 800239c:	19db      	adds	r3, r3, r7
 800239e:	210f      	movs	r1, #15
 80023a0:	438a      	bics	r2, r1
 80023a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2207      	movs	r2, #7
 80023ac:	4013      	ands	r3, r2
 80023ae:	b299      	uxth	r1, r3
 80023b0:	1903      	adds	r3, r0, r4
 80023b2:	19db      	adds	r3, r3, r7
 80023b4:	1902      	adds	r2, r0, r4
 80023b6:	19d2      	adds	r2, r2, r7
 80023b8:	8812      	ldrh	r2, [r2, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	1902      	adds	r2, r0, r4
 80023c4:	19d2      	adds	r2, r2, r7
 80023c6:	8812      	ldrh	r2, [r2, #0]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	e05d      	b.n	8002488 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80023cc:	231a      	movs	r3, #26
 80023ce:	2218      	movs	r2, #24
 80023d0:	189b      	adds	r3, r3, r2
 80023d2:	19db      	adds	r3, r3, r7
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e056      	b.n	8002488 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023da:	231b      	movs	r3, #27
 80023dc:	2218      	movs	r2, #24
 80023de:	189b      	adds	r3, r3, r2
 80023e0:	19db      	adds	r3, r3, r7
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d822      	bhi.n	800242e <UART_SetConfig+0x47e>
 80023e8:	009a      	lsls	r2, r3, #2
 80023ea:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <UART_SetConfig+0x504>)
 80023ec:	18d3      	adds	r3, r2, r3
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023f2:	f7ff fa49 	bl	8001888 <HAL_RCC_GetPCLK1Freq>
 80023f6:	0003      	movs	r3, r0
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023fa:	e021      	b.n	8002440 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023fc:	f7ff fa5a 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 8002400:	0003      	movs	r3, r0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002404:	e01c      	b.n	8002440 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <UART_SetConfig+0x4f8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2210      	movs	r2, #16
 800240c:	4013      	ands	r3, r2
 800240e:	d002      	beq.n	8002416 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <UART_SetConfig+0x4fc>)
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002414:	e014      	b.n	8002440 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <UART_SetConfig+0x500>)
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800241a:	e011      	b.n	8002440 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800241c:	f7ff f984 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 8002420:	0003      	movs	r3, r0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002424:	e00c      	b.n	8002440 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800242c:	e008      	b.n	8002440 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002432:	231a      	movs	r3, #26
 8002434:	2218      	movs	r2, #24
 8002436:	189b      	adds	r3, r3, r2
 8002438:	19db      	adds	r3, r3, r7
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
        break;
 800243e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	085a      	lsrs	r2, r3, #1
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	18d2      	adds	r2, r2, r3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0019      	movs	r1, r3
 8002456:	0010      	movs	r0, r2
 8002458:	f7fd fe56 	bl	8000108 <__udivsi3>
 800245c:	0003      	movs	r3, r0
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	2b0f      	cmp	r3, #15
 8002464:	d90a      	bls.n	800247c <UART_SetConfig+0x4cc>
 8002466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	025b      	lsls	r3, r3, #9
 800246c:	429a      	cmp	r2, r3
 800246e:	d205      	bcs.n	800247c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	b29a      	uxth	r2, r3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	e005      	b.n	8002488 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800247c:	231a      	movs	r3, #26
 800247e:	2218      	movs	r2, #24
 8002480:	189b      	adds	r3, r3, r2
 8002482:	19db      	adds	r3, r3, r7
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2200      	movs	r2, #0
 800248c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	2200      	movs	r2, #0
 8002492:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002494:	231a      	movs	r3, #26
 8002496:	2218      	movs	r2, #24
 8002498:	189b      	adds	r3, r3, r2
 800249a:	19db      	adds	r3, r3, r7
 800249c:	781b      	ldrb	r3, [r3, #0]
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b00e      	add	sp, #56	; 0x38
 80024a4:	bdb0      	pop	{r4, r5, r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	40021000 	.word	0x40021000
 80024ac:	003d0900 	.word	0x003d0900
 80024b0:	00f42400 	.word	0x00f42400
 80024b4:	080029c4 	.word	0x080029c4

080024b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	d00b      	beq.n	80024e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a4a      	ldr	r2, [pc, #296]	; (80025fc <UART_AdvFeatureConfig+0x144>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2202      	movs	r2, #2
 80024e8:	4013      	ands	r3, r2
 80024ea:	d00b      	beq.n	8002504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a43      	ldr	r2, [pc, #268]	; (8002600 <UART_AdvFeatureConfig+0x148>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2204      	movs	r2, #4
 800250a:	4013      	ands	r3, r2
 800250c:	d00b      	beq.n	8002526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a3b      	ldr	r2, [pc, #236]	; (8002604 <UART_AdvFeatureConfig+0x14c>)
 8002516:	4013      	ands	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2208      	movs	r2, #8
 800252c:	4013      	ands	r3, r2
 800252e:	d00b      	beq.n	8002548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4a34      	ldr	r2, [pc, #208]	; (8002608 <UART_AdvFeatureConfig+0x150>)
 8002538:	4013      	ands	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2210      	movs	r2, #16
 800254e:	4013      	ands	r3, r2
 8002550:	d00b      	beq.n	800256a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a2c      	ldr	r2, [pc, #176]	; (800260c <UART_AdvFeatureConfig+0x154>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2220      	movs	r2, #32
 8002570:	4013      	ands	r3, r2
 8002572:	d00b      	beq.n	800258c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <UART_AdvFeatureConfig+0x158>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	2240      	movs	r2, #64	; 0x40
 8002592:	4013      	ands	r3, r2
 8002594:	d01d      	beq.n	80025d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <UART_AdvFeatureConfig+0x15c>)
 800259e:	4013      	ands	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	035b      	lsls	r3, r3, #13
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d10b      	bne.n	80025d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a15      	ldr	r2, [pc, #84]	; (8002618 <UART_AdvFeatureConfig+0x160>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	4013      	ands	r3, r2
 80025da:	d00b      	beq.n	80025f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <UART_AdvFeatureConfig+0x164>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
  }
}
 80025f4:	46c0      	nop			; (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	fffdffff 	.word	0xfffdffff
 8002600:	fffeffff 	.word	0xfffeffff
 8002604:	fffbffff 	.word	0xfffbffff
 8002608:	ffff7fff 	.word	0xffff7fff
 800260c:	ffffefff 	.word	0xffffefff
 8002610:	ffffdfff 	.word	0xffffdfff
 8002614:	ffefffff 	.word	0xffefffff
 8002618:	ff9fffff 	.word	0xff9fffff
 800261c:	fff7ffff 	.word	0xfff7ffff

08002620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b092      	sub	sp, #72	; 0x48
 8002624:	af02      	add	r7, sp, #8
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2284      	movs	r2, #132	; 0x84
 800262c:	2100      	movs	r1, #0
 800262e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002630:	f7fe f93a 	bl	80008a8 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2208      	movs	r2, #8
 8002640:	4013      	ands	r3, r2
 8002642:	2b08      	cmp	r3, #8
 8002644:	d12c      	bne.n	80026a0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	0391      	lsls	r1, r2, #14
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4a46      	ldr	r2, [pc, #280]	; (8002768 <UART_CheckIdleState+0x148>)
 8002650:	9200      	str	r2, [sp, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	f000 f88c 	bl	8002770 <UART_WaitOnFlagUntilTimeout>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d021      	beq.n	80026a0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265c:	f3ef 8310 	mrs	r3, PRIMASK
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002664:	63bb      	str	r3, [r7, #56]	; 0x38
 8002666:	2301      	movs	r3, #1
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	f383 8810 	msr	PRIMASK, r3
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	438a      	bics	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	f383 8810 	msr	PRIMASK, r3
}
 800268c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2278      	movs	r2, #120	; 0x78
 8002698:	2100      	movs	r1, #0
 800269a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e05f      	b.n	8002760 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2204      	movs	r2, #4
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d146      	bne.n	800273c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	03d1      	lsls	r1, r2, #15
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4a2c      	ldr	r2, [pc, #176]	; (8002768 <UART_CheckIdleState+0x148>)
 80026b8:	9200      	str	r2, [sp, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f000 f858 	bl	8002770 <UART_WaitOnFlagUntilTimeout>
 80026c0:	1e03      	subs	r3, r0, #0
 80026c2:	d03b      	beq.n	800273c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c4:	f3ef 8310 	mrs	r3, PRIMASK
 80026c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80026ca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
 80026ce:	2301      	movs	r3, #1
 80026d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f383 8810 	msr	PRIMASK, r3
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4921      	ldr	r1, [pc, #132]	; (800276c <UART_CheckIdleState+0x14c>)
 80026e6:	400a      	ands	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f383 8810 	msr	PRIMASK, r3
}
 80026f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026f6:	f3ef 8310 	mrs	r3, PRIMASK
 80026fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80026fc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002700:	2301      	movs	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f383 8810 	msr	PRIMASK, r3
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2101      	movs	r1, #1
 8002718:	438a      	bics	r2, r1
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	f383 8810 	msr	PRIMASK, r3
}
 8002726:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	2120      	movs	r1, #32
 800272e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2278      	movs	r2, #120	; 0x78
 8002734:	2100      	movs	r1, #0
 8002736:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e011      	b.n	8002760 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	2120      	movs	r1, #32
 8002748:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2278      	movs	r2, #120	; 0x78
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b010      	add	sp, #64	; 0x40
 8002766:	bd80      	pop	{r7, pc}
 8002768:	01ffffff 	.word	0x01ffffff
 800276c:	fffffedf 	.word	0xfffffedf

08002770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	1dfb      	adds	r3, r7, #7
 800277e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002780:	e04b      	b.n	800281a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	3301      	adds	r3, #1
 8002786:	d048      	beq.n	800281a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002788:	f7fe f88e 	bl	80008a8 <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	429a      	cmp	r2, r3
 8002796:	d302      	bcc.n	800279e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e04b      	b.n	800283a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2204      	movs	r2, #4
 80027aa:	4013      	ands	r3, r2
 80027ac:	d035      	beq.n	800281a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2208      	movs	r2, #8
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d111      	bne.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2208      	movs	r2, #8
 80027c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f83c 	bl	8002844 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2284      	movs	r2, #132	; 0x84
 80027d0:	2108      	movs	r1, #8
 80027d2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2278      	movs	r2, #120	; 0x78
 80027d8:	2100      	movs	r1, #0
 80027da:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e02c      	b.n	800283a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	401a      	ands	r2, r3
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d112      	bne.n	800281a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 f81f 	bl	8002844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2284      	movs	r2, #132	; 0x84
 800280a:	2120      	movs	r1, #32
 800280c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2278      	movs	r2, #120	; 0x78
 8002812:	2100      	movs	r1, #0
 8002814:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e00f      	b.n	800283a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	425a      	negs	r2, r3
 800282a:	4153      	adcs	r3, r2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	001a      	movs	r2, r3
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d0a4      	beq.n	8002782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b004      	add	sp, #16
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08e      	sub	sp, #56	; 0x38
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800284c:	f3ef 8310 	mrs	r3, PRIMASK
 8002850:	617b      	str	r3, [r7, #20]
  return(result);
 8002852:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002854:	637b      	str	r3, [r7, #52]	; 0x34
 8002856:	2301      	movs	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f383 8810 	msr	PRIMASK, r3
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4926      	ldr	r1, [pc, #152]	; (8002908 <UART_EndRxTransfer+0xc4>)
 800286e:	400a      	ands	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002874:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f383 8810 	msr	PRIMASK, r3
}
 800287c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287e:	f3ef 8310 	mrs	r3, PRIMASK
 8002882:	623b      	str	r3, [r7, #32]
  return(result);
 8002884:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
 8002888:	2301      	movs	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	f383 8810 	msr	PRIMASK, r3
}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	438a      	bics	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	f383 8810 	msr	PRIMASK, r3
}
 80028ae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d118      	bne.n	80028ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b8:	f3ef 8310 	mrs	r3, PRIMASK
 80028bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80028be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c2:	2301      	movs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f383 8810 	msr	PRIMASK, r3
}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2110      	movs	r1, #16
 80028da:	438a      	bics	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f383 8810 	msr	PRIMASK, r3
}
 80028e8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	2120      	movs	r1, #32
 80028f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b00e      	add	sp, #56	; 0x38
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	fffffedf 	.word	0xfffffedf

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2600      	movs	r6, #0
 8002910:	4d0c      	ldr	r5, [pc, #48]	; (8002944 <__libc_init_array+0x38>)
 8002912:	4c0d      	ldr	r4, [pc, #52]	; (8002948 <__libc_init_array+0x3c>)
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	2600      	movs	r6, #0
 800291e:	f000 f821 	bl	8002964 <_init>
 8002922:	4d0a      	ldr	r5, [pc, #40]	; (800294c <__libc_init_array+0x40>)
 8002924:	4c0a      	ldr	r4, [pc, #40]	; (8002950 <__libc_init_array+0x44>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	00b3      	lsls	r3, r6, #2
 8002932:	58eb      	ldr	r3, [r5, r3]
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	00b3      	lsls	r3, r6, #2
 800293c:	58eb      	ldr	r3, [r5, r3]
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	080029f0 	.word	0x080029f0
 8002948:	080029f0 	.word	0x080029f0
 800294c:	080029f0 	.word	0x080029f0
 8002950:	080029f4 	.word	0x080029f4

08002954 <memset>:
 8002954:	0003      	movs	r3, r0
 8002956:	1882      	adds	r2, r0, r2
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	7019      	strb	r1, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <_init>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr

08002970 <_fini>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr

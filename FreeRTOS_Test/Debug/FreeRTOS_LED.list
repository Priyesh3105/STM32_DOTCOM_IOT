
FreeRTOS_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800485c  0800485c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004864  08004864  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800486c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001754  20000060  080048cc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017b4  080048cc  000217b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001004e  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002754  00000000  00000000  00030119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00032870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9f  00000000  00000000  000337a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026ee  00000000  00000000  0003433f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffe3  00000000  00000000  00036a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000831d0  00000000  00000000  00046a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000398c  00000000  00000000  000c9be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000cd56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800476c 	.word	0x0800476c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	0800476c 	.word	0x0800476c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ac:	f000 fa16 	bl	80008dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b0:	f000 f83c 	bl	800052c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004b4:	f000 f896 	bl	80005e4 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin, GPIO_PIN_SET);
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2201      	movs	r2, #1
 80004be:	2120      	movs	r1, #32
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fc6b 	bl	8000d9c <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004c6:	f001 fc9b 	bl	8001e00 <osKernelInitialize>
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* creation of myTimer01 */
	myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL,
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <main+0x60>)
 80004cc:	480f      	ldr	r0, [pc, #60]	; (800050c <main+0x64>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2101      	movs	r1, #1
 80004d2:	f001 fdd5 	bl	8002080 <osTimerNew>
 80004d6:	0002      	movs	r2, r0
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <main+0x68>)
 80004da:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of TaskOne */
	TaskOneHandle = osThreadNew(StartTaskOne, NULL, &TaskOne_attributes);
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <main+0x6c>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <main+0x70>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fce8 	bl	8001eb8 <osThreadNew>
 80004e8:	0002      	movs	r2, r0
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <main+0x74>)
 80004ec:	601a      	str	r2, [r3, #0]

	/* creation of TaskTwo */
	TaskTwoHandle = osThreadNew(StartTaskTwo, NULL, &TaskTwo_attributes);
 80004ee:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <main+0x78>)
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <main+0x7c>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fcdf 	bl	8001eb8 <osThreadNew>
 80004fa:	0002      	movs	r2, r0
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <main+0x80>)
 80004fe:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000500:	f001 fcaa 	bl	8001e58 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000504:	e7fe      	b.n	8000504 <main+0x5c>
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	08004800 	.word	0x08004800
 800050c:	080006e5 	.word	0x080006e5
 8000510:	20000084 	.word	0x20000084
 8000514:	080047b8 	.word	0x080047b8
 8000518:	080006a1 	.word	0x080006a1
 800051c:	2000007c 	.word	0x2000007c
 8000520:	080047dc 	.word	0x080047dc
 8000524:	080006c5 	.word	0x080006c5
 8000528:	20000080 	.word	0x20000080

0800052c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b095      	sub	sp, #84	; 0x54
 8000530:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000532:	2418      	movs	r4, #24
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	2338      	movs	r3, #56	; 0x38
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f004 f825 	bl	800458c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	0018      	movs	r0, r3
 8000546:	2314      	movs	r3, #20
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f004 f81e 	bl	800458c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xb0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a22      	ldr	r2, [pc, #136]	; (80005e0 <SystemClock_Config+0xb4>)
 8000556:	401a      	ands	r2, r3
 8000558:	4b20      	ldr	r3, [pc, #128]	; (80005dc <SystemClock_Config+0xb0>)
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	0109      	lsls	r1, r1, #4
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000562:	0021      	movs	r1, r4
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2202      	movs	r2, #2
 8000568:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2201      	movs	r2, #1
 800056e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2210      	movs	r2, #16
 8000574:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2202      	movs	r2, #2
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	02d2      	lsls	r2, r2, #11
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	03d2      	lsls	r2, r2, #15
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000592:	187b      	adds	r3, r7, r1
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fc39 	bl	8000e0c <HAL_RCC_OscConfig>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x76>
		Error_Handler();
 800059e:	f000 f8bb 	bl	8000718 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	220f      	movs	r2, #15
 80005a6:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2203      	movs	r2, #3
 80005ac:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2101      	movs	r1, #1
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 ffe5 	bl	8001594 <HAL_RCC_ClockConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xa6>
		Error_Handler();
 80005ce:	f000 f8a3 	bl	8000718 <Error_Handler>
	}
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b015      	add	sp, #84	; 0x54
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40007000 	.word	0x40007000
 80005e0:	ffffe7ff 	.word	0xffffe7ff

080005e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005ea:	240c      	movs	r4, #12
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2314      	movs	r3, #20
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 ffc9 	bl	800458c <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_GPIO_Init+0xb4>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <MX_GPIO_Init+0xb4>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_GPIO_Init+0xb4>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_GPIO_Init+0xb4>)
 8000614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_GPIO_Init+0xb4>)
 8000618:	2102      	movs	r1, #2
 800061a:	430a      	orrs	r2, r1
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_GPIO_Init+0xb4>)
 8000620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000622:	2202      	movs	r2, #2
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin, GPIO_PIN_RESET);
 800062a:	23a0      	movs	r3, #160	; 0xa0
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fbb2 	bl	8000d9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin,
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_GPIO_Init+0xb8>)
 800063a:	2200      	movs	r2, #0
 800063c:	2110      	movs	r1, #16
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fbac 	bl	8000d9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : BSP_RED_LED_Pin */
	GPIO_InitStruct.Pin = BSP_RED_LED_Pin;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2220      	movs	r2, #32
 8000648:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2201      	movs	r2, #1
 800064e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BSP_RED_LED_GPIO_Port, &GPIO_InitStruct);
 800065c:	193a      	adds	r2, r7, r4
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fa23 	bl	8000ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BSP_GREEN_LED_Pin */
	GPIO_InitStruct.Pin = BSP_GREEN_LED_Pin;
 800066a:	0021      	movs	r1, r4
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2210      	movs	r2, #16
 8000670:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2201      	movs	r2, #1
 8000676:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BSP_GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000684:	187b      	adds	r3, r7, r1
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <MX_GPIO_Init+0xb8>)
 8000688:	0019      	movs	r1, r3
 800068a:	0010      	movs	r0, r2
 800068c:	f000 fa10 	bl	8000ab0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b009      	add	sp, #36	; 0x24
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	50000400 	.word	0x50000400

080006a0 <StartTaskOne>:
 * @brief  Function implementing the TaskOne thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskOne */
void StartTaskOne(void *argument) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	for (;;) {
//		HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin,
//				GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin, GPIO_PIN_SET);
//		HAL_Delay(200);
		HAL_GPIO_TogglePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <StartTaskOne+0x20>)
 80006aa:	2110      	movs	r1, #16
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fb92 	bl	8000dd6 <HAL_GPIO_TogglePin>
		osDelay(300);
 80006b2:	2396      	movs	r3, #150	; 0x96
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fca2 	bl	8002000 <osDelay>
		HAL_GPIO_TogglePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
 80006bc:	e7f4      	b.n	80006a8 <StartTaskOne+0x8>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	50000400 	.word	0x50000400

080006c4 <StartTaskTwo>:
 * @brief Function implementing the TaskTwo thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskTwo */
void StartTaskTwo(void *argument) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin,
//				GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin,
//				GPIO_PIN_SET);
//		HAL_Delay(200);
		HAL_GPIO_TogglePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin);
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	2120      	movs	r1, #32
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fb7f 	bl	8000dd6 <HAL_GPIO_TogglePin>
		osDelay(300);
 80006d8:	2396      	movs	r3, #150	; 0x96
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fc8f 	bl	8002000 <osDelay>
		HAL_GPIO_TogglePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin);
 80006e2:	e7f3      	b.n	80006cc <StartTaskTwo+0x8>

080006e4 <Callback01>:
	}
	/* USER CODE END StartTaskTwo */
}

/* Callback01 function */
void Callback01(void *argument) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback01 */

	/* USER CODE END Callback01 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b002      	add	sp, #8
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d101      	bne.n	800070a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000706:	f000 f909 	bl	800091c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	40001000 	.word	0x40001000

08000718 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000720:	e7fe      	b.n	8000720 <Error_Handler+0x8>
	...

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_MspInit+0x34>)
 800072a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_MspInit+0x34>)
 800072e:	2101      	movs	r1, #1
 8000730:	430a      	orrs	r2, r1
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_MspInit+0x34>)
 8000736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <HAL_MspInit+0x34>)
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	0549      	lsls	r1, r1, #21
 800073e:	430a      	orrs	r2, r1
 8000740:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000742:	2302      	movs	r3, #2
 8000744:	425b      	negs	r3, r3
 8000746:	2200      	movs	r2, #0
 8000748:	2103      	movs	r1, #3
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f98a 	bl	8000a64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	0019      	movs	r1, r3
 800076a:	2011      	movs	r0, #17
 800076c:	f000 f97a 	bl	8000a64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000770:	2011      	movs	r0, #17
 8000772:	f000 f98c 	bl	8000a8e <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <HAL_InitTick+0xe4>)
 8000778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <HAL_InitTick+0xe4>)
 800077c:	2110      	movs	r1, #16
 800077e:	430a      	orrs	r2, r1
 8000780:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000782:	2308      	movs	r3, #8
 8000784:	18fa      	adds	r2, r7, r3
 8000786:	240c      	movs	r4, #12
 8000788:	193b      	adds	r3, r7, r4
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f001 f90f 	bl	80019b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	2b00      	cmp	r3, #0
 800079c:	d104      	bne.n	80007a8 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800079e:	f001 f8f1 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 80007a2:	0003      	movs	r3, r0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a6:	e004      	b.n	80007b2 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007a8:	f001 f8ec 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 80007ac:	0003      	movs	r3, r0
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b4:	4923      	ldr	r1, [pc, #140]	; (8000844 <HAL_InitTick+0xe8>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fca6 	bl	8000108 <__udivsi3>
 80007bc:	0003      	movs	r3, r0
 80007be:	3b01      	subs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <HAL_InitTick+0xec>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <HAL_InitTick+0xf0>)
 80007c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <HAL_InitTick+0xec>)
 80007ca:	4a21      	ldr	r2, [pc, #132]	; (8000850 <HAL_InitTick+0xf4>)
 80007cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <HAL_InitTick+0xec>)
 80007d0:	6a3a      	ldr	r2, [r7, #32]
 80007d2:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_InitTick+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <HAL_InitTick+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80007e0:	252b      	movs	r5, #43	; 0x2b
 80007e2:	197c      	adds	r4, r7, r5
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_InitTick+0xec>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 f914 	bl	8001a14 <HAL_TIM_Base_Init>
 80007ec:	0003      	movs	r3, r0
 80007ee:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80007f0:	197b      	adds	r3, r7, r5
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d11b      	bne.n	8000830 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80007f8:	197c      	adds	r4, r7, r5
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <HAL_InitTick+0xec>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f951 	bl	8001aa4 <HAL_TIM_Base_Start_IT>
 8000802:	0003      	movs	r3, r0
 8000804:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000806:	197b      	adds	r3, r7, r5
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d110      	bne.n	8000830 <HAL_InitTick+0xd4>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d809      	bhi.n	8000828 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	0019      	movs	r1, r3
 800081a:	2011      	movs	r0, #17
 800081c:	f000 f922 	bl	8000a64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_InitTick+0xf8>)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e003      	b.n	8000830 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000828:	232b      	movs	r3, #43	; 0x2b
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000830:	232b      	movs	r3, #43	; 0x2b
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	781b      	ldrb	r3, [r3, #0]
}
 8000836:	0018      	movs	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	b00c      	add	sp, #48	; 0x30
 800083c:	bdb0      	pop	{r4, r5, r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40021000 	.word	0x40021000
 8000844:	000f4240 	.word	0x000f4240
 8000848:	20000088 	.word	0x20000088
 800084c:	40001000 	.word	0x40001000
 8000850:	000003e7 	.word	0x000003e7
 8000854:	20000004 	.word	0x20000004

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <TIM6_DAC_IRQHandler+0x14>)
 800086a:	0018      	movs	r0, r3
 800086c:	f001 f966 	bl	8001b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	20000088 	.word	0x20000088

0800087c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800088c:	f7ff fff6 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	; (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	; (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f003 fecf 	bl	8004658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fdf5 	bl	80004a8 <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008cc:	0800486c 	.word	0x0800486c
  ldr r2, =_sbss
 80008d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008d4:	200017b4 	.word	0x200017b4

080008d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_COMP_IRQHandler>
	...

080008dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_Init+0x3c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_Init+0x3c>)
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	430a      	orrs	r2, r1
 80008f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff ff31 	bl	800075c <HAL_InitTick>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d003      	beq.n	8000906 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e001      	b.n	800090a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000906:	f7ff ff0d 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	001a      	movs	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	18d2      	adds	r2, r2, r3
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <HAL_IncTick+0x20>)
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000008 	.word	0x20000008
 800093c:	200000c8 	.word	0x200000c8

08000940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	200000c8 	.word	0x200000c8

08000954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	0002      	movs	r2, r0
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b7f      	cmp	r3, #127	; 0x7f
 8000966:	d809      	bhi.n	800097c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	001a      	movs	r2, r3
 800096e:	231f      	movs	r3, #31
 8000970:	401a      	ands	r2, r3
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <__NVIC_EnableIRQ+0x30>)
 8000974:	2101      	movs	r1, #1
 8000976:	4091      	lsls	r1, r2
 8000978:	000a      	movs	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
  }
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}
 8000984:	e000e100 	.word	0xe000e100

08000988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	0002      	movs	r2, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b7f      	cmp	r3, #127	; 0x7f
 800099c:	d828      	bhi.n	80009f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099e:	4a2f      	ldr	r2, [pc, #188]	; (8000a5c <__NVIC_SetPriority+0xd4>)
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	33c0      	adds	r3, #192	; 0xc0
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	589b      	ldr	r3, [r3, r2]
 80009ae:	1dfa      	adds	r2, r7, #7
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	0011      	movs	r1, r2
 80009b4:	2203      	movs	r2, #3
 80009b6:	400a      	ands	r2, r1
 80009b8:	00d2      	lsls	r2, r2, #3
 80009ba:	21ff      	movs	r1, #255	; 0xff
 80009bc:	4091      	lsls	r1, r2
 80009be:	000a      	movs	r2, r1
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	401a      	ands	r2, r3
 80009c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	401a      	ands	r2, r3
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	0018      	movs	r0, r3
 80009d4:	2303      	movs	r3, #3
 80009d6:	4003      	ands	r3, r0
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009dc:	481f      	ldr	r0, [pc, #124]	; (8000a5c <__NVIC_SetPriority+0xd4>)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	430a      	orrs	r2, r1
 80009e8:	33c0      	adds	r3, #192	; 0xc0
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ee:	e031      	b.n	8000a54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <__NVIC_SetPriority+0xd8>)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0019      	movs	r1, r3
 80009f8:	230f      	movs	r3, #15
 80009fa:	400b      	ands	r3, r1
 80009fc:	3b08      	subs	r3, #8
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	3306      	adds	r3, #6
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	18d3      	adds	r3, r2, r3
 8000a06:	3304      	adds	r3, #4
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	1dfa      	adds	r2, r7, #7
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	0011      	movs	r1, r2
 8000a10:	2203      	movs	r2, #3
 8000a12:	400a      	ands	r2, r1
 8000a14:	00d2      	lsls	r2, r2, #3
 8000a16:	21ff      	movs	r1, #255	; 0xff
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	000a      	movs	r2, r1
 8000a1c:	43d2      	mvns	r2, r2
 8000a1e:	401a      	ands	r2, r3
 8000a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	019b      	lsls	r3, r3, #6
 8000a26:	22ff      	movs	r2, #255	; 0xff
 8000a28:	401a      	ands	r2, r3
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2303      	movs	r3, #3
 8000a32:	4003      	ands	r3, r0
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <__NVIC_SetPriority+0xd8>)
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	001c      	movs	r4, r3
 8000a40:	230f      	movs	r3, #15
 8000a42:	4023      	ands	r3, r4
 8000a44:	3b08      	subs	r3, #8
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	3306      	adds	r3, #6
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	18c3      	adds	r3, r0, r3
 8000a50:	3304      	adds	r3, #4
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b003      	add	sp, #12
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	210f      	movs	r1, #15
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	1c02      	adds	r2, r0, #0
 8000a74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ff81 	bl	8000988 <__NVIC_SetPriority>
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b004      	add	sp, #16
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	0002      	movs	r2, r0
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff ff57 	bl	8000954 <__NVIC_EnableIRQ>
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ac6:	e14f      	b.n	8000d68 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2101      	movs	r1, #1
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d100      	bne.n	8000ae0 <HAL_GPIO_Init+0x30>
 8000ade:	e140      	b.n	8000d62 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d005      	beq.n	8000af8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2203      	movs	r2, #3
 8000af2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d130      	bne.n	8000b5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	2203      	movs	r2, #3
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	43da      	mvns	r2, r3
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b2e:	2201      	movs	r2, #1
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	2201      	movs	r2, #1
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2203      	movs	r2, #3
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d017      	beq.n	8000b96 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	43da      	mvns	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d123      	bne.n	8000bea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	08da      	lsrs	r2, r3, #3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3208      	adds	r2, #8
 8000baa:	0092      	lsls	r2, r2, #2
 8000bac:	58d3      	ldr	r3, [r2, r3]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2207      	movs	r2, #7
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	220f      	movs	r2, #15
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	691a      	ldr	r2, [r3, #16]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	2107      	movs	r1, #7
 8000bce:	400b      	ands	r3, r1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	08da      	lsrs	r2, r3, #3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3208      	adds	r2, #8
 8000be4:	0092      	lsls	r2, r2, #2
 8000be6:	6939      	ldr	r1, [r7, #16]
 8000be8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2203      	movs	r2, #3
 8000c08:	401a      	ands	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	23c0      	movs	r3, #192	; 0xc0
 8000c24:	029b      	lsls	r3, r3, #10
 8000c26:	4013      	ands	r3, r2
 8000c28:	d100      	bne.n	8000c2c <HAL_GPIO_Init+0x17c>
 8000c2a:	e09a      	b.n	8000d62 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2c:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c30:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000c32:	2101      	movs	r1, #1
 8000c34:	430a      	orrs	r2, r1
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c38:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <HAL_GPIO_Init+0x2d4>)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	589b      	ldr	r3, [r3, r2]
 8000c44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	2203      	movs	r2, #3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	43da      	mvns	r2, r3
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	23a0      	movs	r3, #160	; 0xa0
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d019      	beq.n	8000c9a <HAL_GPIO_Init+0x1ea>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a47      	ldr	r2, [pc, #284]	; (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0x1e6>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a46      	ldr	r2, [pc, #280]	; (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d00d      	beq.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a45      	ldr	r2, [pc, #276]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d007      	beq.n	8000c8e <HAL_GPIO_Init+0x1de>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a44      	ldr	r2, [pc, #272]	; (8000d94 <HAL_GPIO_Init+0x2e4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_GPIO_Init+0x1da>
 8000c86:	2305      	movs	r3, #5
 8000c88:	e008      	b.n	8000c9c <HAL_GPIO_Init+0x1ec>
 8000c8a:	2306      	movs	r3, #6
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x1ec>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e004      	b.n	8000c9c <HAL_GPIO_Init+0x1ec>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_Init+0x1ec>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x1ec>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	2103      	movs	r1, #3
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4093      	lsls	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cac:	4935      	ldr	r1, [pc, #212]	; (8000d84 <HAL_GPIO_Init+0x2d4>)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cba:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	035b      	lsls	r3, r3, #13
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cde:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	039b      	lsls	r3, r3, #14
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	029b      	lsls	r3, r3, #10
 8000d26:	4013      	ands	r3, r2
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43da      	mvns	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	025b      	lsls	r3, r3, #9
 8000d50:	4013      	ands	r3, r2
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	40da      	lsrs	r2, r3
 8000d70:	1e13      	subs	r3, r2, #0
 8000d72:	d000      	beq.n	8000d76 <HAL_GPIO_Init+0x2c6>
 8000d74:	e6a8      	b.n	8000ac8 <HAL_GPIO_Init+0x18>
  }
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b006      	add	sp, #24
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000
 8000d88:	50000400 	.word	0x50000400
 8000d8c:	50000800 	.word	0x50000800
 8000d90:	50000c00 	.word	0x50000c00
 8000d94:	50001c00 	.word	0x50001c00
 8000d98:	40010400 	.word	0x40010400

08000d9c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	0008      	movs	r0, r1
 8000da6:	0011      	movs	r1, r2
 8000da8:	1cbb      	adds	r3, r7, #2
 8000daa:	1c02      	adds	r2, r0, #0
 8000dac:	801a      	strh	r2, [r3, #0]
 8000dae:	1c7b      	adds	r3, r7, #1
 8000db0:	1c0a      	adds	r2, r1, #0
 8000db2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db4:	1c7b      	adds	r3, r7, #1
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d004      	beq.n	8000dc6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dbc:	1cbb      	adds	r3, r7, #2
 8000dbe:	881a      	ldrh	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000dc4:	e003      	b.n	8000dce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000dc6:	1cbb      	adds	r3, r7, #2
 8000dc8:	881a      	ldrh	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	000a      	movs	r2, r1
 8000de0:	1cbb      	adds	r3, r7, #2
 8000de2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dea:	1cbb      	adds	r3, r7, #2
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4013      	ands	r3, r2
 8000df2:	041a      	lsls	r2, r3, #16
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	1cb9      	adds	r1, r7, #2
 8000dfa:	8809      	ldrh	r1, [r1, #0]
 8000dfc:	400b      	ands	r3, r1
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	619a      	str	r2, [r3, #24]
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b004      	add	sp, #16
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f000 fbaf 	bl	800157e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e20:	4bcf      	ldr	r3, [pc, #828]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	220c      	movs	r2, #12
 8000e26:	4013      	ands	r3, r2
 8000e28:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e2a:	4bcd      	ldr	r3, [pc, #820]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	025b      	lsls	r3, r3, #9
 8000e32:	4013      	ands	r3, r2
 8000e34:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d100      	bne.n	8000e42 <HAL_RCC_OscConfig+0x36>
 8000e40:	e07e      	b.n	8000f40 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d007      	beq.n	8000e58 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	2b0c      	cmp	r3, #12
 8000e4c:	d112      	bne.n	8000e74 <HAL_RCC_OscConfig+0x68>
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	025b      	lsls	r3, r3, #9
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d10d      	bne.n	8000e74 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e58:	4bc1      	ldr	r3, [pc, #772]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	029b      	lsls	r3, r3, #10
 8000e60:	4013      	ands	r3, r2
 8000e62:	d100      	bne.n	8000e66 <HAL_RCC_OscConfig+0x5a>
 8000e64:	e06b      	b.n	8000f3e <HAL_RCC_OscConfig+0x132>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d167      	bne.n	8000f3e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f000 fb85 	bl	800157e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	025b      	lsls	r3, r3, #9
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d107      	bne.n	8000e90 <HAL_RCC_OscConfig+0x84>
 8000e80:	4bb7      	ldr	r3, [pc, #732]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4bb6      	ldr	r3, [pc, #728]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0249      	lsls	r1, r1, #9
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e027      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	23a0      	movs	r3, #160	; 0xa0
 8000e96:	02db      	lsls	r3, r3, #11
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d10e      	bne.n	8000eba <HAL_RCC_OscConfig+0xae>
 8000e9c:	4bb0      	ldr	r3, [pc, #704]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4baf      	ldr	r3, [pc, #700]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	02c9      	lsls	r1, r1, #11
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	4bad      	ldr	r3, [pc, #692]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4bac      	ldr	r3, [pc, #688]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0249      	lsls	r1, r1, #9
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e012      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000eba:	4ba9      	ldr	r3, [pc, #676]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4ba8      	ldr	r3, [pc, #672]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ec0:	49a8      	ldr	r1, [pc, #672]	; (8001164 <HAL_RCC_OscConfig+0x358>)
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	4ba6      	ldr	r3, [pc, #664]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	025b      	lsls	r3, r3, #9
 8000ece:	4013      	ands	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4ba2      	ldr	r3, [pc, #648]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4ba1      	ldr	r3, [pc, #644]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000eda:	49a3      	ldr	r1, [pc, #652]	; (8001168 <HAL_RCC_OscConfig+0x35c>)
 8000edc:	400a      	ands	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d015      	beq.n	8000f14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fd2a 	bl	8000940 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ef0:	e009      	b.n	8000f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fd25 	bl	8000940 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b64      	cmp	r3, #100	; 0x64
 8000efe:	d902      	bls.n	8000f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f000 fb3c 	bl	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f06:	4b96      	ldr	r3, [pc, #600]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	029b      	lsls	r3, r3, #10
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d0ef      	beq.n	8000ef2 <HAL_RCC_OscConfig+0xe6>
 8000f12:	e015      	b.n	8000f40 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fd14 	bl	8000940 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fd0f 	bl	8000940 <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e326      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f30:	4b8b      	ldr	r3, [pc, #556]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	029b      	lsls	r3, r3, #10
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d1f0      	bne.n	8000f1e <HAL_RCC_OscConfig+0x112>
 8000f3c:	e000      	b.n	8000f40 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2202      	movs	r2, #2
 8000f46:	4013      	ands	r3, r2
 8000f48:	d100      	bne.n	8000f4c <HAL_RCC_OscConfig+0x140>
 8000f4a:	e08b      	b.n	8001064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d13e      	bne.n	8000fdc <HAL_RCC_OscConfig+0x1d0>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d13b      	bne.n	8000fdc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f64:	4b7e      	ldr	r3, [pc, #504]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d004      	beq.n	8000f78 <HAL_RCC_OscConfig+0x16c>
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e302      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b79      	ldr	r3, [pc, #484]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a7b      	ldr	r2, [pc, #492]	; (800116c <HAL_RCC_OscConfig+0x360>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	0019      	movs	r1, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	021a      	lsls	r2, r3, #8
 8000f88:	4b75      	ldr	r3, [pc, #468]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f8e:	4b74      	ldr	r3, [pc, #464]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2209      	movs	r2, #9
 8000f94:	4393      	bics	r3, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	4b71      	ldr	r3, [pc, #452]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fa0:	f000 fc40 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 8000fa4:	0001      	movs	r1, r0
 8000fa6:	4b6e      	ldr	r3, [pc, #440]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	220f      	movs	r2, #15
 8000fae:	4013      	ands	r3, r2
 8000fb0:	4a6f      	ldr	r2, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x364>)
 8000fb2:	5cd3      	ldrb	r3, [r2, r3]
 8000fb4:	000a      	movs	r2, r1
 8000fb6:	40da      	lsrs	r2, r3
 8000fb8:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <HAL_RCC_OscConfig+0x368>)
 8000fba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000fbc:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <HAL_RCC_OscConfig+0x36c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2513      	movs	r5, #19
 8000fc2:	197c      	adds	r4, r7, r5
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff fbc9 	bl	800075c <HAL_InitTick>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000fce:	197b      	adds	r3, r7, r5
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d046      	beq.n	8001064 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000fd6:	197b      	adds	r3, r7, r5
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	e2d0      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d027      	beq.n	8001032 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2209      	movs	r2, #9
 8000fe8:	4393      	bics	r3, r2
 8000fea:	0019      	movs	r1, r3
 8000fec:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fca4 	bl	8000940 <HAL_GetTick>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fc9f 	bl	8000940 <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e2b6      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2204      	movs	r2, #4
 8001016:	4013      	ands	r3, r2
 8001018:	d0f1      	beq.n	8000ffe <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	4b51      	ldr	r3, [pc, #324]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a53      	ldr	r2, [pc, #332]	; (800116c <HAL_RCC_OscConfig+0x360>)
 8001020:	4013      	ands	r3, r2
 8001022:	0019      	movs	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	021a      	lsls	r2, r3, #8
 800102a:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800102c:	430a      	orrs	r2, r1
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	e018      	b.n	8001064 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001032:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001038:	2101      	movs	r1, #1
 800103a:	438a      	bics	r2, r1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fc7f 	bl	8000940 <HAL_GetTick>
 8001042:	0003      	movs	r3, r0
 8001044:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001048:	f7ff fc7a 	bl	8000940 <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e291      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
 8001062:	d1f1      	bne.n	8001048 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2210      	movs	r2, #16
 800106a:	4013      	ands	r3, r2
 800106c:	d100      	bne.n	8001070 <HAL_RCC_OscConfig+0x264>
 800106e:	e0a1      	b.n	80011b4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d140      	bne.n	80010f8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4013      	ands	r3, r2
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x282>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e277      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a3a      	ldr	r2, [pc, #232]	; (800117c <HAL_RCC_OscConfig+0x370>)
 8001094:	4013      	ands	r3, r2
 8001096:	0019      	movs	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800109e:	430a      	orrs	r2, r1
 80010a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	0a19      	lsrs	r1, r3, #8
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	061a      	lsls	r2, r3, #24
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 80010b2:	430a      	orrs	r2, r1
 80010b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	0b5b      	lsrs	r3, r3, #13
 80010bc:	3301      	adds	r3, #1
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	0212      	lsls	r2, r2, #8
 80010c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	210f      	movs	r1, #15
 80010cc:	400b      	ands	r3, r1
 80010ce:	4928      	ldr	r1, [pc, #160]	; (8001170 <HAL_RCC_OscConfig+0x364>)
 80010d0:	5ccb      	ldrb	r3, [r1, r3]
 80010d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x368>)
 80010d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <HAL_RCC_OscConfig+0x36c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2513      	movs	r5, #19
 80010de:	197c      	adds	r4, r7, r5
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff fb3b 	bl	800075c <HAL_InitTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010ea:	197b      	adds	r3, r7, r5
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d060      	beq.n	80011b4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80010f2:	197b      	adds	r3, r7, r5
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	e242      	b.n	800157e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d03f      	beq.n	8001180 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	0049      	lsls	r1, r1, #1
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff fc17 	bl	8000940 <HAL_GetTick>
 8001112:	0003      	movs	r3, r0
 8001114:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001118:	f7ff fc12 	bl	8000940 <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e229      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_RCC_OscConfig+0x370>)
 800113c:	4013      	ands	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8001146:	430a      	orrs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	0a19      	lsrs	r1, r3, #8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	061a      	lsls	r2, r3, #24
 8001158:	4b01      	ldr	r3, [pc, #4]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 800115a:	430a      	orrs	r2, r1
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	e029      	b.n	80011b4 <HAL_RCC_OscConfig+0x3a8>
 8001160:	40021000 	.word	0x40021000
 8001164:	fffeffff 	.word	0xfffeffff
 8001168:	fffbffff 	.word	0xfffbffff
 800116c:	ffffe0ff 	.word	0xffffe0ff
 8001170:	08004810 	.word	0x08004810
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004
 800117c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001180:	4bbd      	ldr	r3, [pc, #756]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4bbc      	ldr	r3, [pc, #752]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001186:	49bd      	ldr	r1, [pc, #756]	; (800147c <HAL_RCC_OscConfig+0x670>)
 8001188:	400a      	ands	r2, r1
 800118a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fbd8 	bl	8000940 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001196:	f7ff fbd3 	bl	8000940 <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e1ea      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011a8:	4bb3      	ldr	r3, [pc, #716]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2208      	movs	r2, #8
 80011ba:	4013      	ands	r3, r2
 80011bc:	d036      	beq.n	800122c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d019      	beq.n	80011fa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c6:	4bac      	ldr	r3, [pc, #688]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011ca:	4bab      	ldr	r3, [pc, #684]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	430a      	orrs	r2, r1
 80011d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fbb5 	bl	8000940 <HAL_GetTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fbb0 	bl	8000940 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1c7      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ee:	4ba2      	ldr	r3, [pc, #648]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	d0f1      	beq.n	80011dc <HAL_RCC_OscConfig+0x3d0>
 80011f8:	e018      	b.n	800122c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fa:	4b9f      	ldr	r3, [pc, #636]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80011fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011fe:	4b9e      	ldr	r3, [pc, #632]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001200:	2101      	movs	r1, #1
 8001202:	438a      	bics	r2, r1
 8001204:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fb9b 	bl	8000940 <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fb96 	bl	8000940 <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e1ad      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001222:	4b95      	ldr	r3, [pc, #596]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d1f1      	bne.n	8001210 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2204      	movs	r2, #4
 8001232:	4013      	ands	r3, r2
 8001234:	d100      	bne.n	8001238 <HAL_RCC_OscConfig+0x42c>
 8001236:	e0ae      	b.n	8001396 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001238:	2027      	movs	r0, #39	; 0x27
 800123a:	183b      	adds	r3, r7, r0
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001240:	4b8d      	ldr	r3, [pc, #564]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	055b      	lsls	r3, r3, #21
 8001248:	4013      	ands	r3, r2
 800124a:	d109      	bne.n	8001260 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	4b8a      	ldr	r3, [pc, #552]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800124e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001250:	4b89      	ldr	r3, [pc, #548]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	0549      	lsls	r1, r1, #21
 8001256:	430a      	orrs	r2, r1
 8001258:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800125a:	183b      	adds	r3, r7, r0
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4b87      	ldr	r3, [pc, #540]	; (8001480 <HAL_RCC_OscConfig+0x674>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4013      	ands	r3, r2
 800126a:	d11a      	bne.n	80012a2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126c:	4b84      	ldr	r3, [pc, #528]	; (8001480 <HAL_RCC_OscConfig+0x674>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b83      	ldr	r3, [pc, #524]	; (8001480 <HAL_RCC_OscConfig+0x674>)
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	0049      	lsls	r1, r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127a:	f7ff fb61 	bl	8000940 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001284:	f7ff fb5c 	bl	8000940 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e173      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001296:	4b7a      	ldr	r3, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x674>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4013      	ands	r3, r2
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d107      	bne.n	80012be <HAL_RCC_OscConfig+0x4b2>
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012b2:	4b71      	ldr	r3, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	0049      	lsls	r1, r1, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	651a      	str	r2, [r3, #80]	; 0x50
 80012bc:	e031      	b.n	8001322 <HAL_RCC_OscConfig+0x516>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x4d4>
 80012c6:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ca:	4b6b      	ldr	r3, [pc, #428]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012cc:	496b      	ldr	r1, [pc, #428]	; (800147c <HAL_RCC_OscConfig+0x670>)
 80012ce:	400a      	ands	r2, r1
 80012d0:	651a      	str	r2, [r3, #80]	; 0x50
 80012d2:	4b69      	ldr	r3, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d6:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012d8:	496a      	ldr	r1, [pc, #424]	; (8001484 <HAL_RCC_OscConfig+0x678>)
 80012da:	400a      	ands	r2, r1
 80012dc:	651a      	str	r2, [r3, #80]	; 0x50
 80012de:	e020      	b.n	8001322 <HAL_RCC_OscConfig+0x516>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	23a0      	movs	r3, #160	; 0xa0
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d10e      	bne.n	800130a <HAL_RCC_OscConfig+0x4fe>
 80012ec:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012f0:	4b61      	ldr	r3, [pc, #388]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	00c9      	lsls	r1, r1, #3
 80012f6:	430a      	orrs	r2, r1
 80012f8:	651a      	str	r2, [r3, #80]	; 0x50
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80012fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012fe:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0049      	lsls	r1, r1, #1
 8001304:	430a      	orrs	r2, r1
 8001306:	651a      	str	r2, [r3, #80]	; 0x50
 8001308:	e00b      	b.n	8001322 <HAL_RCC_OscConfig+0x516>
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800130c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800130e:	4b5a      	ldr	r3, [pc, #360]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001310:	495a      	ldr	r1, [pc, #360]	; (800147c <HAL_RCC_OscConfig+0x670>)
 8001312:	400a      	ands	r2, r1
 8001314:	651a      	str	r2, [r3, #80]	; 0x50
 8001316:	4b58      	ldr	r3, [pc, #352]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800131a:	4b57      	ldr	r3, [pc, #348]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800131c:	4959      	ldr	r1, [pc, #356]	; (8001484 <HAL_RCC_OscConfig+0x678>)
 800131e:	400a      	ands	r2, r1
 8001320:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d015      	beq.n	8001356 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb09 	bl	8000940 <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001332:	e009      	b.n	8001348 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001334:	f7ff fb04 	bl	8000940 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a52      	ldr	r2, [pc, #328]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e11a      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001348:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800134a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4013      	ands	r3, r2
 8001352:	d0ef      	beq.n	8001334 <HAL_RCC_OscConfig+0x528>
 8001354:	e014      	b.n	8001380 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff faf3 	bl	8000940 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800135e:	e009      	b.n	8001374 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001360:	f7ff faee 	bl	8000940 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	4a47      	ldr	r2, [pc, #284]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e104      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001374:	4b40      	ldr	r3, [pc, #256]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d1ef      	bne.n	8001360 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001380:	2327      	movs	r3, #39	; 0x27
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d105      	bne.n	8001396 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800138c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001390:	493e      	ldr	r1, [pc, #248]	; (800148c <HAL_RCC_OscConfig+0x680>)
 8001392:	400a      	ands	r2, r1
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2220      	movs	r2, #32
 800139c:	4013      	ands	r3, r2
 800139e:	d049      	beq.n	8001434 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d026      	beq.n	80013f6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013a8:	4b33      	ldr	r3, [pc, #204]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013ae:	2101      	movs	r1, #1
 80013b0:	430a      	orrs	r2, r1
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013ba:	2101      	movs	r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <HAL_RCC_OscConfig+0x684>)
 80013c2:	6a1a      	ldr	r2, [r3, #32]
 80013c4:	4b32      	ldr	r3, [pc, #200]	; (8001490 <HAL_RCC_OscConfig+0x684>)
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	0189      	lsls	r1, r1, #6
 80013ca:	430a      	orrs	r2, r1
 80013cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fab7 	bl	8000940 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d8:	f7ff fab2 	bl	8000940 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e0c9      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d0f1      	beq.n	80013d8 <HAL_RCC_OscConfig+0x5cc>
 80013f4:	e01e      	b.n	8001434 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	438a      	bics	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_RCC_OscConfig+0x684>)
 8001404:	6a1a      	ldr	r2, [r3, #32]
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <HAL_RCC_OscConfig+0x684>)
 8001408:	4922      	ldr	r1, [pc, #136]	; (8001494 <HAL_RCC_OscConfig+0x688>)
 800140a:	400a      	ands	r2, r1
 800140c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fa97 	bl	8000940 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001418:	f7ff fa92 	bl	8000940 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e0a9      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	d1f1      	bne.n	8001418 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	2b00      	cmp	r3, #0
 800143a:	d100      	bne.n	800143e <HAL_RCC_OscConfig+0x632>
 800143c:	e09e      	b.n	800157c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d100      	bne.n	8001446 <HAL_RCC_OscConfig+0x63a>
 8001444:	e077      	b.n	8001536 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	2b02      	cmp	r3, #2
 800144c:	d158      	bne.n	8001500 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x66c>)
 8001454:	4910      	ldr	r1, [pc, #64]	; (8001498 <HAL_RCC_OscConfig+0x68c>)
 8001456:	400a      	ands	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fa71 	bl	8000940 <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001462:	e01b      	b.n	800149c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fa6c 	bl	8000940 <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d914      	bls.n	800149c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e083      	b.n	800157e <HAL_RCC_OscConfig+0x772>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40021000 	.word	0x40021000
 800147c:	fffffeff 	.word	0xfffffeff
 8001480:	40007000 	.word	0x40007000
 8001484:	fffffbff 	.word	0xfffffbff
 8001488:	00001388 	.word	0x00001388
 800148c:	efffffff 	.word	0xefffffff
 8001490:	40010000 	.word	0x40010000
 8001494:	ffffdfff 	.word	0xffffdfff
 8001498:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800149c:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	049b      	lsls	r3, r3, #18
 80014a4:	4013      	ands	r3, r2
 80014a6:	d1dd      	bne.n	8001464 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a8:	4b37      	ldr	r3, [pc, #220]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a37      	ldr	r2, [pc, #220]	; (800158c <HAL_RCC_OscConfig+0x780>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	431a      	orrs	r2, r3
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014c4:	430a      	orrs	r2, r1
 80014c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	0449      	lsls	r1, r1, #17
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fa33 	bl	8000940 <HAL_GetTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fa2e 	bl	8000940 <HAL_GetTick>
 80014e4:	0002      	movs	r2, r0
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e045      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	049b      	lsls	r3, r3, #18
 80014fa:	4013      	ands	r3, r2
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x6d4>
 80014fe:	e03d      	b.n	800157c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 8001506:	4922      	ldr	r1, [pc, #136]	; (8001590 <HAL_RCC_OscConfig+0x784>)
 8001508:	400a      	ands	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fa18 	bl	8000940 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fa13 	bl	8000940 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e02a      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	049b      	lsls	r3, r3, #18
 8001530:	4013      	ands	r3, r2
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x70a>
 8001534:	e022      	b.n	800157c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e01d      	b.n	800157e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_RCC_OscConfig+0x77c>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	401a      	ands	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	429a      	cmp	r2, r3
 8001556:	d10f      	bne.n	8001578 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	23f0      	movs	r3, #240	; 0xf0
 800155c:	039b      	lsls	r3, r3, #14
 800155e:	401a      	ands	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	23c0      	movs	r3, #192	; 0xc0
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	401a      	ands	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b00a      	add	sp, #40	; 0x28
 8001584:	bdb0      	pop	{r4, r5, r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40021000 	.word	0x40021000
 800158c:	ff02ffff 	.word	0xff02ffff
 8001590:	feffffff 	.word	0xfeffffff

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e128      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b96      	ldr	r3, [pc, #600]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d91e      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b93      	ldr	r3, [pc, #588]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2201      	movs	r2, #1
 80015bc:	4393      	bics	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	4b90      	ldr	r3, [pc, #576]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015c8:	f7ff f9ba 	bl	8000940 <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d0:	e009      	b.n	80015e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d2:	f7ff f9b5 	bl	8000940 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	4a8a      	ldr	r2, [pc, #552]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e109      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b87      	ldr	r3, [pc, #540]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d009      	beq.n	8001612 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fe:	4b83      	ldr	r3, [pc, #524]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	22f0      	movs	r2, #240	; 0xf0
 8001604:	4393      	bics	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	4b7f      	ldr	r3, [pc, #508]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 800160e:	430a      	orrs	r2, r1
 8001610:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_ClockConfig+0x8a>
 800161c:	e089      	b.n	8001732 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001626:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	029b      	lsls	r3, r3, #10
 800162e:	4013      	ands	r3, r2
 8001630:	d120      	bne.n	8001674 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0e1      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	049b      	lsls	r3, r3, #18
 8001646:	4013      	ands	r3, r2
 8001648:	d114      	bne.n	8001674 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0d5      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d106      	bne.n	8001664 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001656:	4b6d      	ldr	r3, [pc, #436]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2204      	movs	r2, #4
 800165c:	4013      	ands	r3, r2
 800165e:	d109      	bne.n	8001674 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0ca      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001664:	4b69      	ldr	r3, [pc, #420]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0c2      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001674:	4b65      	ldr	r3, [pc, #404]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2203      	movs	r2, #3
 800167a:	4393      	bics	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001684:	430a      	orrs	r2, r1
 8001686:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff f95a 	bl	8000940 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d111      	bne.n	80016bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001698:	e009      	b.n	80016ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169a:	f7ff f951 	bl	8000940 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4a58      	ldr	r2, [pc, #352]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0a5      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	220c      	movs	r2, #12
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d1ef      	bne.n	800169a <HAL_RCC_ClockConfig+0x106>
 80016ba:	e03a      	b.n	8001732 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d111      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c4:	e009      	b.n	80016da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c6:	f7ff f93b 	bl	8000940 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e08f      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016da:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	220c      	movs	r2, #12
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d1ef      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x132>
 80016e6:	e024      	b.n	8001732 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d11b      	bne.n	8001728 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f0:	e009      	b.n	8001706 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f2:	f7ff f925 	bl	8000940 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	4a42      	ldr	r2, [pc, #264]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e079      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	220c      	movs	r2, #12
 800170c:	4013      	ands	r3, r2
 800170e:	2b04      	cmp	r3, #4
 8001710:	d1ef      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x15e>
 8001712:	e00e      	b.n	8001732 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001714:	f7ff f914 	bl	8000940 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e068      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	220c      	movs	r2, #12
 800172e:	4013      	ands	r3, r2
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d21e      	bcs.n	800177e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4393      	bics	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001752:	f7ff f8f5 	bl	8000940 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	e009      	b.n	8001770 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff f8f0 	bl	8000940 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_RCC_ClockConfig+0x274>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e044      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_ClockConfig+0x270>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d1ee      	bne.n	800175c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2204      	movs	r2, #4
 8001784:	4013      	ands	r3, r2
 8001786:	d009      	beq.n	800179c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_RCC_ClockConfig+0x27c>)
 800178e:	4013      	ands	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2208      	movs	r2, #8
 80017a2:	4013      	ands	r3, r2
 80017a4:	d00a      	beq.n	80017bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_RCC_ClockConfig+0x280>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	00da      	lsls	r2, r3, #3
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80017b8:	430a      	orrs	r2, r1
 80017ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017bc:	f000 f832 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80017c0:	0001      	movs	r1, r0
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_ClockConfig+0x278>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	220f      	movs	r2, #15
 80017ca:	4013      	ands	r3, r2
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_RCC_ClockConfig+0x284>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	000a      	movs	r2, r1
 80017d2:	40da      	lsrs	r2, r3
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_RCC_ClockConfig+0x288>)
 80017d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_RCC_ClockConfig+0x28c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	250b      	movs	r5, #11
 80017de:	197c      	adds	r4, r7, r5
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7fe ffbb 	bl	800075c <HAL_InitTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017ea:	197b      	adds	r3, r7, r5
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80017f2:	197b      	adds	r3, r7, r5
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	e000      	b.n	80017fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bdb0      	pop	{r4, r5, r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40022000 	.word	0x40022000
 8001808:	00001388 	.word	0x00001388
 800180c:	40021000 	.word	0x40021000
 8001810:	fffff8ff 	.word	0xfffff8ff
 8001814:	ffffc7ff 	.word	0xffffc7ff
 8001818:	08004810 	.word	0x08004810
 800181c:	20000000 	.word	0x20000000
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b08e      	sub	sp, #56	; 0x38
 8001828:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800182a:	4b4c      	ldr	r3, [pc, #304]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001832:	230c      	movs	r3, #12
 8001834:	4013      	ands	r3, r2
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d014      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x40>
 800183a:	d900      	bls.n	800183e <HAL_RCC_GetSysClockFreq+0x1a>
 800183c:	e07b      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x112>
 800183e:	2b04      	cmp	r3, #4
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x24>
 8001842:	2b08      	cmp	r3, #8
 8001844:	d00b      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x3a>
 8001846:	e076      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001848:	4b44      	ldr	r3, [pc, #272]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2210      	movs	r2, #16
 800184e:	4013      	ands	r3, r2
 8001850:	d002      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001852:	4b43      	ldr	r3, [pc, #268]	; (8001960 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001856:	e07c      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001858:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_GetSysClockFreq+0x140>)
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800185c:	e079      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800185e:	4b42      	ldr	r3, [pc, #264]	; (8001968 <HAL_RCC_GetSysClockFreq+0x144>)
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001862:	e076      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	0c9a      	lsrs	r2, r3, #18
 8001868:	230f      	movs	r3, #15
 800186a:	401a      	ands	r2, r3
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_GetSysClockFreq+0x148>)
 800186e:	5c9b      	ldrb	r3, [r3, r2]
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	0d9a      	lsrs	r2, r3, #22
 8001876:	2303      	movs	r3, #3
 8001878:	4013      	ands	r3, r2
 800187a:	3301      	adds	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	025b      	lsls	r3, r3, #9
 8001886:	4013      	ands	r3, r2
 8001888:	d01a      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	4a35      	ldr	r2, [pc, #212]	; (8001968 <HAL_RCC_GetSysClockFreq+0x144>)
 8001894:	2300      	movs	r3, #0
 8001896:	69b8      	ldr	r0, [r7, #24]
 8001898:	69f9      	ldr	r1, [r7, #28]
 800189a:	f7fe fce1 	bl	8000260 <__aeabi_lmul>
 800189e:	0002      	movs	r2, r0
 80018a0:	000b      	movs	r3, r1
 80018a2:	0010      	movs	r0, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f7fe fcb5 	bl	8000220 <__aeabi_uldivmod>
 80018b6:	0002      	movs	r2, r0
 80018b8:	000b      	movs	r3, r1
 80018ba:	0013      	movs	r3, r2
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
 80018be:	e037      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2210      	movs	r2, #16
 80018c6:	4013      	ands	r3, r2
 80018c8:	d01a      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4a23      	ldr	r2, [pc, #140]	; (8001960 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018d4:	2300      	movs	r3, #0
 80018d6:	68b8      	ldr	r0, [r7, #8]
 80018d8:	68f9      	ldr	r1, [r7, #12]
 80018da:	f7fe fcc1 	bl	8000260 <__aeabi_lmul>
 80018de:	0002      	movs	r2, r0
 80018e0:	000b      	movs	r3, r1
 80018e2:	0010      	movs	r0, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f7fe fc95 	bl	8000220 <__aeabi_uldivmod>
 80018f6:	0002      	movs	r2, r0
 80018f8:	000b      	movs	r3, r1
 80018fa:	0013      	movs	r3, r2
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
 80018fe:	e017      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	0018      	movs	r0, r3
 8001904:	2300      	movs	r3, #0
 8001906:	0019      	movs	r1, r3
 8001908:	4a16      	ldr	r2, [pc, #88]	; (8001964 <HAL_RCC_GetSysClockFreq+0x140>)
 800190a:	2300      	movs	r3, #0
 800190c:	f7fe fca8 	bl	8000260 <__aeabi_lmul>
 8001910:	0002      	movs	r2, r0
 8001912:	000b      	movs	r3, r1
 8001914:	0010      	movs	r0, r2
 8001916:	0019      	movs	r1, r3
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	001c      	movs	r4, r3
 800191c:	2300      	movs	r3, #0
 800191e:	001d      	movs	r5, r3
 8001920:	0022      	movs	r2, r4
 8001922:	002b      	movs	r3, r5
 8001924:	f7fe fc7c 	bl	8000220 <__aeabi_uldivmod>
 8001928:	0002      	movs	r2, r0
 800192a:	000b      	movs	r3, r1
 800192c:	0013      	movs	r3, r2
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001934:	e00d      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_GetSysClockFreq+0x138>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0b5b      	lsrs	r3, r3, #13
 800193c:	2207      	movs	r2, #7
 800193e:	4013      	ands	r3, r2
 8001940:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	3301      	adds	r3, #1
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	0212      	lsls	r2, r2, #8
 800194a:	409a      	lsls	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001950:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b00e      	add	sp, #56	; 0x38
 800195a:	bdb0      	pop	{r4, r5, r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	003d0900 	.word	0x003d0900
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200
 800196c:	08004828 	.word	0x08004828

08001970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <HAL_RCC_GetHCLKFreq+0x10>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff2 	bl	8001970 <HAL_RCC_GetHCLKFreq>
 800198c:	0001      	movs	r1, r0
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	2207      	movs	r2, #7
 8001996:	4013      	ands	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	40d9      	lsrs	r1, r3
 800199e:	000b      	movs	r3, r1
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08004820 	.word	0x08004820

080019b0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	220f      	movs	r2, #15
 80019be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2203      	movs	r2, #3
 80019c6:	401a      	ands	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	22f0      	movs	r2, #240	; 0xf0
 80019d2:	401a      	ands	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	23e0      	movs	r3, #224	; 0xe0
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	401a      	ands	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	23e0      	movs	r3, #224	; 0xe0
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	401a      	ands	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_GetClockConfig+0x60>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	401a      	ands	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	601a      	str	r2, [r3, #0]
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b002      	add	sp, #8
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40022000 	.word	0x40022000

08001a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e032      	b.n	8001a8c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2239      	movs	r2, #57	; 0x39
 8001a2a:	5c9b      	ldrb	r3, [r3, r2]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2238      	movs	r2, #56	; 0x38
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 f829 	bl	8001a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2239      	movs	r2, #57	; 0x39
 8001a46:	2102      	movs	r1, #2
 8001a48:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3304      	adds	r3, #4
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f000 f979 	bl	8001d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	223e      	movs	r2, #62	; 0x3e
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	223a      	movs	r2, #58	; 0x3a
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	223b      	movs	r2, #59	; 0x3b
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	223c      	movs	r2, #60	; 0x3c
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	223d      	movs	r2, #61	; 0x3d
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2239      	movs	r2, #57	; 0x39
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2239      	movs	r2, #57	; 0x39
 8001ab0:	5c9b      	ldrb	r3, [r3, r2]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d001      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e036      	b.n	8001b2a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2239      	movs	r2, #57	; 0x39
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	05db      	lsls	r3, r3, #23
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d009      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x50>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <HAL_TIM_Base_Start_IT+0x90>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x50>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <HAL_TIM_Base_Start_IT+0x94>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d111      	bne.n	8001b18 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2207      	movs	r2, #7
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d010      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2101      	movs	r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b16:	e007      	b.n	8001b28 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2101      	movs	r1, #1
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	40010800 	.word	0x40010800
 8001b38:	40011400 	.word	0x40011400

08001b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d124      	bne.n	8001b9c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d11d      	bne.n	8001b9c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2203      	movs	r2, #3
 8001b66:	4252      	negs	r2, r2
 8001b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2203      	movs	r2, #3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d004      	beq.n	8001b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 f8cc 	bl	8001d1c <HAL_TIM_IC_CaptureCallback>
 8001b84:	e007      	b.n	8001b96 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 f8bf 	bl	8001d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 f8cb 	bl	8001d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d125      	bne.n	8001bf6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d11e      	bne.n	8001bf6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2205      	movs	r2, #5
 8001bbe:	4252      	negs	r2, r2
 8001bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	23c0      	movs	r3, #192	; 0xc0
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f000 f89f 	bl	8001d1c <HAL_TIM_IC_CaptureCallback>
 8001bde:	e007      	b.n	8001bf0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 f892 	bl	8001d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 f89e 	bl	8001d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d124      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d11d      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2209      	movs	r2, #9
 8001c18:	4252      	negs	r2, r2
 8001c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 f873 	bl	8001d1c <HAL_TIM_IC_CaptureCallback>
 8001c36:	e007      	b.n	8001c48 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 f866 	bl	8001d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 f872 	bl	8001d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2210      	movs	r2, #16
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d125      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2210      	movs	r2, #16
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d11e      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2211      	movs	r2, #17
 8001c70:	4252      	negs	r2, r2
 8001c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2208      	movs	r2, #8
 8001c78:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69da      	ldr	r2, [r3, #28]
 8001c80:	23c0      	movs	r3, #192	; 0xc0
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4013      	ands	r3, r2
 8001c86:	d004      	beq.n	8001c92 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 f846 	bl	8001d1c <HAL_TIM_IC_CaptureCallback>
 8001c90:	e007      	b.n	8001ca2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 f839 	bl	8001d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f000 f845 	bl	8001d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d10f      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d108      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	4252      	negs	r2, r2
 8001ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7fe fd0f 	bl	80006f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	d10f      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d108      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2241      	movs	r2, #65	; 0x41
 8001cf8:	4252      	negs	r2, r2
 8001cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 f81c 	bl	8001d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	05db      	lsls	r3, r3, #23
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d007      	beq.n	8001d76 <TIM_Base_SetConfig+0x2a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <TIM_Base_SetConfig+0x9c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d003      	beq.n	8001d76 <TIM_Base_SetConfig+0x2a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <TIM_Base_SetConfig+0xa0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d108      	bne.n	8001d88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2270      	movs	r2, #112	; 0x70
 8001d7a:	4393      	bics	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	05db      	lsls	r3, r3, #23
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d007      	beq.n	8001da2 <TIM_Base_SetConfig+0x56>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <TIM_Base_SetConfig+0x9c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d003      	beq.n	8001da2 <TIM_Base_SetConfig+0x56>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <TIM_Base_SetConfig+0xa0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d108      	bne.n	8001db4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <TIM_Base_SetConfig+0xa4>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	4393      	bics	r3, r2
 8001dba:	001a      	movs	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	615a      	str	r2, [r3, #20]
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40010800 	.word	0x40010800
 8001dec:	40011400 	.word	0x40011400
 8001df0:	fffffcff 	.word	0xfffffcff

08001df4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e06:	f3ef 8305 	mrs	r3, IPSR
 8001e0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e12:	f3ef 8310 	mrs	r3, PRIMASK
 8001e16:	607b      	str	r3, [r7, #4]
  return(result);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <osKernelInitialize+0x2e>
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <osKernelInitialize+0x54>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d103      	bne.n	8001e2e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8001e26:	2306      	movs	r3, #6
 8001e28:	425b      	negs	r3, r3
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e00c      	b.n	8001e48 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <osKernelInitialize+0x54>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <osKernelInitialize+0x54>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e002      	b.n	8001e48 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8001e42:	2301      	movs	r3, #1
 8001e44:	425b      	negs	r3, r3
 8001e46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e48:	68fb      	ldr	r3, [r7, #12]
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	200000cc 	.word	0x200000cc

08001e58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e5e:	f3ef 8305 	mrs	r3, IPSR
 8001e62:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e6e:	607b      	str	r3, [r7, #4]
  return(result);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <osKernelStart+0x2e>
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <osKernelStart+0x5c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d103      	bne.n	8001e86 <osKernelStart+0x2e>
    stat = osErrorISR;
 8001e7e:	2306      	movs	r3, #6
 8001e80:	425b      	negs	r3, r3
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e010      	b.n	8001ea8 <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <osKernelStart+0x5c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d109      	bne.n	8001ea2 <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e8e:	f7ff ffb1 	bl	8001df4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <osKernelStart+0x5c>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e98:	f001 f83c 	bl	8002f14 <vTaskStartScheduler>
      stat = osOK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e002      	b.n	8001ea8 <osKernelStart+0x50>
    } else {
      stat = osError;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	200000cc 	.word	0x200000cc

08001eb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b090      	sub	sp, #64	; 0x40
 8001ebc:	af04      	add	r7, sp, #16
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ec8:	f3ef 8305 	mrs	r3, IPSR
 8001ecc:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ece:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d000      	beq.n	8001ed6 <osThreadNew+0x1e>
 8001ed4:	e08c      	b.n	8001ff0 <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eda:	61bb      	str	r3, [r7, #24]
  return(result);
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d004      	beq.n	8001eec <osThreadNew+0x34>
 8001ee2:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <osThreadNew+0x144>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d100      	bne.n	8001eec <osThreadNew+0x34>
 8001eea:	e081      	b.n	8001ff0 <osThreadNew+0x138>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d100      	bne.n	8001ef4 <osThreadNew+0x3c>
 8001ef2:	e07d      	b.n	8001ff0 <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001ef8:	2318      	movs	r3, #24
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	425b      	negs	r3, r3
 8001f04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d044      	beq.n	8001f96 <osThreadNew+0xde>
      if (attr->name != NULL) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <osThreadNew+0x62>
        name = attr->name;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <osThreadNew+0x86>
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	2b38      	cmp	r3, #56	; 0x38
 8001f32:	d804      	bhi.n	8001f3e <osThreadNew+0x86>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d001      	beq.n	8001f42 <osThreadNew+0x8a>
        return (NULL);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e057      	b.n	8001ff2 <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00e      	beq.n	8001f78 <osThreadNew+0xc0>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2ba7      	cmp	r3, #167	; 0xa7
 8001f60:	d90a      	bls.n	8001f78 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <osThreadNew+0xc0>
        mem = 1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	623b      	str	r3, [r7, #32]
 8001f76:	e010      	b.n	8001f9a <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10c      	bne.n	8001f9a <osThreadNew+0xe2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d108      	bne.n	8001f9a <osThreadNew+0xe2>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d104      	bne.n	8001f9a <osThreadNew+0xe2>
          mem = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	e001      	b.n	8001f9a <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d112      	bne.n	8001fc6 <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fa8:	68bd      	ldr	r5, [r7, #8]
 8001faa:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	9201      	str	r2, [sp, #4]
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	002b      	movs	r3, r5
 8001fba:	0022      	movs	r2, r4
 8001fbc:	f000 fdeb 	bl	8002b96 <xTaskCreateStatic>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e014      	b.n	8001ff0 <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d111      	bne.n	8001ff0 <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68bc      	ldr	r4, [r7, #8]
 8001fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	2314      	movs	r3, #20
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	0023      	movs	r3, r4
 8001fe2:	f000 fe1c 	bl	8002c1e <xTaskCreate>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d001      	beq.n	8001ff0 <osThreadNew+0x138>
          hTask = NULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001ff0:	697b      	ldr	r3, [r7, #20]
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b00c      	add	sp, #48	; 0x30
 8001ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	200000cc 	.word	0x200000cc

08002000 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002008:	f3ef 8305 	mrs	r3, IPSR
 800200c:	613b      	str	r3, [r7, #16]
  return(result);
 800200e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002014:	f3ef 8310 	mrs	r3, PRIMASK
 8002018:	60fb      	str	r3, [r7, #12]
  return(result);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <osDelay+0x30>
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <osDelay+0x4c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d103      	bne.n	8002030 <osDelay+0x30>
    stat = osErrorISR;
 8002028:	2306      	movs	r3, #6
 800202a:	425b      	negs	r3, r3
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e008      	b.n	8002042 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <osDelay+0x42>
      vTaskDelay(ticks);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f000 ff43 	bl	8002ec8 <vTaskDelay>
    }
  }

  return (stat);
 8002042:	697b      	ldr	r3, [r7, #20]
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b006      	add	sp, #24
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200000cc 	.word	0x200000cc

08002050 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	0018      	movs	r0, r3
 800205c:	f001 ffa4 	bl	8003fa8 <pvTimerGetTimerID>
 8002060:	0003      	movs	r3, r0
 8002062:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <TimerCallback+0x26>
    callb->func (callb->arg);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0018      	movs	r0, r3
 8002074:	4790      	blx	r2
  }
}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b08e      	sub	sp, #56	; 0x38
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	230b      	movs	r3, #11
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	1c0a      	adds	r2, r1, #0
 8002092:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002098:	f3ef 8305 	mrs	r3, IPSR
 800209c:	61bb      	str	r3, [r7, #24]
  return(result);
 800209e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d000      	beq.n	80020a6 <osTimerNew+0x26>
 80020a4:	e06b      	b.n	800217e <osTimerNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a6:	f3ef 8310 	mrs	r3, PRIMASK
 80020aa:	617b      	str	r3, [r7, #20]
  return(result);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <osTimerNew+0x3a>
 80020b2:	4b35      	ldr	r3, [pc, #212]	; (8002188 <osTimerNew+0x108>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d061      	beq.n	800217e <osTimerNew+0xfe>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d05e      	beq.n	800217e <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80020c0:	2008      	movs	r0, #8
 80020c2:	f002 f8bd 	bl	8004240 <pvPortMalloc>
 80020c6:	0003      	movs	r3, r0
 80020c8:	61fb      	str	r3, [r7, #28]

    if (callb != NULL) {
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d056      	beq.n	800217e <osTimerNew+0xfe>
      callb->func = func;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80020dc:	230b      	movs	r3, #11
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <osTimerNew+0x6c>
        reload = pdFALSE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ea:	e001      	b.n	80020f0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	425b      	negs	r3, r3
 80020f4:	623b      	str	r3, [r7, #32]
      name = NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01c      	beq.n	800213a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <osTimerNew+0x8e>
          name = attr->name;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <osTimerNew+0xa4>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b2b      	cmp	r3, #43	; 0x2b
 800211c:	d902      	bls.n	8002124 <osTimerNew+0xa4>
          mem = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	e00c      	b.n	800213e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d108      	bne.n	800213e <osTimerNew+0xbe>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <osTimerNew+0xbe>
            mem = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	e001      	b.n	800213e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10e      	bne.n	8002162 <osTimerNew+0xe2>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	69f9      	ldr	r1, [r7, #28]
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <osTimerNew+0x10c>)
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	000b      	movs	r3, r1
 8002156:	2101      	movs	r1, #1
 8002158:	f001 fbf3 	bl	8003942 <xTimerCreateStatic>
 800215c:	0003      	movs	r3, r0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002160:	e00d      	b.n	800217e <osTimerNew+0xfe>
      }
      else {
        if (mem == 0) {
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10a      	bne.n	800217e <osTimerNew+0xfe>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002168:	69f9      	ldr	r1, [r7, #28]
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <osTimerNew+0x10c>)
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	000b      	movs	r3, r1
 8002174:	2101      	movs	r1, #1
 8002176:	f001 fbc1 	bl	80038fc <xTimerCreate>
 800217a:	0003      	movs	r3, r0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b00c      	add	sp, #48	; 0x30
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200000cc 	.word	0x200000cc
 800218c:	08002051 	.word	0x08002051

08002190 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <vApplicationGetIdleTaskMemory+0x28>)
 80021a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a05      	ldr	r2, [pc, #20]	; (80021bc <vApplicationGetIdleTaskMemory+0x2c>)
 80021a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b004      	add	sp, #16
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	200000d0 	.word	0x200000d0
 80021bc:	20000178 	.word	0x20000178

080021c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a06      	ldr	r2, [pc, #24]	; (80021e8 <vApplicationGetTimerTaskMemory+0x28>)
 80021d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4a05      	ldr	r2, [pc, #20]	; (80021ec <vApplicationGetTimerTaskMemory+0x2c>)
 80021d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2280      	movs	r2, #128	; 0x80
 80021dc:	0052      	lsls	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b004      	add	sp, #16
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000378 	.word	0x20000378
 80021ec:	20000420 	.word	0x20000420

080021f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3308      	adds	r3, #8
 80021fc:	001a      	movs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	4252      	negs	r2, r2
 8002208:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3308      	adds	r3, #8
 800220e:	001a      	movs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3308      	adds	r3, #8
 8002218:	001a      	movs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}

08002242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bd80      	pop	{r7, pc}

08002286 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3301      	adds	r3, #1
 800229a:	d103      	bne.n	80022a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e00c      	b.n	80022be <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3308      	adds	r3, #8
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e002      	b.n	80022b2 <vListInsert+0x2c>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d2f6      	bcs.n	80022ac <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b004      	add	sp, #16
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6892      	ldr	r2, [r2, #8]
 8002308:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6852      	ldr	r2, [r2, #4]
 8002312:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	429a      	cmp	r2, r3
 800231c:	d103      	bne.n	8002326 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1e5a      	subs	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}

08002342 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <xQueueGenericReset+0x18>
 8002356:	b672      	cpsid	i
 8002358:	e7fe      	b.n	8002358 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800235a:	f001 fed9 	bl	8004110 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	434b      	muls	r3, r1
 800236c:	18d2      	adds	r2, r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	1e59      	subs	r1, r3, #1
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	434b      	muls	r3, r1
 8002390:	18d2      	adds	r2, r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2244      	movs	r2, #68	; 0x44
 800239a:	21ff      	movs	r1, #255	; 0xff
 800239c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2245      	movs	r2, #69	; 0x45
 80023a2:	21ff      	movs	r1, #255	; 0xff
 80023a4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10d      	bne.n	80023c8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3310      	adds	r3, #16
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 fffd 	bl	80033b8 <xTaskRemoveFromEventList>
 80023be:	1e03      	subs	r3, r0, #0
 80023c0:	d00c      	beq.n	80023dc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80023c2:	f001 fe95 	bl	80040f0 <vPortYield>
 80023c6:	e009      	b.n	80023dc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3310      	adds	r3, #16
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff ff0f 	bl	80021f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3324      	adds	r3, #36	; 0x24
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff ff0a 	bl	80021f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023dc:	f001 feaa 	bl	8004134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}

080023ea <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023ea:	b590      	push	{r4, r7, lr}
 80023ec:	b089      	sub	sp, #36	; 0x24
 80023ee:	af02      	add	r7, sp, #8
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <xQueueGenericCreateStatic+0x18>
 80023fe:	b672      	cpsid	i
 8002400:	e7fe      	b.n	8002400 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <xQueueGenericCreateStatic+0x22>
 8002408:	b672      	cpsid	i
 800240a:	e7fe      	b.n	800240a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <xQueueGenericCreateStatic+0x2e>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <xQueueGenericCreateStatic+0x32>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <xQueueGenericCreateStatic+0x34>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <xQueueGenericCreateStatic+0x3c>
 8002422:	b672      	cpsid	i
 8002424:	e7fe      	b.n	8002424 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <xQueueGenericCreateStatic+0x48>
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <xQueueGenericCreateStatic+0x4c>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <xQueueGenericCreateStatic+0x4e>
 8002436:	2300      	movs	r3, #0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <xQueueGenericCreateStatic+0x56>
 800243c:	b672      	cpsid	i
 800243e:	e7fe      	b.n	800243e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002440:	2350      	movs	r3, #80	; 0x50
 8002442:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b50      	cmp	r3, #80	; 0x50
 8002448:	d001      	beq.n	800244e <xQueueGenericCreateStatic+0x64>
 800244a:	b672      	cpsid	i
 800244c:	e7fe      	b.n	800244c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800244e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00e      	beq.n	8002478 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2246      	movs	r2, #70	; 0x46
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002462:	2328      	movs	r3, #40	; 0x28
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	781c      	ldrb	r4, [r3, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	0023      	movs	r3, r4
 8002474:	f000 f805 	bl	8002482 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002478:	697b      	ldr	r3, [r7, #20]
	}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b007      	add	sp, #28
 8002480:	bd90      	pop	{r4, r7, pc}

08002482 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	001a      	movs	r2, r3
 8002490:	1cfb      	adds	r3, r7, #3
 8002492:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e002      	b.n	80024a8 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2101      	movs	r1, #1
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7ff ff42 	bl	8002342 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	1cfa      	adds	r2, r7, #3
 80024c2:	214c      	movs	r1, #76	; 0x4c
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b004      	add	sp, #16
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <xQueueGenericSend+0x20>
 80024ec:	b672      	cpsid	i
 80024ee:	e7fe      	b.n	80024ee <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d103      	bne.n	80024fe <xQueueGenericSend+0x2e>
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <xQueueGenericSend+0x32>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueGenericSend+0x34>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <xQueueGenericSend+0x3c>
 8002508:	b672      	cpsid	i
 800250a:	e7fe      	b.n	800250a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d103      	bne.n	800251a <xQueueGenericSend+0x4a>
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <xQueueGenericSend+0x4e>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <xQueueGenericSend+0x50>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <xQueueGenericSend+0x58>
 8002524:	b672      	cpsid	i
 8002526:	e7fe      	b.n	8002526 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002528:	f001 f8de 	bl	80036e8 <xTaskGetSchedulerState>
 800252c:	1e03      	subs	r3, r0, #0
 800252e:	d102      	bne.n	8002536 <xQueueGenericSend+0x66>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <xQueueGenericSend+0x6a>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <xQueueGenericSend+0x6c>
 800253a:	2300      	movs	r3, #0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <xQueueGenericSend+0x74>
 8002540:	b672      	cpsid	i
 8002542:	e7fe      	b.n	8002542 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002544:	f001 fde4 	bl	8004110 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	429a      	cmp	r2, r3
 8002552:	d302      	bcc.n	800255a <xQueueGenericSend+0x8a>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d11e      	bne.n	8002598 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 f99f 	bl	80028a4 <prvCopyDataToQueue>
 8002566:	0003      	movs	r3, r0
 8002568:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	3324      	adds	r3, #36	; 0x24
 8002576:	0018      	movs	r0, r3
 8002578:	f000 ff1e 	bl	80033b8 <xTaskRemoveFromEventList>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d007      	beq.n	8002590 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002580:	f001 fdb6 	bl	80040f0 <vPortYield>
 8002584:	e004      	b.n	8002590 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800258c:	f001 fdb0 	bl	80040f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002590:	f001 fdd0 	bl	8004134 <vPortExitCritical>
				return pdPASS;
 8002594:	2301      	movs	r3, #1
 8002596:	e05b      	b.n	8002650 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800259e:	f001 fdc9 	bl	8004134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e054      	b.n	8002650 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025ac:	2314      	movs	r3, #20
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 ff5d 	bl	8003470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025ba:	f001 fdbb 	bl	8004134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025be:	f000 fd07 	bl	8002fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025c2:	f001 fda5 	bl	8004110 <vPortEnterCritical>
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2244      	movs	r2, #68	; 0x44
 80025ca:	5c9b      	ldrb	r3, [r3, r2]
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	d103      	bne.n	80025da <xQueueGenericSend+0x10a>
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	2244      	movs	r2, #68	; 0x44
 80025d6:	2100      	movs	r1, #0
 80025d8:	5499      	strb	r1, [r3, r2]
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	2245      	movs	r2, #69	; 0x45
 80025de:	5c9b      	ldrb	r3, [r3, r2]
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	d103      	bne.n	80025ee <xQueueGenericSend+0x11e>
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	2245      	movs	r2, #69	; 0x45
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]
 80025ee:	f001 fda1 	bl	8004134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f2:	1d3a      	adds	r2, r7, #4
 80025f4:	2314      	movs	r3, #20
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	0011      	movs	r1, r2
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 ff4c 	bl	8003498 <xTaskCheckForTimeOut>
 8002600:	1e03      	subs	r3, r0, #0
 8002602:	d11e      	bne.n	8002642 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	0018      	movs	r0, r3
 8002608:	f000 fa51 	bl	8002aae <prvIsQueueFull>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d011      	beq.n	8002634 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	3310      	adds	r3, #16
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	0011      	movs	r1, r2
 8002618:	0018      	movs	r0, r3
 800261a:	f000 fe89 	bl	8003330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f9d0 	bl	80029c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002626:	f000 fcdf 	bl	8002fe8 <xTaskResumeAll>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d18a      	bne.n	8002544 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800262e:	f001 fd5f 	bl	80040f0 <vPortYield>
 8002632:	e787      	b.n	8002544 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	0018      	movs	r0, r3
 8002638:	f000 f9c5 	bl	80029c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800263c:	f000 fcd4 	bl	8002fe8 <xTaskResumeAll>
 8002640:	e780      	b.n	8002544 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 f9be 	bl	80029c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800264a:	f000 fccd 	bl	8002fe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800264e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b00a      	add	sp, #40	; 0x28
 8002656:	bd80      	pop	{r7, pc}

08002658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <xQueueGenericSendFromISR+0x1c>
 8002670:	b672      	cpsid	i
 8002672:	e7fe      	b.n	8002672 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <xQueueGenericSendFromISR+0x2a>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <xQueueGenericSendFromISR+0x2e>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericSendFromISR+0x30>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <xQueueGenericSendFromISR+0x38>
 800268c:	b672      	cpsid	i
 800268e:	e7fe      	b.n	800268e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d103      	bne.n	800269e <xQueueGenericSendFromISR+0x46>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <xQueueGenericSendFromISR+0x4a>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <xQueueGenericSendFromISR+0x4c>
 80026a2:	2300      	movs	r3, #0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <xQueueGenericSendFromISR+0x54>
 80026a8:	b672      	cpsid	i
 80026aa:	e7fe      	b.n	80026aa <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026ac:	f001 fd5a 	bl	8004164 <ulSetInterruptMaskFromISR>
 80026b0:	0003      	movs	r3, r0
 80026b2:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	429a      	cmp	r2, r3
 80026be:	d302      	bcc.n	80026c6 <xQueueGenericSendFromISR+0x6e>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d12e      	bne.n	8002724 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026c6:	2413      	movs	r4, #19
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	2145      	movs	r1, #69	; 0x45
 80026ce:	5c52      	ldrb	r2, [r2, r1]
 80026d0:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f8e3 	bl	80028a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	d111      	bne.n	800270c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d016      	beq.n	800271e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	3324      	adds	r3, #36	; 0x24
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 fe5f 	bl	80033b8 <xTaskRemoveFromEventList>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d00f      	beq.n	800271e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00c      	beq.n	800271e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e008      	b.n	800271e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800270c:	2313      	movs	r3, #19
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	b259      	sxtb	r1, r3
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2245      	movs	r2, #69	; 0x45
 800271c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800271e:	2301      	movs	r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
		{
 8002722:	e001      	b.n	8002728 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	0018      	movs	r0, r3
 800272c:	f001 fd20 	bl	8004170 <vClearInterruptMaskFromISR>

	return xReturn;
 8002730:	69fb      	ldr	r3, [r7, #28]
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b009      	add	sp, #36	; 0x24
 8002738:	bd90      	pop	{r4, r7, pc}

0800273a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b08a      	sub	sp, #40	; 0x28
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <xQueueReceive+0x1e>
 8002754:	b672      	cpsid	i
 8002756:	e7fe      	b.n	8002756 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <xQueueReceive+0x2c>
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <xQueueReceive+0x30>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <xQueueReceive+0x32>
 800276a:	2300      	movs	r3, #0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <xQueueReceive+0x3a>
 8002770:	b672      	cpsid	i
 8002772:	e7fe      	b.n	8002772 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002774:	f000 ffb8 	bl	80036e8 <xTaskGetSchedulerState>
 8002778:	1e03      	subs	r3, r0, #0
 800277a:	d102      	bne.n	8002782 <xQueueReceive+0x48>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <xQueueReceive+0x4c>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <xQueueReceive+0x4e>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <xQueueReceive+0x56>
 800278c:	b672      	cpsid	i
 800278e:	e7fe      	b.n	800278e <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002790:	f001 fcbe 	bl	8004110 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01a      	beq.n	80027d6 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	0011      	movs	r1, r2
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 f8e7 	bl	800297a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	1e5a      	subs	r2, r3, #1
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	3310      	adds	r3, #16
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 fdf9 	bl	80033b8 <xTaskRemoveFromEventList>
 80027c6:	1e03      	subs	r3, r0, #0
 80027c8:	d001      	beq.n	80027ce <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027ca:	f001 fc91 	bl	80040f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027ce:	f001 fcb1 	bl	8004134 <vPortExitCritical>
				return pdPASS;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e062      	b.n	800289c <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d103      	bne.n	80027e4 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027dc:	f001 fcaa 	bl	8004134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e05b      	b.n	800289c <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027ea:	2314      	movs	r3, #20
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fe3e 	bl	8003470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027f8:	f001 fc9c 	bl	8004134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027fc:	f000 fbe8 	bl	8002fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002800:	f001 fc86 	bl	8004110 <vPortEnterCritical>
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	2244      	movs	r2, #68	; 0x44
 8002808:	5c9b      	ldrb	r3, [r3, r2]
 800280a:	b25b      	sxtb	r3, r3
 800280c:	3301      	adds	r3, #1
 800280e:	d103      	bne.n	8002818 <xQueueReceive+0xde>
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2244      	movs	r2, #68	; 0x44
 8002814:	2100      	movs	r1, #0
 8002816:	5499      	strb	r1, [r3, r2]
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2245      	movs	r2, #69	; 0x45
 800281c:	5c9b      	ldrb	r3, [r3, r2]
 800281e:	b25b      	sxtb	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	d103      	bne.n	800282c <xQueueReceive+0xf2>
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	2245      	movs	r2, #69	; 0x45
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]
 800282c:	f001 fc82 	bl	8004134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002830:	1d3a      	adds	r2, r7, #4
 8002832:	2314      	movs	r3, #20
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f000 fe2d 	bl	8003498 <xTaskCheckForTimeOut>
 800283e:	1e03      	subs	r3, r0, #0
 8002840:	d11e      	bne.n	8002880 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	0018      	movs	r0, r3
 8002846:	f000 f91c 	bl	8002a82 <prvIsQueueEmpty>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d011      	beq.n	8002872 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	3324      	adds	r3, #36	; 0x24
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	0011      	movs	r1, r2
 8002856:	0018      	movs	r0, r3
 8002858:	f000 fd6a 	bl	8003330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 f8b1 	bl	80029c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002864:	f000 fbc0 	bl	8002fe8 <xTaskResumeAll>
 8002868:	1e03      	subs	r3, r0, #0
 800286a:	d191      	bne.n	8002790 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800286c:	f001 fc40 	bl	80040f0 <vPortYield>
 8002870:	e78e      	b.n	8002790 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	0018      	movs	r0, r3
 8002876:	f000 f8a6 	bl	80029c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800287a:	f000 fbb5 	bl	8002fe8 <xTaskResumeAll>
 800287e:	e787      	b.n	8002790 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	0018      	movs	r0, r3
 8002884:	f000 f89f 	bl	80029c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002888:	f000 fbae 	bl	8002fe8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	0018      	movs	r0, r3
 8002890:	f000 f8f7 	bl	8002a82 <prvIsQueueEmpty>
 8002894:	1e03      	subs	r3, r0, #0
 8002896:	d100      	bne.n	800289a <xQueueReceive+0x160>
 8002898:	e77a      	b.n	8002790 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800289a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b00a      	add	sp, #40	; 0x28
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10e      	bne.n	80028e0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d14e      	bne.n	8002968 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 ff26 	bl	8003720 <xTaskPriorityDisinherit>
 80028d4:	0003      	movs	r3, r0
 80028d6:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	e043      	b.n	8002968 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d119      	bne.n	800291a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6858      	ldr	r0, [r3, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	0019      	movs	r1, r3
 80028f2:	f001 fed7 	bl	80046a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	18d2      	adds	r2, r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	429a      	cmp	r2, r3
 800290e:	d32b      	bcc.n	8002968 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	e026      	b.n	8002968 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68d8      	ldr	r0, [r3, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0019      	movs	r1, r3
 8002926:	f001 febd 	bl	80046a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	425b      	negs	r3, r3
 8002934:	18d2      	adds	r2, r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d207      	bcs.n	8002956 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	425b      	negs	r3, r3
 8002950:	18d2      	adds	r2, r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d105      	bne.n	8002968 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	3b01      	subs	r3, #1
 8002966:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002970:	697b      	ldr	r3, [r7, #20]
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b006      	add	sp, #24
 8002978:	bd80      	pop	{r7, pc}

0800297a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d018      	beq.n	80029be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	18d2      	adds	r2, r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d303      	bcc.n	80029ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68d9      	ldr	r1, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f001 fe73 	bl	80046a4 <memcpy>
	}
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029ce:	f001 fb9f 	bl	8004110 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029d2:	230f      	movs	r3, #15
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	2145      	movs	r1, #69	; 0x45
 80029da:	5c52      	ldrb	r2, [r2, r1]
 80029dc:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029de:	e013      	b.n	8002a08 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d016      	beq.n	8002a16 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3324      	adds	r3, #36	; 0x24
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 fce3 	bl	80033b8 <xTaskRemoveFromEventList>
 80029f2:	1e03      	subs	r3, r0, #0
 80029f4:	d001      	beq.n	80029fa <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029f6:	f000 fd9f 	bl	8003538 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029fa:	210f      	movs	r1, #15
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a08:	230f      	movs	r3, #15
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	dce5      	bgt.n	80029e0 <prvUnlockQueue+0x1a>
 8002a14:	e000      	b.n	8002a18 <prvUnlockQueue+0x52>
					break;
 8002a16:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2245      	movs	r2, #69	; 0x45
 8002a1c:	21ff      	movs	r1, #255	; 0xff
 8002a1e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002a20:	f001 fb88 	bl	8004134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a24:	f001 fb74 	bl	8004110 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a28:	230e      	movs	r3, #14
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	2144      	movs	r1, #68	; 0x44
 8002a30:	5c52      	ldrb	r2, [r2, r1]
 8002a32:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a34:	e013      	b.n	8002a5e <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3310      	adds	r3, #16
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fcb8 	bl	80033b8 <xTaskRemoveFromEventList>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d001      	beq.n	8002a50 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002a4c:	f000 fd74 	bl	8003538 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a50:	210e      	movs	r1, #14
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a5e:	230e      	movs	r3, #14
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	dce5      	bgt.n	8002a36 <prvUnlockQueue+0x70>
 8002a6a:	e000      	b.n	8002a6e <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002a6c:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2244      	movs	r2, #68	; 0x44
 8002a72:	21ff      	movs	r1, #255	; 0xff
 8002a74:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002a76:	f001 fb5d 	bl	8004134 <vPortExitCritical>
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b004      	add	sp, #16
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a8a:	f001 fb41 	bl	8004110 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e001      	b.n	8002aa0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aa0:	f001 fb48 	bl	8004134 <vPortExitCritical>

	return xReturn;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}

08002aae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ab6:	f001 fb2b 	bl	8004110 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d102      	bne.n	8002acc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e001      	b.n	8002ad0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ad0:	f001 fb30 	bl	8004134 <vPortExitCritical>

	return xReturn;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b004      	add	sp, #16
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e015      	b.n	8002b1c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <vQueueAddToRegistry+0x4c>)
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	00d2      	lsls	r2, r2, #3
 8002af6:	58d3      	ldr	r3, [r2, r3]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10c      	bne.n	8002b16 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <vQueueAddToRegistry+0x4c>)
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	00d2      	lsls	r2, r2, #3
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <vQueueAddToRegistry+0x4c>)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	18d3      	adds	r3, r2, r3
 8002b0e:	3304      	adds	r3, #4
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b14:	e006      	b.n	8002b24 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b07      	cmp	r3, #7
 8002b20:	d9e6      	bls.n	8002af0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b004      	add	sp, #16
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000820 	.word	0x20000820

08002b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b40:	f001 fae6 	bl	8004110 <vPortEnterCritical>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2244      	movs	r2, #68	; 0x44
 8002b48:	5c9b      	ldrb	r3, [r3, r2]
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	d103      	bne.n	8002b58 <vQueueWaitForMessageRestricted+0x28>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2244      	movs	r2, #68	; 0x44
 8002b54:	2100      	movs	r1, #0
 8002b56:	5499      	strb	r1, [r3, r2]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2245      	movs	r2, #69	; 0x45
 8002b5c:	5c9b      	ldrb	r3, [r3, r2]
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	d103      	bne.n	8002b6c <vQueueWaitForMessageRestricted+0x3c>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2245      	movs	r2, #69	; 0x45
 8002b68:	2100      	movs	r1, #0
 8002b6a:	5499      	strb	r1, [r3, r2]
 8002b6c:	f001 fae2 	bl	8004134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3324      	adds	r3, #36	; 0x24
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 fbf3 	bl	800336c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7ff ff1c 	bl	80029c6 <prvUnlockQueue>
	}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b006      	add	sp, #24
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b96:	b590      	push	{r4, r7, lr}
 8002b98:	b08d      	sub	sp, #52	; 0x34
 8002b9a:	af04      	add	r7, sp, #16
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <xTaskCreateStatic+0x18>
 8002baa:	b672      	cpsid	i
 8002bac:	e7fe      	b.n	8002bac <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <xTaskCreateStatic+0x22>
 8002bb4:	b672      	cpsid	i
 8002bb6:	e7fe      	b.n	8002bb6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bb8:	23a8      	movs	r3, #168	; 0xa8
 8002bba:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2ba8      	cmp	r3, #168	; 0xa8
 8002bc0:	d001      	beq.n	8002bc6 <xTaskCreateStatic+0x30>
 8002bc2:	b672      	cpsid	i
 8002bc4:	e7fe      	b.n	8002bc4 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bc6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d020      	beq.n	8002c10 <xTaskCreateStatic+0x7a>
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01d      	beq.n	8002c10 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	22a5      	movs	r2, #165	; 0xa5
 8002be2:	2102      	movs	r1, #2
 8002be4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002be6:	683c      	ldr	r4, [r7, #0]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9303      	str	r3, [sp, #12]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	9302      	str	r3, [sp, #8]
 8002bf6:	2318      	movs	r3, #24
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	0023      	movs	r3, r4
 8002c02:	f000 f859 	bl	8002cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 f8f5 	bl	8002df8 <prvAddNewTaskToReadyList>
 8002c0e:	e001      	b.n	8002c14 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c14:	69bb      	ldr	r3, [r7, #24]
	}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b009      	add	sp, #36	; 0x24
 8002c1c:	bd90      	pop	{r4, r7, pc}

08002c1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c1e:	b590      	push	{r4, r7, lr}
 8002c20:	b08d      	sub	sp, #52	; 0x34
 8002c22:	af04      	add	r7, sp, #16
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	1dbb      	adds	r3, r7, #6
 8002c2c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c2e:	1dbb      	adds	r3, r7, #6
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	0018      	movs	r0, r3
 8002c36:	f001 fb03 	bl	8004240 <pvPortMalloc>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c44:	20a8      	movs	r0, #168	; 0xa8
 8002c46:	f001 fafb 	bl	8004240 <pvPortMalloc>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
 8002c5a:	e006      	b.n	8002c6a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f001 fb94 	bl	800438c <vPortFree>
 8002c64:	e001      	b.n	8002c6a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01a      	beq.n	8002ca6 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	22a5      	movs	r2, #165	; 0xa5
 8002c74:	2100      	movs	r1, #0
 8002c76:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c78:	1dbb      	adds	r3, r7, #6
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	683c      	ldr	r4, [r7, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9303      	str	r3, [sp, #12]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	0023      	movs	r3, r4
 8002c94:	f000 f810 	bl	8002cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f8ac 	bl	8002df8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	e002      	b.n	8002cac <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	425b      	negs	r3, r3
 8002caa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cac:	69bb      	ldr	r3, [r7, #24]
	}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b009      	add	sp, #36	; 0x24
 8002cb4:	bd90      	pop	{r4, r7, pc}
	...

08002cb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	001a      	movs	r2, r3
 8002cd0:	21a5      	movs	r1, #165	; 0xa5
 8002cd2:	f001 fc5b 	bl	800458c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4942      	ldr	r1, [pc, #264]	; (8002de8 <prvInitialiseNewTask+0x130>)
 8002cde:	468c      	mov	ip, r1
 8002ce0:	4463      	add	r3, ip
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	18d3      	adds	r3, r2, r3
 8002ce6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2207      	movs	r2, #7
 8002cec:	4393      	bics	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	2207      	movs	r2, #7
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d001      	beq.n	8002cfc <prvInitialiseNewTask+0x44>
 8002cf8:	b672      	cpsid	i
 8002cfa:	e7fe      	b.n	8002cfa <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d020      	beq.n	8002d44 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e013      	b.n	8002d30 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	18d3      	adds	r3, r2, r3
 8002d0e:	7818      	ldrb	r0, [r3, #0]
 8002d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d12:	2134      	movs	r1, #52	; 0x34
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	18d3      	adds	r3, r2, r3
 8002d18:	185b      	adds	r3, r3, r1
 8002d1a:	1c02      	adds	r2, r0, #0
 8002d1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	18d3      	adds	r3, r2, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d006      	beq.n	8002d38 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	d9e8      	bls.n	8002d08 <prvInitialiseNewTask+0x50>
 8002d36:	e000      	b.n	8002d3a <prvInitialiseNewTask+0x82>
			{
				break;
 8002d38:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	2243      	movs	r2, #67	; 0x43
 8002d3e:	2100      	movs	r1, #0
 8002d40:	5499      	strb	r1, [r3, r2]
 8002d42:	e003      	b.n	8002d4c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	2234      	movs	r2, #52	; 0x34
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	2b37      	cmp	r3, #55	; 0x37
 8002d50:	d901      	bls.n	8002d56 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d52:	2337      	movs	r3, #55	; 0x37
 8002d54:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	6a3a      	ldr	r2, [r7, #32]
 8002d60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	2200      	movs	r2, #0
 8002d66:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7ff fa5d 	bl	800222c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	3318      	adds	r3, #24
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff fa58 	bl	800222c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2238      	movs	r2, #56	; 0x38
 8002d86:	1ad2      	subs	r2, r2, r3
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	22a0      	movs	r2, #160	; 0xa0
 8002d96:	2100      	movs	r1, #0
 8002d98:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	22a4      	movs	r2, #164	; 0xa4
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	3354      	adds	r3, #84	; 0x54
 8002da6:	224c      	movs	r2, #76	; 0x4c
 8002da8:	2100      	movs	r1, #0
 8002daa:	0018      	movs	r0, r3
 8002dac:	f001 fbee 	bl	800458c <memset>
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <prvInitialiseNewTask+0x134>)
 8002db4:	659a      	str	r2, [r3, #88]	; 0x58
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <prvInitialiseNewTask+0x138>)
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <prvInitialiseNewTask+0x13c>)
 8002dc0:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f001 f905 	bl	8003fd8 <pxPortInitialiseStack>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b006      	add	sp, #24
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	3fffffff 	.word	0x3fffffff
 8002dec:	20001674 	.word	0x20001674
 8002df0:	200016dc 	.word	0x200016dc
 8002df4:	20001744 	.word	0x20001744

08002df8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e00:	f001 f986 	bl	8004110 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e04:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <prvAddNewTaskToReadyList+0xb8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <prvAddNewTaskToReadyList+0xb8>)
 8002e0c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e16:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <prvAddNewTaskToReadyList+0xb8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d110      	bne.n	8002e46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e24:	f000 fba2 	bl	800356c <prvInitialiseTaskLists>
 8002e28:	e00d      	b.n	8002e46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e2a:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <prvAddNewTaskToReadyList+0xc0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d802      	bhi.n	8002e46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e40:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <prvAddNewTaskToReadyList+0xc4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <prvAddNewTaskToReadyList+0xc4>)
 8002e4e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <prvAddNewTaskToReadyList+0xc4>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <prvAddNewTaskToReadyList+0xc8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d903      	bls.n	8002e6c <prvAddNewTaskToReadyList+0x74>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <prvAddNewTaskToReadyList+0xc8>)
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	0013      	movs	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	189b      	adds	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <prvAddNewTaskToReadyList+0xcc>)
 8002e7a:	189a      	adds	r2, r3, r2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	0019      	movs	r1, r3
 8002e82:	0010      	movs	r0, r2
 8002e84:	f7ff f9dd 	bl	8002242 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e88:	f001 f954 	bl	8004134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <prvAddNewTaskToReadyList+0xc0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d201      	bcs.n	8002ea6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ea2:	f001 f925 	bl	80040f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b002      	add	sp, #8
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	20000d34 	.word	0x20000d34
 8002eb4:	20000860 	.word	0x20000860
 8002eb8:	20000d40 	.word	0x20000d40
 8002ebc:	20000d50 	.word	0x20000d50
 8002ec0:	20000d3c 	.word	0x20000d3c
 8002ec4:	20000864 	.word	0x20000864

08002ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d010      	beq.n	8002efc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <vTaskDelay+0x48>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <vTaskDelay+0x1e>
 8002ee2:	b672      	cpsid	i
 8002ee4:	e7fe      	b.n	8002ee4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002ee6:	f000 f873 	bl	8002fd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2100      	movs	r1, #0
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fc72 	bl	80037d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ef4:	f000 f878 	bl	8002fe8 <xTaskResumeAll>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8002f02:	f001 f8f5 	bl	80040f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	20000d5c 	.word	0x20000d5c

08002f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f22:	003a      	movs	r2, r7
 8002f24:	1d39      	adds	r1, r7, #4
 8002f26:	2308      	movs	r3, #8
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff f930 	bl	8002190 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f30:	683c      	ldr	r4, [r7, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	491e      	ldr	r1, [pc, #120]	; (8002fb0 <vTaskStartScheduler+0x9c>)
 8002f38:	481e      	ldr	r0, [pc, #120]	; (8002fb4 <vTaskStartScheduler+0xa0>)
 8002f3a:	9202      	str	r2, [sp, #8]
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2300      	movs	r3, #0
 8002f44:	0022      	movs	r2, r4
 8002f46:	f7ff fe26 	bl	8002b96 <xTaskCreateStatic>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <vTaskStartScheduler+0xa4>)
 8002f4e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <vTaskStartScheduler+0xa4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e001      	b.n	8002f62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d103      	bne.n	8002f70 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8002f68:	f000 fc8a 	bl	8003880 <xTimerCreateTimerTask>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d113      	bne.n	8002f9e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002f76:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <vTaskStartScheduler+0xa8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3354      	adds	r3, #84	; 0x54
 8002f7e:	001a      	movs	r2, r3
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <vTaskStartScheduler+0xac>)
 8002f82:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <vTaskStartScheduler+0xb0>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	4252      	negs	r2, r2
 8002f8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <vTaskStartScheduler+0xb4>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <vTaskStartScheduler+0xb8>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f98:	f001 f886 	bl	80040a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f9c:	e004      	b.n	8002fa8 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <vTaskStartScheduler+0x94>
 8002fa4:	b672      	cpsid	i
 8002fa6:	e7fe      	b.n	8002fa6 <vTaskStartScheduler+0x92>
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b005      	add	sp, #20
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	080047a0 	.word	0x080047a0
 8002fb4:	0800354d 	.word	0x0800354d
 8002fb8:	20000d58 	.word	0x20000d58
 8002fbc:	20000860 	.word	0x20000860
 8002fc0:	2000005c 	.word	0x2000005c
 8002fc4:	20000d54 	.word	0x20000d54
 8002fc8:	20000d40 	.word	0x20000d40
 8002fcc:	20000d38 	.word	0x20000d38

08002fd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <vTaskSuspendAll+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	4b02      	ldr	r3, [pc, #8]	; (8002fe4 <vTaskSuspendAll+0x14>)
 8002fdc:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000d5c 	.word	0x20000d5c

08002fe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ff6:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <xTaskResumeAll+0xf8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <xTaskResumeAll+0x1a>
 8002ffe:	b672      	cpsid	i
 8003000:	e7fe      	b.n	8003000 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003002:	f001 f885 	bl	8004110 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <xTaskResumeAll+0xf8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1e5a      	subs	r2, r3, #1
 800300c:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <xTaskResumeAll+0xf8>)
 800300e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003010:	4b33      	ldr	r3, [pc, #204]	; (80030e0 <xTaskResumeAll+0xf8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d15b      	bne.n	80030d0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003018:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <xTaskResumeAll+0xfc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d057      	beq.n	80030d0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003020:	e02f      	b.n	8003082 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003022:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <xTaskResumeAll+0x100>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3318      	adds	r3, #24
 800302e:	0018      	movs	r0, r3
 8003030:	f7ff f95f 	bl	80022f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3304      	adds	r3, #4
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff f95a 	bl	80022f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <xTaskResumeAll+0x104>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d903      	bls.n	8003052 <xTaskResumeAll+0x6a>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304e:	4b27      	ldr	r3, [pc, #156]	; (80030ec <xTaskResumeAll+0x104>)
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003056:	0013      	movs	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	189b      	adds	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <xTaskResumeAll+0x108>)
 8003060:	189a      	adds	r2, r3, r2
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3304      	adds	r3, #4
 8003066:	0019      	movs	r1, r3
 8003068:	0010      	movs	r0, r2
 800306a:	f7ff f8ea 	bl	8002242 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <xTaskResumeAll+0x10c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800307c:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <xTaskResumeAll+0x110>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <xTaskResumeAll+0x100>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1cb      	bne.n	8003022 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003090:	f000 fb0c 	bl	80036ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <xTaskResumeAll+0x114>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00f      	beq.n	80030c0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030a0:	f000 f83c 	bl	800311c <xTaskIncrementTick>
 80030a4:	1e03      	subs	r3, r0, #0
 80030a6:	d002      	beq.n	80030ae <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80030a8:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <xTaskResumeAll+0x110>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f2      	bne.n	80030a0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <xTaskResumeAll+0x114>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <xTaskResumeAll+0x110>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030cc:	f001 f810 	bl	80040f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030d0:	f001 f830 	bl	8004134 <vPortExitCritical>

	return xAlreadyYielded;
 80030d4:	68bb      	ldr	r3, [r7, #8]
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b004      	add	sp, #16
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	20000d5c 	.word	0x20000d5c
 80030e4:	20000d34 	.word	0x20000d34
 80030e8:	20000cf4 	.word	0x20000cf4
 80030ec:	20000d3c 	.word	0x20000d3c
 80030f0:	20000864 	.word	0x20000864
 80030f4:	20000860 	.word	0x20000860
 80030f8:	20000d48 	.word	0x20000d48
 80030fc:	20000d44 	.word	0x20000d44

08003100 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <xTaskGetTickCount+0x18>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800310c:	687b      	ldr	r3, [r7, #4]
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b002      	add	sp, #8
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	20000d38 	.word	0x20000d38

0800311c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003126:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <xTaskIncrementTick+0x134>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d000      	beq.n	8003130 <xTaskIncrementTick+0x14>
 800312e:	e07e      	b.n	800322e <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003130:	4b48      	ldr	r3, [pc, #288]	; (8003254 <xTaskIncrementTick+0x138>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003138:	4b46      	ldr	r3, [pc, #280]	; (8003254 <xTaskIncrementTick+0x138>)
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d117      	bne.n	8003174 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003144:	4b44      	ldr	r3, [pc, #272]	; (8003258 <xTaskIncrementTick+0x13c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <xTaskIncrementTick+0x36>
 800314e:	b672      	cpsid	i
 8003150:	e7fe      	b.n	8003150 <xTaskIncrementTick+0x34>
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <xTaskIncrementTick+0x13c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <xTaskIncrementTick+0x140>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <xTaskIncrementTick+0x13c>)
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	4b3e      	ldr	r3, [pc, #248]	; (800325c <xTaskIncrementTick+0x140>)
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <xTaskIncrementTick+0x144>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	4b3c      	ldr	r3, [pc, #240]	; (8003260 <xTaskIncrementTick+0x144>)
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f000 fa9c 	bl	80036ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <xTaskIncrementTick+0x148>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	429a      	cmp	r2, r3
 800317c:	d349      	bcc.n	8003212 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800317e:	4b36      	ldr	r3, [pc, #216]	; (8003258 <xTaskIncrementTick+0x13c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <xTaskIncrementTick+0x148>)
 800318a:	2201      	movs	r2, #1
 800318c:	4252      	negs	r2, r2
 800318e:	601a      	str	r2, [r3, #0]
					break;
 8003190:	e03f      	b.n	8003212 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <xTaskIncrementTick+0x13c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d203      	bcs.n	80031b2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031aa:	4b2e      	ldr	r3, [pc, #184]	; (8003264 <xTaskIncrementTick+0x148>)
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031b0:	e02f      	b.n	8003212 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3304      	adds	r3, #4
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff f89b 	bl	80022f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d004      	beq.n	80031ce <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	3318      	adds	r3, #24
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7ff f892 	bl	80022f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d2:	4b25      	ldr	r3, [pc, #148]	; (8003268 <xTaskIncrementTick+0x14c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d903      	bls.n	80031e2 <xTaskIncrementTick+0xc6>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <xTaskIncrementTick+0x14c>)
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e6:	0013      	movs	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	189b      	adds	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a1f      	ldr	r2, [pc, #124]	; (800326c <xTaskIncrementTick+0x150>)
 80031f0:	189a      	adds	r2, r3, r2
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3304      	adds	r3, #4
 80031f6:	0019      	movs	r1, r3
 80031f8:	0010      	movs	r0, r2
 80031fa:	f7ff f822 	bl	8002242 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <xTaskIncrementTick+0x154>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	429a      	cmp	r2, r3
 800320a:	d3b8      	bcc.n	800317e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003210:	e7b5      	b.n	800317e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <xTaskIncrementTick+0x154>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	4914      	ldr	r1, [pc, #80]	; (800326c <xTaskIncrementTick+0x150>)
 800321a:	0013      	movs	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	189b      	adds	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	585b      	ldr	r3, [r3, r1]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d907      	bls.n	8003238 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8003228:	2301      	movs	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	e004      	b.n	8003238 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <xTaskIncrementTick+0x158>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <xTaskIncrementTick+0x158>)
 8003236:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <xTaskIncrementTick+0x15c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8003240:	2301      	movs	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003244:	697b      	ldr	r3, [r7, #20]
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b006      	add	sp, #24
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	20000d5c 	.word	0x20000d5c
 8003254:	20000d38 	.word	0x20000d38
 8003258:	20000cec 	.word	0x20000cec
 800325c:	20000cf0 	.word	0x20000cf0
 8003260:	20000d4c 	.word	0x20000d4c
 8003264:	20000d54 	.word	0x20000d54
 8003268:	20000d3c 	.word	0x20000d3c
 800326c:	20000864 	.word	0x20000864
 8003270:	20000860 	.word	0x20000860
 8003274:	20000d44 	.word	0x20000d44
 8003278:	20000d48 	.word	0x20000d48

0800327c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003282:	4b25      	ldr	r3, [pc, #148]	; (8003318 <vTaskSwitchContext+0x9c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <vTaskSwitchContext+0xa0>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003290:	e03d      	b.n	800330e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <vTaskSwitchContext+0xa0>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <vTaskSwitchContext+0xa4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	e007      	b.n	80032b0 <vTaskSwitchContext+0x34>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <vTaskSwitchContext+0x2e>
 80032a6:	b672      	cpsid	i
 80032a8:	e7fe      	b.n	80032a8 <vTaskSwitchContext+0x2c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	491c      	ldr	r1, [pc, #112]	; (8003324 <vTaskSwitchContext+0xa8>)
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	0013      	movs	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	585b      	ldr	r3, [r3, r1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0ee      	beq.n	80032a0 <vTaskSwitchContext+0x24>
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	0013      	movs	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <vTaskSwitchContext+0xa8>)
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	3308      	adds	r3, #8
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d104      	bne.n	80032f2 <vTaskSwitchContext+0x76>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <vTaskSwitchContext+0xac>)
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <vTaskSwitchContext+0xa4>)
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <vTaskSwitchContext+0xac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3354      	adds	r3, #84	; 0x54
 8003308:	001a      	movs	r2, r3
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <vTaskSwitchContext+0xb0>)
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	20000d5c 	.word	0x20000d5c
 800331c:	20000d48 	.word	0x20000d48
 8003320:	20000d3c 	.word	0x20000d3c
 8003324:	20000864 	.word	0x20000864
 8003328:	20000860 	.word	0x20000860
 800332c:	2000005c 	.word	0x2000005c

08003330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <vTaskPlaceOnEventList+0x14>
 8003340:	b672      	cpsid	i
 8003342:	e7fe      	b.n	8003342 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <vTaskPlaceOnEventList+0x38>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3318      	adds	r3, #24
 800334a:	001a      	movs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	0011      	movs	r1, r2
 8003350:	0018      	movs	r0, r3
 8003352:	f7fe ff98 	bl	8002286 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	0018      	movs	r0, r3
 800335c:	f000 fa3c 	bl	80037d8 <prvAddCurrentTaskToDelayedList>
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000860 	.word	0x20000860

0800336c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <vTaskPlaceOnEventListRestricted+0x16>
 800337e:	b672      	cpsid	i
 8003380:	e7fe      	b.n	8003380 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <vTaskPlaceOnEventListRestricted+0x48>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3318      	adds	r3, #24
 8003388:	001a      	movs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f7fe ff57 	bl	8002242 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800339a:	2301      	movs	r3, #1
 800339c:	425b      	negs	r3, r3
 800339e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	0011      	movs	r1, r2
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 fa16 	bl	80037d8 <prvAddCurrentTaskToDelayedList>
	}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b004      	add	sp, #16
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000860 	.word	0x20000860

080033b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <xTaskRemoveFromEventList+0x1a>
 80033ce:	b672      	cpsid	i
 80033d0:	e7fe      	b.n	80033d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3318      	adds	r3, #24
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fe ff8b 	bl	80022f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <xTaskRemoveFromEventList+0xa0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11d      	bne.n	8003420 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3304      	adds	r3, #4
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fe ff82 	bl	80022f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <xTaskRemoveFromEventList+0xa4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d903      	bls.n	8003402 <xTaskRemoveFromEventList+0x4a>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fe:	4b17      	ldr	r3, [pc, #92]	; (800345c <xTaskRemoveFromEventList+0xa4>)
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	0013      	movs	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	189b      	adds	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <xTaskRemoveFromEventList+0xa8>)
 8003410:	189a      	adds	r2, r3, r2
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3304      	adds	r3, #4
 8003416:	0019      	movs	r1, r3
 8003418:	0010      	movs	r0, r2
 800341a:	f7fe ff12 	bl	8002242 <vListInsertEnd>
 800341e:	e007      	b.n	8003430 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3318      	adds	r3, #24
 8003424:	001a      	movs	r2, r3
 8003426:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <xTaskRemoveFromEventList+0xac>)
 8003428:	0011      	movs	r1, r2
 800342a:	0018      	movs	r0, r3
 800342c:	f7fe ff09 	bl	8002242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <xTaskRemoveFromEventList+0xb0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	429a      	cmp	r2, r3
 800343c:	d905      	bls.n	800344a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800343e:	2301      	movs	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <xTaskRemoveFromEventList+0xb4>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e001      	b.n	800344e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b004      	add	sp, #16
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000d5c 	.word	0x20000d5c
 800345c:	20000d3c 	.word	0x20000d3c
 8003460:	20000864 	.word	0x20000864
 8003464:	20000cf4 	.word	0x20000cf4
 8003468:	20000860 	.word	0x20000860
 800346c:	20000d48 	.word	0x20000d48

08003470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <vTaskInternalSetTimeOutState+0x20>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <vTaskInternalSetTimeOutState+0x24>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	605a      	str	r2, [r3, #4]
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b002      	add	sp, #8
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000d4c 	.word	0x20000d4c
 8003494:	20000d38 	.word	0x20000d38

08003498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <xTaskCheckForTimeOut+0x14>
 80034a8:	b672      	cpsid	i
 80034aa:	e7fe      	b.n	80034aa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <xTaskCheckForTimeOut+0x1e>
 80034b2:	b672      	cpsid	i
 80034b4:	e7fe      	b.n	80034b4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80034b6:	f000 fe2b 	bl	8004110 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <xTaskCheckForTimeOut+0x98>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	d102      	bne.n	80034d8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	e024      	b.n	8003522 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <xTaskCheckForTimeOut+0x9c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d007      	beq.n	80034f4 <xTaskCheckForTimeOut+0x5c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e016      	b.n	8003522 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d20c      	bcs.n	8003518 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad2      	subs	r2, r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f7ff ffaf 	bl	8003470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e004      	b.n	8003522 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800351e:	2301      	movs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003522:	f000 fe07 	bl	8004134 <vPortExitCritical>

	return xReturn;
 8003526:	697b      	ldr	r3, [r7, #20]
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b006      	add	sp, #24
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000d38 	.word	0x20000d38
 8003534:	20000d4c 	.word	0x20000d4c

08003538 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800353c:	4b02      	ldr	r3, [pc, #8]	; (8003548 <vTaskMissedYield+0x10>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]
}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000d48 	.word	0x20000d48

0800354c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003554:	f000 f84e 	bl	80035f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <prvIdleTask+0x1c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d9f9      	bls.n	8003554 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003560:	f000 fdc6 	bl	80040f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003564:	e7f6      	b.n	8003554 <prvIdleTask+0x8>
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	20000864 	.word	0x20000864

0800356c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	e00c      	b.n	8003592 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	0013      	movs	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	189b      	adds	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <prvInitialiseTaskLists+0x68>)
 8003584:	189b      	adds	r3, r3, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f7fe fe32 	bl	80021f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3301      	adds	r3, #1
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b37      	cmp	r3, #55	; 0x37
 8003596:	d9ef      	bls.n	8003578 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <prvInitialiseTaskLists+0x6c>)
 800359a:	0018      	movs	r0, r3
 800359c:	f7fe fe28 	bl	80021f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035a0:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <prvInitialiseTaskLists+0x70>)
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7fe fe24 	bl	80021f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <prvInitialiseTaskLists+0x74>)
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7fe fe20 	bl	80021f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <prvInitialiseTaskLists+0x78>)
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7fe fe1c 	bl	80021f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <prvInitialiseTaskLists+0x7c>)
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fe fe18 	bl	80021f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <prvInitialiseTaskLists+0x80>)
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <prvInitialiseTaskLists+0x6c>)
 80035c4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <prvInitialiseTaskLists+0x84>)
 80035c8:	4a04      	ldr	r2, [pc, #16]	; (80035dc <prvInitialiseTaskLists+0x70>)
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000864 	.word	0x20000864
 80035d8:	20000cc4 	.word	0x20000cc4
 80035dc:	20000cd8 	.word	0x20000cd8
 80035e0:	20000cf4 	.word	0x20000cf4
 80035e4:	20000d08 	.word	0x20000d08
 80035e8:	20000d20 	.word	0x20000d20
 80035ec:	20000cec 	.word	0x20000cec
 80035f0:	20000cf0 	.word	0x20000cf0

080035f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035fa:	e01a      	b.n	8003632 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80035fc:	f000 fd88 	bl	8004110 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <prvCheckTasksWaitingTermination+0x50>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	0018      	movs	r0, r3
 800360e:	f7fe fe70 	bl	80022f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <prvCheckTasksWaitingTermination+0x54>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <prvCheckTasksWaitingTermination+0x54>)
 800361a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <prvCheckTasksWaitingTermination+0x58>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1e5a      	subs	r2, r3, #1
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <prvCheckTasksWaitingTermination+0x58>)
 8003624:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003626:	f000 fd85 	bl	8004134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0018      	movs	r0, r3
 800362e:	f000 f80f 	bl	8003650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <prvCheckTasksWaitingTermination+0x58>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e0      	bne.n	80035fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000d08 	.word	0x20000d08
 8003648:	20000d34 	.word	0x20000d34
 800364c:	20000d1c 	.word	0x20000d1c

08003650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3354      	adds	r3, #84	; 0x54
 800365c:	0018      	movs	r0, r3
 800365e:	f000 ff9d 	bl	800459c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	22a5      	movs	r2, #165	; 0xa5
 8003666:	5c9b      	ldrb	r3, [r3, r2]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	0018      	movs	r0, r3
 8003672:	f000 fe8b 	bl	800438c <vPortFree>
				vPortFree( pxTCB );
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0018      	movs	r0, r3
 800367a:	f000 fe87 	bl	800438c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800367e:	e010      	b.n	80036a2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	22a5      	movs	r2, #165	; 0xa5
 8003684:	5c9b      	ldrb	r3, [r3, r2]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d104      	bne.n	8003694 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	0018      	movs	r0, r3
 800368e:	f000 fe7d 	bl	800438c <vPortFree>
	}
 8003692:	e006      	b.n	80036a2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	22a5      	movs	r2, #165	; 0xa5
 8003698:	5c9b      	ldrb	r3, [r3, r2]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d001      	beq.n	80036a2 <prvDeleteTCB+0x52>
 800369e:	b672      	cpsid	i
 80036a0:	e7fe      	b.n	80036a0 <prvDeleteTCB+0x50>
	}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <prvResetNextTaskUnblockTime+0x34>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <prvResetNextTaskUnblockTime+0x38>)
 80036be:	2201      	movs	r2, #1
 80036c0:	4252      	negs	r2, r2
 80036c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036c4:	e008      	b.n	80036d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <prvResetNextTaskUnblockTime+0x34>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <prvResetNextTaskUnblockTime+0x38>)
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000cec 	.word	0x20000cec
 80036e4:	20000d54 	.word	0x20000d54

080036e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <xTaskGetSchedulerState+0x30>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80036f6:	2301      	movs	r3, #1
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	e008      	b.n	800370e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <xTaskGetSchedulerState+0x34>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003704:	2302      	movs	r3, #2
 8003706:	607b      	str	r3, [r7, #4]
 8003708:	e001      	b.n	800370e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800370e:	687b      	ldr	r3, [r7, #4]
	}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	b002      	add	sp, #8
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000d40 	.word	0x20000d40
 800371c:	20000d5c 	.word	0x20000d5c

08003720 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d044      	beq.n	80037c0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <xTaskPriorityDisinherit+0xac>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <xTaskPriorityDisinherit+0x24>
 8003740:	b672      	cpsid	i
 8003742:	e7fe      	b.n	8003742 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <xTaskPriorityDisinherit+0x30>
 800374c:	b672      	cpsid	i
 800374e:	e7fe      	b.n	800374e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003754:	1e5a      	subs	r2, r3, #1
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	429a      	cmp	r2, r3
 8003764:	d02c      	beq.n	80037c0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	2b00      	cmp	r3, #0
 800376c:	d128      	bne.n	80037c0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3304      	adds	r3, #4
 8003772:	0018      	movs	r0, r3
 8003774:	f7fe fdbd 	bl	80022f2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	2238      	movs	r2, #56	; 0x38
 8003786:	1ad2      	subs	r2, r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <xTaskPriorityDisinherit+0xb0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d903      	bls.n	80037a0 <xTaskPriorityDisinherit+0x80>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <xTaskPriorityDisinherit+0xb0>)
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	0013      	movs	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	189b      	adds	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <xTaskPriorityDisinherit+0xb4>)
 80037ae:	189a      	adds	r2, r3, r2
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	3304      	adds	r3, #4
 80037b4:	0019      	movs	r1, r3
 80037b6:	0010      	movs	r0, r2
 80037b8:	f7fe fd43 	bl	8002242 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80037c0:	68fb      	ldr	r3, [r7, #12]
	}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	20000860 	.word	0x20000860
 80037d0:	20000d3c 	.word	0x20000d3c
 80037d4:	20000864 	.word	0x20000864

080037d8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037e2:	4b21      	ldr	r3, [pc, #132]	; (8003868 <prvAddCurrentTaskToDelayedList+0x90>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037e8:	4b20      	ldr	r3, [pc, #128]	; (800386c <prvAddCurrentTaskToDelayedList+0x94>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3304      	adds	r3, #4
 80037ee:	0018      	movs	r0, r3
 80037f0:	f7fe fd7f 	bl	80022f2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3301      	adds	r3, #1
 80037f8:	d10b      	bne.n	8003812 <prvAddCurrentTaskToDelayedList+0x3a>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <prvAddCurrentTaskToDelayedList+0x94>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <prvAddCurrentTaskToDelayedList+0x98>)
 8003808:	0011      	movs	r1, r2
 800380a:	0018      	movs	r0, r3
 800380c:	f7fe fd19 	bl	8002242 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003810:	e026      	b.n	8003860 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	18d3      	adds	r3, r2, r3
 8003818:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <prvAddCurrentTaskToDelayedList+0x94>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	429a      	cmp	r2, r3
 8003828:	d209      	bcs.n	800383e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <prvAddCurrentTaskToDelayedList+0x9c>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <prvAddCurrentTaskToDelayedList+0x94>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3304      	adds	r3, #4
 8003834:	0019      	movs	r1, r3
 8003836:	0010      	movs	r0, r2
 8003838:	f7fe fd25 	bl	8002286 <vListInsert>
}
 800383c:	e010      	b.n	8003860 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <prvAddCurrentTaskToDelayedList+0x94>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3304      	adds	r3, #4
 8003848:	0019      	movs	r1, r3
 800384a:	0010      	movs	r0, r2
 800384c:	f7fe fd1b 	bl	8002286 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	d202      	bcs.n	8003860 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <prvAddCurrentTaskToDelayedList+0xa4>)
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	601a      	str	r2, [r3, #0]
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b004      	add	sp, #16
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000d38 	.word	0x20000d38
 800386c:	20000860 	.word	0x20000860
 8003870:	20000d20 	.word	0x20000d20
 8003874:	20000cf0 	.word	0x20000cf0
 8003878:	20000cec 	.word	0x20000cec
 800387c:	20000d54 	.word	0x20000d54

08003880 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b089      	sub	sp, #36	; 0x24
 8003884:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800388a:	f000 fb4b 	bl	8003f24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <xTimerCreateTimerTask+0x6c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d020      	beq.n	80038d8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800389e:	003a      	movs	r2, r7
 80038a0:	1d39      	adds	r1, r7, #4
 80038a2:	2308      	movs	r3, #8
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	0018      	movs	r0, r3
 80038a8:	f7fe fc8a 	bl	80021c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80038ac:	683c      	ldr	r4, [r7, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	490f      	ldr	r1, [pc, #60]	; (80038f0 <xTimerCreateTimerTask+0x70>)
 80038b4:	480f      	ldr	r0, [pc, #60]	; (80038f4 <xTimerCreateTimerTask+0x74>)
 80038b6:	9202      	str	r2, [sp, #8]
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	2302      	movs	r3, #2
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	0022      	movs	r2, r4
 80038c2:	f7ff f968 	bl	8002b96 <xTaskCreateStatic>
 80038c6:	0002      	movs	r2, r0
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <xTimerCreateTimerTask+0x78>)
 80038ca:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <xTimerCreateTimerTask+0x78>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80038d4:	2301      	movs	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <xTimerCreateTimerTask+0x62>
 80038de:	b672      	cpsid	i
 80038e0:	e7fe      	b.n	80038e0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b005      	add	sp, #20
 80038ea:	bd90      	pop	{r4, r7, pc}
 80038ec:	20000d90 	.word	0x20000d90
 80038f0:	080047a8 	.word	0x080047a8
 80038f4:	08003b1d 	.word	0x08003b1d
 80038f8:	20000d94 	.word	0x20000d94

080038fc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800390a:	202c      	movs	r0, #44	; 0x2c
 800390c:	f000 fc98 	bl	8004240 <pvPortMalloc>
 8003910:	0003      	movs	r3, r0
 8003912:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00e      	beq.n	8003938 <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2228      	movs	r2, #40	; 0x28
 800391e:	2100      	movs	r1, #0
 8003920:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003922:	683c      	ldr	r4, [r7, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	0023      	movs	r3, r4
 8003934:	f000 f832 	bl	800399c <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003938:	697b      	ldr	r3, [r7, #20]
	}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b007      	add	sp, #28
 8003940:	bd90      	pop	{r4, r7, pc}

08003942 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003942:	b590      	push	{r4, r7, lr}
 8003944:	b089      	sub	sp, #36	; 0x24
 8003946:	af02      	add	r7, sp, #8
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003950:	232c      	movs	r3, #44	; 0x2c
 8003952:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b2c      	cmp	r3, #44	; 0x2c
 8003958:	d001      	beq.n	800395e <xTimerCreateStatic+0x1c>
 800395a:	b672      	cpsid	i
 800395c:	e7fe      	b.n	800395c <xTimerCreateStatic+0x1a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800395e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <xTimerCreateStatic+0x28>
 8003966:	b672      	cpsid	i
 8003968:	e7fe      	b.n	8003968 <xTimerCreateStatic+0x26>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <xTimerCreateStatic+0x50>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2228      	movs	r2, #40	; 0x28
 8003978:	2102      	movs	r1, #2
 800397a:	5499      	strb	r1, [r3, r2]

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800397c:	683c      	ldr	r4, [r7, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	0023      	movs	r3, r4
 800398e:	f000 f805 	bl	800399c <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003992:	697b      	ldr	r3, [r7, #20]
	}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b007      	add	sp, #28
 800399a:	bd90      	pop	{r4, r7, pc}

0800399c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <prvInitialiseNewTimer+0x18>
 80039b0:	b672      	cpsid	i
 80039b2:	e7fe      	b.n	80039b2 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01e      	beq.n	80039f8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80039ba:	f000 fab3 	bl	8003f24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3304      	adds	r3, #4
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fe fc26 	bl	800222c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <prvInitialiseNewTimer+0x5c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	2228      	movs	r2, #40	; 0x28
 80039ea:	5c9b      	ldrb	r3, [r3, r2]
 80039ec:	2204      	movs	r2, #4
 80039ee:	4313      	orrs	r3, r2
 80039f0:	b2d9      	uxtb	r1, r3
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2228      	movs	r2, #40	; 0x28
 80039f6:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b08b      	sub	sp, #44	; 0x2c
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <xTimerGenericCommand+0x1c>
 8003a18:	b672      	cpsid	i
 8003a1a:	e7fe      	b.n	8003a1a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <xTimerGenericCommand+0x90>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d030      	beq.n	8003a86 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a24:	2414      	movs	r4, #20
 8003a26:	193b      	adds	r3, r7, r4
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	dc19      	bgt.n	8003a72 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a3e:	f7ff fe53 	bl	80036e8 <xTaskGetSchedulerState>
 8003a42:	0003      	movs	r3, r0
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d109      	bne.n	8003a5c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <xTimerGenericCommand+0x90>)
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a4e:	1939      	adds	r1, r7, r4
 8003a50:	2300      	movs	r3, #0
 8003a52:	f7fe fd3d 	bl	80024d0 <xQueueGenericSend>
 8003a56:	0003      	movs	r3, r0
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	e014      	b.n	8003a86 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <xTimerGenericCommand+0x90>)
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	2314      	movs	r3, #20
 8003a62:	18f9      	adds	r1, r7, r3
 8003a64:	2300      	movs	r3, #0
 8003a66:	2200      	movs	r2, #0
 8003a68:	f7fe fd32 	bl	80024d0 <xQueueGenericSend>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	e009      	b.n	8003a86 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <xTimerGenericCommand+0x90>)
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	2314      	movs	r3, #20
 8003a7a:	18f9      	adds	r1, r7, r3
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f7fe fdeb 	bl	8002658 <xQueueGenericSendFromISR>
 8003a82:	0003      	movs	r3, r0
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b00b      	add	sp, #44	; 0x2c
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	20000d90 	.word	0x20000d90

08003a94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <prvProcessExpiredTimer+0x84>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7fe fc20 	bl	80022f2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2228      	movs	r2, #40	; 0x28
 8003ab6:	5c9b      	ldrb	r3, [r3, r2]
 8003ab8:	001a      	movs	r2, r3
 8003aba:	2304      	movs	r3, #4
 8003abc:	4013      	ands	r3, r2
 8003abe:	d019      	beq.n	8003af4 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	18d1      	adds	r1, r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f8c3 	bl	8003c58 <prvInsertTimerInActiveList>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d017      	beq.n	8003b06 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f7ff ff8d 	bl	8003a00 <xTimerGenericCommand>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <prvProcessExpiredTimer+0x72>
 8003af0:	b672      	cpsid	i
 8003af2:	e7fe      	b.n	8003af2 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2228      	movs	r2, #40	; 0x28
 8003af8:	5c9b      	ldrb	r3, [r3, r2]
 8003afa:	2201      	movs	r2, #1
 8003afc:	4393      	bics	r3, r2
 8003afe:	b2d9      	uxtb	r1, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2228      	movs	r2, #40	; 0x28
 8003b04:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	0010      	movs	r0, r2
 8003b0e:	4798      	blx	r3
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b004      	add	sp, #16
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000d88 	.word	0x20000d88

08003b1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b24:	2308      	movs	r3, #8
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f000 f853 	bl	8003bd4 <prvGetNextExpireTime>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	0011      	movs	r1, r2
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 f803 	bl	8003b44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b3e:	f000 f8cd 	bl	8003cdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b42:	e7ef      	b.n	8003b24 <prvTimerTask+0x8>

08003b44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b4e:	f7ff fa3f 	bl	8002fd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b52:	2308      	movs	r3, #8
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f85e 	bl	8003c18 <prvSampleTimeNow>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d12b      	bne.n	8003bbe <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10c      	bne.n	8003b86 <prvProcessTimerOrBlockTask+0x42>
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d808      	bhi.n	8003b86 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8003b74:	f7ff fa38 	bl	8002fe8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0011      	movs	r1, r2
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff ff88 	bl	8003a94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b84:	e01d      	b.n	8003bc2 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <prvProcessTimerOrBlockTask+0x88>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <prvProcessTimerOrBlockTask+0x56>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <prvProcessTimerOrBlockTask+0x58>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <prvProcessTimerOrBlockTask+0x8c>)
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	0019      	movs	r1, r3
 8003bac:	f7fe ffc0 	bl	8002b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bb0:	f7ff fa1a 	bl	8002fe8 <xTaskResumeAll>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	d104      	bne.n	8003bc2 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8003bb8:	f000 fa9a 	bl	80040f0 <vPortYield>
}
 8003bbc:	e001      	b.n	8003bc2 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8003bbe:	f7ff fa13 	bl	8002fe8 <xTaskResumeAll>
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	20000d8c 	.word	0x20000d8c
 8003bd0:	20000d90 	.word	0x20000d90

08003bd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <prvGetNextExpireTime+0x40>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <prvGetNextExpireTime+0x16>
 8003be6:	2201      	movs	r2, #1
 8003be8:	e000      	b.n	8003bec <prvGetNextExpireTime+0x18>
 8003bea:	2200      	movs	r2, #0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <prvGetNextExpireTime+0x40>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e001      	b.n	8003c08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c08:	68fb      	ldr	r3, [r7, #12]
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	20000d88 	.word	0x20000d88

08003c18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c20:	f7ff fa6e 	bl	8003100 <xTaskGetTickCount>
 8003c24:	0003      	movs	r3, r0
 8003c26:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <prvSampleTimeNow+0x3c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d205      	bcs.n	8003c3e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8003c32:	f000 f919 	bl	8003e68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e002      	b.n	8003c44 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <prvSampleTimeNow+0x3c>)
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b004      	add	sp, #16
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000d98 	.word	0x20000d98

08003c58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d812      	bhi.n	8003ca4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	1ad2      	subs	r2, r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d302      	bcc.n	8003c92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e01b      	b.n	8003cca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <prvInsertTimerInActiveList+0x7c>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	0010      	movs	r0, r2
 8003c9e:	f7fe faf2 	bl	8002286 <vListInsert>
 8003ca2:	e012      	b.n	8003cca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d206      	bcs.n	8003cba <prvInsertTimerInActiveList+0x62>
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e007      	b.n	8003cca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <prvInsertTimerInActiveList+0x80>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	0010      	movs	r0, r2
 8003cc6:	f7fe fade 	bl	8002286 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cca:	697b      	ldr	r3, [r7, #20]
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b006      	add	sp, #24
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000d8c 	.word	0x20000d8c
 8003cd8:	20000d88 	.word	0x20000d88

08003cdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b08d      	sub	sp, #52	; 0x34
 8003ce0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ce2:	e0ac      	b.n	8003e3e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	18bb      	adds	r3, r7, r2
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	da0f      	bge.n	8003d0e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003cee:	18bb      	adds	r3, r7, r2
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <prvProcessReceivedCommands+0x22>
 8003cfa:	b672      	cpsid	i
 8003cfc:	e7fe      	b.n	8003cfc <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	6858      	ldr	r0, [r3, #4]
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d0e:	2208      	movs	r2, #8
 8003d10:	18bb      	adds	r3, r7, r2
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	da00      	bge.n	8003d1a <prvProcessReceivedCommands+0x3e>
 8003d18:	e091      	b.n	8003e3e <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d1a:	18bb      	adds	r3, r7, r2
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fe fae0 	bl	80022f2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7ff ff6f 	bl	8003c18 <prvSampleTimeNow>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8003d3e:	2308      	movs	r3, #8
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	d900      	bls.n	8003d4a <prvProcessReceivedCommands+0x6e>
 8003d48:	e078      	b.n	8003e3c <prvProcessReceivedCommands+0x160>
 8003d4a:	009a      	lsls	r2, r3, #2
 8003d4c:	4b44      	ldr	r3, [pc, #272]	; (8003e60 <prvProcessReceivedCommands+0x184>)
 8003d4e:	18d3      	adds	r3, r2, r3
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2228      	movs	r2, #40	; 0x28
 8003d58:	5c9b      	ldrb	r3, [r3, r2]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	b2d9      	uxtb	r1, r3
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2228      	movs	r2, #40	; 0x28
 8003d64:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d66:	2408      	movs	r4, #8
 8003d68:	193b      	adds	r3, r7, r4
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	18d1      	adds	r1, r2, r3
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	6a38      	ldr	r0, [r7, #32]
 8003d7a:	f7ff ff6d 	bl	8003c58 <prvInsertTimerInActiveList>
 8003d7e:	1e03      	subs	r3, r0, #0
 8003d80:	d05d      	beq.n	8003e3e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	6a3a      	ldr	r2, [r7, #32]
 8003d88:	0010      	movs	r0, r2
 8003d8a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	2228      	movs	r2, #40	; 0x28
 8003d90:	5c9b      	ldrb	r3, [r3, r2]
 8003d92:	001a      	movs	r2, r3
 8003d94:	2304      	movs	r3, #4
 8003d96:	4013      	ands	r3, r2
 8003d98:	d051      	beq.n	8003e3e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d9a:	193b      	adds	r3, r7, r4
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	18d2      	adds	r2, r2, r3
 8003da4:	6a38      	ldr	r0, [r7, #32]
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2300      	movs	r3, #0
 8003dac:	2100      	movs	r1, #0
 8003dae:	f7ff fe27 	bl	8003a00 <xTimerGenericCommand>
 8003db2:	0003      	movs	r3, r0
 8003db4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d140      	bne.n	8003e3e <prvProcessReceivedCommands+0x162>
 8003dbc:	b672      	cpsid	i
 8003dbe:	e7fe      	b.n	8003dbe <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	2228      	movs	r2, #40	; 0x28
 8003dc4:	5c9b      	ldrb	r3, [r3, r2]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	4393      	bics	r3, r2
 8003dca:	b2d9      	uxtb	r1, r3
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	2228      	movs	r2, #40	; 0x28
 8003dd0:	5499      	strb	r1, [r3, r2]
					break;
 8003dd2:	e034      	b.n	8003e3e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	2228      	movs	r2, #40	; 0x28
 8003dd8:	5c9b      	ldrb	r3, [r3, r2]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	b2d9      	uxtb	r1, r3
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	2228      	movs	r2, #40	; 0x28
 8003de4:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003de6:	2308      	movs	r3, #8
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <prvProcessReceivedCommands+0x120>
 8003df8:	b672      	cpsid	i
 8003dfa:	e7fe      	b.n	8003dfa <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	18d1      	adds	r1, r2, r3
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	6a38      	ldr	r0, [r7, #32]
 8003e0a:	f7ff ff25 	bl	8003c58 <prvInsertTimerInActiveList>
					break;
 8003e0e:	e016      	b.n	8003e3e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2228      	movs	r2, #40	; 0x28
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	001a      	movs	r2, r3
 8003e18:	2302      	movs	r3, #2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d104      	bne.n	8003e28 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 fab3 	bl	800438c <vPortFree>
 8003e26:	e00a      	b.n	8003e3e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	2228      	movs	r2, #40	; 0x28
 8003e2c:	5c9b      	ldrb	r3, [r3, r2]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4393      	bics	r3, r2
 8003e32:	b2d9      	uxtb	r1, r3
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2228      	movs	r2, #40	; 0x28
 8003e38:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e3a:	e000      	b.n	8003e3e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8003e3c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <prvProcessReceivedCommands+0x188>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2208      	movs	r2, #8
 8003e44:	18b9      	adds	r1, r7, r2
 8003e46:	2200      	movs	r2, #0
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7fe fc76 	bl	800273a <xQueueReceive>
 8003e4e:	1e03      	subs	r3, r0, #0
 8003e50:	d000      	beq.n	8003e54 <prvProcessReceivedCommands+0x178>
 8003e52:	e747      	b.n	8003ce4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b00b      	add	sp, #44	; 0x2c
 8003e5c:	bd90      	pop	{r4, r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	08004834 	.word	0x08004834
 8003e64:	20000d90 	.word	0x20000d90

08003e68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e6e:	e041      	b.n	8003ef4 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e70:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <prvSwitchTimerLists+0xb4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7a:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <prvSwitchTimerLists+0xb4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3304      	adds	r3, #4
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7fe fa32 	bl	80022f2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	0010      	movs	r0, r2
 8003e96:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2228      	movs	r2, #40	; 0x28
 8003e9c:	5c9b      	ldrb	r3, [r3, r2]
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d026      	beq.n	8003ef4 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	18d3      	adds	r3, r2, r3
 8003eae:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d90e      	bls.n	8003ed6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <prvSwitchTimerLists+0xb4>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	0019      	movs	r1, r3
 8003ece:	0010      	movs	r0, r2
 8003ed0:	f7fe f9d9 	bl	8002286 <vListInsert>
 8003ed4:	e00e      	b.n	8003ef4 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	2300      	movs	r3, #0
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	f7ff fd8d 	bl	8003a00 <xTimerGenericCommand>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <prvSwitchTimerLists+0x8c>
 8003ef0:	b672      	cpsid	i
 8003ef2:	e7fe      	b.n	8003ef2 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <prvSwitchTimerLists+0xb4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1b8      	bne.n	8003e70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <prvSwitchTimerLists+0xb4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <prvSwitchTimerLists+0xb8>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <prvSwitchTimerLists+0xb4>)
 8003f0a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8003f0c:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <prvSwitchTimerLists+0xb8>)
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	601a      	str	r2, [r3, #0]
}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b006      	add	sp, #24
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	20000d88 	.word	0x20000d88
 8003f20:	20000d8c 	.word	0x20000d8c

08003f24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f2a:	f000 f8f1 	bl	8004110 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <prvCheckForValidListAndQueue+0x64>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d123      	bne.n	8003f7e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <prvCheckForValidListAndQueue+0x68>)
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7fe f959 	bl	80021f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <prvCheckForValidListAndQueue+0x6c>)
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7fe f955 	bl	80021f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <prvCheckForValidListAndQueue+0x70>)
 8003f48:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <prvCheckForValidListAndQueue+0x68>)
 8003f4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <prvCheckForValidListAndQueue+0x74>)
 8003f4e:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <prvCheckForValidListAndQueue+0x6c>)
 8003f50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <prvCheckForValidListAndQueue+0x78>)
 8003f54:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <prvCheckForValidListAndQueue+0x7c>)
 8003f56:	2100      	movs	r1, #0
 8003f58:	9100      	str	r1, [sp, #0]
 8003f5a:	2110      	movs	r1, #16
 8003f5c:	200a      	movs	r0, #10
 8003f5e:	f7fe fa44 	bl	80023ea <xQueueGenericCreateStatic>
 8003f62:	0002      	movs	r2, r0
 8003f64:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <prvCheckForValidListAndQueue+0x64>)
 8003f66:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <prvCheckForValidListAndQueue+0x64>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d006      	beq.n	8003f7e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <prvCheckForValidListAndQueue+0x64>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <prvCheckForValidListAndQueue+0x80>)
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7fe fdb1 	bl	8002ae0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f7e:	f000 f8d9 	bl	8004134 <vPortExitCritical>
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000d90 	.word	0x20000d90
 8003f8c:	20000d60 	.word	0x20000d60
 8003f90:	20000d74 	.word	0x20000d74
 8003f94:	20000d88 	.word	0x20000d88
 8003f98:	20000d8c 	.word	0x20000d8c
 8003f9c:	20000e3c 	.word	0x20000e3c
 8003fa0:	20000d9c 	.word	0x20000d9c
 8003fa4:	080047b0 	.word	0x080047b0

08003fa8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <pvTimerGetTimerID+0x16>
 8003fba:	b672      	cpsid	i
 8003fbc:	e7fe      	b.n	8003fbc <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8003fbe:	f000 f8a7 	bl	8004110 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8003fc8:	f000 f8b4 	bl	8004134 <vPortExitCritical>

	return pvReturn;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b004      	add	sp, #16
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2280      	movs	r2, #128	; 0x80
 8003fee:	0452      	lsls	r2, r2, #17
 8003ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b04      	subs	r3, #4
 8003ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3b04      	subs	r3, #4
 8004002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004004:	4a08      	ldr	r2, [pc, #32]	; (8004028 <pxPortInitialiseStack+0x50>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b14      	subs	r3, #20
 800400e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b20      	subs	r3, #32
 800401a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800401c:	68fb      	ldr	r3, [r7, #12]
}
 800401e:	0018      	movs	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	b004      	add	sp, #16
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	0800402d 	.word	0x0800402d

0800402c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <prvTaskExitError+0x2c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3301      	adds	r3, #1
 800403c:	d001      	beq.n	8004042 <prvTaskExitError+0x16>
 800403e:	b672      	cpsid	i
 8004040:	e7fe      	b.n	8004040 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004042:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0fc      	beq.n	8004046 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b002      	add	sp, #8
 8004054:	bd80      	pop	{r7, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	2000000c 	.word	0x2000000c

0800405c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004070 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004070:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <pxCurrentTCBConst2>)
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	3020      	adds	r0, #32
 8004078:	f380 8809 	msr	PSP, r0
 800407c:	2002      	movs	r0, #2
 800407e:	f380 8814 	msr	CONTROL, r0
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004088:	46ae      	mov	lr, r5
 800408a:	bc08      	pop	{r3}
 800408c:	bc04      	pop	{r2}
 800408e:	b662      	cpsie	i
 8004090:	4718      	bx	r3
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46c0      	nop			; (mov r8, r8)
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46c0      	nop			; (mov r8, r8)

080040a0 <pxCurrentTCBConst2>:
 80040a0:	20000860 	.word	0x20000860
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46c0      	nop			; (mov r8, r8)

080040a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80040ac:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <xPortStartScheduler+0x40>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <xPortStartScheduler+0x40>)
 80040b2:	21ff      	movs	r1, #255	; 0xff
 80040b4:	0409      	lsls	r1, r1, #16
 80040b6:	430a      	orrs	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <xPortStartScheduler+0x40>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <xPortStartScheduler+0x40>)
 80040c0:	21ff      	movs	r1, #255	; 0xff
 80040c2:	0609      	lsls	r1, r1, #24
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80040c8:	f000 f898 	bl	80041fc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <xPortStartScheduler+0x44>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80040d2:	f7ff ffcd 	bl	8004070 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040d6:	f7ff f8d1 	bl	800327c <vTaskSwitchContext>
	prvTaskExitError();
 80040da:	f7ff ffa7 	bl	800402c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	e000ed20 	.word	0xe000ed20
 80040ec:	2000000c 	.word	0x2000000c

080040f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <vPortYield+0x1c>)
 80040f6:	2280      	movs	r2, #128	; 0x80
 80040f8:	0552      	lsls	r2, r2, #21
 80040fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80040fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004100:	f3bf 8f6f 	isb	sy
}
 8004104:	46c0      	nop			; (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004114:	b672      	cpsid	i
    uxCriticalNesting++;
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <vPortEnterCritical+0x20>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <vPortEnterCritical+0x20>)
 800411e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004120:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004124:	f3bf 8f6f 	isb	sy
}
 8004128:	46c0      	nop			; (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	2000000c 	.word	0x2000000c

08004134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <vPortExitCritical+0x2c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <vPortExitCritical+0x10>
 8004140:	b672      	cpsid	i
 8004142:	e7fe      	b.n	8004142 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <vPortExitCritical+0x2c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	1e5a      	subs	r2, r3, #1
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <vPortExitCritical+0x2c>)
 800414c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <vPortExitCritical+0x2c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d100      	bne.n	8004158 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004156:	b662      	cpsie	i
    }
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	2000000c 	.word	0x2000000c

08004164 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004164:	f3ef 8010 	mrs	r0, PRIMASK
 8004168:	b672      	cpsid	i
 800416a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	0018      	movs	r0, r3

08004170 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004170:	f380 8810 	msr	PRIMASK, r0
 8004174:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004176:	46c0      	nop			; (mov r8, r8)
	...

08004180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004180:	f3ef 8009 	mrs	r0, PSP
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <pxCurrentTCBConst>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	3820      	subs	r0, #32
 800418a:	6010      	str	r0, [r2, #0]
 800418c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800418e:	4644      	mov	r4, r8
 8004190:	464d      	mov	r5, r9
 8004192:	4656      	mov	r6, sl
 8004194:	465f      	mov	r7, fp
 8004196:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004198:	b508      	push	{r3, lr}
 800419a:	b672      	cpsid	i
 800419c:	f7ff f86e 	bl	800327c <vTaskSwitchContext>
 80041a0:	b662      	cpsie	i
 80041a2:	bc0c      	pop	{r2, r3}
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	6808      	ldr	r0, [r1, #0]
 80041a8:	3010      	adds	r0, #16
 80041aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80041ac:	46a0      	mov	r8, r4
 80041ae:	46a9      	mov	r9, r5
 80041b0:	46b2      	mov	sl, r6
 80041b2:	46bb      	mov	fp, r7
 80041b4:	f380 8809 	msr	PSP, r0
 80041b8:	3820      	subs	r0, #32
 80041ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80041bc:	4718      	bx	r3
 80041be:	46c0      	nop			; (mov r8, r8)

080041c0 <pxCurrentTCBConst>:
 80041c0:	20000860 	.word	0x20000860
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46c0      	nop			; (mov r8, r8)

080041c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80041ce:	f7ff ffc9 	bl	8004164 <ulSetInterruptMaskFromISR>
 80041d2:	0003      	movs	r3, r0
 80041d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041d6:	f7fe ffa1 	bl	800311c <xTaskIncrementTick>
 80041da:	1e03      	subs	r3, r0, #0
 80041dc:	d003      	beq.n	80041e6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <SysTick_Handler+0x30>)
 80041e0:	2280      	movs	r2, #128	; 0x80
 80041e2:	0552      	lsls	r2, r2, #21
 80041e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7ff ffc1 	bl	8004170 <vClearInterruptMaskFromISR>
}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b002      	add	sp, #8
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <prvSetupTimerInterrupt+0x34>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <prvSetupTimerInterrupt+0x38>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <prvSetupTimerInterrupt+0x3c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	22fa      	movs	r2, #250	; 0xfa
 8004212:	0091      	lsls	r1, r2, #2
 8004214:	0018      	movs	r0, r3
 8004216:	f7fb ff77 	bl	8000108 <__udivsi3>
 800421a:	0003      	movs	r3, r0
 800421c:	001a      	movs	r2, r3
 800421e:	4b07      	ldr	r3, [pc, #28]	; (800423c <prvSetupTimerInterrupt+0x40>)
 8004220:	3a01      	subs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004224:	4b02      	ldr	r3, [pc, #8]	; (8004230 <prvSetupTimerInterrupt+0x34>)
 8004226:	2207      	movs	r2, #7
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	e000e010 	.word	0xe000e010
 8004234:	e000e018 	.word	0xe000e018
 8004238:	20000000 	.word	0x20000000
 800423c:	e000e014 	.word	0xe000e014

08004240 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800424c:	f7fe fec0 	bl	8002fd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004250:	4b49      	ldr	r3, [pc, #292]	; (8004378 <pvPortMalloc+0x138>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004258:	f000 f8e0 	bl	800441c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800425c:	4b47      	ldr	r3, [pc, #284]	; (800437c <pvPortMalloc+0x13c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4013      	ands	r3, r2
 8004264:	d000      	beq.n	8004268 <pvPortMalloc+0x28>
 8004266:	e079      	b.n	800435c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d012      	beq.n	8004294 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800426e:	2208      	movs	r2, #8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	189b      	adds	r3, r3, r2
 8004274:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2207      	movs	r2, #7
 800427a:	4013      	ands	r3, r2
 800427c:	d00a      	beq.n	8004294 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2207      	movs	r2, #7
 8004282:	4393      	bics	r3, r2
 8004284:	3308      	adds	r3, #8
 8004286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2207      	movs	r2, #7
 800428c:	4013      	ands	r3, r2
 800428e:	d001      	beq.n	8004294 <pvPortMalloc+0x54>
 8004290:	b672      	cpsid	i
 8004292:	e7fe      	b.n	8004292 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d060      	beq.n	800435c <pvPortMalloc+0x11c>
 800429a:	4b39      	ldr	r3, [pc, #228]	; (8004380 <pvPortMalloc+0x140>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d85b      	bhi.n	800435c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042a4:	4b37      	ldr	r3, [pc, #220]	; (8004384 <pvPortMalloc+0x144>)
 80042a6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <pvPortMalloc+0x144>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042ae:	e004      	b.n	80042ba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d903      	bls.n	80042cc <pvPortMalloc+0x8c>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f1      	bne.n	80042b0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042cc:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <pvPortMalloc+0x138>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d042      	beq.n	800435c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2208      	movs	r2, #8
 80042dc:	189b      	adds	r3, r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	2308      	movs	r3, #8
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d916      	bls.n	8004326 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	18d3      	adds	r3, r2, r3
 80042fe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2207      	movs	r2, #7
 8004304:	4013      	ands	r3, r2
 8004306:	d001      	beq.n	800430c <pvPortMalloc+0xcc>
 8004308:	b672      	cpsid	i
 800430a:	e7fe      	b.n	800430a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	1ad2      	subs	r2, r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	0018      	movs	r0, r3
 8004322:	f000 f8db 	bl	80044dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004326:	4b16      	ldr	r3, [pc, #88]	; (8004380 <pvPortMalloc+0x140>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	1ad2      	subs	r2, r2, r3
 8004330:	4b13      	ldr	r3, [pc, #76]	; (8004380 <pvPortMalloc+0x140>)
 8004332:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004334:	4b12      	ldr	r3, [pc, #72]	; (8004380 <pvPortMalloc+0x140>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <pvPortMalloc+0x148>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d203      	bcs.n	8004348 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <pvPortMalloc+0x140>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <pvPortMalloc+0x148>)
 8004346:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <pvPortMalloc+0x13c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	431a      	orrs	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800435c:	f7fe fe44 	bl	8002fe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2207      	movs	r2, #7
 8004364:	4013      	ands	r3, r2
 8004366:	d001      	beq.n	800436c <pvPortMalloc+0x12c>
 8004368:	b672      	cpsid	i
 800436a:	e7fe      	b.n	800436a <pvPortMalloc+0x12a>
	return pvReturn;
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b006      	add	sp, #24
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	20001664 	.word	0x20001664
 800437c:	20001670 	.word	0x20001670
 8004380:	20001668 	.word	0x20001668
 8004384:	2000165c 	.word	0x2000165c
 8004388:	2000166c 	.word	0x2000166c

0800438c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d035      	beq.n	800440a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800439e:	2308      	movs	r3, #8
 80043a0:	425b      	negs	r3, r3
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <vPortFree+0x88>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4013      	ands	r3, r2
 80043b6:	d101      	bne.n	80043bc <vPortFree+0x30>
 80043b8:	b672      	cpsid	i
 80043ba:	e7fe      	b.n	80043ba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <vPortFree+0x3c>
 80043c4:	b672      	cpsid	i
 80043c6:	e7fe      	b.n	80043c6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <vPortFree+0x88>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4013      	ands	r3, r2
 80043d2:	d01a      	beq.n	800440a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d116      	bne.n	800440a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <vPortFree+0x88>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	401a      	ands	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043ec:	f7fe fdf0 	bl	8002fd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <vPortFree+0x8c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	18d2      	adds	r2, r2, r3
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <vPortFree+0x8c>)
 80043fc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	0018      	movs	r0, r3
 8004402:	f000 f86b 	bl	80044dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004406:	f7fe fdef 	bl	8002fe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b004      	add	sp, #16
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	20001670 	.word	0x20001670
 8004418:	20001668 	.word	0x20001668

0800441c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004422:	23fa      	movs	r3, #250	; 0xfa
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <prvHeapInit+0xa8>)
 800442a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2207      	movs	r2, #7
 8004430:	4013      	ands	r3, r2
 8004432:	d00c      	beq.n	800444e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3307      	adds	r3, #7
 8004438:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2207      	movs	r2, #7
 800443e:	4393      	bics	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	1ad2      	subs	r2, r2, r3
 8004448:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <prvHeapInit+0xa8>)
 800444a:	18d3      	adds	r3, r2, r3
 800444c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <prvHeapInit+0xac>)
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <prvHeapInit+0xac>)
 800445a:	2200      	movs	r2, #0
 800445c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	18d3      	adds	r3, r2, r3
 8004464:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004466:	2208      	movs	r2, #8
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2207      	movs	r2, #7
 8004472:	4393      	bics	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <prvHeapInit+0xb0>)
 800447a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <prvHeapInit+0xb0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <prvHeapInit+0xb0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	1ad2      	subs	r2, r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <prvHeapInit+0xb0>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <prvHeapInit+0xb4>)
 80044a8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <prvHeapInit+0xb8>)
 80044b0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <prvHeapInit+0xbc>)
 80044b4:	2280      	movs	r2, #128	; 0x80
 80044b6:	0612      	lsls	r2, r2, #24
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	46bd      	mov	sp, r7
 80044be:	b004      	add	sp, #16
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	20000e8c 	.word	0x20000e8c
 80044c8:	2000165c 	.word	0x2000165c
 80044cc:	20001664 	.word	0x20001664
 80044d0:	2000166c 	.word	0x2000166c
 80044d4:	20001668 	.word	0x20001668
 80044d8:	20001670 	.word	0x20001670

080044dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <prvInsertBlockIntoFreeList+0xa8>)
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e002      	b.n	80044f0 <prvInsertBlockIntoFreeList+0x14>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d8f7      	bhi.n	80044ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	18d3      	adds	r3, r2, r3
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	d108      	bne.n	800451e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	18d2      	adds	r2, r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	18d2      	adds	r2, r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d118      	bne.n	8004564 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <prvInsertBlockIntoFreeList+0xac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d00d      	beq.n	800455a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	18d2      	adds	r2, r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e008      	b.n	800456c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <prvInsertBlockIntoFreeList+0xac>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e003      	b.n	800456c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d002      	beq.n	800457a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	46bd      	mov	sp, r7
 800457e:	b004      	add	sp, #16
 8004580:	bd80      	pop	{r7, pc}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	2000165c 	.word	0x2000165c
 8004588:	20001664 	.word	0x20001664

0800458c <memset>:
 800458c:	0003      	movs	r3, r0
 800458e:	1882      	adds	r2, r0, r2
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	7019      	strb	r1, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <_reclaim_reent>:
 800459c:	4b2d      	ldr	r3, [pc, #180]	; (8004654 <_reclaim_reent+0xb8>)
 800459e:	b570      	push	{r4, r5, r6, lr}
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0004      	movs	r4, r0
 80045a4:	4283      	cmp	r3, r0
 80045a6:	d042      	beq.n	800462e <_reclaim_reent+0x92>
 80045a8:	69c3      	ldr	r3, [r0, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <_reclaim_reent+0x28>
 80045ae:	2500      	movs	r5, #0
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	42ab      	cmp	r3, r5
 80045b4:	d140      	bne.n	8004638 <_reclaim_reent+0x9c>
 80045b6:	69e3      	ldr	r3, [r4, #28]
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	2900      	cmp	r1, #0
 80045bc:	d002      	beq.n	80045c4 <_reclaim_reent+0x28>
 80045be:	0020      	movs	r0, r4
 80045c0:	f000 f87a 	bl	80046b8 <_free_r>
 80045c4:	6961      	ldr	r1, [r4, #20]
 80045c6:	2900      	cmp	r1, #0
 80045c8:	d002      	beq.n	80045d0 <_reclaim_reent+0x34>
 80045ca:	0020      	movs	r0, r4
 80045cc:	f000 f874 	bl	80046b8 <_free_r>
 80045d0:	69e1      	ldr	r1, [r4, #28]
 80045d2:	2900      	cmp	r1, #0
 80045d4:	d002      	beq.n	80045dc <_reclaim_reent+0x40>
 80045d6:	0020      	movs	r0, r4
 80045d8:	f000 f86e 	bl	80046b8 <_free_r>
 80045dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80045de:	2900      	cmp	r1, #0
 80045e0:	d002      	beq.n	80045e8 <_reclaim_reent+0x4c>
 80045e2:	0020      	movs	r0, r4
 80045e4:	f000 f868 	bl	80046b8 <_free_r>
 80045e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ea:	2900      	cmp	r1, #0
 80045ec:	d002      	beq.n	80045f4 <_reclaim_reent+0x58>
 80045ee:	0020      	movs	r0, r4
 80045f0:	f000 f862 	bl	80046b8 <_free_r>
 80045f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d002      	beq.n	8004600 <_reclaim_reent+0x64>
 80045fa:	0020      	movs	r0, r4
 80045fc:	f000 f85c 	bl	80046b8 <_free_r>
 8004600:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004602:	2900      	cmp	r1, #0
 8004604:	d002      	beq.n	800460c <_reclaim_reent+0x70>
 8004606:	0020      	movs	r0, r4
 8004608:	f000 f856 	bl	80046b8 <_free_r>
 800460c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800460e:	2900      	cmp	r1, #0
 8004610:	d002      	beq.n	8004618 <_reclaim_reent+0x7c>
 8004612:	0020      	movs	r0, r4
 8004614:	f000 f850 	bl	80046b8 <_free_r>
 8004618:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800461a:	2900      	cmp	r1, #0
 800461c:	d002      	beq.n	8004624 <_reclaim_reent+0x88>
 800461e:	0020      	movs	r0, r4
 8004620:	f000 f84a 	bl	80046b8 <_free_r>
 8004624:	6a23      	ldr	r3, [r4, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <_reclaim_reent+0x92>
 800462a:	0020      	movs	r0, r4
 800462c:	4798      	blx	r3
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	5949      	ldr	r1, [r1, r5]
 8004632:	2900      	cmp	r1, #0
 8004634:	d108      	bne.n	8004648 <_reclaim_reent+0xac>
 8004636:	3504      	adds	r5, #4
 8004638:	69e3      	ldr	r3, [r4, #28]
 800463a:	68d9      	ldr	r1, [r3, #12]
 800463c:	2d80      	cmp	r5, #128	; 0x80
 800463e:	d1f7      	bne.n	8004630 <_reclaim_reent+0x94>
 8004640:	0020      	movs	r0, r4
 8004642:	f000 f839 	bl	80046b8 <_free_r>
 8004646:	e7b6      	b.n	80045b6 <_reclaim_reent+0x1a>
 8004648:	680e      	ldr	r6, [r1, #0]
 800464a:	0020      	movs	r0, r4
 800464c:	f000 f834 	bl	80046b8 <_free_r>
 8004650:	0031      	movs	r1, r6
 8004652:	e7ee      	b.n	8004632 <_reclaim_reent+0x96>
 8004654:	2000005c 	.word	0x2000005c

08004658 <__libc_init_array>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	2600      	movs	r6, #0
 800465c:	4c0c      	ldr	r4, [pc, #48]	; (8004690 <__libc_init_array+0x38>)
 800465e:	4d0d      	ldr	r5, [pc, #52]	; (8004694 <__libc_init_array+0x3c>)
 8004660:	1b64      	subs	r4, r4, r5
 8004662:	10a4      	asrs	r4, r4, #2
 8004664:	42a6      	cmp	r6, r4
 8004666:	d109      	bne.n	800467c <__libc_init_array+0x24>
 8004668:	2600      	movs	r6, #0
 800466a:	f000 f87f 	bl	800476c <_init>
 800466e:	4c0a      	ldr	r4, [pc, #40]	; (8004698 <__libc_init_array+0x40>)
 8004670:	4d0a      	ldr	r5, [pc, #40]	; (800469c <__libc_init_array+0x44>)
 8004672:	1b64      	subs	r4, r4, r5
 8004674:	10a4      	asrs	r4, r4, #2
 8004676:	42a6      	cmp	r6, r4
 8004678:	d105      	bne.n	8004686 <__libc_init_array+0x2e>
 800467a:	bd70      	pop	{r4, r5, r6, pc}
 800467c:	00b3      	lsls	r3, r6, #2
 800467e:	58eb      	ldr	r3, [r5, r3]
 8004680:	4798      	blx	r3
 8004682:	3601      	adds	r6, #1
 8004684:	e7ee      	b.n	8004664 <__libc_init_array+0xc>
 8004686:	00b3      	lsls	r3, r6, #2
 8004688:	58eb      	ldr	r3, [r5, r3]
 800468a:	4798      	blx	r3
 800468c:	3601      	adds	r6, #1
 800468e:	e7f2      	b.n	8004676 <__libc_init_array+0x1e>
 8004690:	08004864 	.word	0x08004864
 8004694:	08004864 	.word	0x08004864
 8004698:	08004868 	.word	0x08004868
 800469c:	08004864 	.word	0x08004864

080046a0 <__retarget_lock_acquire_recursive>:
 80046a0:	4770      	bx	lr

080046a2 <__retarget_lock_release_recursive>:
 80046a2:	4770      	bx	lr

080046a4 <memcpy>:
 80046a4:	2300      	movs	r3, #0
 80046a6:	b510      	push	{r4, lr}
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d100      	bne.n	80046ae <memcpy+0xa>
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	5ccc      	ldrb	r4, [r1, r3]
 80046b0:	54c4      	strb	r4, [r0, r3]
 80046b2:	3301      	adds	r3, #1
 80046b4:	e7f8      	b.n	80046a8 <memcpy+0x4>
	...

080046b8 <_free_r>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	0005      	movs	r5, r0
 80046bc:	2900      	cmp	r1, #0
 80046be:	d010      	beq.n	80046e2 <_free_r+0x2a>
 80046c0:	1f0c      	subs	r4, r1, #4
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	da00      	bge.n	80046ca <_free_r+0x12>
 80046c8:	18e4      	adds	r4, r4, r3
 80046ca:	0028      	movs	r0, r5
 80046cc:	f000 f83e 	bl	800474c <__malloc_lock>
 80046d0:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <_free_r+0x90>)
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d105      	bne.n	80046e4 <_free_r+0x2c>
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	6014      	str	r4, [r2, #0]
 80046dc:	0028      	movs	r0, r5
 80046de:	f000 f83d 	bl	800475c <__malloc_unlock>
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	d908      	bls.n	80046fa <_free_r+0x42>
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	1821      	adds	r1, r4, r0
 80046ec:	428b      	cmp	r3, r1
 80046ee:	d1f3      	bne.n	80046d8 <_free_r+0x20>
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	1809      	adds	r1, r1, r0
 80046f6:	6021      	str	r1, [r4, #0]
 80046f8:	e7ee      	b.n	80046d8 <_free_r+0x20>
 80046fa:	001a      	movs	r2, r3
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <_free_r+0x4e>
 8004702:	42a3      	cmp	r3, r4
 8004704:	d9f9      	bls.n	80046fa <_free_r+0x42>
 8004706:	6811      	ldr	r1, [r2, #0]
 8004708:	1850      	adds	r0, r2, r1
 800470a:	42a0      	cmp	r0, r4
 800470c:	d10b      	bne.n	8004726 <_free_r+0x6e>
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	1809      	adds	r1, r1, r0
 8004712:	1850      	adds	r0, r2, r1
 8004714:	6011      	str	r1, [r2, #0]
 8004716:	4283      	cmp	r3, r0
 8004718:	d1e0      	bne.n	80046dc <_free_r+0x24>
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	1841      	adds	r1, r0, r1
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	6053      	str	r3, [r2, #4]
 8004724:	e7da      	b.n	80046dc <_free_r+0x24>
 8004726:	42a0      	cmp	r0, r4
 8004728:	d902      	bls.n	8004730 <_free_r+0x78>
 800472a:	230c      	movs	r3, #12
 800472c:	602b      	str	r3, [r5, #0]
 800472e:	e7d5      	b.n	80046dc <_free_r+0x24>
 8004730:	6820      	ldr	r0, [r4, #0]
 8004732:	1821      	adds	r1, r4, r0
 8004734:	428b      	cmp	r3, r1
 8004736:	d103      	bne.n	8004740 <_free_r+0x88>
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	1809      	adds	r1, r1, r0
 800473e:	6021      	str	r1, [r4, #0]
 8004740:	6063      	str	r3, [r4, #4]
 8004742:	6054      	str	r4, [r2, #4]
 8004744:	e7ca      	b.n	80046dc <_free_r+0x24>
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	200017b0 	.word	0x200017b0

0800474c <__malloc_lock>:
 800474c:	b510      	push	{r4, lr}
 800474e:	4802      	ldr	r0, [pc, #8]	; (8004758 <__malloc_lock+0xc>)
 8004750:	f7ff ffa6 	bl	80046a0 <__retarget_lock_acquire_recursive>
 8004754:	bd10      	pop	{r4, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	200017ac 	.word	0x200017ac

0800475c <__malloc_unlock>:
 800475c:	b510      	push	{r4, lr}
 800475e:	4802      	ldr	r0, [pc, #8]	; (8004768 <__malloc_unlock+0xc>)
 8004760:	f7ff ff9f 	bl	80046a2 <__retarget_lock_release_recursive>
 8004764:	bd10      	pop	{r4, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	200017ac 	.word	0x200017ac

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

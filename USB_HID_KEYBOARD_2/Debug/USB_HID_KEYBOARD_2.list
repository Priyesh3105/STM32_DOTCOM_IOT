
USB_HID_KEYBOARD_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007944  08007944  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800794c  0800794c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800794c  0800794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007950  08007950  00017950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08007954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  20000158  08007aac  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  08007aac  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afc3  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002662  00000000  00000000  0002b186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073b  00000000  00000000  0002e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015299  00000000  00000000  0002e903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db52  00000000  00000000  00043b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076f26  00000000  00000000  000516ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002194  00000000  00000000  000c8614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ca7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007874 	.word	0x08007874

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	08007874 	.word	0x08007874

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ae:	f000 f9cb 	bl	8000848 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b2:	f000 f8cf 	bl	8000654 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004b6:	f000 f943 	bl	8000740 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80004ba:	f006 fd2d 	bl	8006f18 <MX_USB_DEVICE_Init>

		/* USER CODE BEGIN 3 */
		// Populate the buffer with the HID report data
		while (1) {
			// Populate the buffer with the HID report data
			keyBoardHIDsub.MODIFIER = 0x02; //print char in capital
 80004be:	4b63      	ldr	r3, [pc, #396]	; (800064c <main+0x1a4>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	701a      	strb	r2, [r3, #0]
			keyBoardHIDsub.KEYCODE1 = 0x13; //print "P"
 80004c4:	4b61      	ldr	r3, [pc, #388]	; (800064c <main+0x1a4>)
 80004c6:	2213      	movs	r2, #19
 80004c8:	709a      	strb	r2, [r3, #2]
			keyBoardHIDsub.KEYCODE2 = 0x15; //print "R"
 80004ca:	4b60      	ldr	r3, [pc, #384]	; (800064c <main+0x1a4>)
 80004cc:	2215      	movs	r2, #21
 80004ce:	70da      	strb	r2, [r3, #3]
			keyBoardHIDsub.KEYCODE3 = 0x0C; //print "I"
 80004d0:	4b5e      	ldr	r3, [pc, #376]	; (800064c <main+0x1a4>)
 80004d2:	220c      	movs	r2, #12
 80004d4:	711a      	strb	r2, [r3, #4]
			keyBoardHIDsub.KEYCODE4 = 0x1C; //print "Y"
 80004d6:	4b5d      	ldr	r3, [pc, #372]	; (800064c <main+0x1a4>)
 80004d8:	221c      	movs	r2, #28
 80004da:	715a      	strb	r2, [r3, #5]
			keyBoardHIDsub.KEYCODE5 = 0x08; //print "E"
 80004dc:	4b5b      	ldr	r3, [pc, #364]	; (800064c <main+0x1a4>)
 80004de:	2208      	movs	r2, #8
 80004e0:	719a      	strb	r2, [r3, #6]
			keyBoardHIDsub.KEYCODE6 = 0x16; //print "S"
 80004e2:	4b5a      	ldr	r3, [pc, #360]	; (800064c <main+0x1a4>)
 80004e4:	2216      	movs	r2, #22
 80004e6:	71da      	strb	r2, [r3, #7]
			uint8_t buffer[sizeof(keyBoardHIDsub)] = { 0 }; // Initialize the buffer with zeros
 80004e8:	003b      	movs	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
			buffer[0] = keyBoardHIDsub.MODIFIER;
 80004f2:	4b56      	ldr	r3, [pc, #344]	; (800064c <main+0x1a4>)
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	003b      	movs	r3, r7
 80004f8:	701a      	strb	r2, [r3, #0]
			buffer[2] = keyBoardHIDsub.KEYCODE1;
 80004fa:	4b54      	ldr	r3, [pc, #336]	; (800064c <main+0x1a4>)
 80004fc:	789a      	ldrb	r2, [r3, #2]
 80004fe:	003b      	movs	r3, r7
 8000500:	709a      	strb	r2, [r3, #2]
			buffer[3] = keyBoardHIDsub.KEYCODE2;
 8000502:	4b52      	ldr	r3, [pc, #328]	; (800064c <main+0x1a4>)
 8000504:	78da      	ldrb	r2, [r3, #3]
 8000506:	003b      	movs	r3, r7
 8000508:	70da      	strb	r2, [r3, #3]
			buffer[4] = keyBoardHIDsub.KEYCODE3;
 800050a:	4b50      	ldr	r3, [pc, #320]	; (800064c <main+0x1a4>)
 800050c:	791a      	ldrb	r2, [r3, #4]
 800050e:	003b      	movs	r3, r7
 8000510:	711a      	strb	r2, [r3, #4]
			buffer[5] = keyBoardHIDsub.KEYCODE4;
 8000512:	4b4e      	ldr	r3, [pc, #312]	; (800064c <main+0x1a4>)
 8000514:	795a      	ldrb	r2, [r3, #5]
 8000516:	003b      	movs	r3, r7
 8000518:	715a      	strb	r2, [r3, #5]
			buffer[6] = keyBoardHIDsub.KEYCODE5;
 800051a:	4b4c      	ldr	r3, [pc, #304]	; (800064c <main+0x1a4>)
 800051c:	799a      	ldrb	r2, [r3, #6]
 800051e:	003b      	movs	r3, r7
 8000520:	719a      	strb	r2, [r3, #6]
			buffer[7] = keyBoardHIDsub.KEYCODE6;
 8000522:	4b4a      	ldr	r3, [pc, #296]	; (800064c <main+0x1a4>)
 8000524:	79da      	ldrb	r2, [r3, #7]
 8000526:	003b      	movs	r3, r7
 8000528:	71da      	strb	r2, [r3, #7]

			// Send the buffer using USBD_HID_SendReport
			USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 800052a:	0039      	movs	r1, r7
 800052c:	4b48      	ldr	r3, [pc, #288]	; (8000650 <main+0x1a8>)
 800052e:	2208      	movs	r2, #8
 8000530:	0018      	movs	r0, r3
 8000532:	f005 fa97 	bl	8005a64 <USBD_HID_SendReport>
			HAL_Delay(50);
 8000536:	2032      	movs	r0, #50	; 0x32
 8000538:	f000 f9f6 	bl	8000928 <HAL_Delay>

			// Reset the buffer and send a release report
			memset(buffer, 0, sizeof(buffer));
 800053c:	003b      	movs	r3, r7
 800053e:	2208      	movs	r2, #8
 8000540:	2100      	movs	r1, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f007 f96a 	bl	800781c <memset>
			USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 8000548:	0039      	movs	r1, r7
 800054a:	4b41      	ldr	r3, [pc, #260]	; (8000650 <main+0x1a8>)
 800054c:	2208      	movs	r2, #8
 800054e:	0018      	movs	r0, r3
 8000550:	f005 fa88 	bl	8005a64 <USBD_HID_SendReport>
			HAL_Delay(50);
 8000554:	2032      	movs	r0, #50	; 0x32
 8000556:	f000 f9e7 	bl	8000928 <HAL_Delay>

			keyBoardHIDsub.MODIFIER = 0x02; //print char in capital
 800055a:	4b3c      	ldr	r3, [pc, #240]	; (800064c <main+0x1a4>)
 800055c:	2202      	movs	r2, #2
 800055e:	701a      	strb	r2, [r3, #0]
			keyBoardHIDsub.KEYCODE1 = 0x0B; //print "H"
 8000560:	4b3a      	ldr	r3, [pc, #232]	; (800064c <main+0x1a4>)
 8000562:	220b      	movs	r2, #11
 8000564:	709a      	strb	r2, [r3, #2]
			keyBoardHIDsub.KEYCODE2 = 0x2C; //print " " a space
 8000566:	4b39      	ldr	r3, [pc, #228]	; (800064c <main+0x1a4>)
 8000568:	222c      	movs	r2, #44	; 0x2c
 800056a:	70da      	strb	r2, [r3, #3]
			keyBoardHIDsub.KEYCODE3 = 0x16; //print "S"
 800056c:	4b37      	ldr	r3, [pc, #220]	; (800064c <main+0x1a4>)
 800056e:	2216      	movs	r2, #22
 8000570:	711a      	strb	r2, [r3, #4]
			keyBoardHIDsub.KEYCODE4 = 0x0B; //print "H"
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <main+0x1a4>)
 8000574:	220b      	movs	r2, #11
 8000576:	715a      	strb	r2, [r3, #5]
			keyBoardHIDsub.KEYCODE5 = 0x04; //print "A"
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <main+0x1a4>)
 800057a:	2204      	movs	r2, #4
 800057c:	719a      	strb	r2, [r3, #6]
			keyBoardHIDsub.KEYCODE6 = 0x0B; //print "H"
 800057e:	4b33      	ldr	r3, [pc, #204]	; (800064c <main+0x1a4>)
 8000580:	220b      	movs	r2, #11
 8000582:	71da      	strb	r2, [r3, #7]
			buffer[0] = keyBoardHIDsub.MODIFIER;
 8000584:	4b31      	ldr	r3, [pc, #196]	; (800064c <main+0x1a4>)
 8000586:	781a      	ldrb	r2, [r3, #0]
 8000588:	003b      	movs	r3, r7
 800058a:	701a      	strb	r2, [r3, #0]
			buffer[2] = keyBoardHIDsub.KEYCODE1;
 800058c:	4b2f      	ldr	r3, [pc, #188]	; (800064c <main+0x1a4>)
 800058e:	789a      	ldrb	r2, [r3, #2]
 8000590:	003b      	movs	r3, r7
 8000592:	709a      	strb	r2, [r3, #2]
			buffer[3] = keyBoardHIDsub.KEYCODE2;
 8000594:	4b2d      	ldr	r3, [pc, #180]	; (800064c <main+0x1a4>)
 8000596:	78da      	ldrb	r2, [r3, #3]
 8000598:	003b      	movs	r3, r7
 800059a:	70da      	strb	r2, [r3, #3]
			buffer[4] = keyBoardHIDsub.KEYCODE3;
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <main+0x1a4>)
 800059e:	791a      	ldrb	r2, [r3, #4]
 80005a0:	003b      	movs	r3, r7
 80005a2:	711a      	strb	r2, [r3, #4]
			buffer[5] = keyBoardHIDsub.KEYCODE4;
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <main+0x1a4>)
 80005a6:	795a      	ldrb	r2, [r3, #5]
 80005a8:	003b      	movs	r3, r7
 80005aa:	715a      	strb	r2, [r3, #5]
			buffer[6] = keyBoardHIDsub.KEYCODE5;
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <main+0x1a4>)
 80005ae:	799a      	ldrb	r2, [r3, #6]
 80005b0:	003b      	movs	r3, r7
 80005b2:	719a      	strb	r2, [r3, #6]
			buffer[7] = keyBoardHIDsub.KEYCODE6;
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <main+0x1a4>)
 80005b6:	79da      	ldrb	r2, [r3, #7]
 80005b8:	003b      	movs	r3, r7
 80005ba:	71da      	strb	r2, [r3, #7]

			// Send the buffer using USBD_HID_SendReport
			USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 80005bc:	0039      	movs	r1, r7
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <main+0x1a8>)
 80005c0:	2208      	movs	r2, #8
 80005c2:	0018      	movs	r0, r3
 80005c4:	f005 fa4e 	bl	8005a64 <USBD_HID_SendReport>
			HAL_Delay(50);
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f000 f9ad 	bl	8000928 <HAL_Delay>

			// Reset the buffer and send a release report
			memset(buffer, 0, sizeof(buffer));
 80005ce:	003b      	movs	r3, r7
 80005d0:	2208      	movs	r2, #8
 80005d2:	2100      	movs	r1, #0
 80005d4:	0018      	movs	r0, r3
 80005d6:	f007 f921 	bl	800781c <memset>
			USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 80005da:	0039      	movs	r1, r7
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <main+0x1a8>)
 80005de:	2208      	movs	r2, #8
 80005e0:	0018      	movs	r0, r3
 80005e2:	f005 fa3f 	bl	8005a64 <USBD_HID_SendReport>
			HAL_Delay(50);
 80005e6:	2032      	movs	r0, #50	; 0x32
 80005e8:	f000 f99e 	bl	8000928 <HAL_Delay>

			keyBoardHIDsub.MODIFIER = 0x02; //print char in capital
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <main+0x1a4>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	701a      	strb	r2, [r3, #0]
			keyBoardHIDsub.KEYCODE1 = 0x0C; //print "I"
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <main+0x1a4>)
 80005f4:	220c      	movs	r2, #12
 80005f6:	709a      	strb	r2, [r3, #2]
			keyBoardHIDsub.KEYCODE2 = 0x28; //print " " enter
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <main+0x1a4>)
 80005fa:	2228      	movs	r2, #40	; 0x28
 80005fc:	70da      	strb	r2, [r3, #3]

			buffer[0] = keyBoardHIDsub.MODIFIER;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <main+0x1a4>)
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	003b      	movs	r3, r7
 8000604:	701a      	strb	r2, [r3, #0]
			buffer[2] = keyBoardHIDsub.KEYCODE1;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <main+0x1a4>)
 8000608:	789a      	ldrb	r2, [r3, #2]
 800060a:	003b      	movs	r3, r7
 800060c:	709a      	strb	r2, [r3, #2]
			buffer[3] = keyBoardHIDsub.KEYCODE2;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <main+0x1a4>)
 8000610:	78da      	ldrb	r2, [r3, #3]
 8000612:	003b      	movs	r3, r7
 8000614:	70da      	strb	r2, [r3, #3]

			// Send the buffer using USBD_HID_SendReport
			USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 8000616:	0039      	movs	r1, r7
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <main+0x1a8>)
 800061a:	2208      	movs	r2, #8
 800061c:	0018      	movs	r0, r3
 800061e:	f005 fa21 	bl	8005a64 <USBD_HID_SendReport>
			HAL_Delay(50);
 8000622:	2032      	movs	r0, #50	; 0x32
 8000624:	f000 f980 	bl	8000928 <HAL_Delay>

			// Reset the buffer and send a release report
			memset(buffer, 0, sizeof(buffer));
 8000628:	003b      	movs	r3, r7
 800062a:	2208      	movs	r2, #8
 800062c:	2100      	movs	r1, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f007 f8f4 	bl	800781c <memset>
			USBD_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(buffer));
 8000634:	0039      	movs	r1, r7
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <main+0x1a8>)
 8000638:	2208      	movs	r2, #8
 800063a:	0018      	movs	r0, r3
 800063c:	f005 fa12 	bl	8005a64 <USBD_HID_SendReport>
			HAL_Delay(1000);
 8000640:	23fa      	movs	r3, #250	; 0xfa
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	0018      	movs	r0, r3
 8000646:	f000 f96f 	bl	8000928 <HAL_Delay>
		while (1) {
 800064a:	e738      	b.n	80004be <main+0x16>
 800064c:	20000174 	.word	0x20000174
 8000650:	20000184 	.word	0x20000184

08000654 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b09d      	sub	sp, #116	; 0x74
 8000658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800065a:	2438      	movs	r4, #56	; 0x38
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	2338      	movs	r3, #56	; 0x38
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f007 f8d9 	bl	800781c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800066a:	2324      	movs	r3, #36	; 0x24
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	0018      	movs	r0, r3
 8000670:	2314      	movs	r3, #20
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f007 f8d1 	bl	800781c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800067a:	003b      	movs	r3, r7
 800067c:	0018      	movs	r0, r3
 800067e:	2324      	movs	r3, #36	; 0x24
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f007 f8ca 	bl	800781c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <SystemClock_Config+0xe4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a2b      	ldr	r2, [pc, #172]	; (800073c <SystemClock_Config+0xe8>)
 800068e:	401a      	ands	r2, r3
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <SystemClock_Config+0xe4>)
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	0109      	lsls	r1, r1, #4
 8000696:	430a      	orrs	r2, r1
 8000698:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800069a:	0021      	movs	r1, r4
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2222      	movs	r2, #34	; 0x22
 80006a0:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2201      	movs	r2, #1
 80006a6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2210      	movs	r2, #16
 80006ac:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2201      	movs	r2, #1
 80006b2:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2202      	movs	r2, #2
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	02d2      	lsls	r2, r2, #11
 80006c6:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	03d2      	lsls	r2, r2, #15
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 f862 	bl	800279c <HAL_RCC_OscConfig>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x8c>
		Error_Handler();
 80006dc:	f000 f846 	bl	800076c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006e0:	2124      	movs	r1, #36	; 0x24
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	220f      	movs	r2, #15
 80006e6:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2203      	movs	r2, #3
 80006ec:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2101      	movs	r1, #1
 8000704:	0018      	movs	r0, r3
 8000706:	f002 fc0d 	bl	8002f24 <HAL_RCC_ClockConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xbe>
		Error_Handler();
 800070e:	f000 f82d 	bl	800076c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000712:	003b      	movs	r3, r7
 8000714:	2240      	movs	r2, #64	; 0x40
 8000716:	601a      	str	r2, [r3, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000718:	003b      	movs	r3, r7
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	04d2      	lsls	r2, r2, #19
 800071e:	621a      	str	r2, [r3, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000720:	003b      	movs	r3, r7
 8000722:	0018      	movs	r0, r3
 8000724:	f002 fdec 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xdc>
		Error_Handler();
 800072c:	f000 f81e 	bl	800076c <Error_Handler>
	}
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b01d      	add	sp, #116	; 0x74
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	40007000 	.word	0x40007000
 800073c:	ffffe7ff 	.word	0xffffe7ff

08000740 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_GPIO_Init+0x28>)
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_GPIO_Init+0x28>)
 800074c:	2101      	movs	r1, #1
 800074e:	430a      	orrs	r2, r1
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <MX_GPIO_Init+0x28>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	2201      	movs	r2, #1
 8000758:	4013      	ands	r3, r2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40021000 	.word	0x40021000

0800076c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_MspInit+0x24>)
 800077e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x24>)
 8000782:	2101      	movs	r1, #1
 8000784:	430a      	orrs	r2, r1
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <HAL_MspInit+0x24>)
 800078a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <HAL_MspInit+0x24>)
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	0549      	lsls	r1, r1, #21
 8000792:	430a      	orrs	r2, r1
 8000794:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f894 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <USB_IRQHandler+0x14>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 face 	bl	8000d78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	20000648 	.word	0x20000648

080007e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f8:	f7ff fff6 	bl	80007e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000822:	f007 f803 	bl	800782c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000826:	f7ff fe3f 	bl	80004a8 <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000838:	08007954 	.word	0x08007954
  ldr r2, =_sbss
 800083c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000840:	20000950 	.word	0x20000950

08000844 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_COMP_IRQHandler>
	...

08000848 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_Init+0x3c>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_Init+0x3c>)
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	430a      	orrs	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000860:	2000      	movs	r0, #0
 8000862:	f000 f811 	bl	8000888 <HAL_InitTick>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d003      	beq.n	8000872 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e001      	b.n	8000876 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000872:	f7ff ff81 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
}
 800087a:	0018      	movs	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	40022000 	.word	0x40022000

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_InitTick+0x5c>)
 8000892:	681c      	ldr	r4, [r3, #0]
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_InitTick+0x60>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	0019      	movs	r1, r3
 800089a:	23fa      	movs	r3, #250	; 0xfa
 800089c:	0098      	lsls	r0, r3, #2
 800089e:	f7ff fc33 	bl	8000108 <__udivsi3>
 80008a2:	0003      	movs	r3, r0
 80008a4:	0019      	movs	r1, r3
 80008a6:	0020      	movs	r0, r4
 80008a8:	f7ff fc2e 	bl	8000108 <__udivsi3>
 80008ac:	0003      	movs	r3, r0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 f92f 	bl	8000b12 <HAL_SYSTICK_Config>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e00f      	b.n	80008dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d80b      	bhi.n	80008da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	2301      	movs	r3, #1
 80008c6:	425b      	negs	r3, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 f8fc 	bl	8000ac8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_InitTick+0x64>)
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b003      	add	sp, #12
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x1c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	001a      	movs	r2, r3
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x20>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	18d2      	adds	r2, r2, r3
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_IncTick+0x20>)
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	20000008 	.word	0x20000008
 8000910:	2000017c 	.word	0x2000017c

08000914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <HAL_GetTick+0x10>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	2000017c 	.word	0x2000017c

08000928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff fff0 	bl	8000914 <HAL_GetTick>
 8000934:	0003      	movs	r3, r0
 8000936:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3301      	adds	r3, #1
 8000940:	d005      	beq.n	800094e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_Delay+0x44>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	001a      	movs	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	189b      	adds	r3, r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	f7ff ffe0 	bl	8000914 <HAL_GetTick>
 8000954:	0002      	movs	r2, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8f7      	bhi.n	8000950 <HAL_Delay+0x28>
  {
  }
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b004      	add	sp, #16
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	20000008 	.word	0x20000008

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	0002      	movs	r2, r0
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b7f      	cmp	r3, #127	; 0x7f
 8000982:	d809      	bhi.n	8000998 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	001a      	movs	r2, r3
 800098a:	231f      	movs	r3, #31
 800098c:	401a      	ands	r2, r3
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_EnableIRQ+0x30>)
 8000990:	2101      	movs	r1, #1
 8000992:	4091      	lsls	r1, r2
 8000994:	000a      	movs	r2, r1
 8000996:	601a      	str	r2, [r3, #0]
  }
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	0002      	movs	r2, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b7f      	cmp	r3, #127	; 0x7f
 80009b8:	d828      	bhi.n	8000a0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ba:	4a2f      	ldr	r2, [pc, #188]	; (8000a78 <__NVIC_SetPriority+0xd4>)
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	33c0      	adds	r3, #192	; 0xc0
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	589b      	ldr	r3, [r3, r2]
 80009ca:	1dfa      	adds	r2, r7, #7
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	0011      	movs	r1, r2
 80009d0:	2203      	movs	r2, #3
 80009d2:	400a      	ands	r2, r1
 80009d4:	00d2      	lsls	r2, r2, #3
 80009d6:	21ff      	movs	r1, #255	; 0xff
 80009d8:	4091      	lsls	r1, r2
 80009da:	000a      	movs	r2, r1
 80009dc:	43d2      	mvns	r2, r2
 80009de:	401a      	ands	r2, r3
 80009e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	22ff      	movs	r2, #255	; 0xff
 80009e8:	401a      	ands	r2, r3
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	0018      	movs	r0, r3
 80009f0:	2303      	movs	r3, #3
 80009f2:	4003      	ands	r3, r0
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f8:	481f      	ldr	r0, [pc, #124]	; (8000a78 <__NVIC_SetPriority+0xd4>)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	430a      	orrs	r2, r1
 8000a04:	33c0      	adds	r3, #192	; 0xc0
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a0a:	e031      	b.n	8000a70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <__NVIC_SetPriority+0xd8>)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0019      	movs	r1, r3
 8000a14:	230f      	movs	r3, #15
 8000a16:	400b      	ands	r3, r1
 8000a18:	3b08      	subs	r3, #8
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3306      	adds	r3, #6
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	3304      	adds	r3, #4
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1dfa      	adds	r2, r7, #7
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	400a      	ands	r2, r1
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	21ff      	movs	r1, #255	; 0xff
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	22ff      	movs	r2, #255	; 0xff
 8000a44:	401a      	ands	r2, r3
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	4003      	ands	r3, r0
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <__NVIC_SetPriority+0xd8>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	001c      	movs	r4, r3
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	4023      	ands	r3, r4
 8000a60:	3b08      	subs	r3, #8
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	3306      	adds	r3, #6
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	18c3      	adds	r3, r0, r3
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b003      	add	sp, #12
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	1e5a      	subs	r2, r3, #1
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	045b      	lsls	r3, r3, #17
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d301      	bcc.n	8000a98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a94:	2301      	movs	r3, #1
 8000a96:	e010      	b.n	8000aba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <SysTick_Config+0x44>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	3a01      	subs	r2, #1
 8000a9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff ff7c 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SysTick_Config+0x44>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SysTick_Config+0x44>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	0018      	movs	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	1c02      	adds	r2, r0, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff ff5d 	bl	80009a4 <__NVIC_SetPriority>
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b004      	add	sp, #16
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	0002      	movs	r2, r0
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff ff33 	bl	8000970 <__NVIC_EnableIRQ>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff ffaf 	bl	8000a80 <SysTick_Config>
 8000b22:	0003      	movs	r3, r0
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b002      	add	sp, #8
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af06      	add	r7, sp, #24
 8000b32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e0f0      	b.n	8000d20 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a79      	ldr	r2, [pc, #484]	; (8000d28 <HAL_PCD_Init+0x1fc>)
 8000b42:	5c9b      	ldrb	r3, [r3, r2]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d108      	bne.n	8000b5c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	23aa      	movs	r3, #170	; 0xaa
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	2100      	movs	r1, #0
 8000b52:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	0018      	movs	r0, r3
 8000b58:	f006 fb34 	bl	80071c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a72      	ldr	r2, [pc, #456]	; (8000d28 <HAL_PCD_Init+0x1fc>)
 8000b60:	2103      	movs	r1, #3
 8000b62:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f002 fd6d 	bl	8003648 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b6e:	230f      	movs	r3, #15
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	e049      	b.n	8000c0c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b78:	200f      	movs	r0, #15
 8000b7a:	183b      	adds	r3, r7, r0
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	0013      	movs	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	189b      	adds	r3, r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	18cb      	adds	r3, r1, r3
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b92:	183b      	adds	r3, r7, r0
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	0013      	movs	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	189b      	adds	r3, r3, r2
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	183a      	adds	r2, r7, r0
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ba8:	183b      	adds	r3, r7, r0
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	189b      	adds	r3, r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	18cb      	adds	r3, r1, r3
 8000bba:	3303      	adds	r3, #3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bc0:	183b      	adds	r3, r7, r0
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	189b      	adds	r3, r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	18cb      	adds	r3, r1, r3
 8000bd0:	3338      	adds	r3, #56	; 0x38
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bd6:	183b      	adds	r3, r7, r0
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	0013      	movs	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	189b      	adds	r3, r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	18cb      	adds	r3, r1, r3
 8000be6:	333c      	adds	r3, #60	; 0x3c
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bec:	183b      	adds	r3, r7, r0
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	0013      	movs	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	189b      	adds	r3, r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	18cb      	adds	r3, r1, r3
 8000bfc:	3340      	adds	r3, #64	; 0x40
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c02:	183b      	adds	r3, r7, r0
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	183b      	adds	r3, r7, r0
 8000c08:	3201      	adds	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d3ae      	bcc.n	8000b78 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e056      	b.n	8000cd0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c22:	240f      	movs	r4, #15
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	236a      	movs	r3, #106	; 0x6a
 8000c2c:	33ff      	adds	r3, #255	; 0xff
 8000c2e:	0019      	movs	r1, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	189b      	adds	r3, r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	18c3      	adds	r3, r0, r3
 8000c3a:	185b      	adds	r3, r3, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	23b4      	movs	r3, #180	; 0xb4
 8000c48:	0059      	lsls	r1, r3, #1
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	189b      	adds	r3, r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	18c3      	adds	r3, r0, r3
 8000c54:	185b      	adds	r3, r3, r1
 8000c56:	193a      	adds	r2, r7, r4
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	236c      	movs	r3, #108	; 0x6c
 8000c64:	33ff      	adds	r3, #255	; 0xff
 8000c66:	0019      	movs	r1, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	189b      	adds	r3, r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	18c3      	adds	r3, r0, r3
 8000c72:	185b      	adds	r3, r3, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	23bc      	movs	r3, #188	; 0xbc
 8000c80:	0059      	lsls	r1, r3, #1
 8000c82:	0013      	movs	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	189b      	adds	r3, r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	18c3      	adds	r3, r0, r3
 8000c8c:	185b      	adds	r3, r3, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	23be      	movs	r3, #190	; 0xbe
 8000c9a:	0059      	lsls	r1, r3, #1
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	189b      	adds	r3, r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	18c3      	adds	r3, r0, r3
 8000ca6:	185b      	adds	r3, r3, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	23c0      	movs	r3, #192	; 0xc0
 8000cb4:	0059      	lsls	r1, r3, #1
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	189b      	adds	r3, r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	18c3      	adds	r3, r0, r3
 8000cc0:	185b      	adds	r3, r3, r1
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	3201      	adds	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d3a1      	bcc.n	8000c22 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	466a      	mov	r2, sp
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	001a      	movs	r2, r3
 8000cea:	3210      	adds	r2, #16
 8000cec:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000cee:	c170      	stmia	r1!, {r4, r5, r6}
 8000cf0:	ca30      	ldmia	r2!, {r4, r5}
 8000cf2:	c130      	stmia	r1!, {r4, r5}
 8000cf4:	6859      	ldr	r1, [r3, #4]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	f002 fcbf 	bl	800367c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2224      	movs	r2, #36	; 0x24
 8000d02:	2100      	movs	r1, #0
 8000d04:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_PCD_Init+0x1fc>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d103      	bne.n	8000d1e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fd09 	bl	8002730 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b005      	add	sp, #20
 8000d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d28:	000002a9 	.word	0x000002a9

08000d2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	23aa      	movs	r3, #170	; 0xaa
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <HAL_PCD_Start+0x18>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e014      	b.n	8000d6e <HAL_PCD_Start+0x42>
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	23aa      	movs	r3, #170	; 0xaa
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	0018      	movs	r0, r3
 8000d54:	f002 fc62 	bl	800361c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f004 fc65 	bl	800562c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	23aa      	movs	r3, #170	; 0xaa
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	2100      	movs	r1, #0
 8000d6a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	0018      	movs	r0, r3
 8000d86:	f004 fc67 	bl	8005658 <USB_ReadInterrupts>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	4013      	ands	r3, r2
 8000d96:	d004      	beq.n	8000da2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 fb48 	bl	8001430 <PCD_EP_ISR_Handler>

    return;
 8000da0:	e11d      	b.n	8000fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4013      	ands	r3, r2
 8000daa:	d015      	beq.n	8000dd8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2244      	movs	r2, #68	; 0x44
 8000db2:	5a9b      	ldrh	r3, [r3, r2]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	498a      	ldr	r1, [pc, #552]	; (8000fe4 <HAL_PCD_IRQHandler+0x26c>)
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	b291      	uxth	r1, r2
 8000dc0:	2244      	movs	r2, #68	; 0x44
 8000dc2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f006 fa7f 	bl	80072ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2100      	movs	r1, #0
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 f915 	bl	8001000 <HAL_PCD_SetAddress>

    return;
 8000dd6:	e102      	b.n	8000fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	01db      	lsls	r3, r3, #7
 8000dde:	4013      	ands	r3, r2
 8000de0:	d00c      	beq.n	8000dfc <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2244      	movs	r2, #68	; 0x44
 8000de8:	5a9b      	ldrh	r3, [r3, r2]
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	497d      	ldr	r1, [pc, #500]	; (8000fe8 <HAL_PCD_IRQHandler+0x270>)
 8000df2:	400a      	ands	r2, r1
 8000df4:	b291      	uxth	r1, r2
 8000df6:	2244      	movs	r2, #68	; 0x44
 8000df8:	5299      	strh	r1, [r3, r2]

    return;
 8000dfa:	e0f0      	b.n	8000fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	019b      	lsls	r3, r3, #6
 8000e02:	4013      	ands	r3, r2
 8000e04:	d00c      	beq.n	8000e20 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2244      	movs	r2, #68	; 0x44
 8000e0c:	5a9b      	ldrh	r3, [r3, r2]
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4975      	ldr	r1, [pc, #468]	; (8000fec <HAL_PCD_IRQHandler+0x274>)
 8000e16:	400a      	ands	r2, r1
 8000e18:	b291      	uxth	r1, r2
 8000e1a:	2244      	movs	r2, #68	; 0x44
 8000e1c:	5299      	strh	r1, [r3, r2]

    return;
 8000e1e:	e0de      	b.n	8000fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	015b      	lsls	r3, r3, #5
 8000e26:	4013      	ands	r3, r2
 8000e28:	d038      	beq.n	8000e9c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2240      	movs	r2, #64	; 0x40
 8000e30:	5a9b      	ldrh	r3, [r3, r2]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2104      	movs	r1, #4
 8000e3a:	438a      	bics	r2, r1
 8000e3c:	b291      	uxth	r1, r2
 8000e3e:	2240      	movs	r2, #64	; 0x40
 8000e40:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2240      	movs	r2, #64	; 0x40
 8000e48:	5a9b      	ldrh	r3, [r3, r2]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2108      	movs	r1, #8
 8000e52:	438a      	bics	r2, r1
 8000e54:	b291      	uxth	r1, r2
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	23b8      	movs	r3, #184	; 0xb8
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d109      	bne.n	8000e7a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	23b8      	movs	r3, #184	; 0xb8
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2100      	movs	r1, #0
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 fc85 	bl	8002784 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f006 fa65 	bl	800734c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2244      	movs	r2, #68	; 0x44
 8000e88:	5a9b      	ldrh	r3, [r3, r2]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4957      	ldr	r1, [pc, #348]	; (8000ff0 <HAL_PCD_IRQHandler+0x278>)
 8000e92:	400a      	ands	r2, r1
 8000e94:	b291      	uxth	r1, r2
 8000e96:	2244      	movs	r2, #68	; 0x44
 8000e98:	5299      	strh	r1, [r3, r2]

    return;
 8000e9a:	e0a0      	b.n	8000fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d028      	beq.n	8000ef8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2240      	movs	r2, #64	; 0x40
 8000eac:	5a9b      	ldrh	r3, [r3, r2]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	b291      	uxth	r1, r2
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2244      	movs	r2, #68	; 0x44
 8000ec4:	5a9b      	ldrh	r3, [r3, r2]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4949      	ldr	r1, [pc, #292]	; (8000ff4 <HAL_PCD_IRQHandler+0x27c>)
 8000ece:	400a      	ands	r2, r1
 8000ed0:	b291      	uxth	r1, r2
 8000ed2:	2244      	movs	r2, #68	; 0x44
 8000ed4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2240      	movs	r2, #64	; 0x40
 8000edc:	5a9b      	ldrh	r3, [r3, r2]
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	b291      	uxth	r1, r2
 8000eea:	2240      	movs	r2, #64	; 0x40
 8000eec:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f006 fa0f 	bl	8007314 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ef6:	e072      	b.n	8000fde <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	4013      	ands	r3, r2
 8000efe:	d046      	beq.n	8000f8e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2244      	movs	r2, #68	; 0x44
 8000f06:	5a9b      	ldrh	r3, [r3, r2]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	438a      	bics	r2, r1
 8000f12:	b291      	uxth	r1, r2
 8000f14:	2244      	movs	r2, #68	; 0x44
 8000f16:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	23b8      	movs	r3, #184	; 0xb8
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d12f      	bne.n	8000f84 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2240      	movs	r2, #64	; 0x40
 8000f2a:	5a9b      	ldrh	r3, [r3, r2]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2104      	movs	r1, #4
 8000f34:	430a      	orrs	r2, r1
 8000f36:	b291      	uxth	r1, r2
 8000f38:	2240      	movs	r2, #64	; 0x40
 8000f3a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2240      	movs	r2, #64	; 0x40
 8000f42:	5a9b      	ldrh	r3, [r3, r2]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2108      	movs	r1, #8
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	b291      	uxth	r1, r2
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	23b8      	movs	r3, #184	; 0xb8
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2254      	movs	r2, #84	; 0x54
 8000f64:	5a9b      	ldrh	r3, [r3, r2]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	223c      	movs	r2, #60	; 0x3c
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	0019      	movs	r1, r3
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	23b9      	movs	r3, #185	; 0xb9
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 fc01 	bl	8002784 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000f82:	e02c      	b.n	8000fde <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	0018      	movs	r0, r3
 8000f88:	f006 f9c4 	bl	8007314 <HAL_PCD_SuspendCallback>
    return;
 8000f8c:	e027      	b.n	8000fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d010      	beq.n	8000fba <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2244      	movs	r2, #68	; 0x44
 8000f9e:	5a9b      	ldrh	r3, [r3, r2]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4914      	ldr	r1, [pc, #80]	; (8000ff8 <HAL_PCD_IRQHandler+0x280>)
 8000fa8:	400a      	ands	r2, r1
 8000faa:	b291      	uxth	r1, r2
 8000fac:	2244      	movs	r2, #68	; 0x44
 8000fae:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f006 f97a 	bl	80072ac <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000fb8:	e011      	b.n	8000fde <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d00c      	beq.n	8000fde <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2244      	movs	r2, #68	; 0x44
 8000fca:	5a9b      	ldrh	r3, [r3, r2]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	490a      	ldr	r1, [pc, #40]	; (8000ffc <HAL_PCD_IRQHandler+0x284>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	b291      	uxth	r1, r2
 8000fd8:	2244      	movs	r2, #68	; 0x44
 8000fda:	5299      	strh	r1, [r3, r2]

    return;
 8000fdc:	46c0      	nop			; (mov r8, r8)
  }
}
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b004      	add	sp, #16
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	fffffbff 	.word	0xfffffbff
 8000fe8:	ffffbfff 	.word	0xffffbfff
 8000fec:	ffffdfff 	.word	0xffffdfff
 8000ff0:	ffffefff 	.word	0xffffefff
 8000ff4:	fffff7ff 	.word	0xfffff7ff
 8000ff8:	fffffdff 	.word	0xfffffdff
 8000ffc:	fffffeff 	.word	0xfffffeff

08001000 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	000a      	movs	r2, r1
 800100a:	1cfb      	adds	r3, r7, #3
 800100c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	23aa      	movs	r3, #170	; 0xaa
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <HAL_PCD_SetAddress+0x1e>
 800101a:	2302      	movs	r3, #2
 800101c:	e017      	b.n	800104e <HAL_PCD_SetAddress+0x4e>
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	23aa      	movs	r3, #170	; 0xaa
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	2101      	movs	r1, #1
 8001026:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	1cfa      	adds	r2, r7, #3
 800102c:	2124      	movs	r1, #36	; 0x24
 800102e:	7812      	ldrb	r2, [r2, #0]
 8001030:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	1cfb      	adds	r3, r7, #3
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	0019      	movs	r1, r3
 800103c:	0010      	movs	r0, r2
 800103e:	f004 fae1 	bl	8005604 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	23aa      	movs	r3, #170	; 0xaa
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	2100      	movs	r1, #0
 800104a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001056:	b590      	push	{r4, r7, lr}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	000c      	movs	r4, r1
 8001060:	0010      	movs	r0, r2
 8001062:	0019      	movs	r1, r3
 8001064:	1cfb      	adds	r3, r7, #3
 8001066:	1c22      	adds	r2, r4, #0
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	003b      	movs	r3, r7
 800106c:	1c02      	adds	r2, r0, #0
 800106e:	801a      	strh	r2, [r3, #0]
 8001070:	1cbb      	adds	r3, r7, #2
 8001072:	1c0a      	adds	r2, r1, #0
 8001074:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001076:	230b      	movs	r3, #11
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800107e:	1cfb      	adds	r3, r7, #3
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	da0f      	bge.n	80010a8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001088:	1cfb      	adds	r3, r7, #3
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2207      	movs	r2, #7
 800108e:	4013      	ands	r3, r2
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	0013      	movs	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	189b      	adds	r3, r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	18d3      	adds	r3, r2, r3
 800109e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	705a      	strb	r2, [r3, #1]
 80010a6:	e00f      	b.n	80010c8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010a8:	1cfb      	adds	r3, r7, #3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2207      	movs	r2, #7
 80010ae:	401a      	ands	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	189b      	adds	r3, r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	3369      	adds	r3, #105	; 0x69
 80010ba:	33ff      	adds	r3, #255	; 0xff
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	18d3      	adds	r3, r2, r3
 80010c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010c8:	1cfb      	adds	r3, r7, #3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2207      	movs	r2, #7
 80010ce:	4013      	ands	r3, r2
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010d6:	003b      	movs	r3, r7
 80010d8:	881a      	ldrh	r2, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1cba      	adds	r2, r7, #2
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010e6:	1cbb      	adds	r3, r7, #2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d102      	bne.n	80010f4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	23aa      	movs	r3, #170	; 0xaa
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_PCD_EP_Open+0xae>
 8001100:	2302      	movs	r3, #2
 8001102:	e013      	b.n	800112c <HAL_PCD_EP_Open+0xd6>
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	23aa      	movs	r3, #170	; 0xaa
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	2101      	movs	r1, #1
 800110c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f002 fad8 	bl	80036cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	23aa      	movs	r3, #170	; 0xaa
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	2100      	movs	r1, #0
 8001124:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001126:	230b      	movs	r3, #11
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	781b      	ldrb	r3, [r3, #0]
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b005      	add	sp, #20
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	000a      	movs	r2, r1
 800113e:	1cfb      	adds	r3, r7, #3
 8001140:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001142:	1cfb      	adds	r3, r7, #3
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	da0f      	bge.n	800116c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800114c:	1cfb      	adds	r3, r7, #3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2207      	movs	r2, #7
 8001152:	4013      	ands	r3, r2
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	0013      	movs	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	189b      	adds	r3, r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2201      	movs	r2, #1
 8001168:	705a      	strb	r2, [r3, #1]
 800116a:	e00f      	b.n	800118c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800116c:	1cfb      	adds	r3, r7, #3
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2207      	movs	r2, #7
 8001172:	401a      	ands	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	189b      	adds	r3, r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	3369      	adds	r3, #105	; 0x69
 800117e:	33ff      	adds	r3, #255	; 0xff
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	18d3      	adds	r3, r2, r3
 8001184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800118c:	1cfb      	adds	r3, r7, #3
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2207      	movs	r2, #7
 8001192:	4013      	ands	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	23aa      	movs	r3, #170	; 0xaa
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_PCD_EP_Close+0x76>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e011      	b.n	80011ce <HAL_PCD_EP_Close+0x9a>
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	23aa      	movs	r3, #170	; 0xaa
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	2101      	movs	r1, #1
 80011b2:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f002 fe27 	bl	8003e10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	23aa      	movs	r3, #170	; 0xaa
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	2100      	movs	r1, #0
 80011ca:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	200b      	movs	r0, #11
 80011e4:	183b      	adds	r3, r7, r0
 80011e6:	1c0a      	adds	r2, r1, #0
 80011e8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011ea:	0001      	movs	r1, r0
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2207      	movs	r2, #7
 80011f2:	401a      	ands	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	189b      	adds	r3, r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	3369      	adds	r3, #105	; 0x69
 80011fe:	33ff      	adds	r3, #255	; 0xff
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	18d3      	adds	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2200      	movs	r2, #0
 800121c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2207      	movs	r2, #7
 8001224:	4013      	ands	r3, r2
 8001226:	b2da      	uxtb	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f002 ffab 	bl	8004190 <USB_EPStartXfer>

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b006      	add	sp, #24
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	200b      	movs	r0, #11
 8001252:	183b      	adds	r3, r7, r0
 8001254:	1c0a      	adds	r2, r1, #0
 8001256:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001258:	183b      	adds	r3, r7, r0
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2207      	movs	r2, #7
 800125e:	4013      	ands	r3, r2
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	0013      	movs	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	189b      	adds	r3, r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	18d3      	adds	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2224      	movs	r2, #36	; 0x24
 8001280:	2101      	movs	r1, #1
 8001282:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2201      	movs	r2, #1
 8001294:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001296:	183b      	adds	r3, r7, r0
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2207      	movs	r2, #7
 800129c:	4013      	ands	r3, r2
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f002 ff6f 	bl	8004190 <USB_EPStartXfer>

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b006      	add	sp, #24
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	000a      	movs	r2, r1
 80012c6:	1cfb      	adds	r3, r7, #3
 80012c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012ca:	1cfb      	adds	r3, r7, #3
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2207      	movs	r2, #7
 80012d0:	401a      	ands	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d901      	bls.n	80012de <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e046      	b.n	800136c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012de:	1cfb      	adds	r3, r7, #3
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da0f      	bge.n	8001308 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012e8:	1cfb      	adds	r3, r7, #3
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2207      	movs	r2, #7
 80012ee:	4013      	ands	r3, r2
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	0013      	movs	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	189b      	adds	r3, r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2201      	movs	r2, #1
 8001304:	705a      	strb	r2, [r3, #1]
 8001306:	e00d      	b.n	8001324 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001308:	1cfb      	adds	r3, r7, #3
 800130a:	781a      	ldrb	r2, [r3, #0]
 800130c:	0013      	movs	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	189b      	adds	r3, r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	3369      	adds	r3, #105	; 0x69
 8001316:	33ff      	adds	r3, #255	; 0xff
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	18d3      	adds	r3, r2, r3
 800131c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2201      	movs	r2, #1
 8001328:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800132a:	1cfb      	adds	r3, r7, #3
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2207      	movs	r2, #7
 8001330:	4013      	ands	r3, r2
 8001332:	b2da      	uxtb	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	23aa      	movs	r3, #170	; 0xaa
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <HAL_PCD_EP_SetStall+0x8c>
 8001344:	2302      	movs	r3, #2
 8001346:	e011      	b.n	800136c <HAL_PCD_EP_SetStall+0xb0>
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	23aa      	movs	r3, #170	; 0xaa
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	2101      	movs	r1, #1
 8001350:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f004 f850 	bl	8005400 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	23aa      	movs	r3, #170	; 0xaa
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	2100      	movs	r1, #0
 8001368:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	b004      	add	sp, #16
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	000a      	movs	r2, r1
 800137e:	1cfb      	adds	r3, r7, #3
 8001380:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001382:	1cfb      	adds	r3, r7, #3
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	220f      	movs	r2, #15
 8001388:	401a      	ands	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	d901      	bls.n	8001396 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e048      	b.n	8001428 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001396:	1cfb      	adds	r3, r7, #3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	da0f      	bge.n	80013c0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013a0:	1cfb      	adds	r3, r7, #3
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2207      	movs	r2, #7
 80013a6:	4013      	ands	r3, r2
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	0013      	movs	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	189b      	adds	r3, r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	705a      	strb	r2, [r3, #1]
 80013be:	e00f      	b.n	80013e0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013c0:	1cfb      	adds	r3, r7, #3
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2207      	movs	r2, #7
 80013c6:	401a      	ands	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	189b      	adds	r3, r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	3369      	adds	r3, #105	; 0x69
 80013d2:	33ff      	adds	r3, #255	; 0xff
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	18d3      	adds	r3, r2, r3
 80013d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e6:	1cfb      	adds	r3, r7, #3
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2207      	movs	r2, #7
 80013ec:	4013      	ands	r3, r2
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	23aa      	movs	r3, #170	; 0xaa
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_PCD_EP_ClrStall+0x90>
 8001400:	2302      	movs	r3, #2
 8001402:	e011      	b.n	8001428 <HAL_PCD_EP_ClrStall+0xb4>
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	23aa      	movs	r3, #170	; 0xaa
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	2101      	movs	r1, #1
 800140c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	0011      	movs	r1, r2
 8001416:	0018      	movs	r0, r3
 8001418:	f004 f842 	bl	80054a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	23aa      	movs	r3, #170	; 0xaa
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	2100      	movs	r1, #0
 8001424:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b004      	add	sp, #16
 800142e:	bd80      	pop	{r7, pc}

08001430 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b096      	sub	sp, #88	; 0x58
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001438:	f000 fbec 	bl	8001c14 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	204e      	movs	r0, #78	; 0x4e
 8001442:	183b      	adds	r3, r7, r0
 8001444:	2144      	movs	r1, #68	; 0x44
 8001446:	5a52      	ldrh	r2, [r2, r1]
 8001448:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800144a:	183b      	adds	r3, r7, r0
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	244d      	movs	r4, #77	; 0x4d
 8001452:	193b      	adds	r3, r7, r4
 8001454:	210f      	movs	r1, #15
 8001456:	400a      	ands	r2, r1
 8001458:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800145a:	193b      	adds	r3, r7, r4
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d000      	beq.n	8001464 <PCD_EP_ISR_Handler+0x34>
 8001462:	e18f      	b.n	8001784 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001464:	183b      	adds	r3, r7, r0
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	2210      	movs	r2, #16
 800146a:	4013      	ands	r3, r2
 800146c:	d155      	bne.n	800151a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b29a      	uxth	r2, r3
 8001476:	200e      	movs	r0, #14
 8001478:	183b      	adds	r3, r7, r0
 800147a:	49bb      	ldr	r1, [pc, #748]	; (8001768 <PCD_EP_ISR_Handler+0x338>)
 800147c:	400a      	ands	r2, r1
 800147e:	801a      	strh	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	183a      	adds	r2, r7, r0
 8001486:	8812      	ldrh	r2, [r2, #0]
 8001488:	49b8      	ldr	r1, [pc, #736]	; (800176c <PCD_EP_ISR_Handler+0x33c>)
 800148a:	430a      	orrs	r2, r1
 800148c:	b292      	uxth	r2, r2
 800148e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3328      	adds	r3, #40	; 0x28
 8001494:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2250      	movs	r2, #80	; 0x50
 800149c:	5a9b      	ldrh	r3, [r3, r2]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	001a      	movs	r2, r3
 80014a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	18d2      	adds	r2, r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	18d3      	adds	r3, r2, r3
 80014b0:	4aaf      	ldr	r2, [pc, #700]	; (8001770 <PCD_EP_ISR_Handler+0x340>)
 80014b2:	4694      	mov	ip, r2
 80014b4:	4463      	add	r3, ip
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	059b      	lsls	r3, r3, #22
 80014ba:	0d9a      	lsrs	r2, r3, #22
 80014bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	18d2      	adds	r2, r2, r3
 80014ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2100      	movs	r1, #0
 80014d2:	0018      	movs	r0, r3
 80014d4:	f005 fecc 	bl	8007270 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2224      	movs	r2, #36	; 0x24
 80014dc:	5c9b      	ldrb	r3, [r3, r2]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <PCD_EP_ISR_Handler+0xb8>
 80014e4:	f000 fb96 	bl	8001c14 <PCD_EP_ISR_Handler+0x7e4>
 80014e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <PCD_EP_ISR_Handler+0xc4>
 80014f0:	f000 fb90 	bl	8001c14 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	5c9b      	ldrb	r3, [r3, r2]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	4252      	negs	r2, r2
 8001500:	4313      	orrs	r3, r2
 8001502:	b2da      	uxtb	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b291      	uxth	r1, r2
 800150a:	224c      	movs	r2, #76	; 0x4c
 800150c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2224      	movs	r2, #36	; 0x24
 8001512:	2100      	movs	r1, #0
 8001514:	5499      	strb	r1, [r3, r2]
 8001516:	f000 fb7d 	bl	8001c14 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3369      	adds	r3, #105	; 0x69
 800151e:	33ff      	adds	r3, #255	; 0xff
 8001520:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	214a      	movs	r1, #74	; 0x4a
 8001528:	187b      	adds	r3, r7, r1
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800152e:	187b      	adds	r3, r7, r1
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4013      	ands	r3, r2
 8001538:	d037      	beq.n	80015aa <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2250      	movs	r2, #80	; 0x50
 8001540:	5a9b      	ldrh	r3, [r3, r2]
 8001542:	b29b      	uxth	r3, r3
 8001544:	001a      	movs	r2, r3
 8001546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	18d2      	adds	r2, r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	18d3      	adds	r3, r2, r3
 8001554:	4a87      	ldr	r2, [pc, #540]	; (8001774 <PCD_EP_ISR_Handler+0x344>)
 8001556:	4694      	mov	ip, r2
 8001558:	4463      	add	r3, ip
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	059b      	lsls	r3, r3, #22
 800155e:	0d9a      	lsrs	r2, r3, #22
 8001560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001562:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	22ac      	movs	r2, #172	; 0xac
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	1899      	adds	r1, r3, r2
 8001570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001572:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001576:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001578:	b29b      	uxth	r3, r3
 800157a:	f004 f8c4 	bl	8005706 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	b29a      	uxth	r2, r3
 8001586:	2010      	movs	r0, #16
 8001588:	183b      	adds	r3, r7, r0
 800158a:	497b      	ldr	r1, [pc, #492]	; (8001778 <PCD_EP_ISR_Handler+0x348>)
 800158c:	400a      	ands	r2, r1
 800158e:	801a      	strh	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	183a      	adds	r2, r7, r0
 8001596:	8812      	ldrh	r2, [r2, #0]
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	430a      	orrs	r2, r1
 800159c:	b292      	uxth	r2, r2
 800159e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	0018      	movs	r0, r3
 80015a4:	f005 fe2e 	bl	8007204 <HAL_PCD_SetupStageCallback>
 80015a8:	e334      	b.n	8001c14 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015aa:	234a      	movs	r3, #74	; 0x4a
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	2200      	movs	r2, #0
 80015b0:	5e9b      	ldrsh	r3, [r3, r2]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db00      	blt.n	80015b8 <PCD_EP_ISR_Handler+0x188>
 80015b6:	e32d      	b.n	8001c14 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	201e      	movs	r0, #30
 80015c2:	183b      	adds	r3, r7, r0
 80015c4:	496c      	ldr	r1, [pc, #432]	; (8001778 <PCD_EP_ISR_Handler+0x348>)
 80015c6:	400a      	ands	r2, r1
 80015c8:	801a      	strh	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	183a      	adds	r2, r7, r0
 80015d0:	8812      	ldrh	r2, [r2, #0]
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	430a      	orrs	r2, r1
 80015d6:	b292      	uxth	r2, r2
 80015d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2250      	movs	r2, #80	; 0x50
 80015e0:	5a9b      	ldrh	r3, [r3, r2]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	001a      	movs	r2, r3
 80015e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	18d2      	adds	r2, r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	18d3      	adds	r3, r2, r3
 80015f4:	4a5f      	ldr	r2, [pc, #380]	; (8001774 <PCD_EP_ISR_Handler+0x344>)
 80015f6:	4694      	mov	ip, r2
 80015f8:	4463      	add	r3, ip
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	059b      	lsls	r3, r3, #22
 80015fe:	0d9a      	lsrs	r2, r3, #22
 8001600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001602:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01a      	beq.n	8001642 <PCD_EP_ISR_Handler+0x212>
 800160c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d016      	beq.n	8001642 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161a:	6959      	ldr	r1, [r3, #20]
 800161c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001622:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001624:	b29b      	uxth	r3, r3
 8001626:	f004 f86e 	bl	8005706 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800162a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	18d2      	adds	r2, r2, r3
 8001634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001636:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2100      	movs	r1, #0
 800163c:	0018      	movs	r0, r3
 800163e:	f005 fdf6 	bl	800722e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	214a      	movs	r1, #74	; 0x4a
 8001648:	187b      	adds	r3, r7, r1
 800164a:	8812      	ldrh	r2, [r2, #0]
 800164c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800164e:	187b      	adds	r3, r7, r1
 8001650:	881a      	ldrh	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4013      	ands	r3, r2
 8001658:	d000      	beq.n	800165c <PCD_EP_ISR_Handler+0x22c>
 800165a:	e2db      	b.n	8001c14 <PCD_EP_ISR_Handler+0x7e4>
 800165c:	187b      	adds	r3, r7, r1
 800165e:	881a      	ldrh	r2, [r3, #0]
 8001660:	23c0      	movs	r3, #192	; 0xc0
 8001662:	019b      	lsls	r3, r3, #6
 8001664:	401a      	ands	r2, r3
 8001666:	23c0      	movs	r3, #192	; 0xc0
 8001668:	019b      	lsls	r3, r3, #6
 800166a:	429a      	cmp	r2, r3
 800166c:	d100      	bne.n	8001670 <PCD_EP_ISR_Handler+0x240>
 800166e:	e2d1      	b.n	8001c14 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2250      	movs	r2, #80	; 0x50
 800167c:	5a9b      	ldrh	r3, [r3, r2]
 800167e:	b29b      	uxth	r3, r3
 8001680:	001a      	movs	r2, r3
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	189b      	adds	r3, r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	4a3a      	ldr	r2, [pc, #232]	; (8001774 <PCD_EP_ISR_Handler+0x344>)
 800168c:	4694      	mov	ip, r2
 800168e:	4463      	add	r3, ip
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	059b      	lsls	r3, r3, #22
 800169a:	0d9b      	lsrs	r3, r3, #22
 800169c:	b29a      	uxth	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b3e      	cmp	r3, #62	; 0x3e
 80016a8:	d91a      	bls.n	80016e0 <PCD_EP_ISR_Handler+0x2b0>
 80016aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	647b      	str	r3, [r7, #68]	; 0x44
 80016b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	221f      	movs	r2, #31
 80016b8:	4013      	ands	r3, r2
 80016ba:	d102      	bne.n	80016c2 <PCD_EP_ISR_Handler+0x292>
 80016bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016be:	3b01      	subs	r3, #1
 80016c0:	647b      	str	r3, [r7, #68]	; 0x44
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	029b      	lsls	r3, r3, #10
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4a25      	ldr	r2, [pc, #148]	; (800176c <PCD_EP_ISR_Handler+0x33c>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b29a      	uxth	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	801a      	strh	r2, [r3, #0]
 80016de:	e023      	b.n	8001728 <PCD_EP_ISR_Handler+0x2f8>
 80016e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d108      	bne.n	80016fa <PCD_EP_ISR_Handler+0x2ca>
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4a1f      	ldr	r2, [pc, #124]	; (800176c <PCD_EP_ISR_Handler+0x33c>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	801a      	strh	r2, [r3, #0]
 80016f8:	e016      	b.n	8001728 <PCD_EP_ISR_Handler+0x2f8>
 80016fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	647b      	str	r3, [r7, #68]	; 0x44
 8001702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2201      	movs	r2, #1
 8001708:	4013      	ands	r3, r2
 800170a:	d002      	beq.n	8001712 <PCD_EP_ISR_Handler+0x2e2>
 800170c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800170e:	3301      	adds	r3, #1
 8001710:	647b      	str	r3, [r7, #68]	; 0x44
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b29a      	uxth	r2, r3
 8001718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800171a:	b29b      	uxth	r3, r3
 800171c:	029b      	lsls	r3, r3, #10
 800171e:	b29b      	uxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b29a      	uxth	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29a      	uxth	r2, r3
 8001730:	2012      	movs	r0, #18
 8001732:	183b      	adds	r3, r7, r0
 8001734:	4911      	ldr	r1, [pc, #68]	; (800177c <PCD_EP_ISR_Handler+0x34c>)
 8001736:	400a      	ands	r2, r1
 8001738:	801a      	strh	r2, [r3, #0]
 800173a:	183b      	adds	r3, r7, r0
 800173c:	183a      	adds	r2, r7, r0
 800173e:	8812      	ldrh	r2, [r2, #0]
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	0149      	lsls	r1, r1, #5
 8001744:	404a      	eors	r2, r1
 8001746:	801a      	strh	r2, [r3, #0]
 8001748:	183b      	adds	r3, r7, r0
 800174a:	183a      	adds	r2, r7, r0
 800174c:	8812      	ldrh	r2, [r2, #0]
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0189      	lsls	r1, r1, #6
 8001752:	404a      	eors	r2, r1
 8001754:	801a      	strh	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	183a      	adds	r2, r7, r0
 800175c:	8812      	ldrh	r2, [r2, #0]
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <PCD_EP_ISR_Handler+0x350>)
 8001760:	430a      	orrs	r2, r1
 8001762:	b292      	uxth	r2, r2
 8001764:	801a      	strh	r2, [r3, #0]
 8001766:	e255      	b.n	8001c14 <PCD_EP_ISR_Handler+0x7e4>
 8001768:	ffff8f0f 	.word	0xffff8f0f
 800176c:	ffff8000 	.word	0xffff8000
 8001770:	00000402 	.word	0x00000402
 8001774:	00000406 	.word	0x00000406
 8001778:	00000f8f 	.word	0x00000f8f
 800177c:	ffffbf8f 	.word	0xffffbf8f
 8001780:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	001a      	movs	r2, r3
 800178a:	204d      	movs	r0, #77	; 0x4d
 800178c:	183b      	adds	r3, r7, r0
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	18d2      	adds	r2, r2, r3
 8001794:	214a      	movs	r1, #74	; 0x4a
 8001796:	187b      	adds	r3, r7, r1
 8001798:	8812      	ldrh	r2, [r2, #0]
 800179a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2200      	movs	r2, #0
 80017a0:	5e9b      	ldrsh	r3, [r3, r2]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db00      	blt.n	80017a8 <PCD_EP_ISR_Handler+0x378>
 80017a6:	e0fa      	b.n	800199e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	001a      	movs	r2, r3
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	18d3      	adds	r3, r2, r3
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	2448      	movs	r4, #72	; 0x48
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	49d1      	ldr	r1, [pc, #836]	; (8001b04 <PCD_EP_ISR_Handler+0x6d4>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	001a      	movs	r2, r3
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	18d3      	adds	r3, r2, r3
 80017d2:	193a      	adds	r2, r7, r4
 80017d4:	8812      	ldrh	r2, [r2, #0]
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	430a      	orrs	r2, r1
 80017da:	b292      	uxth	r2, r2
 80017dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80017de:	183b      	adds	r3, r7, r0
 80017e0:	781a      	ldrb	r2, [r3, #0]
 80017e2:	0013      	movs	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	189b      	adds	r3, r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	3369      	adds	r3, #105	; 0x69
 80017ec:	33ff      	adds	r3, #255	; 0xff
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80017f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f6:	7b1b      	ldrb	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d125      	bne.n	8001848 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2250      	movs	r2, #80	; 0x50
 8001802:	5a9b      	ldrh	r3, [r3, r2]
 8001804:	b29b      	uxth	r3, r3
 8001806:	001a      	movs	r2, r3
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	18d2      	adds	r2, r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	18d3      	adds	r3, r2, r3
 8001816:	4abc      	ldr	r2, [pc, #752]	; (8001b08 <PCD_EP_ISR_Handler+0x6d8>)
 8001818:	4694      	mov	ip, r2
 800181a:	4463      	add	r3, ip
 800181c:	881a      	ldrh	r2, [r3, #0]
 800181e:	2450      	movs	r4, #80	; 0x50
 8001820:	193b      	adds	r3, r7, r4
 8001822:	0592      	lsls	r2, r2, #22
 8001824:	0d92      	lsrs	r2, r2, #22
 8001826:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001828:	193b      	adds	r3, r7, r4
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d100      	bne.n	8001832 <PCD_EP_ISR_Handler+0x402>
 8001830:	e08d      	b.n	800194e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001838:	6959      	ldr	r1, [r3, #20]
 800183a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183c:	88da      	ldrh	r2, [r3, #6]
 800183e:	193b      	adds	r3, r7, r4
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	f003 ff60 	bl	8005706 <USB_ReadPMA>
 8001846:	e082      	b.n	800194e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d10c      	bne.n	800186a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001850:	2350      	movs	r3, #80	; 0x50
 8001852:	18fc      	adds	r4, r7, r3
 8001854:	234a      	movs	r3, #74	; 0x4a
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	0018      	movs	r0, r3
 8001860:	f000 f9ec 	bl	8001c3c <HAL_PCD_EP_DB_Receive>
 8001864:	0003      	movs	r3, r0
 8001866:	8023      	strh	r3, [r4, #0]
 8001868:	e071      	b.n	800194e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	001a      	movs	r2, r3
 8001870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	18d3      	adds	r3, r2, r3
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29a      	uxth	r2, r3
 800187c:	2052      	movs	r0, #82	; 0x52
 800187e:	183b      	adds	r3, r7, r0
 8001880:	49a2      	ldr	r1, [pc, #648]	; (8001b0c <PCD_EP_ISR_Handler+0x6dc>)
 8001882:	400a      	ands	r2, r1
 8001884:	801a      	strh	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	001a      	movs	r2, r3
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	18d3      	adds	r3, r2, r3
 8001894:	183a      	adds	r2, r7, r0
 8001896:	8812      	ldrh	r2, [r2, #0]
 8001898:	499d      	ldr	r1, [pc, #628]	; (8001b10 <PCD_EP_ISR_Handler+0x6e0>)
 800189a:	430a      	orrs	r2, r1
 800189c:	b292      	uxth	r2, r2
 800189e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	001a      	movs	r2, r3
 80018a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	18d3      	adds	r3, r2, r3
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	001a      	movs	r2, r3
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	01db      	lsls	r3, r3, #7
 80018b8:	4013      	ands	r3, r2
 80018ba:	d024      	beq.n	8001906 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2250      	movs	r2, #80	; 0x50
 80018c2:	5a9b      	ldrh	r3, [r3, r2]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	001a      	movs	r2, r3
 80018c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	18d2      	adds	r2, r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	18d3      	adds	r3, r2, r3
 80018d6:	4a8f      	ldr	r2, [pc, #572]	; (8001b14 <PCD_EP_ISR_Handler+0x6e4>)
 80018d8:	4694      	mov	ip, r2
 80018da:	4463      	add	r3, ip
 80018dc:	881a      	ldrh	r2, [r3, #0]
 80018de:	2450      	movs	r4, #80	; 0x50
 80018e0:	193b      	adds	r3, r7, r4
 80018e2:	0592      	lsls	r2, r2, #22
 80018e4:	0d92      	lsrs	r2, r2, #22
 80018e6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d02e      	beq.n	800194e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f6:	6959      	ldr	r1, [r3, #20]
 80018f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fa:	891a      	ldrh	r2, [r3, #8]
 80018fc:	193b      	adds	r3, r7, r4
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	f003 ff01 	bl	8005706 <USB_ReadPMA>
 8001904:	e023      	b.n	800194e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2250      	movs	r2, #80	; 0x50
 800190c:	5a9b      	ldrh	r3, [r3, r2]
 800190e:	b29b      	uxth	r3, r3
 8001910:	001a      	movs	r2, r3
 8001912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	18d2      	adds	r2, r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	18d3      	adds	r3, r2, r3
 8001920:	4a79      	ldr	r2, [pc, #484]	; (8001b08 <PCD_EP_ISR_Handler+0x6d8>)
 8001922:	4694      	mov	ip, r2
 8001924:	4463      	add	r3, ip
 8001926:	881a      	ldrh	r2, [r3, #0]
 8001928:	2450      	movs	r4, #80	; 0x50
 800192a:	193b      	adds	r3, r7, r4
 800192c:	0592      	lsls	r2, r2, #22
 800192e:	0d92      	lsrs	r2, r2, #22
 8001930:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001932:	193b      	adds	r3, r7, r4
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001940:	6959      	ldr	r1, [r3, #20]
 8001942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001944:	895a      	ldrh	r2, [r3, #10]
 8001946:	193b      	adds	r3, r7, r4
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	f003 fedc 	bl	8005706 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800194e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	2150      	movs	r1, #80	; 0x50
 8001954:	187b      	adds	r3, r7, r1
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	18d2      	adds	r2, r2, r3
 800195a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	187b      	adds	r3, r7, r1
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	18d2      	adds	r2, r2, r3
 8001968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800196c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <PCD_EP_ISR_Handler+0x550>
 8001974:	187b      	adds	r3, r7, r1
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	0011      	movs	r1, r2
 8001988:	0018      	movs	r0, r3
 800198a:	f005 fc50 	bl	800722e <HAL_PCD_DataOutStageCallback>
 800198e:	e006      	b.n	800199e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001996:	0011      	movs	r1, r2
 8001998:	0018      	movs	r0, r3
 800199a:	f002 fbf9 	bl	8004190 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800199e:	244a      	movs	r4, #74	; 0x4a
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	4013      	ands	r3, r2
 80019a8:	d100      	bne.n	80019ac <PCD_EP_ISR_Handler+0x57c>
 80019aa:	e133      	b.n	8001c14 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80019ac:	204d      	movs	r0, #77	; 0x4d
 80019ae:	183b      	adds	r3, r7, r0
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	0013      	movs	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	189b      	adds	r3, r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	18d3      	adds	r3, r2, r3
 80019c0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	001a      	movs	r2, r3
 80019c8:	183b      	adds	r3, r7, r0
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	18d3      	adds	r3, r2, r3
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	2542      	movs	r5, #66	; 0x42
 80019d6:	197b      	adds	r3, r7, r5
 80019d8:	494f      	ldr	r1, [pc, #316]	; (8001b18 <PCD_EP_ISR_Handler+0x6e8>)
 80019da:	400a      	ands	r2, r1
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	001a      	movs	r2, r3
 80019e4:	183b      	adds	r3, r7, r0
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18d3      	adds	r3, r2, r3
 80019ec:	197a      	adds	r2, r7, r5
 80019ee:	8812      	ldrh	r2, [r2, #0]
 80019f0:	494a      	ldr	r1, [pc, #296]	; (8001b1c <PCD_EP_ISR_Handler+0x6ec>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	b292      	uxth	r2, r2
 80019f6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80019f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fa:	78db      	ldrb	r3, [r3, #3]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d000      	beq.n	8001a02 <PCD_EP_ISR_Handler+0x5d2>
 8001a00:	e0af      	b.n	8001b62 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0a:	7b1b      	ldrb	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d100      	bne.n	8001a12 <PCD_EP_ISR_Handler+0x5e2>
 8001a10:	e09f      	b.n	8001b52 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	2240      	movs	r2, #64	; 0x40
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d046      	beq.n	8001aaa <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1e:	785b      	ldrb	r3, [r3, #1]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d125      	bne.n	8001a70 <PCD_EP_ISR_Handler+0x640>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2250      	movs	r2, #80	; 0x50
 8001a30:	5a9b      	ldrh	r3, [r3, r2]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	001a      	movs	r2, r3
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	189b      	adds	r3, r3, r2
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	00da      	lsls	r2, r3, #3
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	4a33      	ldr	r2, [pc, #204]	; (8001b14 <PCD_EP_ISR_Handler+0x6e4>)
 8001a48:	4694      	mov	ip, r2
 8001a4a:	4463      	add	r3, ip
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	059b      	lsls	r3, r3, #22
 8001a56:	0d9b      	lsrs	r3, r3, #22
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	801a      	strh	r2, [r3, #0]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <PCD_EP_ISR_Handler+0x6ec>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	e070      	b.n	8001b52 <PCD_EP_ISR_Handler+0x722>
 8001a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d16c      	bne.n	8001b52 <PCD_EP_ISR_Handler+0x722>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2250      	movs	r2, #80	; 0x50
 8001a84:	5a9b      	ldrh	r3, [r3, r2]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	001a      	movs	r2, r3
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	189b      	adds	r3, r3, r2
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	00da      	lsls	r2, r3, #3
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	18d3      	adds	r3, r2, r3
 8001a9a:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <PCD_EP_ISR_Handler+0x6e4>)
 8001a9c:	4694      	mov	ip, r2
 8001a9e:	4463      	add	r3, ip
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	801a      	strh	r2, [r3, #0]
 8001aa8:	e053      	b.n	8001b52 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab2:	785b      	ldrb	r3, [r3, #1]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d133      	bne.n	8001b20 <PCD_EP_ISR_Handler+0x6f0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2250      	movs	r2, #80	; 0x50
 8001ac4:	5a9b      	ldrh	r3, [r3, r2]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	001a      	movs	r2, r3
 8001aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001acc:	189b      	adds	r3, r3, r2
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	00da      	lsls	r2, r3, #3
 8001ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad8:	18d3      	adds	r3, r2, r3
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <PCD_EP_ISR_Handler+0x6d8>)
 8001adc:	4694      	mov	ip, r2
 8001ade:	4463      	add	r3, ip
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	059b      	lsls	r3, r3, #22
 8001aea:	0d9b      	lsrs	r3, r3, #22
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	801a      	strh	r2, [r3, #0]
 8001af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <PCD_EP_ISR_Handler+0x6ec>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b00:	801a      	strh	r2, [r3, #0]
 8001b02:	e026      	b.n	8001b52 <PCD_EP_ISR_Handler+0x722>
 8001b04:	00000f8f 	.word	0x00000f8f
 8001b08:	00000406 	.word	0x00000406
 8001b0c:	ffff8f8f 	.word	0xffff8f8f
 8001b10:	ffff80c0 	.word	0xffff80c0
 8001b14:	00000402 	.word	0x00000402
 8001b18:	ffff8f0f 	.word	0xffff8f0f
 8001b1c:	ffff8000 	.word	0xffff8000
 8001b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b22:	785b      	ldrb	r3, [r3, #1]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d114      	bne.n	8001b52 <PCD_EP_ISR_Handler+0x722>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2250      	movs	r2, #80	; 0x50
 8001b2e:	5a9b      	ldrh	r3, [r3, r2]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	001a      	movs	r2, r3
 8001b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b36:	189b      	adds	r3, r3, r2
 8001b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	00da      	lsls	r2, r3, #3
 8001b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b42:	18d3      	adds	r3, r2, r3
 8001b44:	4a3b      	ldr	r2, [pc, #236]	; (8001c34 <PCD_EP_ISR_Handler+0x804>)
 8001b46:	4694      	mov	ip, r2
 8001b48:	4463      	add	r3, ip
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4e:	2200      	movs	r2, #0
 8001b50:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0011      	movs	r1, r2
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f005 fb88 	bl	8007270 <HAL_PCD_DataInStageCallback>
 8001b60:	e058      	b.n	8001c14 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001b62:	234a      	movs	r3, #74	; 0x4a
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	881a      	ldrh	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d149      	bne.n	8001c04 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2250      	movs	r2, #80	; 0x50
 8001b76:	5a9b      	ldrh	r3, [r3, r2]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	18d2      	adds	r2, r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	18d3      	adds	r3, r2, r3
 8001b8a:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <PCD_EP_ISR_Handler+0x808>)
 8001b8c:	4694      	mov	ip, r2
 8001b8e:	4463      	add	r3, ip
 8001b90:	881a      	ldrh	r2, [r3, #0]
 8001b92:	2140      	movs	r1, #64	; 0x40
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	0592      	lsls	r2, r2, #22
 8001b98:	0d92      	lsrs	r2, r2, #22
 8001b9a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9e:	699a      	ldr	r2, [r3, #24]
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d907      	bls.n	8001bb8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	1ad2      	subs	r2, r2, r3
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb4:	619a      	str	r2, [r3, #24]
 8001bb6:	e002      	b.n	8001bbe <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d107      	bne.n	8001bd6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0011      	movs	r1, r2
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f005 fb4e 	bl	8007270 <HAL_PCD_DataInStageCallback>
 8001bd4:	e01e      	b.n	8001c14 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	18d2      	adds	r2, r2, r3
 8001be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	18d2      	adds	r2, r2, r3
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f002 fac7 	bl	8004190 <USB_EPStartXfer>
 8001c02:	e007      	b.n	8001c14 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c04:	234a      	movs	r3, #74	; 0x4a
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	881a      	ldrh	r2, [r3, #0]
 8001c0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f930 	bl	8001e74 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2244      	movs	r2, #68	; 0x44
 8001c1a:	5a9b      	ldrh	r3, [r3, r2]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da01      	bge.n	8001c28 <PCD_EP_ISR_Handler+0x7f8>
 8001c24:	f7ff fc0a 	bl	800143c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b016      	add	sp, #88	; 0x58
 8001c30:	bdb0      	pop	{r4, r5, r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	00000406 	.word	0x00000406
 8001c38:	00000402 	.word	0x00000402

08001c3c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	1dbb      	adds	r3, r7, #6
 8001c48:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c4a:	1dbb      	adds	r3, r7, #6
 8001c4c:	881a      	ldrh	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	01db      	lsls	r3, r3, #7
 8001c52:	4013      	ands	r3, r2
 8001c54:	d100      	bne.n	8001c58 <HAL_PCD_EP_DB_Receive+0x1c>
 8001c56:	e07d      	b.n	8001d54 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2250      	movs	r2, #80	; 0x50
 8001c5e:	5a9b      	ldrh	r3, [r3, r2]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	001a      	movs	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	18d2      	adds	r2, r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	18d3      	adds	r3, r2, r3
 8001c72:	4a7a      	ldr	r2, [pc, #488]	; (8001e5c <HAL_PCD_EP_DB_Receive+0x220>)
 8001c74:	4694      	mov	ip, r2
 8001c76:	4463      	add	r3, ip
 8001c78:	881a      	ldrh	r2, [r3, #0]
 8001c7a:	211a      	movs	r1, #26
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	0592      	lsls	r2, r2, #22
 8001c80:	0d92      	lsrs	r2, r2, #22
 8001c82:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d307      	bcc.n	8001ca0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	1ad2      	subs	r2, r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	619a      	str	r2, [r3, #24]
 8001c9e:	e002      	b.n	8001ca6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d121      	bne.n	8001cf2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	18d3      	adds	r3, r2, r3
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	2018      	movs	r0, #24
 8001cc2:	183b      	adds	r3, r7, r0
 8001cc4:	4966      	ldr	r1, [pc, #408]	; (8001e60 <HAL_PCD_EP_DB_Receive+0x224>)
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	801a      	strh	r2, [r3, #0]
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	183a      	adds	r2, r7, r0
 8001cce:	8812      	ldrh	r2, [r2, #0]
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	0189      	lsls	r1, r1, #6
 8001cd4:	404a      	eors	r2, r1
 8001cd6:	801a      	strh	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	001a      	movs	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	18d3      	adds	r3, r2, r3
 8001ce6:	183a      	adds	r2, r7, r0
 8001ce8:	8812      	ldrh	r2, [r2, #0]
 8001cea:	495e      	ldr	r1, [pc, #376]	; (8001e64 <HAL_PCD_EP_DB_Receive+0x228>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	b292      	uxth	r2, r2
 8001cf0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cf2:	1dbb      	adds	r3, r7, #6
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d01a      	beq.n	8001d32 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	001a      	movs	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	18d3      	adds	r3, r2, r3
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	2016      	movs	r0, #22
 8001d10:	183b      	adds	r3, r7, r0
 8001d12:	4955      	ldr	r1, [pc, #340]	; (8001e68 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	18d3      	adds	r3, r2, r3
 8001d26:	183a      	adds	r2, r7, r0
 8001d28:	8812      	ldrh	r2, [r2, #0]
 8001d2a:	4950      	ldr	r1, [pc, #320]	; (8001e6c <HAL_PCD_EP_DB_Receive+0x230>)
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001d32:	241a      	movs	r4, #26
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d100      	bne.n	8001d3e <HAL_PCD_EP_DB_Receive+0x102>
 8001d3c:	e086      	b.n	8001e4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	6959      	ldr	r1, [r3, #20]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	891a      	ldrh	r2, [r3, #8]
 8001d4a:	193b      	adds	r3, r7, r4
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	f003 fcda 	bl	8005706 <USB_ReadPMA>
 8001d52:	e07b      	b.n	8001e4c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2250      	movs	r2, #80	; 0x50
 8001d5a:	5a9b      	ldrh	r3, [r3, r2]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	001a      	movs	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	18d2      	adds	r2, r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	18d3      	adds	r3, r2, r3
 8001d6e:	4a40      	ldr	r2, [pc, #256]	; (8001e70 <HAL_PCD_EP_DB_Receive+0x234>)
 8001d70:	4694      	mov	ip, r2
 8001d72:	4463      	add	r3, ip
 8001d74:	881a      	ldrh	r2, [r3, #0]
 8001d76:	211a      	movs	r1, #26
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	0592      	lsls	r2, r2, #22
 8001d7c:	0d92      	lsrs	r2, r2, #22
 8001d7e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	187b      	adds	r3, r7, r1
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d307      	bcc.n	8001d9c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	699a      	ldr	r2, [r3, #24]
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	1ad2      	subs	r2, r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	619a      	str	r2, [r3, #24]
 8001d9a:	e002      	b.n	8001da2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d121      	bne.n	8001dee <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	001a      	movs	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	18d3      	adds	r3, r2, r3
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	201e      	movs	r0, #30
 8001dbe:	183b      	adds	r3, r7, r0
 8001dc0:	4927      	ldr	r1, [pc, #156]	; (8001e60 <HAL_PCD_EP_DB_Receive+0x224>)
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	183b      	adds	r3, r7, r0
 8001dc8:	183a      	adds	r2, r7, r0
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0189      	lsls	r1, r1, #6
 8001dd0:	404a      	eors	r2, r1
 8001dd2:	801a      	strh	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	001a      	movs	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	18d3      	adds	r3, r2, r3
 8001de2:	183a      	adds	r2, r7, r0
 8001de4:	8812      	ldrh	r2, [r2, #0]
 8001de6:	491f      	ldr	r1, [pc, #124]	; (8001e64 <HAL_PCD_EP_DB_Receive+0x228>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	b292      	uxth	r2, r2
 8001dec:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001dee:	1dbb      	adds	r3, r7, #6
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	4013      	ands	r3, r2
 8001df6:	d11a      	bne.n	8001e2e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	18d3      	adds	r3, r2, r3
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	201c      	movs	r0, #28
 8001e0c:	183b      	adds	r3, r7, r0
 8001e0e:	4916      	ldr	r1, [pc, #88]	; (8001e68 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	801a      	strh	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	001a      	movs	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	18d3      	adds	r3, r2, r3
 8001e22:	183a      	adds	r2, r7, r0
 8001e24:	8812      	ldrh	r2, [r2, #0]
 8001e26:	4911      	ldr	r1, [pc, #68]	; (8001e6c <HAL_PCD_EP_DB_Receive+0x230>)
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001e2e:	241a      	movs	r4, #26
 8001e30:	193b      	adds	r3, r7, r4
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	6959      	ldr	r1, [r3, #20]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	895a      	ldrh	r2, [r3, #10]
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	f003 fc5d 	bl	8005706 <USB_ReadPMA>
    }
  }

  return count;
 8001e4c:	231a      	movs	r3, #26
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	881b      	ldrh	r3, [r3, #0]
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b009      	add	sp, #36	; 0x24
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	00000402 	.word	0x00000402
 8001e60:	ffffbf8f 	.word	0xffffbf8f
 8001e64:	ffff8080 	.word	0xffff8080
 8001e68:	ffff8f8f 	.word	0xffff8f8f
 8001e6c:	ffff80c0 	.word	0xffff80c0
 8001e70:	00000406 	.word	0x00000406

08001e74 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0a4      	sub	sp, #144	; 0x90
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e82:	1dbb      	adds	r3, r7, #6
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d100      	bne.n	8001e8e <HAL_PCD_EP_DB_Transmit+0x1a>
 8001e8c:	e1e4      	b.n	8002258 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2250      	movs	r2, #80	; 0x50
 8001e94:	5a9b      	ldrh	r3, [r3, r2]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	001a      	movs	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	18d2      	adds	r2, r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	18d3      	adds	r3, r2, r3
 8001ea8:	4ad0      	ldr	r2, [pc, #832]	; (80021ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8001eaa:	4694      	mov	ip, r2
 8001eac:	4463      	add	r3, ip
 8001eae:	881a      	ldrh	r2, [r3, #0]
 8001eb0:	2186      	movs	r1, #134	; 0x86
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	0592      	lsls	r2, r2, #22
 8001eb6:	0d92      	lsrs	r2, r2, #22
 8001eb8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d907      	bls.n	8001ed6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	187b      	adds	r3, r7, r1
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	1ad2      	subs	r2, r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	619a      	str	r2, [r3, #24]
 8001ed4:	e002      	b.n	8001edc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d000      	beq.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x72>
 8001ee4:	e0b5      	b.n	8002052 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	785b      	ldrb	r3, [r3, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d125      	bne.n	8001f3a <HAL_PCD_EP_DB_Transmit+0xc6>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2250      	movs	r2, #80	; 0x50
 8001efa:	5a9b      	ldrh	r3, [r3, r2]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	001a      	movs	r2, r3
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	189b      	adds	r3, r3, r2
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	00da      	lsls	r2, r3, #3
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	18d3      	adds	r3, r2, r3
 8001f10:	4ab6      	ldr	r2, [pc, #728]	; (80021ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8001f12:	4694      	mov	ip, r2
 8001f14:	4463      	add	r3, ip
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	059b      	lsls	r3, r3, #22
 8001f20:	0d9b      	lsrs	r3, r3, #22
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4ab0      	ldr	r2, [pc, #704]	; (80021f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	e01b      	b.n	8001f72 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d117      	bne.n	8001f72 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2250      	movs	r2, #80	; 0x50
 8001f4e:	5a9b      	ldrh	r3, [r3, r2]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	001a      	movs	r2, r3
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	189b      	adds	r3, r3, r2
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	00da      	lsls	r2, r3, #3
 8001f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f62:	18d3      	adds	r3, r2, r3
 8001f64:	4aa1      	ldr	r2, [pc, #644]	; (80021ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8001f66:	4694      	mov	ip, r2
 8001f68:	4463      	add	r3, ip
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6e:	2200      	movs	r2, #0
 8001f70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d125      	bne.n	8001fcc <HAL_PCD_EP_DB_Transmit+0x158>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2250      	movs	r2, #80	; 0x50
 8001f8c:	5a9b      	ldrh	r3, [r3, r2]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	001a      	movs	r2, r3
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	189b      	adds	r3, r3, r2
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	00da      	lsls	r2, r3, #3
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	18d3      	adds	r3, r2, r3
 8001fa2:	4a94      	ldr	r2, [pc, #592]	; (80021f4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001fa4:	4694      	mov	ip, r2
 8001fa6:	4463      	add	r3, ip
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	059b      	lsls	r3, r3, #22
 8001fb2:	0d9b      	lsrs	r3, r3, #22
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4a8b      	ldr	r2, [pc, #556]	; (80021f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	801a      	strh	r2, [r3, #0]
 8001fca:	e018      	b.n	8001ffe <HAL_PCD_EP_DB_Transmit+0x18a>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d114      	bne.n	8001ffe <HAL_PCD_EP_DB_Transmit+0x18a>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2250      	movs	r2, #80	; 0x50
 8001fda:	5a9b      	ldrh	r3, [r3, r2]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	001a      	movs	r2, r3
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	189b      	adds	r3, r3, r2
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	00da      	lsls	r2, r3, #3
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	18d3      	adds	r3, r2, r3
 8001ff0:	4a80      	ldr	r2, [pc, #512]	; (80021f4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001ff2:	4694      	mov	ip, r2
 8001ff4:	4463      	add	r3, ip
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	0011      	movs	r1, r2
 8002006:	0018      	movs	r0, r3
 8002008:	f005 f932 	bl	8007270 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800200c:	1dbb      	adds	r3, r7, #6
 800200e:	881a      	ldrh	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	01db      	lsls	r3, r3, #7
 8002014:	4013      	ands	r3, r2
 8002016:	d100      	bne.n	800201a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8002018:	e309      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	001a      	movs	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	18d3      	adds	r3, r2, r3
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2016      	movs	r0, #22
 800202e:	183b      	adds	r3, r7, r0
 8002030:	4971      	ldr	r1, [pc, #452]	; (80021f8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002032:	400a      	ands	r2, r1
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	001a      	movs	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	18d3      	adds	r3, r2, r3
 8002044:	183a      	adds	r2, r7, r0
 8002046:	8812      	ldrh	r2, [r2, #0]
 8002048:	496c      	ldr	r1, [pc, #432]	; (80021fc <HAL_PCD_EP_DB_Transmit+0x388>)
 800204a:	430a      	orrs	r2, r1
 800204c:	b292      	uxth	r2, r2
 800204e:	801a      	strh	r2, [r3, #0]
 8002050:	e2ed      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002052:	1dbb      	adds	r3, r7, #6
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	01db      	lsls	r3, r3, #7
 800205a:	4013      	ands	r3, r2
 800205c:	d01a      	beq.n	8002094 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	001a      	movs	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	18d3      	adds	r3, r2, r3
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29a      	uxth	r2, r3
 8002070:	208a      	movs	r0, #138	; 0x8a
 8002072:	183b      	adds	r3, r7, r0
 8002074:	4960      	ldr	r1, [pc, #384]	; (80021f8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002076:	400a      	ands	r2, r1
 8002078:	801a      	strh	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	001a      	movs	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	18d3      	adds	r3, r2, r3
 8002088:	183a      	adds	r2, r7, r0
 800208a:	8812      	ldrh	r2, [r2, #0]
 800208c:	495b      	ldr	r1, [pc, #364]	; (80021fc <HAL_PCD_EP_DB_Transmit+0x388>)
 800208e:	430a      	orrs	r2, r1
 8002090:	b292      	uxth	r2, r2
 8002092:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	5c9b      	ldrb	r3, [r3, r2]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d000      	beq.n	80020a0 <HAL_PCD_EP_DB_Transmit+0x22c>
 800209e:	e2c6      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	2186      	movs	r1, #134	; 0x86
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	18d2      	adds	r2, r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	18d2      	adds	r2, r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d30c      	bcc.n	80020e4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	218c      	movs	r1, #140	; 0x8c
 80020d0:	187a      	adds	r2, r7, r1
 80020d2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	1ad2      	subs	r2, r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	621a      	str	r2, [r3, #32]
 80020e2:	e01a      	b.n	800211a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80020ec:	2386      	movs	r3, #134	; 0x86
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	228c      	movs	r2, #140	; 0x8c
 80020f4:	18ba      	adds	r2, r7, r2
 80020f6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2224      	movs	r2, #36	; 0x24
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]
 8002100:	e00b      	b.n	800211a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2224      	movs	r2, #36	; 0x24
 8002106:	2100      	movs	r1, #0
 8002108:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	228c      	movs	r2, #140	; 0x8c
 8002110:	18ba      	adds	r2, r7, r2
 8002112:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2200      	movs	r2, #0
 8002118:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d000      	beq.n	8002124 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8002122:	e06d      	b.n	8002200 <HAL_PCD_EP_DB_Transmit+0x38c>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2250      	movs	r2, #80	; 0x50
 8002130:	5a9b      	ldrh	r3, [r3, r2]
 8002132:	b29b      	uxth	r3, r3
 8002134:	001a      	movs	r2, r3
 8002136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002138:	189b      	adds	r3, r3, r2
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	00da      	lsls	r2, r3, #3
 8002142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002144:	18d3      	adds	r3, r2, r3
 8002146:	4a29      	ldr	r2, [pc, #164]	; (80021ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8002148:	4694      	mov	ip, r2
 800214a:	4463      	add	r3, ip
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
 800214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	059b      	lsls	r3, r3, #22
 8002156:	0d9b      	lsrs	r3, r3, #22
 8002158:	b29a      	uxth	r2, r3
 800215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215c:	801a      	strh	r2, [r3, #0]
 800215e:	228c      	movs	r2, #140	; 0x8c
 8002160:	18bb      	adds	r3, r7, r2
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b3e      	cmp	r3, #62	; 0x3e
 8002166:	d91a      	bls.n	800219e <HAL_PCD_EP_DB_Transmit+0x32a>
 8002168:	18bb      	adds	r3, r7, r2
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002170:	18bb      	adds	r3, r7, r2
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	221f      	movs	r2, #31
 8002176:	4013      	ands	r3, r2
 8002178:	d102      	bne.n	8002180 <HAL_PCD_EP_DB_Transmit+0x30c>
 800217a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217c:	3b01      	subs	r3, #1
 800217e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29a      	uxth	r2, r3
 8002186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002188:	b29b      	uxth	r3, r3
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	b29b      	uxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b29b      	uxth	r3, r3
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002194:	4313      	orrs	r3, r2
 8002196:	b29a      	uxth	r2, r3
 8002198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219a:	801a      	strh	r2, [r3, #0]
 800219c:	e04f      	b.n	800223e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800219e:	238c      	movs	r3, #140	; 0x8c
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d108      	bne.n	80021ba <HAL_PCD_EP_DB_Transmit+0x346>
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	e041      	b.n	800223e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80021ba:	228c      	movs	r2, #140	; 0x8c
 80021bc:	18bb      	adds	r3, r7, r2
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021c4:	18bb      	adds	r3, r7, r2
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	d002      	beq.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x360>
 80021ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d0:	3301      	adds	r3, #1
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	b29a      	uxth	r2, r3
 80021da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021dc:	b29b      	uxth	r3, r3
 80021de:	029b      	lsls	r3, r3, #10
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	801a      	strh	r2, [r3, #0]
 80021ea:	e028      	b.n	800223e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80021ec:	00000402 	.word	0x00000402
 80021f0:	ffff8000 	.word	0xffff8000
 80021f4:	00000406 	.word	0x00000406
 80021f8:	ffff8f8f 	.word	0xffff8f8f
 80021fc:	ffffc080 	.word	0xffffc080
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d11a      	bne.n	800223e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	647b      	str	r3, [r7, #68]	; 0x44
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2250      	movs	r2, #80	; 0x50
 8002214:	5a9b      	ldrh	r3, [r3, r2]
 8002216:	b29b      	uxth	r3, r3
 8002218:	001a      	movs	r2, r3
 800221a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221c:	189b      	adds	r3, r3, r2
 800221e:	647b      	str	r3, [r7, #68]	; 0x44
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	00da      	lsls	r2, r3, #3
 8002226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002228:	18d3      	adds	r3, r2, r3
 800222a:	4adb      	ldr	r2, [pc, #876]	; (8002598 <HAL_PCD_EP_DB_Transmit+0x724>)
 800222c:	4694      	mov	ip, r2
 800222e:	4463      	add	r3, ip
 8002230:	643b      	str	r3, [r7, #64]	; 0x40
 8002232:	238c      	movs	r3, #140	; 0x8c
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b29a      	uxth	r2, r3
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6959      	ldr	r1, [r3, #20]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	891a      	ldrh	r2, [r3, #8]
 800224a:	238c      	movs	r3, #140	; 0x8c
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f003 fa0f 	bl	8005674 <USB_WritePMA>
 8002256:	e1ea      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2250      	movs	r2, #80	; 0x50
 800225e:	5a9b      	ldrh	r3, [r3, r2]
 8002260:	b29b      	uxth	r3, r3
 8002262:	001a      	movs	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	18d2      	adds	r2, r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	18d3      	adds	r3, r2, r3
 8002272:	4aca      	ldr	r2, [pc, #808]	; (800259c <HAL_PCD_EP_DB_Transmit+0x728>)
 8002274:	4694      	mov	ip, r2
 8002276:	4463      	add	r3, ip
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	2186      	movs	r1, #134	; 0x86
 800227c:	187b      	adds	r3, r7, r1
 800227e:	0592      	lsls	r2, r2, #22
 8002280:	0d92      	lsrs	r2, r2, #22
 8002282:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	187b      	adds	r3, r7, r1
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d307      	bcc.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	187b      	adds	r3, r7, r1
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	1ad2      	subs	r2, r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	619a      	str	r2, [r3, #24]
 800229e:	e002      	b.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d000      	beq.n	80022b0 <HAL_PCD_EP_DB_Transmit+0x43c>
 80022ae:	e0bb      	b.n	8002428 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d125      	bne.n	8002304 <HAL_PCD_EP_DB_Transmit+0x490>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2250      	movs	r2, #80	; 0x50
 80022c4:	5a9b      	ldrh	r3, [r3, r2]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	001a      	movs	r2, r3
 80022ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022cc:	189b      	adds	r3, r3, r2
 80022ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	00da      	lsls	r2, r3, #3
 80022d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022d8:	18d3      	adds	r3, r2, r3
 80022da:	4aaf      	ldr	r2, [pc, #700]	; (8002598 <HAL_PCD_EP_DB_Transmit+0x724>)
 80022dc:	4694      	mov	ip, r2
 80022de:	4463      	add	r3, ip
 80022e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80022e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	059b      	lsls	r3, r3, #22
 80022ea:	0d9b      	lsrs	r3, r3, #22
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	4aa9      	ldr	r2, [pc, #676]	; (80025a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002300:	801a      	strh	r2, [r3, #0]
 8002302:	e01b      	b.n	800233c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	785b      	ldrb	r3, [r3, #1]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d117      	bne.n	800233c <HAL_PCD_EP_DB_Transmit+0x4c8>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	667b      	str	r3, [r7, #100]	; 0x64
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2250      	movs	r2, #80	; 0x50
 8002318:	5a9b      	ldrh	r3, [r3, r2]
 800231a:	b29b      	uxth	r3, r3
 800231c:	001a      	movs	r2, r3
 800231e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002320:	189b      	adds	r3, r3, r2
 8002322:	667b      	str	r3, [r7, #100]	; 0x64
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	00da      	lsls	r2, r3, #3
 800232a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800232c:	18d3      	adds	r3, r2, r3
 800232e:	4a9a      	ldr	r2, [pc, #616]	; (8002598 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002330:	4694      	mov	ip, r2
 8002332:	4463      	add	r3, ip
 8002334:	663b      	str	r3, [r7, #96]	; 0x60
 8002336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002338:	2200      	movs	r2, #0
 800233a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	677b      	str	r3, [r7, #116]	; 0x74
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d12b      	bne.n	80023a2 <HAL_PCD_EP_DB_Transmit+0x52e>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2250      	movs	r2, #80	; 0x50
 8002356:	5a9b      	ldrh	r3, [r3, r2]
 8002358:	b29b      	uxth	r3, r3
 800235a:	001a      	movs	r2, r3
 800235c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235e:	189b      	adds	r3, r3, r2
 8002360:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	00da      	lsls	r2, r3, #3
 8002368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236a:	18d3      	adds	r3, r2, r3
 800236c:	4a8b      	ldr	r2, [pc, #556]	; (800259c <HAL_PCD_EP_DB_Transmit+0x728>)
 800236e:	4694      	mov	ip, r2
 8002370:	4463      	add	r3, ip
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	187a      	adds	r2, r7, r1
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	187b      	adds	r3, r7, r1
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	059b      	lsls	r3, r3, #22
 8002382:	0d9b      	lsrs	r3, r3, #22
 8002384:	b29a      	uxth	r2, r3
 8002386:	187b      	adds	r3, r7, r1
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	187b      	adds	r3, r7, r1
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4a82      	ldr	r2, [pc, #520]	; (80025a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	b29a      	uxth	r2, r3
 800239a:	187b      	adds	r3, r7, r1
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	801a      	strh	r2, [r3, #0]
 80023a0:	e018      	b.n	80023d4 <HAL_PCD_EP_DB_Transmit+0x560>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d114      	bne.n	80023d4 <HAL_PCD_EP_DB_Transmit+0x560>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2250      	movs	r2, #80	; 0x50
 80023b0:	5a9b      	ldrh	r3, [r3, r2]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	001a      	movs	r2, r3
 80023b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b8:	189b      	adds	r3, r3, r2
 80023ba:	677b      	str	r3, [r7, #116]	; 0x74
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	00da      	lsls	r2, r3, #3
 80023c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c4:	18d3      	adds	r3, r2, r3
 80023c6:	4a75      	ldr	r2, [pc, #468]	; (800259c <HAL_PCD_EP_DB_Transmit+0x728>)
 80023c8:	4694      	mov	ip, r2
 80023ca:	4463      	add	r3, ip
 80023cc:	673b      	str	r3, [r7, #112]	; 0x70
 80023ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d0:	2200      	movs	r2, #0
 80023d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	0011      	movs	r1, r2
 80023dc:	0018      	movs	r0, r3
 80023de:	f004 ff47 	bl	8007270 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023e2:	1dbb      	adds	r3, r7, #6
 80023e4:	881a      	ldrh	r2, [r3, #0]
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	01db      	lsls	r3, r3, #7
 80023ea:	4013      	ands	r3, r2
 80023ec:	d000      	beq.n	80023f0 <HAL_PCD_EP_DB_Transmit+0x57c>
 80023ee:	e11e      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	001a      	movs	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	18d3      	adds	r3, r2, r3
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29a      	uxth	r2, r3
 8002402:	2088      	movs	r0, #136	; 0x88
 8002404:	183b      	adds	r3, r7, r0
 8002406:	4967      	ldr	r1, [pc, #412]	; (80025a4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002408:	400a      	ands	r2, r1
 800240a:	801a      	strh	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	001a      	movs	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	18d3      	adds	r3, r2, r3
 800241a:	183a      	adds	r2, r7, r0
 800241c:	8812      	ldrh	r2, [r2, #0]
 800241e:	4962      	ldr	r1, [pc, #392]	; (80025a8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002420:	430a      	orrs	r2, r1
 8002422:	b292      	uxth	r2, r2
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	e102      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002428:	1dbb      	adds	r3, r7, #6
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	01db      	lsls	r3, r3, #7
 8002430:	4013      	ands	r3, r2
 8002432:	d11a      	bne.n	800246a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	001a      	movs	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	18d3      	adds	r3, r2, r3
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29a      	uxth	r2, r3
 8002446:	204e      	movs	r0, #78	; 0x4e
 8002448:	183b      	adds	r3, r7, r0
 800244a:	4956      	ldr	r1, [pc, #344]	; (80025a4 <HAL_PCD_EP_DB_Transmit+0x730>)
 800244c:	400a      	ands	r2, r1
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	001a      	movs	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	183a      	adds	r2, r7, r0
 8002460:	8812      	ldrh	r2, [r2, #0]
 8002462:	4951      	ldr	r1, [pc, #324]	; (80025a8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002464:	430a      	orrs	r2, r1
 8002466:	b292      	uxth	r2, r2
 8002468:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2224      	movs	r2, #36	; 0x24
 800246e:	5c9b      	ldrb	r3, [r3, r2]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d000      	beq.n	8002476 <HAL_PCD_EP_DB_Transmit+0x602>
 8002474:	e0db      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	2186      	movs	r1, #134	; 0x86
 800247c:	187b      	adds	r3, r7, r1
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	18d2      	adds	r2, r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	187b      	adds	r3, r7, r1
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	18d2      	adds	r2, r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	d30c      	bcc.n	80024ba <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	218c      	movs	r1, #140	; 0x8c
 80024a6:	187a      	adds	r2, r7, r1
 80024a8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6a1a      	ldr	r2, [r3, #32]
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	1ad2      	subs	r2, r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	621a      	str	r2, [r3, #32]
 80024b8:	e01a      	b.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10a      	bne.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80024c2:	2386      	movs	r3, #134	; 0x86
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	228c      	movs	r2, #140	; 0x8c
 80024ca:	18ba      	adds	r2, r7, r2
 80024cc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2224      	movs	r2, #36	; 0x24
 80024d2:	2100      	movs	r1, #0
 80024d4:	5499      	strb	r1, [r3, r2]
 80024d6:	e00b      	b.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	228c      	movs	r2, #140	; 0x8c
 80024de:	18ba      	adds	r2, r7, r2
 80024e0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	657b      	str	r3, [r7, #84]	; 0x54
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d000      	beq.n	8002500 <HAL_PCD_EP_DB_Transmit+0x68c>
 80024fe:	e06e      	b.n	80025de <HAL_PCD_EP_DB_Transmit+0x76a>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2250      	movs	r2, #80	; 0x50
 800250c:	5a9b      	ldrh	r3, [r3, r2]
 800250e:	b29b      	uxth	r3, r3
 8002510:	001a      	movs	r2, r3
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	189b      	adds	r3, r3, r2
 8002516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00da      	lsls	r2, r3, #3
 800251e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	4a1e      	ldr	r2, [pc, #120]	; (800259c <HAL_PCD_EP_DB_Transmit+0x728>)
 8002524:	4694      	mov	ip, r2
 8002526:	4463      	add	r3, ip
 8002528:	65bb      	str	r3, [r7, #88]	; 0x58
 800252a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	059b      	lsls	r3, r3, #22
 8002532:	0d9b      	lsrs	r3, r3, #22
 8002534:	b29a      	uxth	r2, r3
 8002536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	228c      	movs	r2, #140	; 0x8c
 800253c:	18bb      	adds	r3, r7, r2
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b3e      	cmp	r3, #62	; 0x3e
 8002542:	d91a      	bls.n	800257a <HAL_PCD_EP_DB_Transmit+0x706>
 8002544:	18bb      	adds	r3, r7, r2
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	66bb      	str	r3, [r7, #104]	; 0x68
 800254c:	18bb      	adds	r3, r7, r2
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	221f      	movs	r2, #31
 8002552:	4013      	ands	r3, r2
 8002554:	d102      	bne.n	800255c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8002556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002558:	3b01      	subs	r3, #1
 800255a:	66bb      	str	r3, [r7, #104]	; 0x68
 800255c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29a      	uxth	r2, r3
 8002562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002564:	b29b      	uxth	r3, r3
 8002566:	029b      	lsls	r3, r3, #10
 8002568:	b29b      	uxth	r3, r3
 800256a:	4313      	orrs	r3, r2
 800256c:	b29b      	uxth	r3, r3
 800256e:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	b29a      	uxth	r2, r3
 8002574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002576:	801a      	strh	r2, [r3, #0]
 8002578:	e04d      	b.n	8002616 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800257a:	238c      	movs	r3, #140	; 0x8c
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d113      	bne.n	80025ac <HAL_PCD_EP_DB_Transmit+0x738>
 8002584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	b29a      	uxth	r2, r3
 8002590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002592:	801a      	strh	r2, [r3, #0]
 8002594:	e03f      	b.n	8002616 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	00000402 	.word	0x00000402
 800259c:	00000406 	.word	0x00000406
 80025a0:	ffff8000 	.word	0xffff8000
 80025a4:	ffff8f8f 	.word	0xffff8f8f
 80025a8:	ffffc080 	.word	0xffffc080
 80025ac:	228c      	movs	r2, #140	; 0x8c
 80025ae:	18bb      	adds	r3, r7, r2
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80025b6:	18bb      	adds	r3, r7, r2
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4013      	ands	r3, r2
 80025be:	d002      	beq.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x752>
 80025c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025c2:	3301      	adds	r3, #1
 80025c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80025c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	029b      	lsls	r3, r3, #10
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025da:	801a      	strh	r2, [r3, #0]
 80025dc:	e01b      	b.n	8002616 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	785b      	ldrb	r3, [r3, #1]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d117      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2250      	movs	r2, #80	; 0x50
 80025ec:	5a9b      	ldrh	r3, [r3, r2]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	001a      	movs	r2, r3
 80025f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f4:	189b      	adds	r3, r3, r2
 80025f6:	657b      	str	r3, [r7, #84]	; 0x54
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	00da      	lsls	r2, r3, #3
 80025fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002600:	18d3      	adds	r3, r2, r3
 8002602:	4a21      	ldr	r2, [pc, #132]	; (8002688 <HAL_PCD_EP_DB_Transmit+0x814>)
 8002604:	4694      	mov	ip, r2
 8002606:	4463      	add	r3, ip
 8002608:	653b      	str	r3, [r7, #80]	; 0x50
 800260a:	238c      	movs	r3, #140	; 0x8c
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b29a      	uxth	r2, r3
 8002612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002614:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6959      	ldr	r1, [r3, #20]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	895a      	ldrh	r2, [r3, #10]
 8002622:	238c      	movs	r3, #140	; 0x8c
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f003 f823 	bl	8005674 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	001a      	movs	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	18d3      	adds	r3, r2, r3
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	2014      	movs	r0, #20
 8002642:	183b      	adds	r3, r7, r0
 8002644:	4911      	ldr	r1, [pc, #68]	; (800268c <HAL_PCD_EP_DB_Transmit+0x818>)
 8002646:	400a      	ands	r2, r1
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	183b      	adds	r3, r7, r0
 800264c:	183a      	adds	r2, r7, r0
 800264e:	8812      	ldrh	r2, [r2, #0]
 8002650:	2110      	movs	r1, #16
 8002652:	404a      	eors	r2, r1
 8002654:	801a      	strh	r2, [r3, #0]
 8002656:	183b      	adds	r3, r7, r0
 8002658:	183a      	adds	r2, r7, r0
 800265a:	8812      	ldrh	r2, [r2, #0]
 800265c:	2120      	movs	r1, #32
 800265e:	404a      	eors	r2, r1
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	001a      	movs	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	18d3      	adds	r3, r2, r3
 8002670:	183a      	adds	r2, r7, r0
 8002672:	8812      	ldrh	r2, [r2, #0]
 8002674:	4906      	ldr	r1, [pc, #24]	; (8002690 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002676:	430a      	orrs	r2, r1
 8002678:	b292      	uxth	r2, r2
 800267a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b024      	add	sp, #144	; 0x90
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	00000406 	.word	0x00000406
 800268c:	ffff8fbf 	.word	0xffff8fbf
 8002690:	ffff8080 	.word	0xffff8080

08002694 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	0008      	movs	r0, r1
 800269e:	0011      	movs	r1, r2
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	240a      	movs	r4, #10
 80026a4:	193b      	adds	r3, r7, r4
 80026a6:	1c02      	adds	r2, r0, #0
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	2308      	movs	r3, #8
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	1c0a      	adds	r2, r1, #0
 80026b0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026b2:	0021      	movs	r1, r4
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	4013      	ands	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	2207      	movs	r2, #7
 80026c8:	4013      	ands	r3, r2
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	0013      	movs	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	189b      	adds	r3, r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	18d3      	adds	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e00b      	b.n	80026f4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026dc:	230a      	movs	r3, #10
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	0013      	movs	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	189b      	adds	r3, r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	3369      	adds	r3, #105	; 0x69
 80026ec:	33ff      	adds	r3, #255	; 0xff
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	18d3      	adds	r3, r2, r3
 80026f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026f4:	2308      	movs	r3, #8
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d107      	bne.n	800270e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	b29a      	uxth	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	80da      	strh	r2, [r3, #6]
 800270c:	e00b      	b.n	8002726 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2201      	movs	r2, #1
 8002712:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	b29a      	uxth	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	0c1b      	lsrs	r3, r3, #16
 8002720:	b29a      	uxth	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b007      	add	sp, #28
 800272e:	bd90      	pop	{r4, r7, pc}

08002730 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	23ba      	movs	r3, #186	; 0xba
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	2101      	movs	r1, #1
 8002746:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	23b8      	movs	r3, #184	; 0xb8
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	2100      	movs	r1, #0
 8002750:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2254      	movs	r2, #84	; 0x54
 8002756:	5a9b      	ldrh	r3, [r3, r2]
 8002758:	b29b      	uxth	r3, r3
 800275a:	2201      	movs	r2, #1
 800275c:	4313      	orrs	r3, r2
 800275e:	b299      	uxth	r1, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2254      	movs	r2, #84	; 0x54
 8002764:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2254      	movs	r2, #84	; 0x54
 800276a:	5a9b      	ldrh	r3, [r3, r2]
 800276c:	b29b      	uxth	r3, r3
 800276e:	2202      	movs	r2, #2
 8002770:	4313      	orrs	r3, r2
 8002772:	b299      	uxth	r1, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2254      	movs	r2, #84	; 0x54
 8002778:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b004      	add	sp, #16
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	000a      	movs	r2, r1
 800278e:	1cfb      	adds	r3, r7, #3
 8002790:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b002      	add	sp, #8
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b5b0      	push	{r4, r5, r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f000 fbaf 	bl	8002f0e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b0:	4bcf      	ldr	r3, [pc, #828]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	220c      	movs	r2, #12
 80027b6:	4013      	ands	r3, r2
 80027b8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ba:	4bcd      	ldr	r3, [pc, #820]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	025b      	lsls	r3, r3, #9
 80027c2:	4013      	ands	r3, r2
 80027c4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	d100      	bne.n	80027d2 <HAL_RCC_OscConfig+0x36>
 80027d0:	e07e      	b.n	80028d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d007      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d112      	bne.n	8002804 <HAL_RCC_OscConfig+0x68>
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	025b      	lsls	r3, r3, #9
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d10d      	bne.n	8002804 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	4bc1      	ldr	r3, [pc, #772]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	029b      	lsls	r3, r3, #10
 80027f0:	4013      	ands	r3, r2
 80027f2:	d100      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5a>
 80027f4:	e06b      	b.n	80028ce <HAL_RCC_OscConfig+0x132>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d167      	bne.n	80028ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f000 fb85 	bl	8002f0e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	025b      	lsls	r3, r3, #9
 800280c:	429a      	cmp	r2, r3
 800280e:	d107      	bne.n	8002820 <HAL_RCC_OscConfig+0x84>
 8002810:	4bb7      	ldr	r3, [pc, #732]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4bb6      	ldr	r3, [pc, #728]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	0249      	lsls	r1, r1, #9
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e027      	b.n	8002870 <HAL_RCC_OscConfig+0xd4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	23a0      	movs	r3, #160	; 0xa0
 8002826:	02db      	lsls	r3, r3, #11
 8002828:	429a      	cmp	r2, r3
 800282a:	d10e      	bne.n	800284a <HAL_RCC_OscConfig+0xae>
 800282c:	4bb0      	ldr	r3, [pc, #704]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4baf      	ldr	r3, [pc, #700]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	02c9      	lsls	r1, r1, #11
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	4bad      	ldr	r3, [pc, #692]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4bac      	ldr	r3, [pc, #688]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0249      	lsls	r1, r1, #9
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	e012      	b.n	8002870 <HAL_RCC_OscConfig+0xd4>
 800284a:	4ba9      	ldr	r3, [pc, #676]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4ba8      	ldr	r3, [pc, #672]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002850:	49a8      	ldr	r1, [pc, #672]	; (8002af4 <HAL_RCC_OscConfig+0x358>)
 8002852:	400a      	ands	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	4ba6      	ldr	r3, [pc, #664]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	4013      	ands	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4ba2      	ldr	r3, [pc, #648]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4ba1      	ldr	r3, [pc, #644]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 800286a:	49a3      	ldr	r1, [pc, #652]	; (8002af8 <HAL_RCC_OscConfig+0x35c>)
 800286c:	400a      	ands	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe f84c 	bl	8000914 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002880:	e009      	b.n	8002896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002882:	f7fe f847 	bl	8000914 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d902      	bls.n	8002896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	f000 fb3c 	bl	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002896:	4b96      	ldr	r3, [pc, #600]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	029b      	lsls	r3, r3, #10
 800289e:	4013      	ands	r3, r2
 80028a0:	d0ef      	beq.n	8002882 <HAL_RCC_OscConfig+0xe6>
 80028a2:	e015      	b.n	80028d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe f836 	bl	8000914 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ae:	f7fe f831 	bl	8000914 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	; 0x64
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e326      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028c0:	4b8b      	ldr	r3, [pc, #556]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	4013      	ands	r3, r2
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x112>
 80028cc:	e000      	b.n	80028d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2202      	movs	r2, #2
 80028d6:	4013      	ands	r3, r2
 80028d8:	d100      	bne.n	80028dc <HAL_RCC_OscConfig+0x140>
 80028da:	e08b      	b.n	80029f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d13e      	bne.n	800296c <HAL_RCC_OscConfig+0x1d0>
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d13b      	bne.n	800296c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80028f4:	4b7e      	ldr	r3, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2204      	movs	r2, #4
 80028fa:	4013      	ands	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_RCC_OscConfig+0x16c>
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e302      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a7b      	ldr	r2, [pc, #492]	; (8002afc <HAL_RCC_OscConfig+0x360>)
 800290e:	4013      	ands	r3, r2
 8002910:	0019      	movs	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	021a      	lsls	r2, r3, #8
 8002918:	4b75      	ldr	r3, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800291e:	4b74      	ldr	r3, [pc, #464]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2209      	movs	r2, #9
 8002924:	4393      	bics	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	4b71      	ldr	r3, [pc, #452]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	430a      	orrs	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002930:	f000 fc40 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8002934:	0001      	movs	r1, r0
 8002936:	4b6e      	ldr	r3, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	220f      	movs	r2, #15
 800293e:	4013      	ands	r3, r2
 8002940:	4a6f      	ldr	r2, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x364>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	000a      	movs	r2, r1
 8002946:	40da      	lsrs	r2, r3
 8002948:	4b6e      	ldr	r3, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x368>)
 800294a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800294c:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <HAL_RCC_OscConfig+0x36c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2513      	movs	r5, #19
 8002952:	197c      	adds	r4, r7, r5
 8002954:	0018      	movs	r0, r3
 8002956:	f7fd ff97 	bl	8000888 <HAL_InitTick>
 800295a:	0003      	movs	r3, r0
 800295c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800295e:	197b      	adds	r3, r7, r5
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d046      	beq.n	80029f4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002966:	197b      	adds	r3, r7, r5
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	e2d0      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d027      	beq.n	80029c2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2209      	movs	r2, #9
 8002978:	4393      	bics	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	4b5c      	ldr	r3, [pc, #368]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fd ffc6 	bl	8000914 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298e:	f7fd ffc1 	bl	8000914 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e2b6      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2204      	movs	r2, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	d0f1      	beq.n	800298e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4a53      	ldr	r2, [pc, #332]	; (8002afc <HAL_RCC_OscConfig+0x360>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	021a      	lsls	r2, r3, #8
 80029ba:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e018      	b.n	80029f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c2:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	438a      	bics	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fd ffa1 	bl	8000914 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d8:	f7fd ff9c 	bl	8000914 <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e291      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2204      	movs	r2, #4
 80029f0:	4013      	ands	r3, r2
 80029f2:	d1f1      	bne.n	80029d8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2210      	movs	r2, #16
 80029fa:	4013      	ands	r3, r2
 80029fc:	d100      	bne.n	8002a00 <HAL_RCC_OscConfig+0x264>
 80029fe:	e0a1      	b.n	8002b44 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d140      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a06:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d005      	beq.n	8002a1e <HAL_RCC_OscConfig+0x282>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e277      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a3a      	ldr	r2, [pc, #232]	; (8002b0c <HAL_RCC_OscConfig+0x370>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	0a19      	lsrs	r1, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	061a      	lsls	r2, r3, #24
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	0b5b      	lsrs	r3, r3, #13
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0212      	lsls	r2, r2, #8
 8002a52:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a54:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	4928      	ldr	r1, [pc, #160]	; (8002b00 <HAL_RCC_OscConfig+0x364>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <HAL_RCC_OscConfig+0x368>)
 8002a66:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <HAL_RCC_OscConfig+0x36c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2513      	movs	r5, #19
 8002a6e:	197c      	adds	r4, r7, r5
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7fd ff09 	bl	8000888 <HAL_InitTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a7a:	197b      	adds	r3, r7, r5
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d060      	beq.n	8002b44 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002a82:	197b      	adds	r3, r7, r5
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	e242      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d03f      	beq.n	8002b10 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	0049      	lsls	r1, r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fd ff39 	bl	8000914 <HAL_GetTick>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa8:	f7fd ff34 	bl	8000914 <HAL_GetTick>
 8002aac:	0002      	movs	r2, r0
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e229      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <HAL_RCC_OscConfig+0x370>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	0a19      	lsrs	r1, r3, #8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	061a      	lsls	r2, r3, #24
 8002ae8:	4b01      	ldr	r3, [pc, #4]	; (8002af0 <HAL_RCC_OscConfig+0x354>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	e029      	b.n	8002b44 <HAL_RCC_OscConfig+0x3a8>
 8002af0:	40021000 	.word	0x40021000
 8002af4:	fffeffff 	.word	0xfffeffff
 8002af8:	fffbffff 	.word	0xfffbffff
 8002afc:	ffffe0ff 	.word	0xffffe0ff
 8002b00:	080078c8 	.word	0x080078c8
 8002b04:	20000000 	.word	0x20000000
 8002b08:	20000004 	.word	0x20000004
 8002b0c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b10:	4bbd      	ldr	r3, [pc, #756]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4bbc      	ldr	r3, [pc, #752]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002b16:	49bd      	ldr	r1, [pc, #756]	; (8002e0c <HAL_RCC_OscConfig+0x670>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fd fefa 	bl	8000914 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b26:	f7fd fef5 	bl	8000914 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1ea      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b38:	4bb3      	ldr	r3, [pc, #716]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d036      	beq.n	8002bbc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d019      	beq.n	8002b8a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4bac      	ldr	r3, [pc, #688]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b5a:	4bab      	ldr	r3, [pc, #684]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7fd fed7 	bl	8000914 <HAL_GetTick>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fd fed2 	bl	8000914 <HAL_GetTick>
 8002b70:	0002      	movs	r2, r0
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1c7      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b7e:	4ba2      	ldr	r3, [pc, #648]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d0f1      	beq.n	8002b6c <HAL_RCC_OscConfig+0x3d0>
 8002b88:	e018      	b.n	8002bbc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8a:	4b9f      	ldr	r3, [pc, #636]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b8e:	4b9e      	ldr	r3, [pc, #632]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	438a      	bics	r2, r1
 8002b94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7fd febd 	bl	8000914 <HAL_GetTick>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fd feb8 	bl	8000914 <HAL_GetTick>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1ad      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bb2:	4b95      	ldr	r3, [pc, #596]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d1f1      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d100      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x42c>
 8002bc6:	e0ae      	b.n	8002d26 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc8:	2027      	movs	r0, #39	; 0x27
 8002bca:	183b      	adds	r3, r7, r0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd0:	4b8d      	ldr	r3, [pc, #564]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	055b      	lsls	r3, r3, #21
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d109      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b8a      	ldr	r3, [pc, #552]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be0:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002be2:	2180      	movs	r1, #128	; 0x80
 8002be4:	0549      	lsls	r1, r1, #21
 8002be6:	430a      	orrs	r2, r1
 8002be8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002bea:	183b      	adds	r3, r7, r0
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	4b87      	ldr	r3, [pc, #540]	; (8002e10 <HAL_RCC_OscConfig+0x674>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d11a      	bne.n	8002c32 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfc:	4b84      	ldr	r3, [pc, #528]	; (8002e10 <HAL_RCC_OscConfig+0x674>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b83      	ldr	r3, [pc, #524]	; (8002e10 <HAL_RCC_OscConfig+0x674>)
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	0049      	lsls	r1, r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7fd fe83 	bl	8000914 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fd fe7e 	bl	8000914 <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e173      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x674>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_OscConfig+0x4b2>
 8002c3e:	4b72      	ldr	r3, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c42:	4b71      	ldr	r3, [pc, #452]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	0049      	lsls	r1, r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	651a      	str	r2, [r3, #80]	; 0x50
 8002c4c:	e031      	b.n	8002cb2 <HAL_RCC_OscConfig+0x516>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4d4>
 8002c56:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c5a:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c5c:	496b      	ldr	r1, [pc, #428]	; (8002e0c <HAL_RCC_OscConfig+0x670>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	651a      	str	r2, [r3, #80]	; 0x50
 8002c62:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c66:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c68:	496a      	ldr	r1, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x678>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	651a      	str	r2, [r3, #80]	; 0x50
 8002c6e:	e020      	b.n	8002cb2 <HAL_RCC_OscConfig+0x516>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	23a0      	movs	r3, #160	; 0xa0
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d10e      	bne.n	8002c9a <HAL_RCC_OscConfig+0x4fe>
 8002c7c:	4b62      	ldr	r3, [pc, #392]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c80:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c82:	2180      	movs	r1, #128	; 0x80
 8002c84:	00c9      	lsls	r1, r1, #3
 8002c86:	430a      	orrs	r2, r1
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50
 8002c8a:	4b5f      	ldr	r3, [pc, #380]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c8e:	4b5e      	ldr	r3, [pc, #376]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	0049      	lsls	r1, r1, #1
 8002c94:	430a      	orrs	r2, r1
 8002c96:	651a      	str	r2, [r3, #80]	; 0x50
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x516>
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c9e:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002ca0:	495a      	ldr	r1, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x670>)
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	651a      	str	r2, [r3, #80]	; 0x50
 8002ca6:	4b58      	ldr	r3, [pc, #352]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002ca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002caa:	4b57      	ldr	r3, [pc, #348]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002cac:	4959      	ldr	r1, [pc, #356]	; (8002e14 <HAL_RCC_OscConfig+0x678>)
 8002cae:	400a      	ands	r2, r1
 8002cb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fd fe2b 	bl	8000914 <HAL_GetTick>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc2:	e009      	b.n	8002cd8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fd fe26 	bl	8000914 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e11a      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002cda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d0ef      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x528>
 8002ce4:	e014      	b.n	8002d10 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fd fe15 	bl	8000914 <HAL_GetTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cee:	e009      	b.n	8002d04 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fd fe10 	bl	8000914 <HAL_GetTick>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	4a47      	ldr	r2, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e104      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d04:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d1ef      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d10:	2327      	movs	r3, #39	; 0x27
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1e:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d20:	493e      	ldr	r1, [pc, #248]	; (8002e1c <HAL_RCC_OscConfig+0x680>)
 8002d22:	400a      	ands	r2, r1
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d049      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d026      	beq.n	8002d86 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d38:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	4b32      	ldr	r3, [pc, #200]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d3e:	2101      	movs	r1, #1
 8002d40:	430a      	orrs	r2, r1
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d48:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <HAL_RCC_OscConfig+0x684>)
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <HAL_RCC_OscConfig+0x684>)
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	0189      	lsls	r1, r1, #6
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fd fdd9 	bl	8000914 <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d68:	f7fd fdd4 	bl	8000914 <HAL_GetTick>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0c9      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	4013      	ands	r3, r2
 8002d82:	d0f1      	beq.n	8002d68 <HAL_RCC_OscConfig+0x5cc>
 8002d84:	e01e      	b.n	8002dc4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	438a      	bics	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <HAL_RCC_OscConfig+0x684>)
 8002d94:	6a1a      	ldr	r2, [r3, #32]
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_RCC_OscConfig+0x684>)
 8002d98:	4922      	ldr	r1, [pc, #136]	; (8002e24 <HAL_RCC_OscConfig+0x688>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fd fdb9 	bl	8000914 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da8:	f7fd fdb4 	bl	8000914 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0a9      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d1f1      	bne.n	8002da8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d100      	bne.n	8002dce <HAL_RCC_OscConfig+0x632>
 8002dcc:	e09e      	b.n	8002f0c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	d100      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x63a>
 8002dd4:	e077      	b.n	8002ec6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d158      	bne.n	8002e90 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_OscConfig+0x66c>)
 8002de4:	4910      	ldr	r1, [pc, #64]	; (8002e28 <HAL_RCC_OscConfig+0x68c>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fd fd93 	bl	8000914 <HAL_GetTick>
 8002dee:	0003      	movs	r3, r0
 8002df0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002df2:	e01b      	b.n	8002e2c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fd fd8e 	bl	8000914 <HAL_GetTick>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d914      	bls.n	8002e2c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e083      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	fffffeff 	.word	0xfffffeff
 8002e10:	40007000 	.word	0x40007000
 8002e14:	fffffbff 	.word	0xfffffbff
 8002e18:	00001388 	.word	0x00001388
 8002e1c:	efffffff 	.word	0xefffffff
 8002e20:	40010000 	.word	0x40010000
 8002e24:	ffffdfff 	.word	0xffffdfff
 8002e28:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	049b      	lsls	r3, r3, #18
 8002e34:	4013      	ands	r3, r2
 8002e36:	d1dd      	bne.n	8002df4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e38:	4b37      	ldr	r3, [pc, #220]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a37      	ldr	r2, [pc, #220]	; (8002f1c <HAL_RCC_OscConfig+0x780>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	431a      	orrs	r2, r3
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002e54:	430a      	orrs	r2, r1
 8002e56:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	0449      	lsls	r1, r1, #17
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fd fd55 	bl	8000914 <HAL_GetTick>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fd fd50 	bl	8000914 <HAL_GetTick>
 8002e74:	0002      	movs	r2, r0
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e045      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	049b      	lsls	r3, r3, #18
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x6d4>
 8002e8e:	e03d      	b.n	8002f0c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002e96:	4922      	ldr	r1, [pc, #136]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fd fd3a 	bl	8000914 <HAL_GetTick>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fd fd35 	bl	8000914 <HAL_GetTick>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e02a      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002eb8:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	049b      	lsls	r3, r3, #18
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x70a>
 8002ec4:	e022      	b.n	8002f0c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e01d      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_RCC_OscConfig+0x77c>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	025b      	lsls	r3, r3, #9
 8002ede:	401a      	ands	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d10f      	bne.n	8002f08 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	23f0      	movs	r3, #240	; 0xf0
 8002eec:	039b      	lsls	r3, r3, #14
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	23c0      	movs	r3, #192	; 0xc0
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	401a      	ands	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b00a      	add	sp, #40	; 0x28
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	ff02ffff 	.word	0xff02ffff
 8002f20:	feffffff 	.word	0xfeffffff

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b5b0      	push	{r4, r5, r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e128      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b96      	ldr	r3, [pc, #600]	; (8003194 <HAL_RCC_ClockConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4013      	ands	r3, r2
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d91e      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b93      	ldr	r3, [pc, #588]	; (8003194 <HAL_RCC_ClockConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4393      	bics	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	4b90      	ldr	r3, [pc, #576]	; (8003194 <HAL_RCC_ClockConfig+0x270>)
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f58:	f7fd fcdc 	bl	8000914 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f60:	e009      	b.n	8002f76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f62:	f7fd fcd7 	bl	8000914 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	4a8a      	ldr	r2, [pc, #552]	; (8003198 <HAL_RCC_ClockConfig+0x274>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e109      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b87      	ldr	r3, [pc, #540]	; (8003194 <HAL_RCC_ClockConfig+0x270>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1ee      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8e:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	22f0      	movs	r2, #240	; 0xf0
 8002f94:	4393      	bics	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d100      	bne.n	8002fae <HAL_RCC_ClockConfig+0x8a>
 8002fac:	e089      	b.n	80030c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb6:	4b79      	ldr	r3, [pc, #484]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	029b      	lsls	r3, r3, #10
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d120      	bne.n	8003004 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0e1      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fce:	4b73      	ldr	r3, [pc, #460]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	049b      	lsls	r3, r3, #18
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d114      	bne.n	8003004 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0d5      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe6:	4b6d      	ldr	r3, [pc, #436]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4013      	ands	r3, r2
 8002fee:	d109      	bne.n	8003004 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0ca      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ff4:	4b69      	ldr	r3, [pc, #420]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0c2      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003004:	4b65      	ldr	r3, [pc, #404]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2203      	movs	r2, #3
 800300a:	4393      	bics	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4b62      	ldr	r3, [pc, #392]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7fd fc7c 	bl	8000914 <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d111      	bne.n	800304c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003028:	e009      	b.n	800303e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302a:	f7fd fc73 	bl	8000914 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	4a58      	ldr	r2, [pc, #352]	; (8003198 <HAL_RCC_ClockConfig+0x274>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0a5      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800303e:	4b57      	ldr	r3, [pc, #348]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	220c      	movs	r2, #12
 8003044:	4013      	ands	r3, r2
 8003046:	2b08      	cmp	r3, #8
 8003048:	d1ef      	bne.n	800302a <HAL_RCC_ClockConfig+0x106>
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d111      	bne.n	8003078 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003054:	e009      	b.n	800306a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003056:	f7fd fc5d 	bl	8000914 <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	4a4d      	ldr	r2, [pc, #308]	; (8003198 <HAL_RCC_ClockConfig+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e08f      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306a:	4b4c      	ldr	r3, [pc, #304]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	220c      	movs	r2, #12
 8003070:	4013      	ands	r3, r2
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d1ef      	bne.n	8003056 <HAL_RCC_ClockConfig+0x132>
 8003076:	e024      	b.n	80030c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d11b      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003080:	e009      	b.n	8003096 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003082:	f7fd fc47 	bl	8000914 <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	4a42      	ldr	r2, [pc, #264]	; (8003198 <HAL_RCC_ClockConfig+0x274>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e079      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003096:	4b41      	ldr	r3, [pc, #260]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	220c      	movs	r2, #12
 800309c:	4013      	ands	r3, r2
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d1ef      	bne.n	8003082 <HAL_RCC_ClockConfig+0x15e>
 80030a2:	e00e      	b.n	80030c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a4:	f7fd fc36 	bl	8000914 <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	4a3a      	ldr	r2, [pc, #232]	; (8003198 <HAL_RCC_ClockConfig+0x274>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e068      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030b8:	4b38      	ldr	r3, [pc, #224]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	220c      	movs	r2, #12
 80030be:	4013      	ands	r3, r2
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_RCC_ClockConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d21e      	bcs.n	800310e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d0:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_RCC_ClockConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4393      	bics	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <HAL_RCC_ClockConfig+0x270>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030e2:	f7fd fc17 	bl	8000914 <HAL_GetTick>
 80030e6:	0003      	movs	r3, r0
 80030e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	e009      	b.n	8003100 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f7fd fc12 	bl	8000914 <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	4a28      	ldr	r2, [pc, #160]	; (8003198 <HAL_RCC_ClockConfig+0x274>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e044      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCC_ClockConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d1ee      	bne.n	80030ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2204      	movs	r2, #4
 8003114:	4013      	ands	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <HAL_RCC_ClockConfig+0x27c>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8003128:	430a      	orrs	r2, r1
 800312a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2208      	movs	r2, #8
 8003132:	4013      	ands	r3, r2
 8003134:	d00a      	beq.n	800314c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_RCC_ClockConfig+0x280>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	00da      	lsls	r2, r3, #3
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8003148:	430a      	orrs	r2, r1
 800314a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314c:	f000 f832 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003150:	0001      	movs	r1, r0
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_RCC_ClockConfig+0x278>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	220f      	movs	r2, #15
 800315a:	4013      	ands	r3, r2
 800315c:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <HAL_RCC_ClockConfig+0x284>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	000a      	movs	r2, r1
 8003162:	40da      	lsrs	r2, r3
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_RCC_ClockConfig+0x288>)
 8003166:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_ClockConfig+0x28c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	250b      	movs	r5, #11
 800316e:	197c      	adds	r4, r7, r5
 8003170:	0018      	movs	r0, r3
 8003172:	f7fd fb89 	bl	8000888 <HAL_InitTick>
 8003176:	0003      	movs	r3, r0
 8003178:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800317a:	197b      	adds	r3, r7, r5
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003182:	197b      	adds	r3, r7, r5
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	e000      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b004      	add	sp, #16
 8003190:	bdb0      	pop	{r4, r5, r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	40022000 	.word	0x40022000
 8003198:	00001388 	.word	0x00001388
 800319c:	40021000 	.word	0x40021000
 80031a0:	fffff8ff 	.word	0xfffff8ff
 80031a4:	ffffc7ff 	.word	0xffffc7ff
 80031a8:	080078c8 	.word	0x080078c8
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b08e      	sub	sp, #56	; 0x38
 80031b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80031ba:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c2:	230c      	movs	r3, #12
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d014      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x40>
 80031ca:	d900      	bls.n	80031ce <HAL_RCC_GetSysClockFreq+0x1a>
 80031cc:	e07b      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x112>
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d002      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x24>
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x3a>
 80031d6:	e076      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031d8:	4b44      	ldr	r3, [pc, #272]	; (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2210      	movs	r2, #16
 80031de:	4013      	ands	r3, r2
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80031e6:	e07c      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80031e8:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x140>)
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031ec:	e079      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x144>)
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031f2:	e076      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	0c9a      	lsrs	r2, r3, #18
 80031f8:	230f      	movs	r3, #15
 80031fa:	401a      	ands	r2, r3
 80031fc:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_RCC_GetSysClockFreq+0x148>)
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	0d9a      	lsrs	r2, r3, #22
 8003206:	2303      	movs	r3, #3
 8003208:	4013      	ands	r3, r2
 800320a:	3301      	adds	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800320e:	4b37      	ldr	r3, [pc, #220]	; (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	4013      	ands	r3, r2
 8003218:	d01a      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003224:	2300      	movs	r3, #0
 8003226:	69b8      	ldr	r0, [r7, #24]
 8003228:	69f9      	ldr	r1, [r7, #28]
 800322a:	f7fd f819 	bl	8000260 <__aeabi_lmul>
 800322e:	0002      	movs	r2, r0
 8003230:	000b      	movs	r3, r1
 8003232:	0010      	movs	r0, r2
 8003234:	0019      	movs	r1, r3
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f7fc ffed 	bl	8000220 <__aeabi_uldivmod>
 8003246:	0002      	movs	r2, r0
 8003248:	000b      	movs	r3, r1
 800324a:	0013      	movs	r3, r2
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
 800324e:	e037      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003250:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2210      	movs	r2, #16
 8003256:	4013      	ands	r3, r2
 8003258:	d01a      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4a23      	ldr	r2, [pc, #140]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003264:	2300      	movs	r3, #0
 8003266:	68b8      	ldr	r0, [r7, #8]
 8003268:	68f9      	ldr	r1, [r7, #12]
 800326a:	f7fc fff9 	bl	8000260 <__aeabi_lmul>
 800326e:	0002      	movs	r2, r0
 8003270:	000b      	movs	r3, r1
 8003272:	0010      	movs	r0, r2
 8003274:	0019      	movs	r1, r3
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f7fc ffcd 	bl	8000220 <__aeabi_uldivmod>
 8003286:	0002      	movs	r2, r0
 8003288:	000b      	movs	r3, r1
 800328a:	0013      	movs	r3, r2
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
 800328e:	e017      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	0018      	movs	r0, r3
 8003294:	2300      	movs	r3, #0
 8003296:	0019      	movs	r1, r3
 8003298:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x140>)
 800329a:	2300      	movs	r3, #0
 800329c:	f7fc ffe0 	bl	8000260 <__aeabi_lmul>
 80032a0:	0002      	movs	r2, r0
 80032a2:	000b      	movs	r3, r1
 80032a4:	0010      	movs	r0, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	001c      	movs	r4, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	001d      	movs	r5, r3
 80032b0:	0022      	movs	r2, r4
 80032b2:	002b      	movs	r3, r5
 80032b4:	f7fc ffb4 	bl	8000220 <__aeabi_uldivmod>
 80032b8:	0002      	movs	r2, r0
 80032ba:	000b      	movs	r3, r1
 80032bc:	0013      	movs	r3, r2
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80032c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032c4:	e00d      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	0b5b      	lsrs	r3, r3, #13
 80032cc:	2207      	movs	r2, #7
 80032ce:	4013      	ands	r3, r2
 80032d0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	3301      	adds	r3, #1
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	0212      	lsls	r2, r2, #8
 80032da:	409a      	lsls	r2, r3
 80032dc:	0013      	movs	r3, r2
 80032de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b00e      	add	sp, #56	; 0x38
 80032ea:	bdb0      	pop	{r4, r5, r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	003d0900 	.word	0x003d0900
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200
 80032fc:	080078d8 	.word	0x080078d8

08003300 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003308:	2317      	movs	r3, #23
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2220      	movs	r2, #32
 8003316:	4013      	ands	r3, r2
 8003318:	d106      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	4013      	ands	r3, r2
 8003324:	d100      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003326:	e104      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003328:	4bb1      	ldr	r3, [pc, #708]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800332a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	055b      	lsls	r3, r3, #21
 8003330:	4013      	ands	r3, r2
 8003332:	d10a      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	4bae      	ldr	r3, [pc, #696]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003338:	4bad      	ldr	r3, [pc, #692]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	0549      	lsls	r1, r1, #21
 800333e:	430a      	orrs	r2, r1
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003342:	2317      	movs	r3, #23
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	4baa      	ldr	r3, [pc, #680]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4013      	ands	r3, r2
 8003354:	d11a      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003356:	4ba7      	ldr	r3, [pc, #668]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4ba6      	ldr	r3, [pc, #664]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0049      	lsls	r1, r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003364:	f7fd fad6 	bl	8000914 <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fd fad1 	bl	8000914 <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e133      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b9c      	ldr	r3, [pc, #624]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4013      	ands	r3, r2
 800338a:	d0f0      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800338c:	4b98      	ldr	r3, [pc, #608]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	23c0      	movs	r3, #192	; 0xc0
 8003392:	039b      	lsls	r3, r3, #14
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	23c0      	movs	r3, #192	; 0xc0
 800339e:	039b      	lsls	r3, r3, #14
 80033a0:	4013      	ands	r3, r2
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d107      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	23c0      	movs	r3, #192	; 0xc0
 80033ae:	039b      	lsls	r3, r3, #14
 80033b0:	4013      	ands	r3, r2
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d013      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	23c0      	movs	r3, #192	; 0xc0
 80033be:	029b      	lsls	r3, r3, #10
 80033c0:	401a      	ands	r2, r3
 80033c2:	23c0      	movs	r3, #192	; 0xc0
 80033c4:	029b      	lsls	r3, r3, #10
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d10a      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80033ca:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	029b      	lsls	r3, r3, #10
 80033d2:	401a      	ands	r2, r3
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	029b      	lsls	r3, r3, #10
 80033d8:	429a      	cmp	r2, r3
 80033da:	d101      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e103      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80033e0:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e4:	23c0      	movs	r3, #192	; 0xc0
 80033e6:	029b      	lsls	r3, r3, #10
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d049      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	23c0      	movs	r3, #192	; 0xc0
 80033f8:	029b      	lsls	r3, r3, #10
 80033fa:	4013      	ands	r3, r2
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d004      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2220      	movs	r2, #32
 8003408:	4013      	ands	r3, r2
 800340a:	d10d      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	23c0      	movs	r3, #192	; 0xc0
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	4013      	ands	r3, r2
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	429a      	cmp	r2, r3
 800341a:	d034      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4013      	ands	r3, r2
 8003426:	d02e      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003428:	4b71      	ldr	r3, [pc, #452]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342c:	4a72      	ldr	r2, [pc, #456]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800342e:	4013      	ands	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003432:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003436:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	0309      	lsls	r1, r1, #12
 800343c:	430a      	orrs	r2, r1
 800343e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003440:	4b6b      	ldr	r3, [pc, #428]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003446:	496d      	ldr	r1, [pc, #436]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003448:	400a      	ands	r2, r1
 800344a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800344c:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d014      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fd fa5a 	bl	8000914 <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003464:	e009      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7fd fa55 	bl	8000914 <HAL_GetTick>
 800346a:	0002      	movs	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	4a63      	ldr	r2, [pc, #396]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0b6      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800347a:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800347c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4013      	ands	r3, r2
 8003484:	d0ef      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	4013      	ands	r3, r2
 8003490:	d01f      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	23c0      	movs	r3, #192	; 0xc0
 8003498:	029b      	lsls	r3, r3, #10
 800349a:	401a      	ands	r2, r3
 800349c:	23c0      	movs	r3, #192	; 0xc0
 800349e:	029b      	lsls	r3, r3, #10
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d10c      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80034a4:	4b52      	ldr	r3, [pc, #328]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	23c0      	movs	r3, #192	; 0xc0
 80034b4:	039b      	lsls	r3, r3, #14
 80034b6:	401a      	ands	r2, r3
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	23c0      	movs	r3, #192	; 0xc0
 80034c8:	029b      	lsls	r3, r3, #10
 80034ca:	401a      	ands	r2, r3
 80034cc:	4b48      	ldr	r3, [pc, #288]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ce:	430a      	orrs	r2, r1
 80034d0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2220      	movs	r2, #32
 80034d8:	4013      	ands	r3, r2
 80034da:	d01f      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	23c0      	movs	r3, #192	; 0xc0
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	401a      	ands	r2, r3
 80034e6:	23c0      	movs	r3, #192	; 0xc0
 80034e8:	029b      	lsls	r3, r3, #10
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d10c      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80034ee:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a44      	ldr	r2, [pc, #272]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	23c0      	movs	r3, #192	; 0xc0
 80034fe:	039b      	lsls	r3, r3, #14
 8003500:	401a      	ands	r2, r3
 8003502:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800350a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	23c0      	movs	r3, #192	; 0xc0
 8003512:	029b      	lsls	r3, r3, #10
 8003514:	401a      	ands	r2, r3
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003518:	430a      	orrs	r2, r1
 800351a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800351c:	2317      	movs	r3, #23
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800352c:	4936      	ldr	r1, [pc, #216]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800352e:	400a      	ands	r2, r1
 8003530:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	4013      	ands	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353c:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800353e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003540:	2203      	movs	r2, #3
 8003542:	4393      	bics	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800354c:	430a      	orrs	r2, r1
 800354e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	4013      	ands	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800355a:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	220c      	movs	r2, #12
 8003560:	4393      	bics	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800356a:	430a      	orrs	r2, r1
 800356c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2204      	movs	r2, #4
 8003574:	4013      	ands	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800357a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357c:	4a23      	ldr	r2, [pc, #140]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003588:	430a      	orrs	r2, r1
 800358a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2208      	movs	r2, #8
 8003592:	4013      	ands	r3, r2
 8003594:	d009      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003596:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359a:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035a6:	430a      	orrs	r2, r1
 80035a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	4013      	ands	r3, r2
 80035b2:	d009      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b8:	4a16      	ldr	r2, [pc, #88]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	0019      	movs	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035c4:	430a      	orrs	r2, r1
 80035c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	4013      	ands	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80035d8:	4013      	ands	r3, r2
 80035da:	0019      	movs	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035e2:	430a      	orrs	r2, r1
 80035e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b006      	add	sp, #24
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	fffcffff 	.word	0xfffcffff
 80035fc:	fff7ffff 	.word	0xfff7ffff
 8003600:	00001388 	.word	0x00001388
 8003604:	ffcfffff 	.word	0xffcfffff
 8003608:	efffffff 	.word	0xefffffff
 800360c:	fffff3ff 	.word	0xfffff3ff
 8003610:	ffffcfff 	.word	0xffffcfff
 8003614:	fbffffff 	.word	0xfbffffff
 8003618:	fff3ffff 	.word	0xfff3ffff

0800361c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2244      	movs	r2, #68	; 0x44
 8003628:	2100      	movs	r1, #0
 800362a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <USB_EnableGlobalInt+0x28>)
 800362e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	b299      	uxth	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	b004      	add	sp, #16
 8003642:	bd80      	pop	{r7, pc}
 8003644:	0000bf80 	.word	0x0000bf80

08003648 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <USB_DisableGlobalInt+0x30>)
 8003652:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2240      	movs	r2, #64	; 0x40
 8003658:	5a9b      	ldrh	r3, [r3, r2]
 800365a:	b29b      	uxth	r3, r3
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	b292      	uxth	r2, r2
 8003660:	43d2      	mvns	r2, r2
 8003662:	b292      	uxth	r2, r2
 8003664:	4013      	ands	r3, r2
 8003666:	b299      	uxth	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2240      	movs	r2, #64	; 0x40
 800366c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b004      	add	sp, #16
 8003676:	bd80      	pop	{r7, pc}
 8003678:	0000bf80 	.word	0x0000bf80

0800367c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800367c:	b084      	sub	sp, #16
 800367e:	b590      	push	{r4, r7, lr}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	2004      	movs	r0, #4
 8003688:	2410      	movs	r4, #16
 800368a:	1900      	adds	r0, r0, r4
 800368c:	2408      	movs	r4, #8
 800368e:	46a4      	mov	ip, r4
 8003690:	44bc      	add	ip, r7
 8003692:	4460      	add	r0, ip
 8003694:	6001      	str	r1, [r0, #0]
 8003696:	6042      	str	r2, [r0, #4]
 8003698:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2240      	movs	r2, #64	; 0x40
 800369e:	2101      	movs	r1, #1
 80036a0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2240      	movs	r2, #64	; 0x40
 80036a6:	2100      	movs	r1, #0
 80036a8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2244      	movs	r2, #68	; 0x44
 80036ae:	2100      	movs	r1, #0
 80036b0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2250      	movs	r2, #80	; 0x50
 80036b6:	2100      	movs	r1, #0
 80036b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b003      	add	sp, #12
 80036c2:	bc90      	pop	{r4, r7}
 80036c4:	bc08      	pop	{r3}
 80036c6:	b004      	add	sp, #16
 80036c8:	4718      	bx	r3
	...

080036cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b09c      	sub	sp, #112	; 0x70
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80036d6:	236f      	movs	r3, #111	; 0x6f
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	18d3      	adds	r3, r2, r3
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	236c      	movs	r3, #108	; 0x6c
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	49a3      	ldr	r1, [pc, #652]	; (8003980 <USB_ActivateEndpoint+0x2b4>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	78db      	ldrb	r3, [r3, #3]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d017      	beq.n	800372e <USB_ActivateEndpoint+0x62>
 80036fe:	dc28      	bgt.n	8003752 <USB_ActivateEndpoint+0x86>
 8003700:	2b02      	cmp	r3, #2
 8003702:	d00e      	beq.n	8003722 <USB_ActivateEndpoint+0x56>
 8003704:	dc25      	bgt.n	8003752 <USB_ActivateEndpoint+0x86>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <USB_ActivateEndpoint+0x44>
 800370a:	2b01      	cmp	r3, #1
 800370c:	d018      	beq.n	8003740 <USB_ActivateEndpoint+0x74>
 800370e:	e020      	b.n	8003752 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003710:	226c      	movs	r2, #108	; 0x6c
 8003712:	18bb      	adds	r3, r7, r2
 8003714:	18ba      	adds	r2, r7, r2
 8003716:	8812      	ldrh	r2, [r2, #0]
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0089      	lsls	r1, r1, #2
 800371c:	430a      	orrs	r2, r1
 800371e:	801a      	strh	r2, [r3, #0]
      break;
 8003720:	e01c      	b.n	800375c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003722:	226c      	movs	r2, #108	; 0x6c
 8003724:	18bb      	adds	r3, r7, r2
 8003726:	18ba      	adds	r2, r7, r2
 8003728:	8812      	ldrh	r2, [r2, #0]
 800372a:	801a      	strh	r2, [r3, #0]
      break;
 800372c:	e016      	b.n	800375c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800372e:	226c      	movs	r2, #108	; 0x6c
 8003730:	18bb      	adds	r3, r7, r2
 8003732:	18ba      	adds	r2, r7, r2
 8003734:	8812      	ldrh	r2, [r2, #0]
 8003736:	21c0      	movs	r1, #192	; 0xc0
 8003738:	00c9      	lsls	r1, r1, #3
 800373a:	430a      	orrs	r2, r1
 800373c:	801a      	strh	r2, [r3, #0]
      break;
 800373e:	e00d      	b.n	800375c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003740:	226c      	movs	r2, #108	; 0x6c
 8003742:	18bb      	adds	r3, r7, r2
 8003744:	18ba      	adds	r2, r7, r2
 8003746:	8812      	ldrh	r2, [r2, #0]
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	00c9      	lsls	r1, r1, #3
 800374c:	430a      	orrs	r2, r1
 800374e:	801a      	strh	r2, [r3, #0]
      break;
 8003750:	e004      	b.n	800375c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003752:	236f      	movs	r3, #111	; 0x6f
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
      break;
 800375a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	18d3      	adds	r3, r2, r3
 8003766:	226c      	movs	r2, #108	; 0x6c
 8003768:	18ba      	adds	r2, r7, r2
 800376a:	8812      	ldrh	r2, [r2, #0]
 800376c:	4985      	ldr	r1, [pc, #532]	; (8003984 <USB_ActivateEndpoint+0x2b8>)
 800376e:	430a      	orrs	r2, r1
 8003770:	b292      	uxth	r2, r2
 8003772:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	18d3      	adds	r3, r2, r3
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	b21b      	sxth	r3, r3
 8003784:	4a80      	ldr	r2, [pc, #512]	; (8003988 <USB_ActivateEndpoint+0x2bc>)
 8003786:	4013      	ands	r3, r2
 8003788:	b21a      	sxth	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b21b      	sxth	r3, r3
 8003790:	4313      	orrs	r3, r2
 8003792:	b21a      	sxth	r2, r3
 8003794:	2166      	movs	r1, #102	; 0x66
 8003796:	187b      	adds	r3, r7, r1
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	18d3      	adds	r3, r2, r3
 80037a4:	187a      	adds	r2, r7, r1
 80037a6:	8812      	ldrh	r2, [r2, #0]
 80037a8:	4976      	ldr	r1, [pc, #472]	; (8003984 <USB_ActivateEndpoint+0x2b8>)
 80037aa:	430a      	orrs	r2, r1
 80037ac:	b292      	uxth	r2, r2
 80037ae:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	7b1b      	ldrb	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d000      	beq.n	80037ba <USB_ActivateEndpoint+0xee>
 80037b8:	e178      	b.n	8003aac <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d100      	bne.n	80037c4 <USB_ActivateEndpoint+0xf8>
 80037c2:	e07a      	b.n	80038ba <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2250      	movs	r2, #80	; 0x50
 80037cc:	5a9b      	ldrh	r3, [r3, r2]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	001a      	movs	r2, r3
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	189b      	adds	r3, r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	00da      	lsls	r2, r3, #3
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	18d3      	adds	r3, r2, r3
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	00d2      	lsls	r2, r2, #3
 80037e6:	4694      	mov	ip, r2
 80037e8:	4463      	add	r3, ip
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	88db      	ldrh	r3, [r3, #6]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	18db      	adds	r3, r3, r3
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	18d2      	adds	r2, r2, r3
 8003806:	2112      	movs	r1, #18
 8003808:	187b      	adds	r3, r7, r1
 800380a:	8812      	ldrh	r2, [r2, #0]
 800380c:	801a      	strh	r2, [r3, #0]
 800380e:	187b      	adds	r3, r7, r1
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	2240      	movs	r2, #64	; 0x40
 8003814:	4013      	ands	r3, r2
 8003816:	d016      	beq.n	8003846 <USB_ActivateEndpoint+0x17a>
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	18d3      	adds	r3, r2, r3
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29a      	uxth	r2, r3
 8003826:	2010      	movs	r0, #16
 8003828:	183b      	adds	r3, r7, r0
 800382a:	4957      	ldr	r1, [pc, #348]	; (8003988 <USB_ActivateEndpoint+0x2bc>)
 800382c:	400a      	ands	r2, r1
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	18d3      	adds	r3, r2, r3
 800383a:	183a      	adds	r2, r7, r0
 800383c:	8812      	ldrh	r2, [r2, #0]
 800383e:	4953      	ldr	r1, [pc, #332]	; (800398c <USB_ActivateEndpoint+0x2c0>)
 8003840:	430a      	orrs	r2, r1
 8003842:	b292      	uxth	r2, r2
 8003844:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	78db      	ldrb	r3, [r3, #3]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d01d      	beq.n	800388a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	18d3      	adds	r3, r2, r3
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b29a      	uxth	r2, r3
 800385c:	200c      	movs	r0, #12
 800385e:	183b      	adds	r3, r7, r0
 8003860:	494b      	ldr	r1, [pc, #300]	; (8003990 <USB_ActivateEndpoint+0x2c4>)
 8003862:	400a      	ands	r2, r1
 8003864:	801a      	strh	r2, [r3, #0]
 8003866:	183b      	adds	r3, r7, r0
 8003868:	183a      	adds	r2, r7, r0
 800386a:	8812      	ldrh	r2, [r2, #0]
 800386c:	2120      	movs	r1, #32
 800386e:	404a      	eors	r2, r1
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	18d3      	adds	r3, r2, r3
 800387c:	183a      	adds	r2, r7, r0
 800387e:	8812      	ldrh	r2, [r2, #0]
 8003880:	4940      	ldr	r1, [pc, #256]	; (8003984 <USB_ActivateEndpoint+0x2b8>)
 8003882:	430a      	orrs	r2, r1
 8003884:	b292      	uxth	r2, r2
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e2b4      	b.n	8003df4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	18d3      	adds	r3, r2, r3
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29a      	uxth	r2, r3
 8003898:	200e      	movs	r0, #14
 800389a:	183b      	adds	r3, r7, r0
 800389c:	493c      	ldr	r1, [pc, #240]	; (8003990 <USB_ActivateEndpoint+0x2c4>)
 800389e:	400a      	ands	r2, r1
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	183a      	adds	r2, r7, r0
 80038ae:	8812      	ldrh	r2, [r2, #0]
 80038b0:	4934      	ldr	r1, [pc, #208]	; (8003984 <USB_ActivateEndpoint+0x2b8>)
 80038b2:	430a      	orrs	r2, r1
 80038b4:	b292      	uxth	r2, r2
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	e29c      	b.n	8003df4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2250      	movs	r2, #80	; 0x50
 80038c2:	5a9b      	ldrh	r3, [r3, r2]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	001a      	movs	r2, r3
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	00da      	lsls	r2, r3, #3
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	18d3      	adds	r3, r2, r3
 80038d8:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <USB_ActivateEndpoint+0x2c8>)
 80038da:	4694      	mov	ip, r2
 80038dc:	4463      	add	r3, ip
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	88db      	ldrh	r3, [r3, #6]
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	18db      	adds	r3, r3, r3
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2250      	movs	r2, #80	; 0x50
 80038f8:	5a9b      	ldrh	r3, [r3, r2]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	001a      	movs	r2, r3
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	189b      	adds	r3, r3, r2
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	00da      	lsls	r2, r3, #3
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	18d3      	adds	r3, r2, r3
 800390e:	4a22      	ldr	r2, [pc, #136]	; (8003998 <USB_ActivateEndpoint+0x2cc>)
 8003910:	4694      	mov	ip, r2
 8003912:	4463      	add	r3, ip
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	059b      	lsls	r3, r3, #22
 800391e:	0d9b      	lsrs	r3, r3, #22
 8003920:	b29a      	uxth	r2, r3
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b3e      	cmp	r3, #62	; 0x3e
 800392c:	d91a      	bls.n	8003964 <USB_ActivateEndpoint+0x298>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	66bb      	str	r3, [r7, #104]	; 0x68
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	221f      	movs	r2, #31
 800393c:	4013      	ands	r3, r2
 800393e:	d102      	bne.n	8003946 <USB_ActivateEndpoint+0x27a>
 8003940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003942:	3b01      	subs	r3, #1
 8003944:	66bb      	str	r3, [r7, #104]	; 0x68
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	b29a      	uxth	r2, r3
 800394c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394e:	b29b      	uxth	r3, r3
 8003950:	029b      	lsls	r3, r3, #10
 8003952:	b29b      	uxth	r3, r3
 8003954:	4313      	orrs	r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	4a10      	ldr	r2, [pc, #64]	; (800399c <USB_ActivateEndpoint+0x2d0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	b29a      	uxth	r2, r3
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	801a      	strh	r2, [r3, #0]
 8003962:	e034      	b.n	80039ce <USB_ActivateEndpoint+0x302>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d119      	bne.n	80039a0 <USB_ActivateEndpoint+0x2d4>
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <USB_ActivateEndpoint+0x2d0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	b29a      	uxth	r2, r3
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	e027      	b.n	80039ce <USB_ActivateEndpoint+0x302>
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	ffff898f 	.word	0xffff898f
 8003984:	ffff8080 	.word	0xffff8080
 8003988:	ffff8f8f 	.word	0xffff8f8f
 800398c:	ffff80c0 	.word	0xffff80c0
 8003990:	ffff8fbf 	.word	0xffff8fbf
 8003994:	00000404 	.word	0x00000404
 8003998:	00000406 	.word	0x00000406
 800399c:	ffff8000 	.word	0xffff8000
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2201      	movs	r2, #1
 80039ae:	4013      	ands	r3, r2
 80039b0:	d002      	beq.n	80039b8 <USB_ActivateEndpoint+0x2ec>
 80039b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b4:	3301      	adds	r3, #1
 80039b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	029b      	lsls	r3, r3, #10
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	4313      	orrs	r3, r2
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	18d2      	adds	r2, r2, r3
 80039d8:	2122      	movs	r1, #34	; 0x22
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	8812      	ldrh	r2, [r2, #0]
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	01db      	lsls	r3, r3, #7
 80039e8:	4013      	ands	r3, r2
 80039ea:	d016      	beq.n	8003a1a <USB_ActivateEndpoint+0x34e>
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	18d3      	adds	r3, r2, r3
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	2020      	movs	r0, #32
 80039fc:	183b      	adds	r3, r7, r0
 80039fe:	49dd      	ldr	r1, [pc, #884]	; (8003d74 <USB_ActivateEndpoint+0x6a8>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	801a      	strh	r2, [r3, #0]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	18d3      	adds	r3, r2, r3
 8003a0e:	183a      	adds	r2, r7, r0
 8003a10:	8812      	ldrh	r2, [r2, #0]
 8003a12:	49d9      	ldr	r1, [pc, #868]	; (8003d78 <USB_ActivateEndpoint+0x6ac>)
 8003a14:	430a      	orrs	r2, r1
 8003a16:	b292      	uxth	r2, r2
 8003a18:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d125      	bne.n	8003a6e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	18d3      	adds	r3, r2, r3
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	201c      	movs	r0, #28
 8003a32:	183b      	adds	r3, r7, r0
 8003a34:	49d1      	ldr	r1, [pc, #836]	; (8003d7c <USB_ActivateEndpoint+0x6b0>)
 8003a36:	400a      	ands	r2, r1
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	183b      	adds	r3, r7, r0
 8003a3c:	183a      	adds	r2, r7, r0
 8003a3e:	8812      	ldrh	r2, [r2, #0]
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0149      	lsls	r1, r1, #5
 8003a44:	404a      	eors	r2, r1
 8003a46:	801a      	strh	r2, [r3, #0]
 8003a48:	183b      	adds	r3, r7, r0
 8003a4a:	183a      	adds	r2, r7, r0
 8003a4c:	8812      	ldrh	r2, [r2, #0]
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	0189      	lsls	r1, r1, #6
 8003a52:	404a      	eors	r2, r1
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	18d3      	adds	r3, r2, r3
 8003a60:	183a      	adds	r2, r7, r0
 8003a62:	8812      	ldrh	r2, [r2, #0]
 8003a64:	49c6      	ldr	r1, [pc, #792]	; (8003d80 <USB_ActivateEndpoint+0x6b4>)
 8003a66:	430a      	orrs	r2, r1
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	e1c2      	b.n	8003df4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	18d3      	adds	r3, r2, r3
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	201e      	movs	r0, #30
 8003a7e:	183b      	adds	r3, r7, r0
 8003a80:	49be      	ldr	r1, [pc, #760]	; (8003d7c <USB_ActivateEndpoint+0x6b0>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	183b      	adds	r3, r7, r0
 8003a88:	183a      	adds	r2, r7, r0
 8003a8a:	8812      	ldrh	r2, [r2, #0]
 8003a8c:	2180      	movs	r1, #128	; 0x80
 8003a8e:	0189      	lsls	r1, r1, #6
 8003a90:	404a      	eors	r2, r1
 8003a92:	801a      	strh	r2, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	18d3      	adds	r3, r2, r3
 8003a9e:	183a      	adds	r2, r7, r0
 8003aa0:	8812      	ldrh	r2, [r2, #0]
 8003aa2:	49b7      	ldr	r1, [pc, #732]	; (8003d80 <USB_ActivateEndpoint+0x6b4>)
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	b292      	uxth	r2, r2
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	e1a3      	b.n	8003df4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	78db      	ldrb	r3, [r3, #3]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d117      	bne.n	8003ae4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	18d3      	adds	r3, r2, r3
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	2062      	movs	r0, #98	; 0x62
 8003ac4:	183b      	adds	r3, r7, r0
 8003ac6:	49ab      	ldr	r1, [pc, #684]	; (8003d74 <USB_ActivateEndpoint+0x6a8>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	801a      	strh	r2, [r3, #0]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	183a      	adds	r2, r7, r0
 8003ad8:	8812      	ldrh	r2, [r2, #0]
 8003ada:	49aa      	ldr	r1, [pc, #680]	; (8003d84 <USB_ActivateEndpoint+0x6b8>)
 8003adc:	430a      	orrs	r2, r1
 8003ade:	b292      	uxth	r2, r2
 8003ae0:	801a      	strh	r2, [r3, #0]
 8003ae2:	e016      	b.n	8003b12 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	18d3      	adds	r3, r2, r3
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	2064      	movs	r0, #100	; 0x64
 8003af4:	183b      	adds	r3, r7, r0
 8003af6:	49a4      	ldr	r1, [pc, #656]	; (8003d88 <USB_ActivateEndpoint+0x6bc>)
 8003af8:	400a      	ands	r2, r1
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	18d3      	adds	r3, r2, r3
 8003b06:	183a      	adds	r2, r7, r0
 8003b08:	8812      	ldrh	r2, [r2, #0]
 8003b0a:	499d      	ldr	r1, [pc, #628]	; (8003d80 <USB_ActivateEndpoint+0x6b4>)
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	b292      	uxth	r2, r2
 8003b10:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2250      	movs	r2, #80	; 0x50
 8003b1a:	5a9b      	ldrh	r3, [r3, r2]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	001a      	movs	r2, r3
 8003b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	00da      	lsls	r2, r3, #3
 8003b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b2e:	18d3      	adds	r3, r2, r3
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	00d2      	lsls	r2, r2, #3
 8003b34:	4694      	mov	ip, r2
 8003b36:	4463      	add	r3, ip
 8003b38:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	891b      	ldrh	r3, [r3, #8]
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	18db      	adds	r3, r3, r3
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2250      	movs	r2, #80	; 0x50
 8003b52:	5a9b      	ldrh	r3, [r3, r2]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	001a      	movs	r2, r3
 8003b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5a:	189b      	adds	r3, r3, r2
 8003b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	00da      	lsls	r2, r3, #3
 8003b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b66:	18d3      	adds	r3, r2, r3
 8003b68:	4a88      	ldr	r2, [pc, #544]	; (8003d8c <USB_ActivateEndpoint+0x6c0>)
 8003b6a:	4694      	mov	ip, r2
 8003b6c:	4463      	add	r3, ip
 8003b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	895b      	ldrh	r3, [r3, #10]
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	18db      	adds	r3, r3, r3
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d000      	beq.n	8003b8a <USB_ActivateEndpoint+0x4be>
 8003b88:	e087      	b.n	8003c9a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	18d2      	adds	r2, r2, r3
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	8812      	ldrh	r2, [r2, #0]
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	881a      	ldrh	r2, [r3, #0]
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	01db      	lsls	r3, r3, #7
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d016      	beq.n	8003bd6 <USB_ActivateEndpoint+0x50a>
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	18d3      	adds	r3, r2, r3
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	203e      	movs	r0, #62	; 0x3e
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	496e      	ldr	r1, [pc, #440]	; (8003d74 <USB_ActivateEndpoint+0x6a8>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	801a      	strh	r2, [r3, #0]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	18d3      	adds	r3, r2, r3
 8003bca:	183a      	adds	r2, r7, r0
 8003bcc:	8812      	ldrh	r2, [r2, #0]
 8003bce:	496a      	ldr	r1, [pc, #424]	; (8003d78 <USB_ActivateEndpoint+0x6ac>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	18d2      	adds	r2, r2, r3
 8003be0:	213c      	movs	r1, #60	; 0x3c
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	8812      	ldrh	r2, [r2, #0]
 8003be6:	801a      	strh	r2, [r3, #0]
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	2240      	movs	r2, #64	; 0x40
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d016      	beq.n	8003c20 <USB_ActivateEndpoint+0x554>
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	18d3      	adds	r3, r2, r3
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	203a      	movs	r0, #58	; 0x3a
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	495b      	ldr	r1, [pc, #364]	; (8003d74 <USB_ActivateEndpoint+0x6a8>)
 8003c06:	400a      	ands	r2, r1
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	18d3      	adds	r3, r2, r3
 8003c14:	183a      	adds	r2, r7, r0
 8003c16:	8812      	ldrh	r2, [r2, #0]
 8003c18:	495d      	ldr	r1, [pc, #372]	; (8003d90 <USB_ActivateEndpoint+0x6c4>)
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	18d3      	adds	r3, r2, r3
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	2038      	movs	r0, #56	; 0x38
 8003c30:	183b      	adds	r3, r7, r0
 8003c32:	4952      	ldr	r1, [pc, #328]	; (8003d7c <USB_ActivateEndpoint+0x6b0>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	183b      	adds	r3, r7, r0
 8003c3a:	183a      	adds	r2, r7, r0
 8003c3c:	8812      	ldrh	r2, [r2, #0]
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	0149      	lsls	r1, r1, #5
 8003c42:	404a      	eors	r2, r1
 8003c44:	801a      	strh	r2, [r3, #0]
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	183a      	adds	r2, r7, r0
 8003c4a:	8812      	ldrh	r2, [r2, #0]
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	0189      	lsls	r1, r1, #6
 8003c50:	404a      	eors	r2, r1
 8003c52:	801a      	strh	r2, [r3, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	183a      	adds	r2, r7, r0
 8003c60:	8812      	ldrh	r2, [r2, #0]
 8003c62:	4947      	ldr	r1, [pc, #284]	; (8003d80 <USB_ActivateEndpoint+0x6b4>)
 8003c64:	430a      	orrs	r2, r1
 8003c66:	b292      	uxth	r2, r2
 8003c68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	18d3      	adds	r3, r2, r3
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	2036      	movs	r0, #54	; 0x36
 8003c7a:	183b      	adds	r3, r7, r0
 8003c7c:	4945      	ldr	r1, [pc, #276]	; (8003d94 <USB_ActivateEndpoint+0x6c8>)
 8003c7e:	400a      	ands	r2, r1
 8003c80:	801a      	strh	r2, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	18d3      	adds	r3, r2, r3
 8003c8c:	183a      	adds	r2, r7, r0
 8003c8e:	8812      	ldrh	r2, [r2, #0]
 8003c90:	493b      	ldr	r1, [pc, #236]	; (8003d80 <USB_ActivateEndpoint+0x6b4>)
 8003c92:	430a      	orrs	r2, r1
 8003c94:	b292      	uxth	r2, r2
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	e0ac      	b.n	8003df4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	18d2      	adds	r2, r2, r3
 8003ca4:	214e      	movs	r1, #78	; 0x4e
 8003ca6:	187b      	adds	r3, r7, r1
 8003ca8:	8812      	ldrh	r2, [r2, #0]
 8003caa:	801a      	strh	r2, [r3, #0]
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	01db      	lsls	r3, r3, #7
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d016      	beq.n	8003ce6 <USB_ActivateEndpoint+0x61a>
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	18d3      	adds	r3, r2, r3
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	204c      	movs	r0, #76	; 0x4c
 8003cc8:	183b      	adds	r3, r7, r0
 8003cca:	492a      	ldr	r1, [pc, #168]	; (8003d74 <USB_ActivateEndpoint+0x6a8>)
 8003ccc:	400a      	ands	r2, r1
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	18d3      	adds	r3, r2, r3
 8003cda:	183a      	adds	r2, r7, r0
 8003cdc:	8812      	ldrh	r2, [r2, #0]
 8003cde:	4926      	ldr	r1, [pc, #152]	; (8003d78 <USB_ActivateEndpoint+0x6ac>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	b292      	uxth	r2, r2
 8003ce4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	18d2      	adds	r2, r2, r3
 8003cf0:	214a      	movs	r1, #74	; 0x4a
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	801a      	strh	r2, [r3, #0]
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	2240      	movs	r2, #64	; 0x40
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d016      	beq.n	8003d30 <USB_ActivateEndpoint+0x664>
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	18d3      	adds	r3, r2, r3
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	2048      	movs	r0, #72	; 0x48
 8003d12:	183b      	adds	r3, r7, r0
 8003d14:	4917      	ldr	r1, [pc, #92]	; (8003d74 <USB_ActivateEndpoint+0x6a8>)
 8003d16:	400a      	ands	r2, r1
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	18d3      	adds	r3, r2, r3
 8003d24:	183a      	adds	r2, r7, r0
 8003d26:	8812      	ldrh	r2, [r2, #0]
 8003d28:	4919      	ldr	r1, [pc, #100]	; (8003d90 <USB_ActivateEndpoint+0x6c4>)
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	78db      	ldrb	r3, [r3, #3]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d02f      	beq.n	8003d98 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	18d3      	adds	r3, r2, r3
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	2044      	movs	r0, #68	; 0x44
 8003d48:	183b      	adds	r3, r7, r0
 8003d4a:	4912      	ldr	r1, [pc, #72]	; (8003d94 <USB_ActivateEndpoint+0x6c8>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	183b      	adds	r3, r7, r0
 8003d52:	183a      	adds	r2, r7, r0
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	2120      	movs	r1, #32
 8003d58:	404a      	eors	r2, r1
 8003d5a:	801a      	strh	r2, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	18d3      	adds	r3, r2, r3
 8003d66:	183a      	adds	r2, r7, r0
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	4905      	ldr	r1, [pc, #20]	; (8003d80 <USB_ActivateEndpoint+0x6b4>)
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	b292      	uxth	r2, r2
 8003d70:	801a      	strh	r2, [r3, #0]
 8003d72:	e028      	b.n	8003dc6 <USB_ActivateEndpoint+0x6fa>
 8003d74:	ffff8f8f 	.word	0xffff8f8f
 8003d78:	ffffc080 	.word	0xffffc080
 8003d7c:	ffffbf8f 	.word	0xffffbf8f
 8003d80:	ffff8080 	.word	0xffff8080
 8003d84:	ffff8180 	.word	0xffff8180
 8003d88:	ffff8e8f 	.word	0xffff8e8f
 8003d8c:	00000404 	.word	0x00000404
 8003d90:	ffff80c0 	.word	0xffff80c0
 8003d94:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	18d3      	adds	r3, r2, r3
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	2046      	movs	r0, #70	; 0x46
 8003da8:	183b      	adds	r3, r7, r0
 8003daa:	4916      	ldr	r1, [pc, #88]	; (8003e04 <USB_ActivateEndpoint+0x738>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	801a      	strh	r2, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	18d3      	adds	r3, r2, r3
 8003dba:	183a      	adds	r2, r7, r0
 8003dbc:	8812      	ldrh	r2, [r2, #0]
 8003dbe:	4912      	ldr	r1, [pc, #72]	; (8003e08 <USB_ActivateEndpoint+0x73c>)
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	18d3      	adds	r3, r2, r3
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	2042      	movs	r0, #66	; 0x42
 8003dd6:	183b      	adds	r3, r7, r0
 8003dd8:	490c      	ldr	r1, [pc, #48]	; (8003e0c <USB_ActivateEndpoint+0x740>)
 8003dda:	400a      	ands	r2, r1
 8003ddc:	801a      	strh	r2, [r3, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	18d3      	adds	r3, r2, r3
 8003de8:	183a      	adds	r2, r7, r0
 8003dea:	8812      	ldrh	r2, [r2, #0]
 8003dec:	4906      	ldr	r1, [pc, #24]	; (8003e08 <USB_ActivateEndpoint+0x73c>)
 8003dee:	430a      	orrs	r2, r1
 8003df0:	b292      	uxth	r2, r2
 8003df2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003df4:	236f      	movs	r3, #111	; 0x6f
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	781b      	ldrb	r3, [r3, #0]
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b01c      	add	sp, #112	; 0x70
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	ffff8fbf 	.word	0xffff8fbf
 8003e08:	ffff8080 	.word	0xffff8080
 8003e0c:	ffffbf8f 	.word	0xffffbf8f

08003e10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08c      	sub	sp, #48	; 0x30
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	7b1b      	ldrb	r3, [r3, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d000      	beq.n	8003e24 <USB_DeactivateEndpoint+0x14>
 8003e22:	e07e      	b.n	8003f22 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d03c      	beq.n	8003ea6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	18d2      	adds	r2, r2, r3
 8003e36:	210c      	movs	r1, #12
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	8812      	ldrh	r2, [r2, #0]
 8003e3c:	801a      	strh	r2, [r3, #0]
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	2240      	movs	r2, #64	; 0x40
 8003e44:	4013      	ands	r3, r2
 8003e46:	d016      	beq.n	8003e76 <USB_DeactivateEndpoint+0x66>
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	200a      	movs	r0, #10
 8003e58:	183b      	adds	r3, r7, r0
 8003e5a:	49c7      	ldr	r1, [pc, #796]	; (8004178 <USB_DeactivateEndpoint+0x368>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	183a      	adds	r2, r7, r0
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	49c3      	ldr	r1, [pc, #780]	; (800417c <USB_DeactivateEndpoint+0x36c>)
 8003e70:	430a      	orrs	r2, r1
 8003e72:	b292      	uxth	r2, r2
 8003e74:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	18d3      	adds	r3, r2, r3
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	2008      	movs	r0, #8
 8003e86:	183b      	adds	r3, r7, r0
 8003e88:	49bd      	ldr	r1, [pc, #756]	; (8004180 <USB_DeactivateEndpoint+0x370>)
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	18d3      	adds	r3, r2, r3
 8003e98:	183a      	adds	r2, r7, r0
 8003e9a:	8812      	ldrh	r2, [r2, #0]
 8003e9c:	49b9      	ldr	r1, [pc, #740]	; (8004184 <USB_DeactivateEndpoint+0x374>)
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	e163      	b.n	800416e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	18d2      	adds	r2, r2, r3
 8003eb0:	2112      	movs	r1, #18
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	881a      	ldrh	r2, [r3, #0]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	01db      	lsls	r3, r3, #7
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d016      	beq.n	8003ef2 <USB_DeactivateEndpoint+0xe2>
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	18d3      	adds	r3, r2, r3
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	2010      	movs	r0, #16
 8003ed4:	183b      	adds	r3, r7, r0
 8003ed6:	49a8      	ldr	r1, [pc, #672]	; (8004178 <USB_DeactivateEndpoint+0x368>)
 8003ed8:	400a      	ands	r2, r1
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	18d3      	adds	r3, r2, r3
 8003ee6:	183a      	adds	r2, r7, r0
 8003ee8:	8812      	ldrh	r2, [r2, #0]
 8003eea:	49a7      	ldr	r1, [pc, #668]	; (8004188 <USB_DeactivateEndpoint+0x378>)
 8003eec:	430a      	orrs	r2, r1
 8003eee:	b292      	uxth	r2, r2
 8003ef0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	18d3      	adds	r3, r2, r3
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	200e      	movs	r0, #14
 8003f02:	183b      	adds	r3, r7, r0
 8003f04:	49a1      	ldr	r1, [pc, #644]	; (800418c <USB_DeactivateEndpoint+0x37c>)
 8003f06:	400a      	ands	r2, r1
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	18d3      	adds	r3, r2, r3
 8003f14:	183a      	adds	r2, r7, r0
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	499a      	ldr	r1, [pc, #616]	; (8004184 <USB_DeactivateEndpoint+0x374>)
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	e125      	b.n	800416e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	785b      	ldrb	r3, [r3, #1]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d000      	beq.n	8003f2c <USB_DeactivateEndpoint+0x11c>
 8003f2a:	e090      	b.n	800404e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	18d2      	adds	r2, r2, r3
 8003f36:	2120      	movs	r1, #32
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	8812      	ldrh	r2, [r2, #0]
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	187b      	adds	r3, r7, r1
 8003f40:	881a      	ldrh	r2, [r3, #0]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	01db      	lsls	r3, r3, #7
 8003f46:	4013      	ands	r3, r2
 8003f48:	d016      	beq.n	8003f78 <USB_DeactivateEndpoint+0x168>
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	18d3      	adds	r3, r2, r3
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	201e      	movs	r0, #30
 8003f5a:	183b      	adds	r3, r7, r0
 8003f5c:	4986      	ldr	r1, [pc, #536]	; (8004178 <USB_DeactivateEndpoint+0x368>)
 8003f5e:	400a      	ands	r2, r1
 8003f60:	801a      	strh	r2, [r3, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	18d3      	adds	r3, r2, r3
 8003f6c:	183a      	adds	r2, r7, r0
 8003f6e:	8812      	ldrh	r2, [r2, #0]
 8003f70:	4985      	ldr	r1, [pc, #532]	; (8004188 <USB_DeactivateEndpoint+0x378>)
 8003f72:	430a      	orrs	r2, r1
 8003f74:	b292      	uxth	r2, r2
 8003f76:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	18d2      	adds	r2, r2, r3
 8003f82:	211c      	movs	r1, #28
 8003f84:	187b      	adds	r3, r7, r1
 8003f86:	8812      	ldrh	r2, [r2, #0]
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	187b      	adds	r3, r7, r1
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	2240      	movs	r2, #64	; 0x40
 8003f90:	4013      	ands	r3, r2
 8003f92:	d016      	beq.n	8003fc2 <USB_DeactivateEndpoint+0x1b2>
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	18d3      	adds	r3, r2, r3
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	201a      	movs	r0, #26
 8003fa4:	183b      	adds	r3, r7, r0
 8003fa6:	4974      	ldr	r1, [pc, #464]	; (8004178 <USB_DeactivateEndpoint+0x368>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	18d3      	adds	r3, r2, r3
 8003fb6:	183a      	adds	r2, r7, r0
 8003fb8:	8812      	ldrh	r2, [r2, #0]
 8003fba:	4970      	ldr	r1, [pc, #448]	; (800417c <USB_DeactivateEndpoint+0x36c>)
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	18d3      	adds	r3, r2, r3
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	2018      	movs	r0, #24
 8003fd2:	183b      	adds	r3, r7, r0
 8003fd4:	4968      	ldr	r1, [pc, #416]	; (8004178 <USB_DeactivateEndpoint+0x368>)
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	18d3      	adds	r3, r2, r3
 8003fe4:	183a      	adds	r2, r7, r0
 8003fe6:	8812      	ldrh	r2, [r2, #0]
 8003fe8:	4964      	ldr	r1, [pc, #400]	; (800417c <USB_DeactivateEndpoint+0x36c>)
 8003fea:	430a      	orrs	r2, r1
 8003fec:	b292      	uxth	r2, r2
 8003fee:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	18d3      	adds	r3, r2, r3
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	2016      	movs	r0, #22
 8004000:	183b      	adds	r3, r7, r0
 8004002:	4962      	ldr	r1, [pc, #392]	; (800418c <USB_DeactivateEndpoint+0x37c>)
 8004004:	400a      	ands	r2, r1
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	183a      	adds	r2, r7, r0
 8004014:	8812      	ldrh	r2, [r2, #0]
 8004016:	495b      	ldr	r1, [pc, #364]	; (8004184 <USB_DeactivateEndpoint+0x374>)
 8004018:	430a      	orrs	r2, r1
 800401a:	b292      	uxth	r2, r2
 800401c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	18d3      	adds	r3, r2, r3
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29a      	uxth	r2, r3
 800402c:	2014      	movs	r0, #20
 800402e:	183b      	adds	r3, r7, r0
 8004030:	4953      	ldr	r1, [pc, #332]	; (8004180 <USB_DeactivateEndpoint+0x370>)
 8004032:	400a      	ands	r2, r1
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	18d3      	adds	r3, r2, r3
 8004040:	183a      	adds	r2, r7, r0
 8004042:	8812      	ldrh	r2, [r2, #0]
 8004044:	494f      	ldr	r1, [pc, #316]	; (8004184 <USB_DeactivateEndpoint+0x374>)
 8004046:	430a      	orrs	r2, r1
 8004048:	b292      	uxth	r2, r2
 800404a:	801a      	strh	r2, [r3, #0]
 800404c:	e08f      	b.n	800416e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	18d2      	adds	r2, r2, r3
 8004058:	212e      	movs	r1, #46	; 0x2e
 800405a:	187b      	adds	r3, r7, r1
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	801a      	strh	r2, [r3, #0]
 8004060:	187b      	adds	r3, r7, r1
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	01db      	lsls	r3, r3, #7
 8004068:	4013      	ands	r3, r2
 800406a:	d016      	beq.n	800409a <USB_DeactivateEndpoint+0x28a>
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	18d3      	adds	r3, r2, r3
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29a      	uxth	r2, r3
 800407a:	202c      	movs	r0, #44	; 0x2c
 800407c:	183b      	adds	r3, r7, r0
 800407e:	493e      	ldr	r1, [pc, #248]	; (8004178 <USB_DeactivateEndpoint+0x368>)
 8004080:	400a      	ands	r2, r1
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	18d3      	adds	r3, r2, r3
 800408e:	183a      	adds	r2, r7, r0
 8004090:	8812      	ldrh	r2, [r2, #0]
 8004092:	493d      	ldr	r1, [pc, #244]	; (8004188 <USB_DeactivateEndpoint+0x378>)
 8004094:	430a      	orrs	r2, r1
 8004096:	b292      	uxth	r2, r2
 8004098:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	18d2      	adds	r2, r2, r3
 80040a4:	212a      	movs	r1, #42	; 0x2a
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	8812      	ldrh	r2, [r2, #0]
 80040aa:	801a      	strh	r2, [r3, #0]
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	2240      	movs	r2, #64	; 0x40
 80040b2:	4013      	ands	r3, r2
 80040b4:	d016      	beq.n	80040e4 <USB_DeactivateEndpoint+0x2d4>
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	18d3      	adds	r3, r2, r3
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	2028      	movs	r0, #40	; 0x28
 80040c6:	183b      	adds	r3, r7, r0
 80040c8:	492b      	ldr	r1, [pc, #172]	; (8004178 <USB_DeactivateEndpoint+0x368>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	18d3      	adds	r3, r2, r3
 80040d8:	183a      	adds	r2, r7, r0
 80040da:	8812      	ldrh	r2, [r2, #0]
 80040dc:	4927      	ldr	r1, [pc, #156]	; (800417c <USB_DeactivateEndpoint+0x36c>)
 80040de:	430a      	orrs	r2, r1
 80040e0:	b292      	uxth	r2, r2
 80040e2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	18d3      	adds	r3, r2, r3
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	2026      	movs	r0, #38	; 0x26
 80040f4:	183b      	adds	r3, r7, r0
 80040f6:	4920      	ldr	r1, [pc, #128]	; (8004178 <USB_DeactivateEndpoint+0x368>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	183a      	adds	r2, r7, r0
 8004108:	8812      	ldrh	r2, [r2, #0]
 800410a:	491f      	ldr	r1, [pc, #124]	; (8004188 <USB_DeactivateEndpoint+0x378>)
 800410c:	430a      	orrs	r2, r1
 800410e:	b292      	uxth	r2, r2
 8004110:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	18d3      	adds	r3, r2, r3
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29a      	uxth	r2, r3
 8004120:	2024      	movs	r0, #36	; 0x24
 8004122:	183b      	adds	r3, r7, r0
 8004124:	4916      	ldr	r1, [pc, #88]	; (8004180 <USB_DeactivateEndpoint+0x370>)
 8004126:	400a      	ands	r2, r1
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	18d3      	adds	r3, r2, r3
 8004134:	183a      	adds	r2, r7, r0
 8004136:	8812      	ldrh	r2, [r2, #0]
 8004138:	4912      	ldr	r1, [pc, #72]	; (8004184 <USB_DeactivateEndpoint+0x374>)
 800413a:	430a      	orrs	r2, r1
 800413c:	b292      	uxth	r2, r2
 800413e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29a      	uxth	r2, r3
 800414e:	2022      	movs	r0, #34	; 0x22
 8004150:	183b      	adds	r3, r7, r0
 8004152:	490e      	ldr	r1, [pc, #56]	; (800418c <USB_DeactivateEndpoint+0x37c>)
 8004154:	400a      	ands	r2, r1
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	18d3      	adds	r3, r2, r3
 8004162:	183a      	adds	r2, r7, r0
 8004164:	8812      	ldrh	r2, [r2, #0]
 8004166:	4907      	ldr	r1, [pc, #28]	; (8004184 <USB_DeactivateEndpoint+0x374>)
 8004168:	430a      	orrs	r2, r1
 800416a:	b292      	uxth	r2, r2
 800416c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	b00c      	add	sp, #48	; 0x30
 8004176:	bd80      	pop	{r7, pc}
 8004178:	ffff8f8f 	.word	0xffff8f8f
 800417c:	ffff80c0 	.word	0xffff80c0
 8004180:	ffff8fbf 	.word	0xffff8fbf
 8004184:	ffff8080 	.word	0xffff8080
 8004188:	ffffc080 	.word	0xffffc080
 800418c:	ffffbf8f 	.word	0xffffbf8f

08004190 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b0c3      	sub	sp, #268	; 0x10c
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d001      	beq.n	80041a6 <USB_EPStartXfer+0x16>
 80041a2:	f000 fd2d 	bl	8004c00 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d905      	bls.n	80041be <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	1d7a      	adds	r2, r7, #5
 80041b8:	32ff      	adds	r2, #255	; 0xff
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	e004      	b.n	80041c8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	1d7a      	adds	r2, r7, #5
 80041c4:	32ff      	adds	r2, #255	; 0xff
 80041c6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	7b1b      	ldrb	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d125      	bne.n	800421c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6959      	ldr	r1, [r3, #20]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	88da      	ldrh	r2, [r3, #6]
 80041d8:	1d7b      	adds	r3, r7, #5
 80041da:	33ff      	adds	r3, #255	; 0xff
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f001 fa47 	bl	8005674 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2250      	movs	r2, #80	; 0x50
 80041ee:	5a9b      	ldrh	r3, [r3, r2]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	001a      	movs	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	00da      	lsls	r2, r3, #3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	18d3      	adds	r3, r2, r3
 8004204:	4ad7      	ldr	r2, [pc, #860]	; (8004564 <USB_EPStartXfer+0x3d4>)
 8004206:	4694      	mov	ip, r2
 8004208:	4463      	add	r3, ip
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	1d7b      	adds	r3, r7, #5
 800420e:	33ff      	adds	r3, #255	; 0xff
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	801a      	strh	r2, [r3, #0]
 8004218:	f000 fccd 	bl	8004bb6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	78db      	ldrb	r3, [r3, #3]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d000      	beq.n	8004226 <USB_EPStartXfer+0x96>
 8004224:	e362      	b.n	80048ec <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	429a      	cmp	r2, r3
 8004230:	d800      	bhi.n	8004234 <USB_EPStartXfer+0xa4>
 8004232:	e309      	b.n	8004848 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	18d3      	adds	r3, r2, r3
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29a      	uxth	r2, r3
 8004242:	2056      	movs	r0, #86	; 0x56
 8004244:	183b      	adds	r3, r7, r0
 8004246:	49c8      	ldr	r1, [pc, #800]	; (8004568 <USB_EPStartXfer+0x3d8>)
 8004248:	400a      	ands	r2, r1
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	18d3      	adds	r3, r2, r3
 8004256:	183a      	adds	r2, r7, r0
 8004258:	8812      	ldrh	r2, [r2, #0]
 800425a:	49c4      	ldr	r1, [pc, #784]	; (800456c <USB_EPStartXfer+0x3dc>)
 800425c:	430a      	orrs	r2, r1
 800425e:	b292      	uxth	r2, r2
 8004260:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	1d7b      	adds	r3, r7, #5
 8004268:	33ff      	adds	r3, #255	; 0xff
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	1ad2      	subs	r2, r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	18d3      	adds	r3, r2, r3
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	001a      	movs	r2, r3
 8004282:	2340      	movs	r3, #64	; 0x40
 8004284:	4013      	ands	r3, r2
 8004286:	d100      	bne.n	800428a <USB_EPStartXfer+0xfa>
 8004288:	e176      	b.n	8004578 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	785b      	ldrb	r3, [r3, #1]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d000      	beq.n	8004298 <USB_EPStartXfer+0x108>
 8004296:	e074      	b.n	8004382 <USB_EPStartXfer+0x1f2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2250      	movs	r2, #80	; 0x50
 80042a0:	5a9b      	ldrh	r3, [r3, r2]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	001a      	movs	r2, r3
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	189b      	adds	r3, r3, r2
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	00da      	lsls	r2, r3, #3
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	18d3      	adds	r3, r2, r3
 80042b6:	4aae      	ldr	r2, [pc, #696]	; (8004570 <USB_EPStartXfer+0x3e0>)
 80042b8:	4694      	mov	ip, r2
 80042ba:	4463      	add	r3, ip
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	059b      	lsls	r3, r3, #22
 80042c6:	0d9b      	lsrs	r3, r3, #22
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	1d7b      	adds	r3, r7, #5
 80042d0:	33ff      	adds	r3, #255	; 0xff
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b3e      	cmp	r3, #62	; 0x3e
 80042d6:	d924      	bls.n	8004322 <USB_EPStartXfer+0x192>
 80042d8:	1d7b      	adds	r3, r7, #5
 80042da:	33ff      	adds	r3, #255	; 0xff
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	1c7a      	adds	r2, r7, #1
 80042e2:	32ff      	adds	r2, #255	; 0xff
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	1d7b      	adds	r3, r7, #5
 80042e8:	33ff      	adds	r3, #255	; 0xff
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	221f      	movs	r2, #31
 80042ee:	4013      	ands	r3, r2
 80042f0:	d106      	bne.n	8004300 <USB_EPStartXfer+0x170>
 80042f2:	1c7b      	adds	r3, r7, #1
 80042f4:	33ff      	adds	r3, #255	; 0xff
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	1c7a      	adds	r2, r7, #1
 80042fc:	32ff      	adds	r2, #255	; 0xff
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29a      	uxth	r2, r3
 8004306:	1c7b      	adds	r3, r7, #1
 8004308:	33ff      	adds	r3, #255	; 0xff
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	029b      	lsls	r3, r3, #10
 8004310:	b29b      	uxth	r3, r3
 8004312:	4313      	orrs	r3, r2
 8004314:	b29b      	uxth	r3, r3
 8004316:	4a97      	ldr	r2, [pc, #604]	; (8004574 <USB_EPStartXfer+0x3e4>)
 8004318:	4313      	orrs	r3, r2
 800431a:	b29a      	uxth	r2, r3
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	e04a      	b.n	80043b8 <USB_EPStartXfer+0x228>
 8004322:	1d7b      	adds	r3, r7, #5
 8004324:	33ff      	adds	r3, #255	; 0xff
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d108      	bne.n	800433e <USB_EPStartXfer+0x1ae>
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	4a90      	ldr	r2, [pc, #576]	; (8004574 <USB_EPStartXfer+0x3e4>)
 8004334:	4313      	orrs	r3, r2
 8004336:	b29a      	uxth	r2, r3
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	801a      	strh	r2, [r3, #0]
 800433c:	e03c      	b.n	80043b8 <USB_EPStartXfer+0x228>
 800433e:	1d7b      	adds	r3, r7, #5
 8004340:	33ff      	adds	r3, #255	; 0xff
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	1c7a      	adds	r2, r7, #1
 8004348:	32ff      	adds	r2, #255	; 0xff
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	1d7b      	adds	r3, r7, #5
 800434e:	33ff      	adds	r3, #255	; 0xff
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2201      	movs	r2, #1
 8004354:	4013      	ands	r3, r2
 8004356:	d006      	beq.n	8004366 <USB_EPStartXfer+0x1d6>
 8004358:	1c7b      	adds	r3, r7, #1
 800435a:	33ff      	adds	r3, #255	; 0xff
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	1c7a      	adds	r2, r7, #1
 8004362:	32ff      	adds	r2, #255	; 0xff
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29a      	uxth	r2, r3
 800436c:	1c7b      	adds	r3, r7, #1
 800436e:	33ff      	adds	r3, #255	; 0xff
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	029b      	lsls	r3, r3, #10
 8004376:	b29b      	uxth	r3, r3
 8004378:	4313      	orrs	r3, r2
 800437a:	b29a      	uxth	r2, r3
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	e01a      	b.n	80043b8 <USB_EPStartXfer+0x228>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d116      	bne.n	80043b8 <USB_EPStartXfer+0x228>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2250      	movs	r2, #80	; 0x50
 800438e:	5a9b      	ldrh	r3, [r3, r2]
 8004390:	b29b      	uxth	r3, r3
 8004392:	001a      	movs	r2, r3
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	189b      	adds	r3, r3, r2
 8004398:	633b      	str	r3, [r7, #48]	; 0x30
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	00da      	lsls	r2, r3, #3
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	18d3      	adds	r3, r2, r3
 80043a4:	4a72      	ldr	r2, [pc, #456]	; (8004570 <USB_EPStartXfer+0x3e0>)
 80043a6:	4694      	mov	ip, r2
 80043a8:	4463      	add	r3, ip
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ac:	1d7b      	adds	r3, r7, #5
 80043ae:	33ff      	adds	r3, #255	; 0xff
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80043b8:	2076      	movs	r0, #118	; 0x76
 80043ba:	183b      	adds	r3, r7, r0
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	8952      	ldrh	r2, [r2, #10]
 80043c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6959      	ldr	r1, [r3, #20]
 80043c6:	1d7b      	adds	r3, r7, #5
 80043c8:	33ff      	adds	r3, #255	; 0xff
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	b29c      	uxth	r4, r3
 80043ce:	183b      	adds	r3, r7, r0
 80043d0:	881a      	ldrh	r2, [r3, #0]
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	0023      	movs	r3, r4
 80043d6:	f001 f94d 	bl	8005674 <USB_WritePMA>
            ep->xfer_buff += len;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	1d7b      	adds	r3, r7, #5
 80043e0:	33ff      	adds	r3, #255	; 0xff
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	18d2      	adds	r2, r2, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d908      	bls.n	8004408 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6a1a      	ldr	r2, [r3, #32]
 80043fa:	1d7b      	adds	r3, r7, #5
 80043fc:	33ff      	adds	r3, #255	; 0xff
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	1ad2      	subs	r2, r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	621a      	str	r2, [r3, #32]
 8004406:	e007      	b.n	8004418 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	1d7a      	adds	r2, r7, #5
 800440e:	32ff      	adds	r2, #255	; 0xff
 8004410:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2200      	movs	r2, #0
 8004416:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d000      	beq.n	8004422 <USB_EPStartXfer+0x292>
 8004420:	e070      	b.n	8004504 <USB_EPStartXfer+0x374>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2250      	movs	r2, #80	; 0x50
 800442a:	5a9b      	ldrh	r3, [r3, r2]
 800442c:	b29b      	uxth	r3, r3
 800442e:	001a      	movs	r2, r3
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	189b      	adds	r3, r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	00da      	lsls	r2, r3, #3
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	18d3      	adds	r3, r2, r3
 8004440:	4a48      	ldr	r2, [pc, #288]	; (8004564 <USB_EPStartXfer+0x3d4>)
 8004442:	4694      	mov	ip, r2
 8004444:	4463      	add	r3, ip
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	059b      	lsls	r3, r3, #22
 8004450:	0d9b      	lsrs	r3, r3, #22
 8004452:	b29a      	uxth	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	801a      	strh	r2, [r3, #0]
 8004458:	1d7b      	adds	r3, r7, #5
 800445a:	33ff      	adds	r3, #255	; 0xff
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b3e      	cmp	r3, #62	; 0x3e
 8004460:	d922      	bls.n	80044a8 <USB_EPStartXfer+0x318>
 8004462:	1d7b      	adds	r3, r7, #5
 8004464:	33ff      	adds	r3, #255	; 0xff
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	21fc      	movs	r1, #252	; 0xfc
 800446c:	187a      	adds	r2, r7, r1
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	1d7b      	adds	r3, r7, #5
 8004472:	33ff      	adds	r3, #255	; 0xff
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	221f      	movs	r2, #31
 8004478:	4013      	ands	r3, r2
 800447a:	d104      	bne.n	8004486 <USB_EPStartXfer+0x2f6>
 800447c:	187b      	adds	r3, r7, r1
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3b01      	subs	r3, #1
 8004482:	187a      	adds	r2, r7, r1
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29a      	uxth	r2, r3
 800448c:	23fc      	movs	r3, #252	; 0xfc
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	029b      	lsls	r3, r3, #10
 8004496:	b29b      	uxth	r3, r3
 8004498:	4313      	orrs	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	4a35      	ldr	r2, [pc, #212]	; (8004574 <USB_EPStartXfer+0x3e4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	801a      	strh	r2, [r3, #0]
 80044a6:	e04a      	b.n	800453e <USB_EPStartXfer+0x3ae>
 80044a8:	1d7b      	adds	r3, r7, #5
 80044aa:	33ff      	adds	r3, #255	; 0xff
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d108      	bne.n	80044c4 <USB_EPStartXfer+0x334>
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4a2e      	ldr	r2, [pc, #184]	; (8004574 <USB_EPStartXfer+0x3e4>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	b29a      	uxth	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	801a      	strh	r2, [r3, #0]
 80044c2:	e03c      	b.n	800453e <USB_EPStartXfer+0x3ae>
 80044c4:	1d7b      	adds	r3, r7, #5
 80044c6:	33ff      	adds	r3, #255	; 0xff
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	21fc      	movs	r1, #252	; 0xfc
 80044ce:	187a      	adds	r2, r7, r1
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	1d7b      	adds	r3, r7, #5
 80044d4:	33ff      	adds	r3, #255	; 0xff
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2201      	movs	r2, #1
 80044da:	4013      	ands	r3, r2
 80044dc:	d004      	beq.n	80044e8 <USB_EPStartXfer+0x358>
 80044de:	187b      	adds	r3, r7, r1
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	187a      	adds	r2, r7, r1
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	23fc      	movs	r3, #252	; 0xfc
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	029b      	lsls	r3, r3, #10
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	4313      	orrs	r3, r2
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	e01c      	b.n	800453e <USB_EPStartXfer+0x3ae>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d118      	bne.n	800453e <USB_EPStartXfer+0x3ae>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2250      	movs	r2, #80	; 0x50
 8004514:	5a9b      	ldrh	r3, [r3, r2]
 8004516:	b29b      	uxth	r3, r3
 8004518:	001a      	movs	r2, r3
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	189b      	adds	r3, r3, r2
 800451e:	623b      	str	r3, [r7, #32]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	00da      	lsls	r2, r3, #3
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	18d3      	adds	r3, r2, r3
 800452a:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <USB_EPStartXfer+0x3d4>)
 800452c:	4694      	mov	ip, r2
 800452e:	4463      	add	r3, ip
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	1d7b      	adds	r3, r7, #5
 8004534:	33ff      	adds	r3, #255	; 0xff
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b29a      	uxth	r2, r3
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800453e:	2076      	movs	r0, #118	; 0x76
 8004540:	183b      	adds	r3, r7, r0
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	8912      	ldrh	r2, [r2, #8]
 8004546:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6959      	ldr	r1, [r3, #20]
 800454c:	1d7b      	adds	r3, r7, #5
 800454e:	33ff      	adds	r3, #255	; 0xff
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	b29c      	uxth	r4, r3
 8004554:	183b      	adds	r3, r7, r0
 8004556:	881a      	ldrh	r2, [r3, #0]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	0023      	movs	r3, r4
 800455c:	f001 f88a 	bl	8005674 <USB_WritePMA>
 8004560:	e329      	b.n	8004bb6 <USB_EPStartXfer+0xa26>
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	00000402 	.word	0x00000402
 8004568:	ffff8f8f 	.word	0xffff8f8f
 800456c:	ffff8180 	.word	0xffff8180
 8004570:	00000406 	.word	0x00000406
 8004574:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d000      	beq.n	8004582 <USB_EPStartXfer+0x3f2>
 8004580:	e070      	b.n	8004664 <USB_EPStartXfer+0x4d4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	64bb      	str	r3, [r7, #72]	; 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2250      	movs	r2, #80	; 0x50
 800458a:	5a9b      	ldrh	r3, [r3, r2]
 800458c:	b29b      	uxth	r3, r3
 800458e:	001a      	movs	r2, r3
 8004590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004592:	189b      	adds	r3, r3, r2
 8004594:	64bb      	str	r3, [r7, #72]	; 0x48
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	00da      	lsls	r2, r3, #3
 800459c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459e:	18d3      	adds	r3, r2, r3
 80045a0:	4acd      	ldr	r2, [pc, #820]	; (80048d8 <USB_EPStartXfer+0x748>)
 80045a2:	4694      	mov	ip, r2
 80045a4:	4463      	add	r3, ip
 80045a6:	647b      	str	r3, [r7, #68]	; 0x44
 80045a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	059b      	lsls	r3, r3, #22
 80045b0:	0d9b      	lsrs	r3, r3, #22
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	1d7b      	adds	r3, r7, #5
 80045ba:	33ff      	adds	r3, #255	; 0xff
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b3e      	cmp	r3, #62	; 0x3e
 80045c0:	d922      	bls.n	8004608 <USB_EPStartXfer+0x478>
 80045c2:	1d7b      	adds	r3, r7, #5
 80045c4:	33ff      	adds	r3, #255	; 0xff
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	21f8      	movs	r1, #248	; 0xf8
 80045cc:	187a      	adds	r2, r7, r1
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	1d7b      	adds	r3, r7, #5
 80045d2:	33ff      	adds	r3, #255	; 0xff
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	221f      	movs	r2, #31
 80045d8:	4013      	ands	r3, r2
 80045da:	d104      	bne.n	80045e6 <USB_EPStartXfer+0x456>
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	187a      	adds	r2, r7, r1
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	23f8      	movs	r3, #248	; 0xf8
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	029b      	lsls	r3, r3, #10
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	4313      	orrs	r3, r2
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4ab7      	ldr	r2, [pc, #732]	; (80048dc <USB_EPStartXfer+0x74c>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	b29a      	uxth	r2, r3
 8004602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	e04a      	b.n	800469e <USB_EPStartXfer+0x50e>
 8004608:	1d7b      	adds	r3, r7, #5
 800460a:	33ff      	adds	r3, #255	; 0xff
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d108      	bne.n	8004624 <USB_EPStartXfer+0x494>
 8004612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	4ab0      	ldr	r2, [pc, #704]	; (80048dc <USB_EPStartXfer+0x74c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	b29a      	uxth	r2, r3
 800461e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	e03c      	b.n	800469e <USB_EPStartXfer+0x50e>
 8004624:	1d7b      	adds	r3, r7, #5
 8004626:	33ff      	adds	r3, #255	; 0xff
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	21f8      	movs	r1, #248	; 0xf8
 800462e:	187a      	adds	r2, r7, r1
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	1d7b      	adds	r3, r7, #5
 8004634:	33ff      	adds	r3, #255	; 0xff
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2201      	movs	r2, #1
 800463a:	4013      	ands	r3, r2
 800463c:	d004      	beq.n	8004648 <USB_EPStartXfer+0x4b8>
 800463e:	187b      	adds	r3, r7, r1
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	187a      	adds	r2, r7, r1
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29a      	uxth	r2, r3
 800464e:	23f8      	movs	r3, #248	; 0xf8
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	029b      	lsls	r3, r3, #10
 8004658:	b29b      	uxth	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	b29a      	uxth	r2, r3
 800465e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	e01c      	b.n	800469e <USB_EPStartXfer+0x50e>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d118      	bne.n	800469e <USB_EPStartXfer+0x50e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	653b      	str	r3, [r7, #80]	; 0x50
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2250      	movs	r2, #80	; 0x50
 8004674:	5a9b      	ldrh	r3, [r3, r2]
 8004676:	b29b      	uxth	r3, r3
 8004678:	001a      	movs	r2, r3
 800467a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467c:	189b      	adds	r3, r3, r2
 800467e:	653b      	str	r3, [r7, #80]	; 0x50
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	00da      	lsls	r2, r3, #3
 8004686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	4a93      	ldr	r2, [pc, #588]	; (80048d8 <USB_EPStartXfer+0x748>)
 800468c:	4694      	mov	ip, r2
 800468e:	4463      	add	r3, ip
 8004690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004692:	1d7b      	adds	r3, r7, #5
 8004694:	33ff      	adds	r3, #255	; 0xff
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	b29a      	uxth	r2, r3
 800469a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800469e:	2076      	movs	r0, #118	; 0x76
 80046a0:	183b      	adds	r3, r7, r0
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	8912      	ldrh	r2, [r2, #8]
 80046a6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6959      	ldr	r1, [r3, #20]
 80046ac:	1d7b      	adds	r3, r7, #5
 80046ae:	33ff      	adds	r3, #255	; 0xff
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	b29c      	uxth	r4, r3
 80046b4:	183b      	adds	r3, r7, r0
 80046b6:	881a      	ldrh	r2, [r3, #0]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	0023      	movs	r3, r4
 80046bc:	f000 ffda 	bl	8005674 <USB_WritePMA>
            ep->xfer_buff += len;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695a      	ldr	r2, [r3, #20]
 80046c4:	1d7b      	adds	r3, r7, #5
 80046c6:	33ff      	adds	r3, #255	; 0xff
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	18d2      	adds	r2, r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d908      	bls.n	80046ee <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	1d7b      	adds	r3, r7, #5
 80046e2:	33ff      	adds	r3, #255	; 0xff
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	1ad2      	subs	r2, r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	621a      	str	r2, [r3, #32]
 80046ec:	e007      	b.n	80046fe <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	1d7a      	adds	r2, r7, #5
 80046f4:	32ff      	adds	r2, #255	; 0xff
 80046f6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	643b      	str	r3, [r7, #64]	; 0x40
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	785b      	ldrb	r3, [r3, #1]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d000      	beq.n	800470c <USB_EPStartXfer+0x57c>
 800470a:	e070      	b.n	80047ee <USB_EPStartXfer+0x65e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2250      	movs	r2, #80	; 0x50
 8004714:	5a9b      	ldrh	r3, [r3, r2]
 8004716:	b29b      	uxth	r3, r3
 8004718:	001a      	movs	r2, r3
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	189b      	adds	r3, r3, r2
 800471e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	00da      	lsls	r2, r3, #3
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	4a6d      	ldr	r2, [pc, #436]	; (80048e0 <USB_EPStartXfer+0x750>)
 800472c:	4694      	mov	ip, r2
 800472e:	4463      	add	r3, ip
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	059b      	lsls	r3, r3, #22
 800473a:	0d9b      	lsrs	r3, r3, #22
 800473c:	b29a      	uxth	r2, r3
 800473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	1d7b      	adds	r3, r7, #5
 8004744:	33ff      	adds	r3, #255	; 0xff
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b3e      	cmp	r3, #62	; 0x3e
 800474a:	d922      	bls.n	8004792 <USB_EPStartXfer+0x602>
 800474c:	1d7b      	adds	r3, r7, #5
 800474e:	33ff      	adds	r3, #255	; 0xff
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	21f4      	movs	r1, #244	; 0xf4
 8004756:	187a      	adds	r2, r7, r1
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	1d7b      	adds	r3, r7, #5
 800475c:	33ff      	adds	r3, #255	; 0xff
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	221f      	movs	r2, #31
 8004762:	4013      	ands	r3, r2
 8004764:	d104      	bne.n	8004770 <USB_EPStartXfer+0x5e0>
 8004766:	187b      	adds	r3, r7, r1
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3b01      	subs	r3, #1
 800476c:	187a      	adds	r2, r7, r1
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29a      	uxth	r2, r3
 8004776:	23f4      	movs	r3, #244	; 0xf4
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	029b      	lsls	r3, r3, #10
 8004780:	b29b      	uxth	r3, r3
 8004782:	4313      	orrs	r3, r2
 8004784:	b29b      	uxth	r3, r3
 8004786:	4a55      	ldr	r2, [pc, #340]	; (80048dc <USB_EPStartXfer+0x74c>)
 8004788:	4313      	orrs	r3, r2
 800478a:	b29a      	uxth	r2, r3
 800478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	e048      	b.n	8004824 <USB_EPStartXfer+0x694>
 8004792:	1d7b      	adds	r3, r7, #5
 8004794:	33ff      	adds	r3, #255	; 0xff
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d108      	bne.n	80047ae <USB_EPStartXfer+0x61e>
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	4a4e      	ldr	r2, [pc, #312]	; (80048dc <USB_EPStartXfer+0x74c>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	e03a      	b.n	8004824 <USB_EPStartXfer+0x694>
 80047ae:	1d7b      	adds	r3, r7, #5
 80047b0:	33ff      	adds	r3, #255	; 0xff
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	21f4      	movs	r1, #244	; 0xf4
 80047b8:	187a      	adds	r2, r7, r1
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	1d7b      	adds	r3, r7, #5
 80047be:	33ff      	adds	r3, #255	; 0xff
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	4013      	ands	r3, r2
 80047c6:	d004      	beq.n	80047d2 <USB_EPStartXfer+0x642>
 80047c8:	187b      	adds	r3, r7, r1
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	187a      	adds	r2, r7, r1
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	23f4      	movs	r3, #244	; 0xf4
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	029b      	lsls	r3, r3, #10
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4313      	orrs	r3, r2
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	801a      	strh	r2, [r3, #0]
 80047ec:	e01a      	b.n	8004824 <USB_EPStartXfer+0x694>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	785b      	ldrb	r3, [r3, #1]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d116      	bne.n	8004824 <USB_EPStartXfer+0x694>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2250      	movs	r2, #80	; 0x50
 80047fa:	5a9b      	ldrh	r3, [r3, r2]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	001a      	movs	r2, r3
 8004800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004802:	189b      	adds	r3, r3, r2
 8004804:	643b      	str	r3, [r7, #64]	; 0x40
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	00da      	lsls	r2, r3, #3
 800480c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480e:	18d3      	adds	r3, r2, r3
 8004810:	4a33      	ldr	r2, [pc, #204]	; (80048e0 <USB_EPStartXfer+0x750>)
 8004812:	4694      	mov	ip, r2
 8004814:	4463      	add	r3, ip
 8004816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004818:	1d7b      	adds	r3, r7, #5
 800481a:	33ff      	adds	r3, #255	; 0xff
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	b29a      	uxth	r2, r3
 8004820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004822:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004824:	2076      	movs	r0, #118	; 0x76
 8004826:	183b      	adds	r3, r7, r0
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	8952      	ldrh	r2, [r2, #10]
 800482c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6959      	ldr	r1, [r3, #20]
 8004832:	1d7b      	adds	r3, r7, #5
 8004834:	33ff      	adds	r3, #255	; 0xff
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	b29c      	uxth	r4, r3
 800483a:	183b      	adds	r3, r7, r0
 800483c:	881a      	ldrh	r2, [r3, #0]
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	0023      	movs	r3, r4
 8004842:	f000 ff17 	bl	8005674 <USB_WritePMA>
 8004846:	e1b6      	b.n	8004bb6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	1d7a      	adds	r2, r7, #5
 800484e:	32ff      	adds	r2, #255	; 0xff
 8004850:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	18d3      	adds	r3, r2, r3
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29a      	uxth	r2, r3
 8004860:	2062      	movs	r0, #98	; 0x62
 8004862:	183b      	adds	r3, r7, r0
 8004864:	491f      	ldr	r1, [pc, #124]	; (80048e4 <USB_EPStartXfer+0x754>)
 8004866:	400a      	ands	r2, r1
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	18d3      	adds	r3, r2, r3
 8004874:	183a      	adds	r2, r7, r0
 8004876:	8812      	ldrh	r2, [r2, #0]
 8004878:	491b      	ldr	r1, [pc, #108]	; (80048e8 <USB_EPStartXfer+0x758>)
 800487a:	430a      	orrs	r2, r1
 800487c:	b292      	uxth	r2, r2
 800487e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2250      	movs	r2, #80	; 0x50
 8004888:	5a9b      	ldrh	r3, [r3, r2]
 800488a:	b29b      	uxth	r3, r3
 800488c:	001a      	movs	r2, r3
 800488e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004890:	189b      	adds	r3, r3, r2
 8004892:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	00da      	lsls	r2, r3, #3
 800489a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800489c:	18d3      	adds	r3, r2, r3
 800489e:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <USB_EPStartXfer+0x748>)
 80048a0:	4694      	mov	ip, r2
 80048a2:	4463      	add	r3, ip
 80048a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80048a6:	1d7b      	adds	r3, r7, #5
 80048a8:	33ff      	adds	r3, #255	; 0xff
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80048b2:	2076      	movs	r0, #118	; 0x76
 80048b4:	183b      	adds	r3, r7, r0
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	8912      	ldrh	r2, [r2, #8]
 80048ba:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6959      	ldr	r1, [r3, #20]
 80048c0:	1d7b      	adds	r3, r7, #5
 80048c2:	33ff      	adds	r3, #255	; 0xff
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	b29c      	uxth	r4, r3
 80048c8:	183b      	adds	r3, r7, r0
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	0023      	movs	r3, r4
 80048d0:	f000 fed0 	bl	8005674 <USB_WritePMA>
 80048d4:	e16f      	b.n	8004bb6 <USB_EPStartXfer+0xa26>
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	00000402 	.word	0x00000402
 80048dc:	ffff8000 	.word	0xffff8000
 80048e0:	00000406 	.word	0x00000406
 80048e4:	ffff8e8f 	.word	0xffff8e8f
 80048e8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6a1a      	ldr	r2, [r3, #32]
 80048f0:	1d7b      	adds	r3, r7, #5
 80048f2:	33ff      	adds	r3, #255	; 0xff
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	1ad2      	subs	r2, r2, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	18d3      	adds	r3, r2, r3
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	001a      	movs	r2, r3
 800490c:	2340      	movs	r3, #64	; 0x40
 800490e:	4013      	ands	r3, r2
 8004910:	d100      	bne.n	8004914 <USB_EPStartXfer+0x784>
 8004912:	e0a4      	b.n	8004a5e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	673b      	str	r3, [r7, #112]	; 0x70
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d000      	beq.n	8004922 <USB_EPStartXfer+0x792>
 8004920:	e070      	b.n	8004a04 <USB_EPStartXfer+0x874>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	66bb      	str	r3, [r7, #104]	; 0x68
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2250      	movs	r2, #80	; 0x50
 800492a:	5a9b      	ldrh	r3, [r3, r2]
 800492c:	b29b      	uxth	r3, r3
 800492e:	001a      	movs	r2, r3
 8004930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004932:	189b      	adds	r3, r3, r2
 8004934:	66bb      	str	r3, [r7, #104]	; 0x68
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	00da      	lsls	r2, r3, #3
 800493c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800493e:	18d3      	adds	r3, r2, r3
 8004940:	4abc      	ldr	r2, [pc, #752]	; (8004c34 <USB_EPStartXfer+0xaa4>)
 8004942:	4694      	mov	ip, r2
 8004944:	4463      	add	r3, ip
 8004946:	667b      	str	r3, [r7, #100]	; 0x64
 8004948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	059b      	lsls	r3, r3, #22
 8004950:	0d9b      	lsrs	r3, r3, #22
 8004952:	b29a      	uxth	r2, r3
 8004954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004956:	801a      	strh	r2, [r3, #0]
 8004958:	1d7b      	adds	r3, r7, #5
 800495a:	33ff      	adds	r3, #255	; 0xff
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b3e      	cmp	r3, #62	; 0x3e
 8004960:	d922      	bls.n	80049a8 <USB_EPStartXfer+0x818>
 8004962:	1d7b      	adds	r3, r7, #5
 8004964:	33ff      	adds	r3, #255	; 0xff
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	21f0      	movs	r1, #240	; 0xf0
 800496c:	187a      	adds	r2, r7, r1
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	1d7b      	adds	r3, r7, #5
 8004972:	33ff      	adds	r3, #255	; 0xff
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	221f      	movs	r2, #31
 8004978:	4013      	ands	r3, r2
 800497a:	d104      	bne.n	8004986 <USB_EPStartXfer+0x7f6>
 800497c:	187b      	adds	r3, r7, r1
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3b01      	subs	r3, #1
 8004982:	187a      	adds	r2, r7, r1
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29a      	uxth	r2, r3
 800498c:	23f0      	movs	r3, #240	; 0xf0
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	029b      	lsls	r3, r3, #10
 8004996:	b29b      	uxth	r3, r3
 8004998:	4313      	orrs	r3, r2
 800499a:	b29b      	uxth	r3, r3
 800499c:	4aa6      	ldr	r2, [pc, #664]	; (8004c38 <USB_EPStartXfer+0xaa8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	e048      	b.n	8004a3a <USB_EPStartXfer+0x8aa>
 80049a8:	1d7b      	adds	r3, r7, #5
 80049aa:	33ff      	adds	r3, #255	; 0xff
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d108      	bne.n	80049c4 <USB_EPStartXfer+0x834>
 80049b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	4a9f      	ldr	r2, [pc, #636]	; (8004c38 <USB_EPStartXfer+0xaa8>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	e03a      	b.n	8004a3a <USB_EPStartXfer+0x8aa>
 80049c4:	1d7b      	adds	r3, r7, #5
 80049c6:	33ff      	adds	r3, #255	; 0xff
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	21f0      	movs	r1, #240	; 0xf0
 80049ce:	187a      	adds	r2, r7, r1
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	1d7b      	adds	r3, r7, #5
 80049d4:	33ff      	adds	r3, #255	; 0xff
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2201      	movs	r2, #1
 80049da:	4013      	ands	r3, r2
 80049dc:	d004      	beq.n	80049e8 <USB_EPStartXfer+0x858>
 80049de:	187b      	adds	r3, r7, r1
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	187a      	adds	r2, r7, r1
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	23f0      	movs	r3, #240	; 0xf0
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	029b      	lsls	r3, r3, #10
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4313      	orrs	r3, r2
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	e01a      	b.n	8004a3a <USB_EPStartXfer+0x8aa>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d116      	bne.n	8004a3a <USB_EPStartXfer+0x8aa>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2250      	movs	r2, #80	; 0x50
 8004a10:	5a9b      	ldrh	r3, [r3, r2]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	001a      	movs	r2, r3
 8004a16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a18:	189b      	adds	r3, r3, r2
 8004a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	00da      	lsls	r2, r3, #3
 8004a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a24:	18d3      	adds	r3, r2, r3
 8004a26:	4a83      	ldr	r2, [pc, #524]	; (8004c34 <USB_EPStartXfer+0xaa4>)
 8004a28:	4694      	mov	ip, r2
 8004a2a:	4463      	add	r3, ip
 8004a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a2e:	1d7b      	adds	r3, r7, #5
 8004a30:	33ff      	adds	r3, #255	; 0xff
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004a3a:	2076      	movs	r0, #118	; 0x76
 8004a3c:	183b      	adds	r3, r7, r0
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	8952      	ldrh	r2, [r2, #10]
 8004a42:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6959      	ldr	r1, [r3, #20]
 8004a48:	1d7b      	adds	r3, r7, #5
 8004a4a:	33ff      	adds	r3, #255	; 0xff
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	b29c      	uxth	r4, r3
 8004a50:	183b      	adds	r3, r7, r0
 8004a52:	881a      	ldrh	r2, [r3, #0]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	0023      	movs	r3, r4
 8004a58:	f000 fe0c 	bl	8005674 <USB_WritePMA>
 8004a5c:	e0ab      	b.n	8004bb6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d000      	beq.n	8004a68 <USB_EPStartXfer+0x8d8>
 8004a66:	e070      	b.n	8004b4a <USB_EPStartXfer+0x9ba>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2250      	movs	r2, #80	; 0x50
 8004a70:	5a9b      	ldrh	r3, [r3, r2]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	001a      	movs	r2, r3
 8004a76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a78:	189b      	adds	r3, r3, r2
 8004a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	00da      	lsls	r2, r3, #3
 8004a82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a84:	18d3      	adds	r3, r2, r3
 8004a86:	4a6d      	ldr	r2, [pc, #436]	; (8004c3c <USB_EPStartXfer+0xaac>)
 8004a88:	4694      	mov	ip, r2
 8004a8a:	4463      	add	r3, ip
 8004a8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	059b      	lsls	r3, r3, #22
 8004a96:	0d9b      	lsrs	r3, r3, #22
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a9c:	801a      	strh	r2, [r3, #0]
 8004a9e:	1d7b      	adds	r3, r7, #5
 8004aa0:	33ff      	adds	r3, #255	; 0xff
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8004aa6:	d922      	bls.n	8004aee <USB_EPStartXfer+0x95e>
 8004aa8:	1d7b      	adds	r3, r7, #5
 8004aaa:	33ff      	adds	r3, #255	; 0xff
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	21ec      	movs	r1, #236	; 0xec
 8004ab2:	187a      	adds	r2, r7, r1
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	1d7b      	adds	r3, r7, #5
 8004ab8:	33ff      	adds	r3, #255	; 0xff
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	221f      	movs	r2, #31
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d104      	bne.n	8004acc <USB_EPStartXfer+0x93c>
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	187a      	adds	r2, r7, r1
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	23ec      	movs	r3, #236	; 0xec
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	029b      	lsls	r3, r3, #10
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	4a55      	ldr	r2, [pc, #340]	; (8004c38 <USB_EPStartXfer+0xaa8>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aea:	801a      	strh	r2, [r3, #0]
 8004aec:	e052      	b.n	8004b94 <USB_EPStartXfer+0xa04>
 8004aee:	1d7b      	adds	r3, r7, #5
 8004af0:	33ff      	adds	r3, #255	; 0xff
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d108      	bne.n	8004b0a <USB_EPStartXfer+0x97a>
 8004af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	4a4e      	ldr	r2, [pc, #312]	; (8004c38 <USB_EPStartXfer+0xaa8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b06:	801a      	strh	r2, [r3, #0]
 8004b08:	e044      	b.n	8004b94 <USB_EPStartXfer+0xa04>
 8004b0a:	1d7b      	adds	r3, r7, #5
 8004b0c:	33ff      	adds	r3, #255	; 0xff
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	21ec      	movs	r1, #236	; 0xec
 8004b14:	187a      	adds	r2, r7, r1
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	1d7b      	adds	r3, r7, #5
 8004b1a:	33ff      	adds	r3, #255	; 0xff
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	4013      	ands	r3, r2
 8004b22:	d004      	beq.n	8004b2e <USB_EPStartXfer+0x99e>
 8004b24:	187b      	adds	r3, r7, r1
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	187a      	adds	r2, r7, r1
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	23ec      	movs	r3, #236	; 0xec
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	4313      	orrs	r3, r2
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e024      	b.n	8004b94 <USB_EPStartXfer+0xa04>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d120      	bne.n	8004b94 <USB_EPStartXfer+0xa04>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2184      	movs	r1, #132	; 0x84
 8004b56:	187a      	adds	r2, r7, r1
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2250      	movs	r2, #80	; 0x50
 8004b5e:	5a9b      	ldrh	r3, [r3, r2]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	001a      	movs	r2, r3
 8004b64:	187b      	adds	r3, r7, r1
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	187a      	adds	r2, r7, r1
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	00da      	lsls	r2, r3, #3
 8004b74:	187b      	adds	r3, r7, r1
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	18d3      	adds	r3, r2, r3
 8004b7a:	4a30      	ldr	r2, [pc, #192]	; (8004c3c <USB_EPStartXfer+0xaac>)
 8004b7c:	4694      	mov	ip, r2
 8004b7e:	4463      	add	r3, ip
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	187a      	adds	r2, r7, r1
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	1d7b      	adds	r3, r7, #5
 8004b88:	33ff      	adds	r3, #255	; 0xff
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	187b      	adds	r3, r7, r1
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b94:	2076      	movs	r0, #118	; 0x76
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	8912      	ldrh	r2, [r2, #8]
 8004b9c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6959      	ldr	r1, [r3, #20]
 8004ba2:	1d7b      	adds	r3, r7, #5
 8004ba4:	33ff      	adds	r3, #255	; 0xff
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	b29c      	uxth	r4, r3
 8004baa:	183b      	adds	r3, r7, r0
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	0023      	movs	r3, r4
 8004bb2:	f000 fd5f 	bl	8005674 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	18d3      	adds	r3, r2, r3
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	200a      	movs	r0, #10
 8004bc6:	183b      	adds	r3, r7, r0
 8004bc8:	491d      	ldr	r1, [pc, #116]	; (8004c40 <USB_EPStartXfer+0xab0>)
 8004bca:	400a      	ands	r2, r1
 8004bcc:	801a      	strh	r2, [r3, #0]
 8004bce:	183b      	adds	r3, r7, r0
 8004bd0:	183a      	adds	r2, r7, r0
 8004bd2:	8812      	ldrh	r2, [r2, #0]
 8004bd4:	2110      	movs	r1, #16
 8004bd6:	404a      	eors	r2, r1
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	183b      	adds	r3, r7, r0
 8004bdc:	183a      	adds	r2, r7, r0
 8004bde:	8812      	ldrh	r2, [r2, #0]
 8004be0:	2120      	movs	r1, #32
 8004be2:	404a      	eors	r2, r1
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	18d3      	adds	r3, r2, r3
 8004bf0:	183a      	adds	r2, r7, r0
 8004bf2:	8812      	ldrh	r2, [r2, #0]
 8004bf4:	4913      	ldr	r1, [pc, #76]	; (8004c44 <USB_EPStartXfer+0xab4>)
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	801a      	strh	r2, [r3, #0]
 8004bfc:	f000 fbf4 	bl	80053e8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	7b1b      	ldrb	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d000      	beq.n	8004c0a <USB_EPStartXfer+0xa7a>
 8004c08:	e0a9      	b.n	8004d5e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d918      	bls.n	8004c48 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	1d7a      	adds	r2, r7, #5
 8004c1c:	32ff      	adds	r2, #255	; 0xff
 8004c1e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	1d7b      	adds	r3, r7, #5
 8004c26:	33ff      	adds	r3, #255	; 0xff
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	619a      	str	r2, [r3, #24]
 8004c30:	e012      	b.n	8004c58 <USB_EPStartXfer+0xac8>
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	00000406 	.word	0x00000406
 8004c38:	ffff8000 	.word	0xffff8000
 8004c3c:	00000402 	.word	0x00000402
 8004c40:	ffff8fbf 	.word	0xffff8fbf
 8004c44:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	1d7a      	adds	r2, r7, #5
 8004c4e:	32ff      	adds	r2, #255	; 0xff
 8004c50:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2190      	movs	r1, #144	; 0x90
 8004c5c:	187a      	adds	r2, r7, r1
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2250      	movs	r2, #80	; 0x50
 8004c64:	5a9b      	ldrh	r3, [r3, r2]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	001a      	movs	r2, r3
 8004c6a:	187b      	adds	r3, r7, r1
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	187a      	adds	r2, r7, r1
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	00da      	lsls	r2, r3, #3
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	18d3      	adds	r3, r2, r3
 8004c80:	4acf      	ldr	r2, [pc, #828]	; (8004fc0 <USB_EPStartXfer+0xe30>)
 8004c82:	4694      	mov	ip, r2
 8004c84:	4463      	add	r3, ip
 8004c86:	218c      	movs	r1, #140	; 0x8c
 8004c88:	187a      	adds	r2, r7, r1
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	059b      	lsls	r3, r3, #22
 8004c96:	0d9b      	lsrs	r3, r3, #22
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	187b      	adds	r3, r7, r1
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	801a      	strh	r2, [r3, #0]
 8004ca0:	1d7b      	adds	r3, r7, #5
 8004ca2:	33ff      	adds	r3, #255	; 0xff
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ca8:	d925      	bls.n	8004cf6 <USB_EPStartXfer+0xb66>
 8004caa:	1d7b      	adds	r3, r7, #5
 8004cac:	33ff      	adds	r3, #255	; 0xff
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	21e8      	movs	r1, #232	; 0xe8
 8004cb4:	187a      	adds	r2, r7, r1
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	1d7b      	adds	r3, r7, #5
 8004cba:	33ff      	adds	r3, #255	; 0xff
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	221f      	movs	r2, #31
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d104      	bne.n	8004cce <USB_EPStartXfer+0xb3e>
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	187a      	adds	r2, r7, r1
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	218c      	movs	r1, #140	; 0x8c
 8004cd0:	187b      	adds	r3, r7, r1
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	23e8      	movs	r3, #232	; 0xe8
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	029b      	lsls	r3, r3, #10
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4ab6      	ldr	r2, [pc, #728]	; (8004fc4 <USB_EPStartXfer+0xe34>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	e353      	b.n	800539e <USB_EPStartXfer+0x120e>
 8004cf6:	1d7b      	adds	r3, r7, #5
 8004cf8:	33ff      	adds	r3, #255	; 0xff
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10b      	bne.n	8004d18 <USB_EPStartXfer+0xb88>
 8004d00:	218c      	movs	r1, #140	; 0x8c
 8004d02:	187b      	adds	r3, r7, r1
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	4aae      	ldr	r2, [pc, #696]	; (8004fc4 <USB_EPStartXfer+0xe34>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	e342      	b.n	800539e <USB_EPStartXfer+0x120e>
 8004d18:	1d7b      	adds	r3, r7, #5
 8004d1a:	33ff      	adds	r3, #255	; 0xff
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	21e8      	movs	r1, #232	; 0xe8
 8004d22:	187a      	adds	r2, r7, r1
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	1d7b      	adds	r3, r7, #5
 8004d28:	33ff      	adds	r3, #255	; 0xff
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d004      	beq.n	8004d3c <USB_EPStartXfer+0xbac>
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3301      	adds	r3, #1
 8004d38:	187a      	adds	r2, r7, r1
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	218c      	movs	r1, #140	; 0x8c
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	23e8      	movs	r3, #232	; 0xe8
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	029b      	lsls	r3, r3, #10
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4313      	orrs	r3, r2
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	187b      	adds	r3, r7, r1
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e31f      	b.n	800539e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	78db      	ldrb	r3, [r3, #3]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d000      	beq.n	8004d68 <USB_EPStartXfer+0xbd8>
 8004d66:	e191      	b.n	800508c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d000      	beq.n	8004d72 <USB_EPStartXfer+0xbe2>
 8004d70:	e07c      	b.n	8004e6c <USB_EPStartXfer+0xcdc>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	21ac      	movs	r1, #172	; 0xac
 8004d76:	187a      	adds	r2, r7, r1
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2250      	movs	r2, #80	; 0x50
 8004d7e:	5a9b      	ldrh	r3, [r3, r2]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	001a      	movs	r2, r3
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	189b      	adds	r3, r3, r2
 8004d8a:	187a      	adds	r2, r7, r1
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	00da      	lsls	r2, r3, #3
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	18d3      	adds	r3, r2, r3
 8004d9a:	4a8b      	ldr	r2, [pc, #556]	; (8004fc8 <USB_EPStartXfer+0xe38>)
 8004d9c:	4694      	mov	ip, r2
 8004d9e:	4463      	add	r3, ip
 8004da0:	21a8      	movs	r1, #168	; 0xa8
 8004da2:	187a      	adds	r2, r7, r1
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	187b      	adds	r3, r7, r1
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	059b      	lsls	r3, r3, #22
 8004db0:	0d9b      	lsrs	r3, r3, #22
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	187b      	adds	r3, r7, r1
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8004dc0:	d923      	bls.n	8004e0a <USB_EPStartXfer+0xc7a>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	21e4      	movs	r1, #228	; 0xe4
 8004dca:	187a      	adds	r2, r7, r1
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	221f      	movs	r2, #31
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d104      	bne.n	8004de2 <USB_EPStartXfer+0xc52>
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	187a      	adds	r2, r7, r1
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	21a8      	movs	r1, #168	; 0xa8
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	23e4      	movs	r3, #228	; 0xe4
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	029b      	lsls	r3, r3, #10
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4a71      	ldr	r2, [pc, #452]	; (8004fc4 <USB_EPStartXfer+0xe34>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	187b      	adds	r3, r7, r1
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	e054      	b.n	8004eb4 <USB_EPStartXfer+0xd24>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <USB_EPStartXfer+0xc9a>
 8004e12:	21a8      	movs	r1, #168	; 0xa8
 8004e14:	187b      	adds	r3, r7, r1
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	4a69      	ldr	r2, [pc, #420]	; (8004fc4 <USB_EPStartXfer+0xe34>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	187b      	adds	r3, r7, r1
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e044      	b.n	8004eb4 <USB_EPStartXfer+0xd24>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	21e4      	movs	r1, #228	; 0xe4
 8004e32:	187a      	adds	r2, r7, r1
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <USB_EPStartXfer+0xcba>
 8004e40:	187b      	adds	r3, r7, r1
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	187a      	adds	r2, r7, r1
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	21a8      	movs	r1, #168	; 0xa8
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	23e4      	movs	r3, #228	; 0xe4
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	e023      	b.n	8004eb4 <USB_EPStartXfer+0xd24>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d11f      	bne.n	8004eb4 <USB_EPStartXfer+0xd24>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	21b4      	movs	r1, #180	; 0xb4
 8004e78:	187a      	adds	r2, r7, r1
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2250      	movs	r2, #80	; 0x50
 8004e80:	5a9b      	ldrh	r3, [r3, r2]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	001a      	movs	r2, r3
 8004e86:	187b      	adds	r3, r7, r1
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	187a      	adds	r2, r7, r1
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	00da      	lsls	r2, r3, #3
 8004e96:	187b      	adds	r3, r7, r1
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	18d3      	adds	r3, r2, r3
 8004e9c:	4a4a      	ldr	r2, [pc, #296]	; (8004fc8 <USB_EPStartXfer+0xe38>)
 8004e9e:	4694      	mov	ip, r2
 8004ea0:	4463      	add	r3, ip
 8004ea2:	21b0      	movs	r1, #176	; 0xb0
 8004ea4:	187a      	adds	r2, r7, r1
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	187b      	adds	r3, r7, r1
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	801a      	strh	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	22a4      	movs	r2, #164	; 0xa4
 8004eb8:	18ba      	adds	r2, r7, r2
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d000      	beq.n	8004ec6 <USB_EPStartXfer+0xd36>
 8004ec4:	e082      	b.n	8004fcc <USB_EPStartXfer+0xe3c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	219c      	movs	r1, #156	; 0x9c
 8004eca:	187a      	adds	r2, r7, r1
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2250      	movs	r2, #80	; 0x50
 8004ed2:	5a9b      	ldrh	r3, [r3, r2]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	001a      	movs	r2, r3
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	189b      	adds	r3, r3, r2
 8004ede:	187a      	adds	r2, r7, r1
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	00da      	lsls	r2, r3, #3
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	18d3      	adds	r3, r2, r3
 8004eee:	4a34      	ldr	r2, [pc, #208]	; (8004fc0 <USB_EPStartXfer+0xe30>)
 8004ef0:	4694      	mov	ip, r2
 8004ef2:	4463      	add	r3, ip
 8004ef4:	2198      	movs	r1, #152	; 0x98
 8004ef6:	187a      	adds	r2, r7, r1
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	187b      	adds	r3, r7, r1
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	059b      	lsls	r3, r3, #22
 8004f04:	0d9b      	lsrs	r3, r3, #22
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	187b      	adds	r3, r7, r1
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b3e      	cmp	r3, #62	; 0x3e
 8004f14:	d923      	bls.n	8004f5e <USB_EPStartXfer+0xdce>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	21e0      	movs	r1, #224	; 0xe0
 8004f1e:	187a      	adds	r2, r7, r1
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	221f      	movs	r2, #31
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d104      	bne.n	8004f36 <USB_EPStartXfer+0xda6>
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	187a      	adds	r2, r7, r1
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	2198      	movs	r1, #152	; 0x98
 8004f38:	187b      	adds	r3, r7, r1
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	23e0      	movs	r3, #224	; 0xe0
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	029b      	lsls	r3, r3, #10
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <USB_EPStartXfer+0xe34>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	187b      	adds	r3, r7, r1
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e057      	b.n	800500e <USB_EPStartXfer+0xe7e>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <USB_EPStartXfer+0xdee>
 8004f66:	2198      	movs	r1, #152	; 0x98
 8004f68:	187b      	adds	r3, r7, r1
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <USB_EPStartXfer+0xe34>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	187b      	adds	r3, r7, r1
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	801a      	strh	r2, [r3, #0]
 8004f7c:	e047      	b.n	800500e <USB_EPStartXfer+0xe7e>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	21e0      	movs	r1, #224	; 0xe0
 8004f86:	187a      	adds	r2, r7, r1
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4013      	ands	r3, r2
 8004f92:	d004      	beq.n	8004f9e <USB_EPStartXfer+0xe0e>
 8004f94:	187b      	adds	r3, r7, r1
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	187a      	adds	r2, r7, r1
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	2198      	movs	r1, #152	; 0x98
 8004fa0:	187b      	adds	r3, r7, r1
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	23e0      	movs	r3, #224	; 0xe0
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	187b      	adds	r3, r7, r1
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	e026      	b.n	800500e <USB_EPStartXfer+0xe7e>
 8004fc0:	00000406 	.word	0x00000406
 8004fc4:	ffff8000 	.word	0xffff8000
 8004fc8:	00000402 	.word	0x00000402
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d11c      	bne.n	800500e <USB_EPStartXfer+0xe7e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2250      	movs	r2, #80	; 0x50
 8004fd8:	5a9b      	ldrh	r3, [r3, r2]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	001a      	movs	r2, r3
 8004fde:	21a4      	movs	r1, #164	; 0xa4
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	189b      	adds	r3, r3, r2
 8004fe6:	187a      	adds	r2, r7, r1
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	00da      	lsls	r2, r3, #3
 8004ff0:	187b      	adds	r3, r7, r1
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	18d3      	adds	r3, r2, r3
 8004ff6:	4ad2      	ldr	r2, [pc, #840]	; (8005340 <USB_EPStartXfer+0x11b0>)
 8004ff8:	4694      	mov	ip, r2
 8004ffa:	4463      	add	r3, ip
 8004ffc:	21a0      	movs	r1, #160	; 0xa0
 8004ffe:	187a      	adds	r2, r7, r1
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	b29a      	uxth	r2, r3
 8005008:	187b      	adds	r3, r7, r1
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d100      	bne.n	8005018 <USB_EPStartXfer+0xe88>
 8005016:	e1c2      	b.n	800539e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	18d2      	adds	r2, r2, r3
 8005022:	2196      	movs	r1, #150	; 0x96
 8005024:	187b      	adds	r3, r7, r1
 8005026:	8812      	ldrh	r2, [r2, #0]
 8005028:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800502a:	187b      	adds	r3, r7, r1
 800502c:	881a      	ldrh	r2, [r3, #0]
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	01db      	lsls	r3, r3, #7
 8005032:	4013      	ands	r3, r2
 8005034:	d004      	beq.n	8005040 <USB_EPStartXfer+0xeb0>
 8005036:	187b      	adds	r3, r7, r1
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	4013      	ands	r3, r2
 800503e:	d10d      	bne.n	800505c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005040:	2196      	movs	r1, #150	; 0x96
 8005042:	187b      	adds	r3, r7, r1
 8005044:	881a      	ldrh	r2, [r3, #0]
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	01db      	lsls	r3, r3, #7
 800504a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800504c:	d000      	beq.n	8005050 <USB_EPStartXfer+0xec0>
 800504e:	e1a6      	b.n	800539e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005050:	187b      	adds	r3, r7, r1
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	2240      	movs	r2, #64	; 0x40
 8005056:	4013      	ands	r3, r2
 8005058:	d000      	beq.n	800505c <USB_EPStartXfer+0xecc>
 800505a:	e1a0      	b.n	800539e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	18d3      	adds	r3, r2, r3
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29a      	uxth	r2, r3
 800506a:	2094      	movs	r0, #148	; 0x94
 800506c:	183b      	adds	r3, r7, r0
 800506e:	49b5      	ldr	r1, [pc, #724]	; (8005344 <USB_EPStartXfer+0x11b4>)
 8005070:	400a      	ands	r2, r1
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	183a      	adds	r2, r7, r0
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	49b1      	ldr	r1, [pc, #708]	; (8005348 <USB_EPStartXfer+0x11b8>)
 8005084:	430a      	orrs	r2, r1
 8005086:	b292      	uxth	r2, r2
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	e188      	b.n	800539e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	78db      	ldrb	r3, [r3, #3]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d000      	beq.n	8005096 <USB_EPStartXfer+0xf06>
 8005094:	e181      	b.n	800539a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d90d      	bls.n	80050be <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	1d7a      	adds	r2, r7, #5
 80050a8:	32ff      	adds	r2, #255	; 0xff
 80050aa:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	1d7b      	adds	r3, r7, #5
 80050b2:	33ff      	adds	r3, #255	; 0xff
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	1ad2      	subs	r2, r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	619a      	str	r2, [r3, #24]
 80050bc:	e007      	b.n	80050ce <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	1d7a      	adds	r2, r7, #5
 80050c4:	32ff      	adds	r2, #255	; 0xff
 80050c6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d000      	beq.n	80050d8 <USB_EPStartXfer+0xf48>
 80050d6:	e082      	b.n	80051de <USB_EPStartXfer+0x104e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	21cc      	movs	r1, #204	; 0xcc
 80050dc:	187a      	adds	r2, r7, r1
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2250      	movs	r2, #80	; 0x50
 80050e4:	5a9b      	ldrh	r3, [r3, r2]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	001a      	movs	r2, r3
 80050ea:	187b      	adds	r3, r7, r1
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	187a      	adds	r2, r7, r1
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	00da      	lsls	r2, r3, #3
 80050fa:	187b      	adds	r3, r7, r1
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	18d3      	adds	r3, r2, r3
 8005100:	4a92      	ldr	r2, [pc, #584]	; (800534c <USB_EPStartXfer+0x11bc>)
 8005102:	4694      	mov	ip, r2
 8005104:	4463      	add	r3, ip
 8005106:	21c8      	movs	r1, #200	; 0xc8
 8005108:	187a      	adds	r2, r7, r1
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	187b      	adds	r3, r7, r1
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	059b      	lsls	r3, r3, #22
 8005116:	0d9b      	lsrs	r3, r3, #22
 8005118:	b29a      	uxth	r2, r3
 800511a:	187b      	adds	r3, r7, r1
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	801a      	strh	r2, [r3, #0]
 8005120:	1d7b      	adds	r3, r7, #5
 8005122:	33ff      	adds	r3, #255	; 0xff
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b3e      	cmp	r3, #62	; 0x3e
 8005128:	d925      	bls.n	8005176 <USB_EPStartXfer+0xfe6>
 800512a:	1d7b      	adds	r3, r7, #5
 800512c:	33ff      	adds	r3, #255	; 0xff
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	21dc      	movs	r1, #220	; 0xdc
 8005134:	187a      	adds	r2, r7, r1
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	1d7b      	adds	r3, r7, #5
 800513a:	33ff      	adds	r3, #255	; 0xff
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	221f      	movs	r2, #31
 8005140:	4013      	ands	r3, r2
 8005142:	d104      	bne.n	800514e <USB_EPStartXfer+0xfbe>
 8005144:	187b      	adds	r3, r7, r1
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3b01      	subs	r3, #1
 800514a:	187a      	adds	r2, r7, r1
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	21c8      	movs	r1, #200	; 0xc8
 8005150:	187b      	adds	r3, r7, r1
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29a      	uxth	r2, r3
 8005158:	23dc      	movs	r3, #220	; 0xdc
 800515a:	18fb      	adds	r3, r7, r3
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	029b      	lsls	r3, r3, #10
 8005162:	b29b      	uxth	r3, r3
 8005164:	4313      	orrs	r3, r2
 8005166:	b29b      	uxth	r3, r3
 8005168:	4a79      	ldr	r2, [pc, #484]	; (8005350 <USB_EPStartXfer+0x11c0>)
 800516a:	4313      	orrs	r3, r2
 800516c:	b29a      	uxth	r2, r3
 800516e:	187b      	adds	r3, r7, r1
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	e058      	b.n	8005228 <USB_EPStartXfer+0x1098>
 8005176:	1d7b      	adds	r3, r7, #5
 8005178:	33ff      	adds	r3, #255	; 0xff
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <USB_EPStartXfer+0x1008>
 8005180:	21c8      	movs	r1, #200	; 0xc8
 8005182:	187b      	adds	r3, r7, r1
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	4a71      	ldr	r2, [pc, #452]	; (8005350 <USB_EPStartXfer+0x11c0>)
 800518c:	4313      	orrs	r3, r2
 800518e:	b29a      	uxth	r2, r3
 8005190:	187b      	adds	r3, r7, r1
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	e047      	b.n	8005228 <USB_EPStartXfer+0x1098>
 8005198:	1d7b      	adds	r3, r7, #5
 800519a:	33ff      	adds	r3, #255	; 0xff
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	21dc      	movs	r1, #220	; 0xdc
 80051a2:	187a      	adds	r2, r7, r1
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	1d7b      	adds	r3, r7, #5
 80051a8:	33ff      	adds	r3, #255	; 0xff
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2201      	movs	r2, #1
 80051ae:	4013      	ands	r3, r2
 80051b0:	d004      	beq.n	80051bc <USB_EPStartXfer+0x102c>
 80051b2:	187b      	adds	r3, r7, r1
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	187a      	adds	r2, r7, r1
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	21c8      	movs	r1, #200	; 0xc8
 80051be:	187b      	adds	r3, r7, r1
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	23dc      	movs	r3, #220	; 0xdc
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	029b      	lsls	r3, r3, #10
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	4313      	orrs	r3, r2
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	187b      	adds	r3, r7, r1
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	801a      	strh	r2, [r3, #0]
 80051dc:	e024      	b.n	8005228 <USB_EPStartXfer+0x1098>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d120      	bne.n	8005228 <USB_EPStartXfer+0x1098>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	21d4      	movs	r1, #212	; 0xd4
 80051ea:	187a      	adds	r2, r7, r1
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2250      	movs	r2, #80	; 0x50
 80051f2:	5a9b      	ldrh	r3, [r3, r2]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	001a      	movs	r2, r3
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	189b      	adds	r3, r3, r2
 80051fe:	187a      	adds	r2, r7, r1
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	00da      	lsls	r2, r3, #3
 8005208:	187b      	adds	r3, r7, r1
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	18d3      	adds	r3, r2, r3
 800520e:	4a4f      	ldr	r2, [pc, #316]	; (800534c <USB_EPStartXfer+0x11bc>)
 8005210:	4694      	mov	ip, r2
 8005212:	4463      	add	r3, ip
 8005214:	21d0      	movs	r1, #208	; 0xd0
 8005216:	187a      	adds	r2, r7, r1
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	1d7b      	adds	r3, r7, #5
 800521c:	33ff      	adds	r3, #255	; 0xff
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	b29a      	uxth	r2, r3
 8005222:	187b      	adds	r3, r7, r1
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	22c4      	movs	r2, #196	; 0xc4
 800522c:	18ba      	adds	r2, r7, r2
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	785b      	ldrb	r3, [r3, #1]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d000      	beq.n	800523a <USB_EPStartXfer+0x10aa>
 8005238:	e08c      	b.n	8005354 <USB_EPStartXfer+0x11c4>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	21bc      	movs	r1, #188	; 0xbc
 800523e:	187a      	adds	r2, r7, r1
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2250      	movs	r2, #80	; 0x50
 8005246:	5a9b      	ldrh	r3, [r3, r2]
 8005248:	b29b      	uxth	r3, r3
 800524a:	001a      	movs	r2, r3
 800524c:	187b      	adds	r3, r7, r1
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	189b      	adds	r3, r3, r2
 8005252:	187a      	adds	r2, r7, r1
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	00da      	lsls	r2, r3, #3
 800525c:	187b      	adds	r3, r7, r1
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	18d3      	adds	r3, r2, r3
 8005262:	4a37      	ldr	r2, [pc, #220]	; (8005340 <USB_EPStartXfer+0x11b0>)
 8005264:	4694      	mov	ip, r2
 8005266:	4463      	add	r3, ip
 8005268:	21b8      	movs	r1, #184	; 0xb8
 800526a:	187a      	adds	r2, r7, r1
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	187b      	adds	r3, r7, r1
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	059b      	lsls	r3, r3, #22
 8005278:	0d9b      	lsrs	r3, r3, #22
 800527a:	b29a      	uxth	r2, r3
 800527c:	187b      	adds	r3, r7, r1
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	1d7b      	adds	r3, r7, #5
 8005284:	33ff      	adds	r3, #255	; 0xff
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b3e      	cmp	r3, #62	; 0x3e
 800528a:	d925      	bls.n	80052d8 <USB_EPStartXfer+0x1148>
 800528c:	1d7b      	adds	r3, r7, #5
 800528e:	33ff      	adds	r3, #255	; 0xff
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	21d8      	movs	r1, #216	; 0xd8
 8005296:	187a      	adds	r2, r7, r1
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	1d7b      	adds	r3, r7, #5
 800529c:	33ff      	adds	r3, #255	; 0xff
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	221f      	movs	r2, #31
 80052a2:	4013      	ands	r3, r2
 80052a4:	d104      	bne.n	80052b0 <USB_EPStartXfer+0x1120>
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	187a      	adds	r2, r7, r1
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	21b8      	movs	r1, #184	; 0xb8
 80052b2:	187b      	adds	r3, r7, r1
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	23d8      	movs	r3, #216	; 0xd8
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	029b      	lsls	r3, r3, #10
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	4313      	orrs	r3, r2
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	4a21      	ldr	r2, [pc, #132]	; (8005350 <USB_EPStartXfer+0x11c0>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	187b      	adds	r3, r7, r1
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	e062      	b.n	800539e <USB_EPStartXfer+0x120e>
 80052d8:	1d7b      	adds	r3, r7, #5
 80052da:	33ff      	adds	r3, #255	; 0xff
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <USB_EPStartXfer+0x116a>
 80052e2:	21b8      	movs	r1, #184	; 0xb8
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4a18      	ldr	r2, [pc, #96]	; (8005350 <USB_EPStartXfer+0x11c0>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	187b      	adds	r3, r7, r1
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	e051      	b.n	800539e <USB_EPStartXfer+0x120e>
 80052fa:	1d7b      	adds	r3, r7, #5
 80052fc:	33ff      	adds	r3, #255	; 0xff
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	21d8      	movs	r1, #216	; 0xd8
 8005304:	187a      	adds	r2, r7, r1
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	1d7b      	adds	r3, r7, #5
 800530a:	33ff      	adds	r3, #255	; 0xff
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2201      	movs	r2, #1
 8005310:	4013      	ands	r3, r2
 8005312:	d004      	beq.n	800531e <USB_EPStartXfer+0x118e>
 8005314:	187b      	adds	r3, r7, r1
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3301      	adds	r3, #1
 800531a:	187a      	adds	r2, r7, r1
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	21b8      	movs	r1, #184	; 0xb8
 8005320:	187b      	adds	r3, r7, r1
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29a      	uxth	r2, r3
 8005328:	23d8      	movs	r3, #216	; 0xd8
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	029b      	lsls	r3, r3, #10
 8005332:	b29b      	uxth	r3, r3
 8005334:	4313      	orrs	r3, r2
 8005336:	b29a      	uxth	r2, r3
 8005338:	187b      	adds	r3, r7, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	e02e      	b.n	800539e <USB_EPStartXfer+0x120e>
 8005340:	00000406 	.word	0x00000406
 8005344:	ffff8f8f 	.word	0xffff8f8f
 8005348:	ffff80c0 	.word	0xffff80c0
 800534c:	00000402 	.word	0x00000402
 8005350:	ffff8000 	.word	0xffff8000
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d120      	bne.n	800539e <USB_EPStartXfer+0x120e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2250      	movs	r2, #80	; 0x50
 8005360:	5a9b      	ldrh	r3, [r3, r2]
 8005362:	b29b      	uxth	r3, r3
 8005364:	001a      	movs	r2, r3
 8005366:	21c4      	movs	r1, #196	; 0xc4
 8005368:	187b      	adds	r3, r7, r1
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	189b      	adds	r3, r3, r2
 800536e:	187a      	adds	r2, r7, r1
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	00da      	lsls	r2, r3, #3
 8005378:	187b      	adds	r3, r7, r1
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	18d3      	adds	r3, r2, r3
 800537e:	4a1d      	ldr	r2, [pc, #116]	; (80053f4 <USB_EPStartXfer+0x1264>)
 8005380:	4694      	mov	ip, r2
 8005382:	4463      	add	r3, ip
 8005384:	21c0      	movs	r1, #192	; 0xc0
 8005386:	187a      	adds	r2, r7, r1
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	1d7b      	adds	r3, r7, #5
 800538c:	33ff      	adds	r3, #255	; 0xff
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	b29a      	uxth	r2, r3
 8005392:	187b      	adds	r3, r7, r1
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	e001      	b.n	800539e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e025      	b.n	80053ea <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	18d3      	adds	r3, r2, r3
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	208a      	movs	r0, #138	; 0x8a
 80053ae:	183b      	adds	r3, r7, r0
 80053b0:	4911      	ldr	r1, [pc, #68]	; (80053f8 <USB_EPStartXfer+0x1268>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	183b      	adds	r3, r7, r0
 80053b8:	183a      	adds	r2, r7, r0
 80053ba:	8812      	ldrh	r2, [r2, #0]
 80053bc:	2180      	movs	r1, #128	; 0x80
 80053be:	0149      	lsls	r1, r1, #5
 80053c0:	404a      	eors	r2, r1
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	183b      	adds	r3, r7, r0
 80053c6:	183a      	adds	r2, r7, r0
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	0189      	lsls	r1, r1, #6
 80053ce:	404a      	eors	r2, r1
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	18d3      	adds	r3, r2, r3
 80053dc:	183a      	adds	r2, r7, r0
 80053de:	8812      	ldrh	r2, [r2, #0]
 80053e0:	4906      	ldr	r1, [pc, #24]	; (80053fc <USB_EPStartXfer+0x126c>)
 80053e2:	430a      	orrs	r2, r1
 80053e4:	b292      	uxth	r2, r2
 80053e6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b043      	add	sp, #268	; 0x10c
 80053f0:	bd90      	pop	{r4, r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	00000406 	.word	0x00000406
 80053f8:	ffffbf8f 	.word	0xffffbf8f
 80053fc:	ffff8080 	.word	0xffff8080

08005400 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01d      	beq.n	800544e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	18d3      	adds	r3, r2, r3
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29a      	uxth	r2, r3
 8005420:	200c      	movs	r0, #12
 8005422:	183b      	adds	r3, r7, r0
 8005424:	491b      	ldr	r1, [pc, #108]	; (8005494 <USB_EPSetStall+0x94>)
 8005426:	400a      	ands	r2, r1
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	183b      	adds	r3, r7, r0
 800542c:	183a      	adds	r2, r7, r0
 800542e:	8812      	ldrh	r2, [r2, #0]
 8005430:	2110      	movs	r1, #16
 8005432:	404a      	eors	r2, r1
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	18d3      	adds	r3, r2, r3
 8005440:	183a      	adds	r2, r7, r0
 8005442:	8812      	ldrh	r2, [r2, #0]
 8005444:	4914      	ldr	r1, [pc, #80]	; (8005498 <USB_EPSetStall+0x98>)
 8005446:	430a      	orrs	r2, r1
 8005448:	b292      	uxth	r2, r2
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	e01d      	b.n	800548a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	18d3      	adds	r3, r2, r3
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29a      	uxth	r2, r3
 800545c:	200e      	movs	r0, #14
 800545e:	183b      	adds	r3, r7, r0
 8005460:	490e      	ldr	r1, [pc, #56]	; (800549c <USB_EPSetStall+0x9c>)
 8005462:	400a      	ands	r2, r1
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	183b      	adds	r3, r7, r0
 8005468:	183a      	adds	r2, r7, r0
 800546a:	8812      	ldrh	r2, [r2, #0]
 800546c:	2180      	movs	r1, #128	; 0x80
 800546e:	0149      	lsls	r1, r1, #5
 8005470:	404a      	eors	r2, r1
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	18d3      	adds	r3, r2, r3
 800547e:	183a      	adds	r2, r7, r0
 8005480:	8812      	ldrh	r2, [r2, #0]
 8005482:	4905      	ldr	r1, [pc, #20]	; (8005498 <USB_EPSetStall+0x98>)
 8005484:	430a      	orrs	r2, r1
 8005486:	b292      	uxth	r2, r2
 8005488:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	0018      	movs	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	b004      	add	sp, #16
 8005492:	bd80      	pop	{r7, pc}
 8005494:	ffff8fbf 	.word	0xffff8fbf
 8005498:	ffff8080 	.word	0xffff8080
 800549c:	ffffbf8f 	.word	0xffffbf8f

080054a0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	7b1b      	ldrb	r3, [r3, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d000      	beq.n	80054b4 <USB_EPClearStall+0x14>
 80054b2:	e095      	b.n	80055e0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d046      	beq.n	800554a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	18d2      	adds	r2, r2, r3
 80054c6:	2110      	movs	r1, #16
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	8812      	ldrh	r2, [r2, #0]
 80054cc:	801a      	strh	r2, [r3, #0]
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	2240      	movs	r2, #64	; 0x40
 80054d4:	4013      	ands	r3, r2
 80054d6:	d016      	beq.n	8005506 <USB_EPClearStall+0x66>
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	18d3      	adds	r3, r2, r3
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	200e      	movs	r0, #14
 80054e8:	183b      	adds	r3, r7, r0
 80054ea:	4940      	ldr	r1, [pc, #256]	; (80055ec <USB_EPClearStall+0x14c>)
 80054ec:	400a      	ands	r2, r1
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	18d3      	adds	r3, r2, r3
 80054fa:	183a      	adds	r2, r7, r0
 80054fc:	8812      	ldrh	r2, [r2, #0]
 80054fe:	493c      	ldr	r1, [pc, #240]	; (80055f0 <USB_EPClearStall+0x150>)
 8005500:	430a      	orrs	r2, r1
 8005502:	b292      	uxth	r2, r2
 8005504:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	78db      	ldrb	r3, [r3, #3]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d068      	beq.n	80055e0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	18d3      	adds	r3, r2, r3
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29a      	uxth	r2, r3
 800551c:	200c      	movs	r0, #12
 800551e:	183b      	adds	r3, r7, r0
 8005520:	4934      	ldr	r1, [pc, #208]	; (80055f4 <USB_EPClearStall+0x154>)
 8005522:	400a      	ands	r2, r1
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	183b      	adds	r3, r7, r0
 8005528:	183a      	adds	r2, r7, r0
 800552a:	8812      	ldrh	r2, [r2, #0]
 800552c:	2120      	movs	r1, #32
 800552e:	404a      	eors	r2, r1
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	18d3      	adds	r3, r2, r3
 800553c:	183a      	adds	r2, r7, r0
 800553e:	8812      	ldrh	r2, [r2, #0]
 8005540:	492d      	ldr	r1, [pc, #180]	; (80055f8 <USB_EPClearStall+0x158>)
 8005542:	430a      	orrs	r2, r1
 8005544:	b292      	uxth	r2, r2
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	e04a      	b.n	80055e0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	18d2      	adds	r2, r2, r3
 8005554:	2116      	movs	r1, #22
 8005556:	187b      	adds	r3, r7, r1
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	187b      	adds	r3, r7, r1
 800555e:	881a      	ldrh	r2, [r3, #0]
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	01db      	lsls	r3, r3, #7
 8005564:	4013      	ands	r3, r2
 8005566:	d016      	beq.n	8005596 <USB_EPClearStall+0xf6>
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	18d3      	adds	r3, r2, r3
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29a      	uxth	r2, r3
 8005576:	2014      	movs	r0, #20
 8005578:	183b      	adds	r3, r7, r0
 800557a:	491c      	ldr	r1, [pc, #112]	; (80055ec <USB_EPClearStall+0x14c>)
 800557c:	400a      	ands	r2, r1
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	18d3      	adds	r3, r2, r3
 800558a:	183a      	adds	r2, r7, r0
 800558c:	8812      	ldrh	r2, [r2, #0]
 800558e:	491b      	ldr	r1, [pc, #108]	; (80055fc <USB_EPClearStall+0x15c>)
 8005590:	430a      	orrs	r2, r1
 8005592:	b292      	uxth	r2, r2
 8005594:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	18d3      	adds	r3, r2, r3
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	2012      	movs	r0, #18
 80055a6:	183b      	adds	r3, r7, r0
 80055a8:	4915      	ldr	r1, [pc, #84]	; (8005600 <USB_EPClearStall+0x160>)
 80055aa:	400a      	ands	r2, r1
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	183b      	adds	r3, r7, r0
 80055b0:	183a      	adds	r2, r7, r0
 80055b2:	8812      	ldrh	r2, [r2, #0]
 80055b4:	2180      	movs	r1, #128	; 0x80
 80055b6:	0149      	lsls	r1, r1, #5
 80055b8:	404a      	eors	r2, r1
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	183b      	adds	r3, r7, r0
 80055be:	183a      	adds	r2, r7, r0
 80055c0:	8812      	ldrh	r2, [r2, #0]
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	0189      	lsls	r1, r1, #6
 80055c6:	404a      	eors	r2, r1
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	18d3      	adds	r3, r2, r3
 80055d4:	183a      	adds	r2, r7, r0
 80055d6:	8812      	ldrh	r2, [r2, #0]
 80055d8:	4907      	ldr	r1, [pc, #28]	; (80055f8 <USB_EPClearStall+0x158>)
 80055da:	430a      	orrs	r2, r1
 80055dc:	b292      	uxth	r2, r2
 80055de:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b006      	add	sp, #24
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	ffff8f8f 	.word	0xffff8f8f
 80055f0:	ffff80c0 	.word	0xffff80c0
 80055f4:	ffff8fbf 	.word	0xffff8fbf
 80055f8:	ffff8080 	.word	0xffff8080
 80055fc:	ffffc080 	.word	0xffffc080
 8005600:	ffffbf8f 	.word	0xffffbf8f

08005604 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	000a      	movs	r2, r1
 800560e:	1cfb      	adds	r3, r7, #3
 8005610:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005612:	1cfb      	adds	r3, r7, #3
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	224c      	movs	r2, #76	; 0x4c
 800561e:	2180      	movs	r1, #128	; 0x80
 8005620:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	0018      	movs	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	b002      	add	sp, #8
 800562a:	bd80      	pop	{r7, pc}

0800562c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2258      	movs	r2, #88	; 0x58
 8005638:	5a9b      	ldrh	r3, [r3, r2]
 800563a:	b29b      	uxth	r3, r3
 800563c:	4a05      	ldr	r2, [pc, #20]	; (8005654 <USB_DevConnect+0x28>)
 800563e:	4313      	orrs	r3, r2
 8005640:	b299      	uxth	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2258      	movs	r2, #88	; 0x58
 8005646:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b002      	add	sp, #8
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	ffff8000 	.word	0xffff8000

08005658 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2244      	movs	r2, #68	; 0x44
 8005664:	5a9b      	ldrh	r3, [r3, r2]
 8005666:	b29b      	uxth	r3, r3
 8005668:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800566a:	68fb      	ldr	r3, [r7, #12]
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b004      	add	sp, #16
 8005672:	bd80      	pop	{r7, pc}

08005674 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	0019      	movs	r1, r3
 8005680:	1dbb      	adds	r3, r7, #6
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	1c0a      	adds	r2, r1, #0
 8005688:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800568a:	1d3b      	adds	r3, r7, #4
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	3301      	adds	r3, #1
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800569c:	1dbb      	adds	r3, r7, #6
 800569e:	881a      	ldrh	r2, [r3, #0]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	18d3      	adds	r3, r2, r3
 80056a4:	2280      	movs	r2, #128	; 0x80
 80056a6:	00d2      	lsls	r2, r2, #3
 80056a8:	4694      	mov	ip, r2
 80056aa:	4463      	add	r3, ip
 80056ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	e020      	b.n	80056f6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	781a      	ldrb	r2, [r3, #0]
 80056b8:	2112      	movs	r1, #18
 80056ba:	187b      	adds	r3, r7, r1
 80056bc:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3301      	adds	r3, #1
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	b21a      	sxth	r2, r3
 80056c8:	187b      	adds	r3, r7, r1
 80056ca:	2000      	movs	r0, #0
 80056cc:	5e1b      	ldrsh	r3, [r3, r0]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	b21a      	sxth	r2, r3
 80056d2:	187b      	adds	r3, r7, r1
 80056d4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	187a      	adds	r2, r7, r1
 80056da:	8812      	ldrh	r2, [r2, #0]
 80056dc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	3302      	adds	r3, #2
 80056e2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3301      	adds	r3, #1
 80056e8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	3301      	adds	r3, #1
 80056ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	3b01      	subs	r3, #1
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1db      	bne.n	80056b4 <USB_WritePMA+0x40>
  }
}
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	46bd      	mov	sp, r7
 8005702:	b00a      	add	sp, #40	; 0x28
 8005704:	bd80      	pop	{r7, pc}

08005706 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b08a      	sub	sp, #40	; 0x28
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	0019      	movs	r1, r3
 8005712:	1dbb      	adds	r3, r7, #6
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	1c0a      	adds	r2, r1, #0
 800571a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	085b      	lsrs	r3, r3, #1
 8005722:	b29b      	uxth	r3, r3
 8005724:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800572e:	1dbb      	adds	r3, r7, #6
 8005730:	881a      	ldrh	r2, [r3, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	18d3      	adds	r3, r2, r3
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	00d2      	lsls	r2, r2, #3
 800573a:	4694      	mov	ip, r2
 800573c:	4463      	add	r3, ip
 800573e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
 8005744:	e018      	b.n	8005778 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	3302      	adds	r3, #2
 8005752:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	3301      	adds	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	0a1b      	lsrs	r3, r3, #8
 8005766:	b2da      	uxtb	r2, r3
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	3301      	adds	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	3b01      	subs	r3, #1
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e3      	bne.n	8005746 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	2201      	movs	r2, #1
 8005784:	4013      	ands	r3, r2
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	701a      	strb	r2, [r3, #0]
  }
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	46bd      	mov	sp, r7
 80057a0:	b00a      	add	sp, #40	; 0x28
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <USBD_HID_Init>:
 *         Initialize the HID interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	000a      	movs	r2, r1
 80057ae:	1cfb      	adds	r3, r7, #3
 80057b0:	701a      	strb	r2, [r3, #0]
	/* Open EP IN */
	USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	2304      	movs	r3, #4
 80057b6:	2203      	movs	r2, #3
 80057b8:	2181      	movs	r1, #129	; 0x81
 80057ba:	f001 fe5a 	bl	8007472 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	62da      	str	r2, [r3, #44]	; 0x2c

	pdev->pClassData = USBD_malloc (sizeof(USBD_HID_HandleTypeDef));
 80057c4:	2010      	movs	r0, #16
 80057c6:	f001 ffd7 	bl	8007778 <USBD_static_malloc>
 80057ca:	0001      	movs	r1, r0
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	23ae      	movs	r3, #174	; 0xae
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	50d1      	str	r1, [r2, r3]

	if (pdev->pClassData == NULL) {
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	23ae      	movs	r3, #174	; 0xae
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	58d3      	ldr	r3, [r2, r3]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <USBD_HID_Init+0x40>
		return USBD_FAIL;
 80057e0:	2302      	movs	r3, #2
 80057e2:	e006      	b.n	80057f2 <USBD_HID_Init+0x4e>
	}

	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	23ae      	movs	r3, #174	; 0xae
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	58d3      	ldr	r3, [r2, r3]
 80057ec:	2200      	movs	r2, #0
 80057ee:	731a      	strb	r2, [r3, #12]

	return USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	0018      	movs	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b002      	add	sp, #8
 80057f8:	bd80      	pop	{r7, pc}

080057fa <USBD_HID_DeInit>:
 *         DeInitialize the HID layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	000a      	movs	r2, r1
 8005804:	1cfb      	adds	r3, r7, #3
 8005806:	701a      	strb	r2, [r3, #0]
	/* Close HID EPs */
	USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2181      	movs	r1, #129	; 0x81
 800580c:	0018      	movs	r0, r3
 800580e:	f001 fe67 	bl	80074e0 <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c

	/* FRee allocated memory */
	if (pdev->pClassData != NULL) {
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	23ae      	movs	r3, #174	; 0xae
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	58d3      	ldr	r3, [r2, r3]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00b      	beq.n	800583c <USBD_HID_DeInit+0x42>
		USBD_free(pdev->pClassData);
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	23ae      	movs	r3, #174	; 0xae
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	58d3      	ldr	r3, [r2, r3]
 800582c:	0018      	movs	r0, r3
 800582e:	f001 ffaf 	bl	8007790 <USBD_static_free>
		pdev->pClassData = NULL;
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	23ae      	movs	r3, #174	; 0xae
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	2100      	movs	r1, #0
 800583a:	50d1      	str	r1, [r2, r3]
	}

	return USBD_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	0018      	movs	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	b002      	add	sp, #8
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	23ae      	movs	r3, #174	; 0xae
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	58d3      	ldr	r3, [r2, r3]
 800585a:	613b      	str	r3, [r7, #16]
	uint16_t len = 0U;
 800585c:	231e      	movs	r3, #30
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	2200      	movs	r2, #0
 8005862:	801a      	strh	r2, [r3, #0]
	uint8_t *pbuf = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
	uint16_t status_info = 0U;
 8005868:	230e      	movs	r3, #14
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	2200      	movs	r2, #0
 800586e:	801a      	strh	r2, [r3, #0]
	USBD_StatusTypeDef ret = USBD_OK;
 8005870:	2317      	movs	r3, #23
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]

	switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	001a      	movs	r2, r3
 800587e:	2360      	movs	r3, #96	; 0x60
 8005880:	4013      	ands	r3, r2
 8005882:	d03a      	beq.n	80058fa <USBD_HID_Setup+0xb2>
 8005884:	2b20      	cmp	r3, #32
 8005886:	d000      	beq.n	800588a <USBD_HID_Setup+0x42>
 8005888:	e0d6      	b.n	8005a38 <USBD_HID_Setup+0x1f0>
	case USB_REQ_TYPE_CLASS:
		switch (req->bRequest) {
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	2b0b      	cmp	r3, #11
 8005890:	d008      	beq.n	80058a4 <USBD_HID_Setup+0x5c>
 8005892:	dc26      	bgt.n	80058e2 <USBD_HID_Setup+0x9a>
 8005894:	2b0a      	cmp	r3, #10
 8005896:	d013      	beq.n	80058c0 <USBD_HID_Setup+0x78>
 8005898:	dc23      	bgt.n	80058e2 <USBD_HID_Setup+0x9a>
 800589a:	2b02      	cmp	r3, #2
 800589c:	d019      	beq.n	80058d2 <USBD_HID_Setup+0x8a>
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d007      	beq.n	80058b2 <USBD_HID_Setup+0x6a>
 80058a2:	e01e      	b.n	80058e2 <USBD_HID_Setup+0x9a>
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t) (req->wValue);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	885b      	ldrh	r3, [r3, #2]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	001a      	movs	r2, r3
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	601a      	str	r2, [r3, #0]
			break;
 80058b0:	e022      	b.n	80058f8 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->Protocol, 1U);
 80058b2:	6939      	ldr	r1, [r7, #16]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	0018      	movs	r0, r3
 80058ba:	f001 fabf 	bl	8006e3c <USBD_CtlSendData>
			break;
 80058be:	e01b      	b.n	80058f8 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t) (req->wValue >> 8);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	885b      	ldrh	r3, [r3, #2]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	001a      	movs	r2, r3
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	605a      	str	r2, [r3, #4]
			break;
 80058d0:	e012      	b.n	80058f8 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->IdleState, 1U);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1d19      	adds	r1, r3, #4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	0018      	movs	r0, r3
 80058dc:	f001 faae 	bl	8006e3c <USBD_CtlSendData>
			break;
 80058e0:	e00a      	b.n	80058f8 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	0011      	movs	r1, r2
 80058e8:	0018      	movs	r0, r3
 80058ea:	f001 fa29 	bl	8006d40 <USBD_CtlError>
			ret = USBD_FAIL;
 80058ee:	2317      	movs	r3, #23
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	2202      	movs	r2, #2
 80058f4:	701a      	strb	r2, [r3, #0]
			break;
 80058f6:	46c0      	nop			; (mov r8, r8)
		}
		break;
 80058f8:	e0a9      	b.n	8005a4e <USBD_HID_Setup+0x206>
	case USB_REQ_TYPE_STANDARD:
		switch (req->bRequest) {
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b0b      	cmp	r3, #11
 8005900:	d100      	bne.n	8005904 <USBD_HID_Setup+0xbc>
 8005902:	e075      	b.n	80059f0 <USBD_HID_Setup+0x1a8>
 8005904:	dd00      	ble.n	8005908 <USBD_HID_Setup+0xc0>
 8005906:	e08b      	b.n	8005a20 <USBD_HID_Setup+0x1d8>
 8005908:	2b0a      	cmp	r3, #10
 800590a:	d057      	beq.n	80059bc <USBD_HID_Setup+0x174>
 800590c:	dd00      	ble.n	8005910 <USBD_HID_Setup+0xc8>
 800590e:	e087      	b.n	8005a20 <USBD_HID_Setup+0x1d8>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <USBD_HID_Setup+0xd2>
 8005914:	2b06      	cmp	r3, #6
 8005916:	d019      	beq.n	800594c <USBD_HID_Setup+0x104>
 8005918:	e082      	b.n	8005a20 <USBD_HID_Setup+0x1d8>
		case USB_REQ_GET_STATUS:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	23a7      	movs	r3, #167	; 0xa7
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	5cd3      	ldrb	r3, [r2, r3]
 8005922:	2b03      	cmp	r3, #3
 8005924:	d107      	bne.n	8005936 <USBD_HID_Setup+0xee>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &status_info, 2U);
 8005926:	230e      	movs	r3, #14
 8005928:	18f9      	adds	r1, r7, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	0018      	movs	r0, r3
 8005930:	f001 fa84 	bl	8006e3c <USBD_CtlSendData>
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8005934:	e07f      	b.n	8005a36 <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	0011      	movs	r1, r2
 800593c:	0018      	movs	r0, r3
 800593e:	f001 f9ff 	bl	8006d40 <USBD_CtlError>
				ret = USBD_FAIL;
 8005942:	2317      	movs	r3, #23
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	2202      	movs	r2, #2
 8005948:	701a      	strb	r2, [r3, #0]
			break;
 800594a:	e074      	b.n	8005a36 <USBD_HID_Setup+0x1ee>

		case USB_REQ_GET_DESCRIPTOR:
			if (req->wValue >> 8 == HID_REPORT_DESC) {
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	885b      	ldrh	r3, [r3, #2]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b22      	cmp	r3, #34	; 0x22
 8005956:	d10b      	bne.n	8005970 <USBD_HID_Setup+0x128>
				len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	88db      	ldrh	r3, [r3, #6]
 800595c:	221e      	movs	r2, #30
 800595e:	18ba      	adds	r2, r7, r2
 8005960:	b299      	uxth	r1, r3
 8005962:	293f      	cmp	r1, #63	; 0x3f
 8005964:	d900      	bls.n	8005968 <USBD_HID_Setup+0x120>
 8005966:	233f      	movs	r3, #63	; 0x3f
 8005968:	8013      	strh	r3, [r2, #0]
				pbuf = HID_MOUSE_ReportDesc;
 800596a:	4b3c      	ldr	r3, [pc, #240]	; (8005a5c <USBD_HID_Setup+0x214>)
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	e01c      	b.n	80059aa <USBD_HID_Setup+0x162>
			} else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE) {
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	885b      	ldrh	r3, [r3, #2]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b21      	cmp	r3, #33	; 0x21
 800597a:	d10b      	bne.n	8005994 <USBD_HID_Setup+0x14c>
				pbuf = USBD_HID_Desc;
 800597c:	4b38      	ldr	r3, [pc, #224]	; (8005a60 <USBD_HID_Setup+0x218>)
 800597e:	61bb      	str	r3, [r7, #24]
				len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	88db      	ldrh	r3, [r3, #6]
 8005984:	221e      	movs	r2, #30
 8005986:	18ba      	adds	r2, r7, r2
 8005988:	b299      	uxth	r1, r3
 800598a:	2909      	cmp	r1, #9
 800598c:	d900      	bls.n	8005990 <USBD_HID_Setup+0x148>
 800598e:	2309      	movs	r3, #9
 8005990:	8013      	strh	r3, [r2, #0]
 8005992:	e00a      	b.n	80059aa <USBD_HID_Setup+0x162>
			} else {
				USBD_CtlError(pdev, req);
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0011      	movs	r1, r2
 800599a:	0018      	movs	r0, r3
 800599c:	f001 f9d0 	bl	8006d40 <USBD_CtlError>
				ret = USBD_FAIL;
 80059a0:	2317      	movs	r3, #23
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	2202      	movs	r2, #2
 80059a6:	701a      	strb	r2, [r3, #0]
				break;
 80059a8:	e045      	b.n	8005a36 <USBD_HID_Setup+0x1ee>
			}
			USBD_CtlSendData(pdev, pbuf, len);
 80059aa:	231e      	movs	r3, #30
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	881a      	ldrh	r2, [r3, #0]
 80059b0:	69b9      	ldr	r1, [r7, #24]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	0018      	movs	r0, r3
 80059b6:	f001 fa41 	bl	8006e3c <USBD_CtlSendData>
			break;
 80059ba:	e03c      	b.n	8005a36 <USBD_HID_Setup+0x1ee>

		case USB_REQ_GET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	23a7      	movs	r3, #167	; 0xa7
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d108      	bne.n	80059da <USBD_HID_Setup+0x192>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->AltSetting,
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3308      	adds	r3, #8
 80059cc:	0019      	movs	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	0018      	movs	r0, r3
 80059d4:	f001 fa32 	bl	8006e3c <USBD_CtlSendData>
						1U);
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 80059d8:	e02d      	b.n	8005a36 <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	0011      	movs	r1, r2
 80059e0:	0018      	movs	r0, r3
 80059e2:	f001 f9ad 	bl	8006d40 <USBD_CtlError>
				ret = USBD_FAIL;
 80059e6:	2317      	movs	r3, #23
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2202      	movs	r2, #2
 80059ec:	701a      	strb	r2, [r3, #0]
			break;
 80059ee:	e022      	b.n	8005a36 <USBD_HID_Setup+0x1ee>

		case USB_REQ_SET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	23a7      	movs	r3, #167	; 0xa7
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	5cd3      	ldrb	r3, [r2, r3]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d106      	bne.n	8005a0a <USBD_HID_Setup+0x1c2>
				hhid->AltSetting = (uint8_t) (req->wValue);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	885b      	ldrh	r3, [r3, #2]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	001a      	movs	r2, r3
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	609a      	str	r2, [r3, #8]
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8005a08:	e015      	b.n	8005a36 <USBD_HID_Setup+0x1ee>
				USBD_CtlError(pdev, req);
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	0011      	movs	r1, r2
 8005a10:	0018      	movs	r0, r3
 8005a12:	f001 f995 	bl	8006d40 <USBD_CtlError>
				ret = USBD_FAIL;
 8005a16:	2317      	movs	r3, #23
 8005a18:	18fb      	adds	r3, r7, r3
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	701a      	strb	r2, [r3, #0]
			break;
 8005a1e:	e00a      	b.n	8005a36 <USBD_HID_Setup+0x1ee>

		default:
			USBD_CtlError(pdev, req);
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0011      	movs	r1, r2
 8005a26:	0018      	movs	r0, r3
 8005a28:	f001 f98a 	bl	8006d40 <USBD_CtlError>
			ret = USBD_FAIL;
 8005a2c:	2317      	movs	r3, #23
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	2202      	movs	r2, #2
 8005a32:	701a      	strb	r2, [r3, #0]
			break;
 8005a34:	46c0      	nop			; (mov r8, r8)
		}
		break;
 8005a36:	e00a      	b.n	8005a4e <USBD_HID_Setup+0x206>

	default:
		USBD_CtlError(pdev, req);
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	0011      	movs	r1, r2
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f001 f97e 	bl	8006d40 <USBD_CtlError>
		ret = USBD_FAIL;
 8005a44:	2317      	movs	r3, #23
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	2202      	movs	r2, #2
 8005a4a:	701a      	strb	r2, [r3, #0]
		break;
 8005a4c:	46c0      	nop			; (mov r8, r8)
	}

	return ret;
 8005a4e:	2317      	movs	r3, #23
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	781b      	ldrb	r3, [r3, #0]
}
 8005a54:	0018      	movs	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b008      	add	sp, #32
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	200000c8 	.word	0x200000c8
 8005a60:	200000b0 	.word	0x200000b0

08005a64 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report,
		uint16_t len) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	1dbb      	adds	r3, r7, #6
 8005a70:	801a      	strh	r2, [r3, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	23ae      	movs	r3, #174	; 0xae
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	58d3      	ldr	r3, [r2, r3]
 8005a7a:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	23a7      	movs	r3, #167	; 0xa7
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	5cd3      	ldrb	r3, [r2, r3]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d10d      	bne.n	8005aa4 <USBD_HID_SendReport+0x40>
		if (hhid->state == HID_IDLE) {
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	7b1b      	ldrb	r3, [r3, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <USBD_HID_SendReport+0x40>
			hhid->state = HID_BUSY;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2201      	movs	r2, #1
 8005a94:	731a      	strb	r2, [r3, #12]
			USBD_LL_Transmit(pdev,
 8005a96:	1dbb      	adds	r3, r7, #6
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	2181      	movs	r1, #129	; 0x81
 8005aa0:	f001 fdfb 	bl	800769a <USBD_LL_Transmit>
			HID_EPIN_ADDR, report, len);
		}
	}
	return USBD_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b006      	add	sp, #24
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <USBD_HID_GetFSCfgDesc>:
 *         return FS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetFSCfgDesc(uint16_t *length) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgFSDesc);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2222      	movs	r2, #34	; 0x22
 8005abc:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgFSDesc;
 8005abe:	4b02      	ldr	r3, [pc, #8]	; (8005ac8 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b002      	add	sp, #8
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000044 	.word	0x20000044

08005acc <USBD_HID_GetHSCfgDesc>:
 *         return HS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetHSCfgDesc(uint16_t *length) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgHSDesc);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2222      	movs	r2, #34	; 0x22
 8005ad8:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgHSDesc;
 8005ada:	4b02      	ldr	r3, [pc, #8]	; (8005ae4 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005adc:	0018      	movs	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b002      	add	sp, #8
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20000068 	.word	0x20000068

08005ae8 <USBD_HID_GetOtherSpeedCfgDesc>:
 *         return other speed configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2222      	movs	r2, #34	; 0x22
 8005af4:	801a      	strh	r2, [r3, #0]
	return USBD_HID_OtherSpeedCfgDesc;
 8005af6:	4b02      	ldr	r3, [pc, #8]	; (8005b00 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b002      	add	sp, #8
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	2000008c 	.word	0x2000008c

08005b04 <USBD_HID_DataIn>:
 *         handle data IN Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	000a      	movs	r2, r1
 8005b0e:	1cfb      	adds	r3, r7, #3
 8005b10:	701a      	strb	r2, [r3, #0]

	/* Ensure that the FIFO is empty before a new transfer, this condition could
	 be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	23ae      	movs	r3, #174	; 0xae
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	58d3      	ldr	r3, [r2, r3]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	731a      	strb	r2, [r3, #12]
	return USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b002      	add	sp, #8
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_HID_GetDeviceQualifierDesc>:
 * @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetDeviceQualifierDesc(uint16_t *length) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	220a      	movs	r2, #10
 8005b34:	801a      	strh	r2, [r3, #0]
	return USBD_HID_DeviceQualifierDesc;
 8005b36:	4b02      	ldr	r3, [pc, #8]	; (8005b40 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b002      	add	sp, #8
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	200000bc 	.word	0x200000bc

08005b44 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	1dfb      	adds	r3, r7, #7
 8005b50:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e020      	b.n	8005b9e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	23ad      	movs	r3, #173	; 0xad
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	58d3      	ldr	r3, [r2, r3]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	23ad      	movs	r3, #173	; 0xad
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	2100      	movs	r1, #0
 8005b70:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	23ac      	movs	r3, #172	; 0xac
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	23a7      	movs	r3, #167	; 0xa7
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	2101      	movs	r1, #1
 8005b8a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1dfa      	adds	r2, r7, #7
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f001 fbf6 	bl	8007388 <USBD_LL_Init>

  return USBD_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b004      	add	sp, #16
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005bb0:	200f      	movs	r0, #15
 8005bb2:	183b      	adds	r3, r7, r0
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	23ad      	movs	r3, #173	; 0xad
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005bc8:	183b      	adds	r3, r7, r0
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e003      	b.n	8005bd8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005bd0:	230f      	movs	r3, #15
 8005bd2:	18fb      	adds	r3, r7, r3
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005bd8:	230f      	movs	r3, #15
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	781b      	ldrb	r3, [r3, #0]
}
 8005bde:	0018      	movs	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b004      	add	sp, #16
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f001 fc19 	bl	8007428 <USBD_LL_Start>

  return USBD_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b002      	add	sp, #8
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b002      	add	sp, #8
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c12:	b590      	push	{r4, r7, lr}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	000a      	movs	r2, r1
 8005c1c:	1cfb      	adds	r3, r7, #3
 8005c1e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c20:	240f      	movs	r4, #15
 8005c22:	193b      	adds	r3, r7, r4
 8005c24:	2202      	movs	r2, #2
 8005c26:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	23ad      	movs	r3, #173	; 0xad
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	58d3      	ldr	r3, [r2, r3]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00e      	beq.n	8005c52 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	23ad      	movs	r3, #173	; 0xad
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	58d3      	ldr	r3, [r2, r3]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	1cfa      	adds	r2, r7, #3
 8005c40:	7811      	ldrb	r1, [r2, #0]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	0010      	movs	r0, r2
 8005c46:	4798      	blx	r3
 8005c48:	1e03      	subs	r3, r0, #0
 8005c4a:	d102      	bne.n	8005c52 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005c4c:	193b      	adds	r3, r7, r4
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005c52:	230f      	movs	r3, #15
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	781b      	ldrb	r3, [r3, #0]
}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b005      	add	sp, #20
 8005c5e:	bd90      	pop	{r4, r7, pc}

08005c60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	000a      	movs	r2, r1
 8005c6a:	1cfb      	adds	r3, r7, #3
 8005c6c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	23ad      	movs	r3, #173	; 0xad
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	58d3      	ldr	r3, [r2, r3]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	1cfa      	adds	r2, r7, #3
 8005c7a:	7811      	ldrb	r1, [r2, #0]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	0010      	movs	r0, r2
 8005c80:	4798      	blx	r3

  return USBD_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	0018      	movs	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b002      	add	sp, #8
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	22aa      	movs	r2, #170	; 0xaa
 8005c9a:	0092      	lsls	r2, r2, #2
 8005c9c:	4694      	mov	ip, r2
 8005c9e:	4463      	add	r3, ip
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	0011      	movs	r1, r2
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f001 f810 	bl	8006cca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	23a5      	movs	r3, #165	; 0xa5
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a23      	ldr	r2, [pc, #140]	; (8005d44 <USBD_LL_SetupStage+0xb8>)
 8005cb8:	5a9b      	ldrh	r3, [r3, r2]
 8005cba:	0019      	movs	r1, r3
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	23a6      	movs	r3, #166	; 0xa6
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	23aa      	movs	r3, #170	; 0xaa
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	5cd3      	ldrb	r3, [r2, r3]
 8005ccc:	001a      	movs	r2, r3
 8005cce:	231f      	movs	r3, #31
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d019      	beq.n	8005d0a <USBD_LL_SetupStage+0x7e>
 8005cd6:	d822      	bhi.n	8005d1e <USBD_LL_SetupStage+0x92>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <USBD_LL_SetupStage+0x56>
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d00a      	beq.n	8005cf6 <USBD_LL_SetupStage+0x6a>
 8005ce0:	e01d      	b.n	8005d1e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	22aa      	movs	r2, #170	; 0xaa
 8005ce6:	0092      	lsls	r2, r2, #2
 8005ce8:	189a      	adds	r2, r3, r2
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0011      	movs	r1, r2
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f000 fa10 	bl	8006114 <USBD_StdDevReq>
      break;
 8005cf4:	e020      	b.n	8005d38 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	22aa      	movs	r2, #170	; 0xaa
 8005cfa:	0092      	lsls	r2, r2, #2
 8005cfc:	189a      	adds	r2, r3, r2
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	0011      	movs	r1, r2
 8005d02:	0018      	movs	r0, r3
 8005d04:	f000 fa78 	bl	80061f8 <USBD_StdItfReq>
      break;
 8005d08:	e016      	b.n	8005d38 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	22aa      	movs	r2, #170	; 0xaa
 8005d0e:	0092      	lsls	r2, r2, #2
 8005d10:	189a      	adds	r2, r3, r2
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	0011      	movs	r1, r2
 8005d16:	0018      	movs	r0, r3
 8005d18:	f000 fac5 	bl	80062a6 <USBD_StdEPReq>
      break;
 8005d1c:	e00c      	b.n	8005d38 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	23aa      	movs	r3, #170	; 0xaa
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	5cd3      	ldrb	r3, [r2, r3]
 8005d26:	227f      	movs	r2, #127	; 0x7f
 8005d28:	4393      	bics	r3, r2
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	0011      	movs	r1, r2
 8005d30:	0018      	movs	r0, r3
 8005d32:	f001 fc00 	bl	8007536 <USBD_LL_StallEP>
      break;
 8005d36:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b002      	add	sp, #8
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	000002ae 	.word	0x000002ae

08005d48 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	200b      	movs	r0, #11
 8005d54:	183b      	adds	r3, r7, r0
 8005d56:	1c0a      	adds	r2, r1, #0
 8005d58:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d5a:	183b      	adds	r3, r7, r0
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d154      	bne.n	8005e0c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3355      	adds	r3, #85	; 0x55
 8005d66:	33ff      	adds	r3, #255	; 0xff
 8005d68:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	23a5      	movs	r3, #165	; 0xa5
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	58d3      	ldr	r3, [r2, r3]
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d139      	bne.n	8005dea <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d919      	bls.n	8005db6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	1ad2      	subs	r2, r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d203      	bcs.n	8005da4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	e002      	b.n	8005daa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	001a      	movs	r2, r3
 8005db0:	f001 f877 	bl	8006ea2 <USBD_CtlContinueRx>
 8005db4:	e045      	b.n	8005e42 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	23ad      	movs	r3, #173	; 0xad
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	58d3      	ldr	r3, [r2, r3]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00d      	beq.n	8005de0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	23a7      	movs	r3, #167	; 0xa7
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d107      	bne.n	8005de0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	23ad      	movs	r3, #173	; 0xad
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	58d3      	ldr	r3, [r2, r3]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	0010      	movs	r0, r2
 8005dde:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f001 f870 	bl	8006ec8 <USBD_CtlSendStatus>
 8005de8:	e02b      	b.n	8005e42 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	23a5      	movs	r3, #165	; 0xa5
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	58d3      	ldr	r3, [r2, r3]
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	d125      	bne.n	8005e42 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	23a5      	movs	r3, #165	; 0xa5
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2100      	movs	r1, #0
 8005e04:	0018      	movs	r0, r3
 8005e06:	f001 fb96 	bl	8007536 <USBD_LL_StallEP>
 8005e0a:	e01a      	b.n	8005e42 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	23ad      	movs	r3, #173	; 0xad
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	58d3      	ldr	r3, [r2, r3]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d011      	beq.n	8005e3e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	23a7      	movs	r3, #167	; 0xa7
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d10b      	bne.n	8005e3e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	23ad      	movs	r3, #173	; 0xad
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	58d3      	ldr	r3, [r2, r3]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	220b      	movs	r2, #11
 8005e32:	18ba      	adds	r2, r7, r2
 8005e34:	7811      	ldrb	r1, [r2, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	0010      	movs	r0, r2
 8005e3a:	4798      	blx	r3
 8005e3c:	e001      	b.n	8005e42 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e000      	b.n	8005e44 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b006      	add	sp, #24
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	200b      	movs	r0, #11
 8005e58:	183b      	adds	r3, r7, r0
 8005e5a:	1c0a      	adds	r2, r1, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e5e:	183b      	adds	r3, r7, r0
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d000      	beq.n	8005e68 <USBD_LL_DataInStage+0x1c>
 8005e66:	e08e      	b.n	8005f86 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3314      	adds	r3, #20
 8005e6c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	23a5      	movs	r3, #165	; 0xa5
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	58d3      	ldr	r3, [r2, r3]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d164      	bne.n	8005f44 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d915      	bls.n	8005eb2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 ffec 	bl	8006e7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2100      	movs	r1, #0
 8005eac:	f001 fc2c 	bl	8007708 <USBD_LL_PrepareReceive>
 8005eb0:	e059      	b.n	8005f66 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	0019      	movs	r1, r3
 8005ebc:	0010      	movs	r0, r2
 8005ebe:	f7fa f9a9 	bl	8000214 <__aeabi_uidivmod>
 8005ec2:	1e0b      	subs	r3, r1, #0
 8005ec4:	d11f      	bne.n	8005f06 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d319      	bcc.n	8005f06 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	23a6      	movs	r3, #166	; 0xa6
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d211      	bcs.n	8005f06 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f000 ffc7 	bl	8006e7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	23a6      	movs	r3, #166	; 0xa6
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	2300      	movs	r3, #0
 8005efc:	2200      	movs	r2, #0
 8005efe:	2100      	movs	r1, #0
 8005f00:	f001 fc02 	bl	8007708 <USBD_LL_PrepareReceive>
 8005f04:	e02f      	b.n	8005f66 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	23ad      	movs	r3, #173	; 0xad
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	58d3      	ldr	r3, [r2, r3]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00d      	beq.n	8005f30 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	23a7      	movs	r3, #167	; 0xa7
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d107      	bne.n	8005f30 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	23ad      	movs	r3, #173	; 0xad
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	58d3      	ldr	r3, [r2, r3]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	0010      	movs	r0, r2
 8005f2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	0018      	movs	r0, r3
 8005f36:	f001 fafe 	bl	8007536 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f000 ffd7 	bl	8006ef0 <USBD_CtlReceiveStatus>
 8005f42:	e010      	b.n	8005f66 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	23a5      	movs	r3, #165	; 0xa5
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	58d3      	ldr	r3, [r2, r3]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d005      	beq.n	8005f5c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	23a5      	movs	r3, #165	; 0xa5
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2180      	movs	r1, #128	; 0x80
 8005f60:	0018      	movs	r0, r3
 8005f62:	f001 fae8 	bl	8007536 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	23a8      	movs	r3, #168	; 0xa8
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	5cd3      	ldrb	r3, [r2, r3]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d124      	bne.n	8005fbc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f7ff fe43 	bl	8005c00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	23a8      	movs	r3, #168	; 0xa8
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	2100      	movs	r1, #0
 8005f82:	54d1      	strb	r1, [r2, r3]
 8005f84:	e01a      	b.n	8005fbc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	23ad      	movs	r3, #173	; 0xad
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	58d3      	ldr	r3, [r2, r3]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d011      	beq.n	8005fb8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	23a7      	movs	r3, #167	; 0xa7
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d10b      	bne.n	8005fb8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	23ad      	movs	r3, #173	; 0xad
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	58d3      	ldr	r3, [r2, r3]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	220b      	movs	r2, #11
 8005fac:	18ba      	adds	r2, r7, r2
 8005fae:	7811      	ldrb	r1, [r2, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	0010      	movs	r0, r2
 8005fb4:	4798      	blx	r3
 8005fb6:	e001      	b.n	8005fbc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e000      	b.n	8005fbe <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b006      	add	sp, #24
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	f001 fa4c 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	23ac      	movs	r3, #172	; 0xac
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	23b2      	movs	r3, #178	; 0xb2
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	2140      	movs	r1, #64	; 0x40
 8005fec:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	2340      	movs	r3, #64	; 0x40
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2180      	movs	r1, #128	; 0x80
 8005ff6:	f001 fa3c 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2240      	movs	r2, #64	; 0x40
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	23a7      	movs	r3, #167	; 0xa7
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	2101      	movs	r1, #1
 800600e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	23a5      	movs	r3, #165	; 0xa5
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	2100      	movs	r1, #0
 8006018:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	23a9      	movs	r3, #169	; 0xa9
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	2100      	movs	r1, #0
 8006028:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	23ae      	movs	r3, #174	; 0xae
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	58d3      	ldr	r3, [r2, r3]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	23ad      	movs	r3, #173	; 0xad
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	58d3      	ldr	r3, [r2, r3]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	b2d9      	uxtb	r1, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	4790      	blx	r2
  }

  return USBD_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	0018      	movs	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	b002      	add	sp, #8
 8006054:	bd80      	pop	{r7, pc}

08006056 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	000a      	movs	r2, r1
 8006060:	1cfb      	adds	r3, r7, #3
 8006062:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	1cfa      	adds	r2, r7, #3
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	0018      	movs	r0, r3
 8006070:	46bd      	mov	sp, r7
 8006072:	b002      	add	sp, #8
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	23a7      	movs	r3, #167	; 0xa7
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	5cd1      	ldrb	r1, [r2, r3]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a06      	ldr	r2, [pc, #24]	; (80060a4 <USBD_LL_Suspend+0x2c>)
 800608c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	23a7      	movs	r3, #167	; 0xa7
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	2104      	movs	r1, #4
 8006096:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	0018      	movs	r0, r3
 800609c:	46bd      	mov	sp, r7
 800609e:	b002      	add	sp, #8
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	0000029d 	.word	0x0000029d

080060a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	23a7      	movs	r3, #167	; 0xa7
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	5cd3      	ldrb	r3, [r2, r3]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d106      	bne.n	80060ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a05      	ldr	r2, [pc, #20]	; (80060d4 <USBD_LL_Resume+0x2c>)
 80060c0:	5c99      	ldrb	r1, [r3, r2]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	23a7      	movs	r3, #167	; 0xa7
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	0018      	movs	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b002      	add	sp, #8
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	0000029d 	.word	0x0000029d

080060d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	23a7      	movs	r3, #167	; 0xa7
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	5cd3      	ldrb	r3, [r2, r3]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d10e      	bne.n	800610a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	23ad      	movs	r3, #173	; 0xad
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	58d3      	ldr	r3, [r2, r3]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	23ad      	movs	r3, #173	; 0xad
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	58d3      	ldr	r3, [r2, r3]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	0010      	movs	r0, r2
 8006108:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	0018      	movs	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	b002      	add	sp, #8
 8006112:	bd80      	pop	{r7, pc}

08006114 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800611e:	230f      	movs	r3, #15
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	2200      	movs	r2, #0
 8006124:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	001a      	movs	r2, r3
 800612c:	2360      	movs	r3, #96	; 0x60
 800612e:	4013      	ands	r3, r2
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d004      	beq.n	800613e <USBD_StdDevReq+0x2a>
 8006134:	d84f      	bhi.n	80061d6 <USBD_StdDevReq+0xc2>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <USBD_StdDevReq+0x3e>
 800613a:	2b20      	cmp	r3, #32
 800613c:	d14b      	bne.n	80061d6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	23ad      	movs	r3, #173	; 0xad
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	58d3      	ldr	r3, [r2, r3]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	0010      	movs	r0, r2
 800614e:	4798      	blx	r3
      break;
 8006150:	e048      	b.n	80061e4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b09      	cmp	r3, #9
 8006158:	d835      	bhi.n	80061c6 <USBD_StdDevReq+0xb2>
 800615a:	009a      	lsls	r2, r3, #2
 800615c:	4b25      	ldr	r3, [pc, #148]	; (80061f4 <USBD_StdDevReq+0xe0>)
 800615e:	18d3      	adds	r3, r2, r3
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0011      	movs	r1, r2
 800616a:	0018      	movs	r0, r3
 800616c:	f000 fa52 	bl	8006614 <USBD_GetDescriptor>
          break;
 8006170:	e030      	b.n	80061d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	0011      	movs	r1, r2
 8006178:	0018      	movs	r0, r3
 800617a:	f000 fbfd 	bl	8006978 <USBD_SetAddress>
          break;
 800617e:	e029      	b.n	80061d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	0011      	movs	r1, r2
 8006186:	0018      	movs	r0, r3
 8006188:	f000 fc4a 	bl	8006a20 <USBD_SetConfig>
          break;
 800618c:	e022      	b.n	80061d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	0011      	movs	r1, r2
 8006194:	0018      	movs	r0, r3
 8006196:	f000 fce7 	bl	8006b68 <USBD_GetConfig>
          break;
 800619a:	e01b      	b.n	80061d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	0011      	movs	r1, r2
 80061a2:	0018      	movs	r0, r3
 80061a4:	f000 fd1b 	bl	8006bde <USBD_GetStatus>
          break;
 80061a8:	e014      	b.n	80061d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	0011      	movs	r1, r2
 80061b0:	0018      	movs	r0, r3
 80061b2:	f000 fd4e 	bl	8006c52 <USBD_SetFeature>
          break;
 80061b6:	e00d      	b.n	80061d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	0011      	movs	r1, r2
 80061be:	0018      	movs	r0, r3
 80061c0:	f000 fd5d 	bl	8006c7e <USBD_ClrFeature>
          break;
 80061c4:	e006      	b.n	80061d4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	0011      	movs	r1, r2
 80061cc:	0018      	movs	r0, r3
 80061ce:	f000 fdb7 	bl	8006d40 <USBD_CtlError>
          break;
 80061d2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80061d4:	e006      	b.n	80061e4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	0011      	movs	r1, r2
 80061dc:	0018      	movs	r0, r3
 80061de:	f000 fdaf 	bl	8006d40 <USBD_CtlError>
      break;
 80061e2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80061e4:	230f      	movs	r3, #15
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	781b      	ldrb	r3, [r3, #0]
}
 80061ea:	0018      	movs	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b004      	add	sp, #16
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	080078e4 	.word	0x080078e4

080061f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80061f8:	b5b0      	push	{r4, r5, r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006202:	230f      	movs	r3, #15
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	2200      	movs	r2, #0
 8006208:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	001a      	movs	r2, r3
 8006210:	2360      	movs	r3, #96	; 0x60
 8006212:	4013      	ands	r3, r2
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d004      	beq.n	8006222 <USBD_StdItfReq+0x2a>
 8006218:	d839      	bhi.n	800628e <USBD_StdItfReq+0x96>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <USBD_StdItfReq+0x2a>
 800621e:	2b20      	cmp	r3, #32
 8006220:	d135      	bne.n	800628e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	23a7      	movs	r3, #167	; 0xa7
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	5cd3      	ldrb	r3, [r2, r3]
 800622a:	3b01      	subs	r3, #1
 800622c:	2b02      	cmp	r3, #2
 800622e:	d825      	bhi.n	800627c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	889b      	ldrh	r3, [r3, #4]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b01      	cmp	r3, #1
 8006238:	d819      	bhi.n	800626e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	23ad      	movs	r3, #173	; 0xad
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	58d3      	ldr	r3, [r2, r3]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	250f      	movs	r5, #15
 8006246:	197c      	adds	r4, r7, r5
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	0010      	movs	r0, r2
 800624e:	4798      	blx	r3
 8006250:	0003      	movs	r3, r0
 8006252:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	88db      	ldrh	r3, [r3, #6]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d116      	bne.n	800628a <USBD_StdItfReq+0x92>
 800625c:	197b      	adds	r3, r7, r5
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d112      	bne.n	800628a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	0018      	movs	r0, r3
 8006268:	f000 fe2e 	bl	8006ec8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800626c:	e00d      	b.n	800628a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	0011      	movs	r1, r2
 8006274:	0018      	movs	r0, r3
 8006276:	f000 fd63 	bl	8006d40 <USBD_CtlError>
          break;
 800627a:	e006      	b.n	800628a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	0011      	movs	r1, r2
 8006282:	0018      	movs	r0, r3
 8006284:	f000 fd5c 	bl	8006d40 <USBD_CtlError>
          break;
 8006288:	e000      	b.n	800628c <USBD_StdItfReq+0x94>
          break;
 800628a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800628c:	e006      	b.n	800629c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	0011      	movs	r1, r2
 8006294:	0018      	movs	r0, r3
 8006296:	f000 fd53 	bl	8006d40 <USBD_CtlError>
      break;
 800629a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	0018      	movs	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b004      	add	sp, #16
 80062a4:	bdb0      	pop	{r4, r5, r7, pc}

080062a6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80062a6:	b5b0      	push	{r4, r5, r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062b0:	230f      	movs	r3, #15
 80062b2:	18fb      	adds	r3, r7, r3
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	889a      	ldrh	r2, [r3, #4]
 80062bc:	230e      	movs	r3, #14
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	001a      	movs	r2, r3
 80062c8:	2360      	movs	r3, #96	; 0x60
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d006      	beq.n	80062de <USBD_StdEPReq+0x38>
 80062d0:	d900      	bls.n	80062d4 <USBD_StdEPReq+0x2e>
 80062d2:	e190      	b.n	80065f6 <USBD_StdEPReq+0x350>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00c      	beq.n	80062f2 <USBD_StdEPReq+0x4c>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d000      	beq.n	80062de <USBD_StdEPReq+0x38>
 80062dc:	e18b      	b.n	80065f6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	23ad      	movs	r3, #173	; 0xad
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	58d3      	ldr	r3, [r2, r3]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	0010      	movs	r0, r2
 80062ee:	4798      	blx	r3
      break;
 80062f0:	e188      	b.n	8006604 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	001a      	movs	r2, r3
 80062f8:	2360      	movs	r3, #96	; 0x60
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d10f      	bne.n	8006320 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	23ad      	movs	r3, #173	; 0xad
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	58d3      	ldr	r3, [r2, r3]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	250f      	movs	r5, #15
 800630c:	197c      	adds	r4, r7, r5
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	0010      	movs	r0, r2
 8006314:	4798      	blx	r3
 8006316:	0003      	movs	r3, r0
 8006318:	7023      	strb	r3, [r4, #0]

        return ret;
 800631a:	197b      	adds	r3, r7, r5
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	e174      	b.n	800660a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b03      	cmp	r3, #3
 8006326:	d007      	beq.n	8006338 <USBD_StdEPReq+0x92>
 8006328:	dd00      	ble.n	800632c <USBD_StdEPReq+0x86>
 800632a:	e15c      	b.n	80065e6 <USBD_StdEPReq+0x340>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d100      	bne.n	8006332 <USBD_StdEPReq+0x8c>
 8006330:	e092      	b.n	8006458 <USBD_StdEPReq+0x1b2>
 8006332:	2b01      	cmp	r3, #1
 8006334:	d04b      	beq.n	80063ce <USBD_StdEPReq+0x128>
 8006336:	e156      	b.n	80065e6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	23a7      	movs	r3, #167	; 0xa7
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	5cd3      	ldrb	r3, [r2, r3]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d002      	beq.n	800634a <USBD_StdEPReq+0xa4>
 8006344:	2b03      	cmp	r3, #3
 8006346:	d01d      	beq.n	8006384 <USBD_StdEPReq+0xde>
 8006348:	e039      	b.n	80063be <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800634a:	220e      	movs	r2, #14
 800634c:	18bb      	adds	r3, r7, r2
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d010      	beq.n	8006376 <USBD_StdEPReq+0xd0>
 8006354:	18bb      	adds	r3, r7, r2
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b80      	cmp	r3, #128	; 0x80
 800635a:	d00c      	beq.n	8006376 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800635c:	18bb      	adds	r3, r7, r2
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	0011      	movs	r1, r2
 8006364:	0018      	movs	r0, r3
 8006366:	f001 f8e6 	bl	8007536 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2180      	movs	r1, #128	; 0x80
 800636e:	0018      	movs	r0, r3
 8006370:	f001 f8e1 	bl	8007536 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006374:	e02a      	b.n	80063cc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	0011      	movs	r1, r2
 800637c:	0018      	movs	r0, r3
 800637e:	f000 fcdf 	bl	8006d40 <USBD_CtlError>
              break;
 8006382:	e023      	b.n	80063cc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	885b      	ldrh	r3, [r3, #2]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d113      	bne.n	80063b4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800638c:	220e      	movs	r2, #14
 800638e:	18bb      	adds	r3, r7, r2
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00e      	beq.n	80063b4 <USBD_StdEPReq+0x10e>
 8006396:	18bb      	adds	r3, r7, r2
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b80      	cmp	r3, #128	; 0x80
 800639c:	d00a      	beq.n	80063b4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	88db      	ldrh	r3, [r3, #6]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80063a6:	18bb      	adds	r3, r7, r2
 80063a8:	781a      	ldrb	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	0011      	movs	r1, r2
 80063ae:	0018      	movs	r0, r3
 80063b0:	f001 f8c1 	bl	8007536 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	0018      	movs	r0, r3
 80063b8:	f000 fd86 	bl	8006ec8 <USBD_CtlSendStatus>

              break;
 80063bc:	e006      	b.n	80063cc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f000 fcbb 	bl	8006d40 <USBD_CtlError>
              break;
 80063ca:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80063cc:	e112      	b.n	80065f4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	23a7      	movs	r3, #167	; 0xa7
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	5cd3      	ldrb	r3, [r2, r3]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d002      	beq.n	80063e0 <USBD_StdEPReq+0x13a>
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d01d      	beq.n	800641a <USBD_StdEPReq+0x174>
 80063de:	e032      	b.n	8006446 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063e0:	220e      	movs	r2, #14
 80063e2:	18bb      	adds	r3, r7, r2
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d010      	beq.n	800640c <USBD_StdEPReq+0x166>
 80063ea:	18bb      	adds	r3, r7, r2
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b80      	cmp	r3, #128	; 0x80
 80063f0:	d00c      	beq.n	800640c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063f2:	18bb      	adds	r3, r7, r2
 80063f4:	781a      	ldrb	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	0011      	movs	r1, r2
 80063fa:	0018      	movs	r0, r3
 80063fc:	f001 f89b 	bl	8007536 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2180      	movs	r1, #128	; 0x80
 8006404:	0018      	movs	r0, r3
 8006406:	f001 f896 	bl	8007536 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800640a:	e024      	b.n	8006456 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	0011      	movs	r1, r2
 8006412:	0018      	movs	r0, r3
 8006414:	f000 fc94 	bl	8006d40 <USBD_CtlError>
              break;
 8006418:	e01d      	b.n	8006456 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	885b      	ldrh	r3, [r3, #2]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d118      	bne.n	8006454 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006422:	210e      	movs	r1, #14
 8006424:	187b      	adds	r3, r7, r1
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	227f      	movs	r2, #127	; 0x7f
 800642a:	4013      	ands	r3, r2
 800642c:	d006      	beq.n	800643c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800642e:	187b      	adds	r3, r7, r1
 8006430:	781a      	ldrb	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	0011      	movs	r1, r2
 8006436:	0018      	movs	r0, r3
 8006438:	f001 f8a8 	bl	800758c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	0018      	movs	r0, r3
 8006440:	f000 fd42 	bl	8006ec8 <USBD_CtlSendStatus>
              }
              break;
 8006444:	e006      	b.n	8006454 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	0011      	movs	r1, r2
 800644c:	0018      	movs	r0, r3
 800644e:	f000 fc77 	bl	8006d40 <USBD_CtlError>
              break;
 8006452:	e000      	b.n	8006456 <USBD_StdEPReq+0x1b0>
              break;
 8006454:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006456:	e0cd      	b.n	80065f4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	23a7      	movs	r3, #167	; 0xa7
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	5cd3      	ldrb	r3, [r2, r3]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d002      	beq.n	800646a <USBD_StdEPReq+0x1c4>
 8006464:	2b03      	cmp	r3, #3
 8006466:	d03c      	beq.n	80064e2 <USBD_StdEPReq+0x23c>
 8006468:	e0b5      	b.n	80065d6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800646a:	220e      	movs	r2, #14
 800646c:	18bb      	adds	r3, r7, r2
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <USBD_StdEPReq+0x1e4>
 8006474:	18bb      	adds	r3, r7, r2
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	d006      	beq.n	800648a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	0011      	movs	r1, r2
 8006482:	0018      	movs	r0, r3
 8006484:	f000 fc5c 	bl	8006d40 <USBD_CtlError>
                break;
 8006488:	e0ac      	b.n	80065e4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800648a:	220e      	movs	r2, #14
 800648c:	18bb      	adds	r3, r7, r2
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	b25b      	sxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	da0c      	bge.n	80064b0 <USBD_StdEPReq+0x20a>
 8006496:	18bb      	adds	r3, r7, r2
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	227f      	movs	r2, #127	; 0x7f
 800649c:	401a      	ands	r2, r3
 800649e:	0013      	movs	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	189b      	adds	r3, r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	3310      	adds	r3, #16
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	18d3      	adds	r3, r2, r3
 80064ac:	3304      	adds	r3, #4
 80064ae:	e00d      	b.n	80064cc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064b0:	230e      	movs	r3, #14
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	227f      	movs	r2, #127	; 0x7f
 80064b8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ba:	0013      	movs	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	189b      	adds	r3, r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	3351      	adds	r3, #81	; 0x51
 80064c4:	33ff      	adds	r3, #255	; 0xff
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	18d3      	adds	r3, r2, r3
 80064ca:	3304      	adds	r3, #4
 80064cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	0018      	movs	r0, r3
 80064dc:	f000 fcae 	bl	8006e3c <USBD_CtlSendData>
              break;
 80064e0:	e080      	b.n	80065e4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064e2:	220e      	movs	r2, #14
 80064e4:	18bb      	adds	r3, r7, r2
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da14      	bge.n	8006518 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064ee:	18bb      	adds	r3, r7, r2
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	220f      	movs	r2, #15
 80064f4:	401a      	ands	r2, r3
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	0013      	movs	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	189b      	adds	r3, r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	18cb      	adds	r3, r1, r3
 8006502:	3318      	adds	r3, #24
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d11e      	bne.n	8006548 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0011      	movs	r1, r2
 8006510:	0018      	movs	r0, r3
 8006512:	f000 fc15 	bl	8006d40 <USBD_CtlError>
                  break;
 8006516:	e065      	b.n	80065e4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006518:	230e      	movs	r3, #14
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	220f      	movs	r2, #15
 8006520:	401a      	ands	r2, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	23ac      	movs	r3, #172	; 0xac
 8006526:	0059      	lsls	r1, r3, #1
 8006528:	0013      	movs	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	189b      	adds	r3, r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	18c3      	adds	r3, r0, r3
 8006532:	185b      	adds	r3, r3, r1
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	0011      	movs	r1, r2
 8006540:	0018      	movs	r0, r3
 8006542:	f000 fbfd 	bl	8006d40 <USBD_CtlError>
                  break;
 8006546:	e04d      	b.n	80065e4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006548:	220e      	movs	r2, #14
 800654a:	18bb      	adds	r3, r7, r2
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	b25b      	sxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	da0c      	bge.n	800656e <USBD_StdEPReq+0x2c8>
 8006554:	18bb      	adds	r3, r7, r2
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	227f      	movs	r2, #127	; 0x7f
 800655a:	401a      	ands	r2, r3
 800655c:	0013      	movs	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	189b      	adds	r3, r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	3310      	adds	r3, #16
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	18d3      	adds	r3, r2, r3
 800656a:	3304      	adds	r3, #4
 800656c:	e00d      	b.n	800658a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800656e:	230e      	movs	r3, #14
 8006570:	18fb      	adds	r3, r7, r3
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	227f      	movs	r2, #127	; 0x7f
 8006576:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006578:	0013      	movs	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	189b      	adds	r3, r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	3351      	adds	r3, #81	; 0x51
 8006582:	33ff      	adds	r3, #255	; 0xff
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	18d3      	adds	r3, r2, r3
 8006588:	3304      	adds	r3, #4
 800658a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800658c:	220e      	movs	r2, #14
 800658e:	18bb      	adds	r3, r7, r2
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <USBD_StdEPReq+0x2f8>
 8006596:	18bb      	adds	r3, r7, r2
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b80      	cmp	r3, #128	; 0x80
 800659c:	d103      	bne.n	80065a6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e010      	b.n	80065c8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80065a6:	230e      	movs	r3, #14
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	0011      	movs	r1, r2
 80065b0:	0018      	movs	r0, r3
 80065b2:	f001 f816 	bl	80075e2 <USBD_LL_IsStallEP>
 80065b6:	1e03      	subs	r3, r0, #0
 80065b8:	d003      	beq.n	80065c2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2201      	movs	r2, #1
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	e002      	b.n	80065c8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065c8:	68b9      	ldr	r1, [r7, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	0018      	movs	r0, r3
 80065d0:	f000 fc34 	bl	8006e3c <USBD_CtlSendData>
              break;
 80065d4:	e006      	b.n	80065e4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	0011      	movs	r1, r2
 80065dc:	0018      	movs	r0, r3
 80065de:	f000 fbaf 	bl	8006d40 <USBD_CtlError>
              break;
 80065e2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80065e4:	e006      	b.n	80065f4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	0011      	movs	r1, r2
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fba7 	bl	8006d40 <USBD_CtlError>
          break;
 80065f2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80065f4:	e006      	b.n	8006604 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	0011      	movs	r1, r2
 80065fc:	0018      	movs	r0, r3
 80065fe:	f000 fb9f 	bl	8006d40 <USBD_CtlError>
      break;
 8006602:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006604:	230f      	movs	r3, #15
 8006606:	18fb      	adds	r3, r7, r3
 8006608:	781b      	ldrb	r3, [r3, #0]
}
 800660a:	0018      	movs	r0, r3
 800660c:	46bd      	mov	sp, r7
 800660e:	b004      	add	sp, #16
 8006610:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006614 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800661e:	2308      	movs	r3, #8
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	2200      	movs	r2, #0
 8006624:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800662a:	230b      	movs	r3, #11
 800662c:	18fb      	adds	r3, r7, r3
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	0a1b      	lsrs	r3, r3, #8
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b07      	cmp	r3, #7
 800663c:	d900      	bls.n	8006640 <USBD_GetDescriptor+0x2c>
 800663e:	e159      	b.n	80068f4 <USBD_GetDescriptor+0x2e0>
 8006640:	009a      	lsls	r2, r3, #2
 8006642:	4bcb      	ldr	r3, [pc, #812]	; (8006970 <USBD_GetDescriptor+0x35c>)
 8006644:	18d3      	adds	r3, r2, r3
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	23ac      	movs	r3, #172	; 0xac
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	58d3      	ldr	r3, [r2, r3]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	7c12      	ldrb	r2, [r2, #16]
 8006658:	2108      	movs	r1, #8
 800665a:	1879      	adds	r1, r7, r1
 800665c:	0010      	movs	r0, r2
 800665e:	4798      	blx	r3
 8006660:	0003      	movs	r3, r0
 8006662:	60fb      	str	r3, [r7, #12]
      break;
 8006664:	e153      	b.n	800690e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	7c1b      	ldrb	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10f      	bne.n	800668e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	23ad      	movs	r3, #173	; 0xad
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	58d3      	ldr	r3, [r2, r3]
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	2208      	movs	r2, #8
 800667a:	18ba      	adds	r2, r7, r2
 800667c:	0010      	movs	r0, r2
 800667e:	4798      	blx	r3
 8006680:	0003      	movs	r3, r0
 8006682:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	2202      	movs	r2, #2
 800668a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800668c:	e13f      	b.n	800690e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	23ad      	movs	r3, #173	; 0xad
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	58d3      	ldr	r3, [r2, r3]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	2208      	movs	r2, #8
 800669a:	18ba      	adds	r2, r7, r2
 800669c:	0010      	movs	r0, r2
 800669e:	4798      	blx	r3
 80066a0:	0003      	movs	r3, r0
 80066a2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3301      	adds	r3, #1
 80066a8:	2202      	movs	r2, #2
 80066aa:	701a      	strb	r2, [r3, #0]
      break;
 80066ac:	e12f      	b.n	800690e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	885b      	ldrh	r3, [r3, #2]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d900      	bls.n	80066ba <USBD_GetDescriptor+0xa6>
 80066b8:	e0d0      	b.n	800685c <USBD_GetDescriptor+0x248>
 80066ba:	009a      	lsls	r2, r3, #2
 80066bc:	4bad      	ldr	r3, [pc, #692]	; (8006974 <USBD_GetDescriptor+0x360>)
 80066be:	18d3      	adds	r3, r2, r3
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	23ac      	movs	r3, #172	; 0xac
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	58d3      	ldr	r3, [r2, r3]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00d      	beq.n	80066ee <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	23ac      	movs	r3, #172	; 0xac
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	58d3      	ldr	r3, [r2, r3]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	7c12      	ldrb	r2, [r2, #16]
 80066e0:	2108      	movs	r1, #8
 80066e2:	1879      	adds	r1, r7, r1
 80066e4:	0010      	movs	r0, r2
 80066e6:	4798      	blx	r3
 80066e8:	0003      	movs	r3, r0
 80066ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ec:	e0c3      	b.n	8006876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	0011      	movs	r1, r2
 80066f4:	0018      	movs	r0, r3
 80066f6:	f000 fb23 	bl	8006d40 <USBD_CtlError>
            err++;
 80066fa:	210b      	movs	r1, #11
 80066fc:	187b      	adds	r3, r7, r1
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	187b      	adds	r3, r7, r1
 8006702:	3201      	adds	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]
          break;
 8006706:	e0b6      	b.n	8006876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	23ac      	movs	r3, #172	; 0xac
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	58d3      	ldr	r3, [r2, r3]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	23ac      	movs	r3, #172	; 0xac
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	58d3      	ldr	r3, [r2, r3]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	7c12      	ldrb	r2, [r2, #16]
 8006724:	2108      	movs	r1, #8
 8006726:	1879      	adds	r1, r7, r1
 8006728:	0010      	movs	r0, r2
 800672a:	4798      	blx	r3
 800672c:	0003      	movs	r3, r0
 800672e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006730:	e0a1      	b.n	8006876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	0011      	movs	r1, r2
 8006738:	0018      	movs	r0, r3
 800673a:	f000 fb01 	bl	8006d40 <USBD_CtlError>
            err++;
 800673e:	210b      	movs	r1, #11
 8006740:	187b      	adds	r3, r7, r1
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	187b      	adds	r3, r7, r1
 8006746:	3201      	adds	r2, #1
 8006748:	701a      	strb	r2, [r3, #0]
          break;
 800674a:	e094      	b.n	8006876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	23ac      	movs	r3, #172	; 0xac
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	58d3      	ldr	r3, [r2, r3]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00d      	beq.n	8006776 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	23ac      	movs	r3, #172	; 0xac
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	58d3      	ldr	r3, [r2, r3]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	7c12      	ldrb	r2, [r2, #16]
 8006768:	2108      	movs	r1, #8
 800676a:	1879      	adds	r1, r7, r1
 800676c:	0010      	movs	r0, r2
 800676e:	4798      	blx	r3
 8006770:	0003      	movs	r3, r0
 8006772:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006774:	e07f      	b.n	8006876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	0011      	movs	r1, r2
 800677c:	0018      	movs	r0, r3
 800677e:	f000 fadf 	bl	8006d40 <USBD_CtlError>
            err++;
 8006782:	210b      	movs	r1, #11
 8006784:	187b      	adds	r3, r7, r1
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	187b      	adds	r3, r7, r1
 800678a:	3201      	adds	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
          break;
 800678e:	e072      	b.n	8006876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	23ac      	movs	r3, #172	; 0xac
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	58d3      	ldr	r3, [r2, r3]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00d      	beq.n	80067ba <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	23ac      	movs	r3, #172	; 0xac
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	58d3      	ldr	r3, [r2, r3]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	7c12      	ldrb	r2, [r2, #16]
 80067ac:	2108      	movs	r1, #8
 80067ae:	1879      	adds	r1, r7, r1
 80067b0:	0010      	movs	r0, r2
 80067b2:	4798      	blx	r3
 80067b4:	0003      	movs	r3, r0
 80067b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067b8:	e05d      	b.n	8006876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0011      	movs	r1, r2
 80067c0:	0018      	movs	r0, r3
 80067c2:	f000 fabd 	bl	8006d40 <USBD_CtlError>
            err++;
 80067c6:	210b      	movs	r1, #11
 80067c8:	187b      	adds	r3, r7, r1
 80067ca:	781a      	ldrb	r2, [r3, #0]
 80067cc:	187b      	adds	r3, r7, r1
 80067ce:	3201      	adds	r2, #1
 80067d0:	701a      	strb	r2, [r3, #0]
          break;
 80067d2:	e050      	b.n	8006876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	23ac      	movs	r3, #172	; 0xac
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	58d3      	ldr	r3, [r2, r3]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00d      	beq.n	80067fe <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	23ac      	movs	r3, #172	; 0xac
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	58d3      	ldr	r3, [r2, r3]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	7c12      	ldrb	r2, [r2, #16]
 80067f0:	2108      	movs	r1, #8
 80067f2:	1879      	adds	r1, r7, r1
 80067f4:	0010      	movs	r0, r2
 80067f6:	4798      	blx	r3
 80067f8:	0003      	movs	r3, r0
 80067fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fc:	e03b      	b.n	8006876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	0011      	movs	r1, r2
 8006804:	0018      	movs	r0, r3
 8006806:	f000 fa9b 	bl	8006d40 <USBD_CtlError>
            err++;
 800680a:	210b      	movs	r1, #11
 800680c:	187b      	adds	r3, r7, r1
 800680e:	781a      	ldrb	r2, [r3, #0]
 8006810:	187b      	adds	r3, r7, r1
 8006812:	3201      	adds	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
          break;
 8006816:	e02e      	b.n	8006876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	23ac      	movs	r3, #172	; 0xac
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	58d3      	ldr	r3, [r2, r3]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00d      	beq.n	8006842 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	23ac      	movs	r3, #172	; 0xac
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	58d3      	ldr	r3, [r2, r3]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7c12      	ldrb	r2, [r2, #16]
 8006834:	2108      	movs	r1, #8
 8006836:	1879      	adds	r1, r7, r1
 8006838:	0010      	movs	r0, r2
 800683a:	4798      	blx	r3
 800683c:	0003      	movs	r3, r0
 800683e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006840:	e019      	b.n	8006876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	0011      	movs	r1, r2
 8006848:	0018      	movs	r0, r3
 800684a:	f000 fa79 	bl	8006d40 <USBD_CtlError>
            err++;
 800684e:	210b      	movs	r1, #11
 8006850:	187b      	adds	r3, r7, r1
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	187b      	adds	r3, r7, r1
 8006856:	3201      	adds	r2, #1
 8006858:	701a      	strb	r2, [r3, #0]
          break;
 800685a:	e00c      	b.n	8006876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	0011      	movs	r1, r2
 8006862:	0018      	movs	r0, r3
 8006864:	f000 fa6c 	bl	8006d40 <USBD_CtlError>
          err++;
 8006868:	210b      	movs	r1, #11
 800686a:	187b      	adds	r3, r7, r1
 800686c:	781a      	ldrb	r2, [r3, #0]
 800686e:	187b      	adds	r3, r7, r1
 8006870:	3201      	adds	r2, #1
 8006872:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006874:	e04b      	b.n	800690e <USBD_GetDescriptor+0x2fa>
 8006876:	e04a      	b.n	800690e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7c1b      	ldrb	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	23ad      	movs	r3, #173	; 0xad
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	58d3      	ldr	r3, [r2, r3]
 8006888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688a:	2208      	movs	r2, #8
 800688c:	18ba      	adds	r2, r7, r2
 800688e:	0010      	movs	r0, r2
 8006890:	4798      	blx	r3
 8006892:	0003      	movs	r3, r0
 8006894:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006896:	e03a      	b.n	800690e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	0011      	movs	r1, r2
 800689e:	0018      	movs	r0, r3
 80068a0:	f000 fa4e 	bl	8006d40 <USBD_CtlError>
        err++;
 80068a4:	210b      	movs	r1, #11
 80068a6:	187b      	adds	r3, r7, r1
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	187b      	adds	r3, r7, r1
 80068ac:	3201      	adds	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
      break;
 80068b0:	e02d      	b.n	800690e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7c1b      	ldrb	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10f      	bne.n	80068da <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	23ad      	movs	r3, #173	; 0xad
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	58d3      	ldr	r3, [r2, r3]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	2208      	movs	r2, #8
 80068c6:	18ba      	adds	r2, r7, r2
 80068c8:	0010      	movs	r0, r2
 80068ca:	4798      	blx	r3
 80068cc:	0003      	movs	r3, r0
 80068ce:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3301      	adds	r3, #1
 80068d4:	2207      	movs	r2, #7
 80068d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068d8:	e019      	b.n	800690e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0011      	movs	r1, r2
 80068e0:	0018      	movs	r0, r3
 80068e2:	f000 fa2d 	bl	8006d40 <USBD_CtlError>
        err++;
 80068e6:	210b      	movs	r1, #11
 80068e8:	187b      	adds	r3, r7, r1
 80068ea:	781a      	ldrb	r2, [r3, #0]
 80068ec:	187b      	adds	r3, r7, r1
 80068ee:	3201      	adds	r2, #1
 80068f0:	701a      	strb	r2, [r3, #0]
      break;
 80068f2:	e00c      	b.n	800690e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	0011      	movs	r1, r2
 80068fa:	0018      	movs	r0, r3
 80068fc:	f000 fa20 	bl	8006d40 <USBD_CtlError>
      err++;
 8006900:	210b      	movs	r1, #11
 8006902:	187b      	adds	r3, r7, r1
 8006904:	781a      	ldrb	r2, [r3, #0]
 8006906:	187b      	adds	r3, r7, r1
 8006908:	3201      	adds	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
      break;
 800690c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800690e:	230b      	movs	r3, #11
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d127      	bne.n	8006968 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006918:	2108      	movs	r1, #8
 800691a:	187b      	adds	r3, r7, r1
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d019      	beq.n	8006956 <USBD_GetDescriptor+0x342>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	88db      	ldrh	r3, [r3, #6]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d015      	beq.n	8006956 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	88da      	ldrh	r2, [r3, #6]
 800692e:	187b      	adds	r3, r7, r1
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	1c18      	adds	r0, r3, #0
 8006934:	1c11      	adds	r1, r2, #0
 8006936:	b28a      	uxth	r2, r1
 8006938:	b283      	uxth	r3, r0
 800693a:	429a      	cmp	r2, r3
 800693c:	d900      	bls.n	8006940 <USBD_GetDescriptor+0x32c>
 800693e:	1c01      	adds	r1, r0, #0
 8006940:	b28a      	uxth	r2, r1
 8006942:	2108      	movs	r1, #8
 8006944:	187b      	adds	r3, r7, r1
 8006946:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006948:	187b      	adds	r3, r7, r1
 800694a:	881a      	ldrh	r2, [r3, #0]
 800694c:	68f9      	ldr	r1, [r7, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0018      	movs	r0, r3
 8006952:	f000 fa73 	bl	8006e3c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	88db      	ldrh	r3, [r3, #6]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d105      	bne.n	800696a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	0018      	movs	r0, r3
 8006962:	f000 fab1 	bl	8006ec8 <USBD_CtlSendStatus>
 8006966:	e000      	b.n	800696a <USBD_GetDescriptor+0x356>
    return;
 8006968:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800696a:	46bd      	mov	sp, r7
 800696c:	b004      	add	sp, #16
 800696e:	bd80      	pop	{r7, pc}
 8006970:	0800790c 	.word	0x0800790c
 8006974:	0800792c 	.word	0x0800792c

08006978 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	889b      	ldrh	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d13d      	bne.n	8006a06 <USBD_SetAddress+0x8e>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d139      	bne.n	8006a06 <USBD_SetAddress+0x8e>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	885b      	ldrh	r3, [r3, #2]
 8006996:	2b7f      	cmp	r3, #127	; 0x7f
 8006998:	d835      	bhi.n	8006a06 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	885b      	ldrh	r3, [r3, #2]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	230f      	movs	r3, #15
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	217f      	movs	r1, #127	; 0x7f
 80069a6:	400a      	ands	r2, r1
 80069a8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	23a7      	movs	r3, #167	; 0xa7
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	5cd3      	ldrb	r3, [r2, r3]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d106      	bne.n	80069c4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0011      	movs	r1, r2
 80069bc:	0018      	movs	r0, r3
 80069be:	f000 f9bf 	bl	8006d40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	e027      	b.n	8006a14 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	240f      	movs	r4, #15
 80069c8:	193a      	adds	r2, r7, r4
 80069ca:	4914      	ldr	r1, [pc, #80]	; (8006a1c <USBD_SetAddress+0xa4>)
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069d0:	193b      	adds	r3, r7, r4
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	0011      	movs	r1, r2
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 fe33 	bl	8007644 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 fa71 	bl	8006ec8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069e6:	193b      	adds	r3, r7, r4
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	23a7      	movs	r3, #167	; 0xa7
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	2102      	movs	r1, #2
 80069f6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f8:	e00c      	b.n	8006a14 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	23a7      	movs	r3, #167	; 0xa7
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	2101      	movs	r1, #1
 8006a02:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a04:	e006      	b.n	8006a14 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	0011      	movs	r1, r2
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f000 f997 	bl	8006d40 <USBD_CtlError>
  }
}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	46c0      	nop			; (mov r8, r8)
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b005      	add	sp, #20
 8006a1a:	bd90      	pop	{r4, r7, pc}
 8006a1c:	0000029e 	.word	0x0000029e

08006a20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	885b      	ldrh	r3, [r3, #2]
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	4b4c      	ldr	r3, [pc, #304]	; (8006b64 <USBD_SetConfig+0x144>)
 8006a32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a34:	4b4b      	ldr	r3, [pc, #300]	; (8006b64 <USBD_SetConfig+0x144>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d906      	bls.n	8006a4a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0011      	movs	r1, r2
 8006a42:	0018      	movs	r0, r3
 8006a44:	f000 f97c 	bl	8006d40 <USBD_CtlError>
 8006a48:	e088      	b.n	8006b5c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	23a7      	movs	r3, #167	; 0xa7
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	5cd3      	ldrb	r3, [r2, r3]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d002      	beq.n	8006a5c <USBD_SetConfig+0x3c>
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d029      	beq.n	8006aae <USBD_SetConfig+0x8e>
 8006a5a:	e071      	b.n	8006b40 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006a5c:	4b41      	ldr	r3, [pc, #260]	; (8006b64 <USBD_SetConfig+0x144>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01f      	beq.n	8006aa4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006a64:	4b3f      	ldr	r3, [pc, #252]	; (8006b64 <USBD_SetConfig+0x144>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	001a      	movs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	23a7      	movs	r3, #167	; 0xa7
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	2103      	movs	r1, #3
 8006a76:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a78:	4b3a      	ldr	r3, [pc, #232]	; (8006b64 <USBD_SetConfig+0x144>)
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	0011      	movs	r1, r2
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7ff f8c6 	bl	8005c12 <USBD_SetClassConfig>
 8006a86:	0003      	movs	r3, r0
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d106      	bne.n	8006a9a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	0011      	movs	r1, r2
 8006a92:	0018      	movs	r0, r3
 8006a94:	f000 f954 	bl	8006d40 <USBD_CtlError>
            return;
 8006a98:	e060      	b.n	8006b5c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f000 fa13 	bl	8006ec8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006aa2:	e05b      	b.n	8006b5c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 fa0e 	bl	8006ec8 <USBD_CtlSendStatus>
        break;
 8006aac:	e056      	b.n	8006b5c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006aae:	4b2d      	ldr	r3, [pc, #180]	; (8006b64 <USBD_SetConfig+0x144>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d115      	bne.n	8006ae2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	23a7      	movs	r3, #167	; 0xa7
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	2102      	movs	r1, #2
 8006abe:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006ac0:	4b28      	ldr	r3, [pc, #160]	; (8006b64 <USBD_SetConfig+0x144>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	001a      	movs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006aca:	4b26      	ldr	r3, [pc, #152]	; (8006b64 <USBD_SetConfig+0x144>)
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0011      	movs	r1, r2
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f7ff f8c4 	bl	8005c60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	0018      	movs	r0, r3
 8006adc:	f000 f9f4 	bl	8006ec8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ae0:	e03c      	b.n	8006b5c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006ae2:	4b20      	ldr	r3, [pc, #128]	; (8006b64 <USBD_SetConfig+0x144>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	001a      	movs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d022      	beq.n	8006b36 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0011      	movs	r1, r2
 8006afa:	0018      	movs	r0, r3
 8006afc:	f7ff f8b0 	bl	8005c60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006b00:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <USBD_SetConfig+0x144>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	001a      	movs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006b0a:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <USBD_SetConfig+0x144>)
 8006b0c:	781a      	ldrb	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0011      	movs	r1, r2
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7ff f87d 	bl	8005c12 <USBD_SetClassConfig>
 8006b18:	0003      	movs	r3, r0
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d106      	bne.n	8006b2c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	0011      	movs	r1, r2
 8006b24:	0018      	movs	r0, r3
 8006b26:	f000 f90b 	bl	8006d40 <USBD_CtlError>
            return;
 8006b2a:	e017      	b.n	8006b5c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f000 f9ca 	bl	8006ec8 <USBD_CtlSendStatus>
        break;
 8006b34:	e012      	b.n	8006b5c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 f9c5 	bl	8006ec8 <USBD_CtlSendStatus>
        break;
 8006b3e:	e00d      	b.n	8006b5c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	0011      	movs	r1, r2
 8006b46:	0018      	movs	r0, r3
 8006b48:	f000 f8fa 	bl	8006d40 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <USBD_SetConfig+0x144>)
 8006b4e:	781a      	ldrb	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0011      	movs	r1, r2
 8006b54:	0018      	movs	r0, r3
 8006b56:	f7ff f883 	bl	8005c60 <USBD_ClrClassConfig>
        break;
 8006b5a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	b002      	add	sp, #8
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	46c0      	nop			; (mov r8, r8)
 8006b64:	20000180 	.word	0x20000180

08006b68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	88db      	ldrh	r3, [r3, #6]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d006      	beq.n	8006b88 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	0011      	movs	r1, r2
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 f8dd 	bl	8006d40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b86:	e026      	b.n	8006bd6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	23a7      	movs	r3, #167	; 0xa7
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	5cd3      	ldrb	r3, [r2, r3]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	dc02      	bgt.n	8006b9a <USBD_GetConfig+0x32>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	dc03      	bgt.n	8006ba0 <USBD_GetConfig+0x38>
 8006b98:	e016      	b.n	8006bc8 <USBD_GetConfig+0x60>
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d00c      	beq.n	8006bb8 <USBD_GetConfig+0x50>
 8006b9e:	e013      	b.n	8006bc8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	0019      	movs	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f000 f943 	bl	8006e3c <USBD_CtlSendData>
        break;
 8006bb6:	e00e      	b.n	8006bd6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	1d19      	adds	r1, r3, #4
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 f93b 	bl	8006e3c <USBD_CtlSendData>
        break;
 8006bc6:	e006      	b.n	8006bd6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 f8b6 	bl	8006d40 <USBD_CtlError>
        break;
 8006bd4:	46c0      	nop			; (mov r8, r8)
}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b002      	add	sp, #8
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	23a7      	movs	r3, #167	; 0xa7
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	5cd3      	ldrb	r3, [r2, r3]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d822      	bhi.n	8006c3c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	88db      	ldrh	r3, [r3, #6]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d006      	beq.n	8006c0c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	0011      	movs	r1, r2
 8006c04:	0018      	movs	r0, r3
 8006c06:	f000 f89b 	bl	8006d40 <USBD_CtlError>
        break;
 8006c0a:	e01e      	b.n	8006c4a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	23a9      	movs	r3, #169	; 0xa9
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	58d3      	ldr	r3, [r2, r3]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2202      	movs	r2, #2
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	0019      	movs	r1, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	0018      	movs	r0, r3
 8006c36:	f000 f901 	bl	8006e3c <USBD_CtlSendData>
      break;
 8006c3a:	e006      	b.n	8006c4a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0011      	movs	r1, r2
 8006c42:	0018      	movs	r0, r3
 8006c44:	f000 f87c 	bl	8006d40 <USBD_CtlError>
      break;
 8006c48:	46c0      	nop			; (mov r8, r8)
  }
}
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	b002      	add	sp, #8
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	885b      	ldrh	r3, [r3, #2]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d108      	bne.n	8006c76 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	23a9      	movs	r3, #169	; 0xa9
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f000 f929 	bl	8006ec8 <USBD_CtlSendStatus>
  }
}
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	b002      	add	sp, #8
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	23a7      	movs	r3, #167	; 0xa7
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	5cd3      	ldrb	r3, [r2, r3]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d80d      	bhi.n	8006cb2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	885b      	ldrh	r3, [r3, #2]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d110      	bne.n	8006cc0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	23a9      	movs	r3, #169	; 0xa9
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	0018      	movs	r0, r3
 8006cac:	f000 f90c 	bl	8006ec8 <USBD_CtlSendStatus>
      }
      break;
 8006cb0:	e006      	b.n	8006cc0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	0011      	movs	r1, r2
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f000 f841 	bl	8006d40 <USBD_CtlError>
      break;
 8006cbe:	e000      	b.n	8006cc2 <USBD_ClrFeature+0x44>
      break;
 8006cc0:	46c0      	nop			; (mov r8, r8)
  }
}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	b002      	add	sp, #8
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781a      	ldrb	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	785a      	ldrb	r2, [r3, #1]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	3302      	adds	r3, #2
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	3303      	adds	r3, #3
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	18d3      	adds	r3, r2, r3
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	3304      	adds	r3, #4
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	3305      	adds	r3, #5
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	18d3      	adds	r3, r2, r3
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	3306      	adds	r3, #6
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	3307      	adds	r3, #7
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	18d3      	adds	r3, r2, r3
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	80da      	strh	r2, [r3, #6]

}
 8006d38:	46c0      	nop			; (mov r8, r8)
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b002      	add	sp, #8
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2180      	movs	r1, #128	; 0x80
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f000 fbf1 	bl	8007536 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2100      	movs	r1, #0
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f000 fbec 	bl	8007536 <USBD_LL_StallEP>
}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b002      	add	sp, #8
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d66:	b590      	push	{r4, r7, lr}
 8006d68:	b087      	sub	sp, #28
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d72:	2417      	movs	r4, #23
 8006d74:	193b      	adds	r3, r7, r4
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d03c      	beq.n	8006dfa <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	0018      	movs	r0, r3
 8006d84:	f000 f83d 	bl	8006e02 <USBD_GetLen>
 8006d88:	0003      	movs	r3, r0
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	18db      	adds	r3, r3, r3
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006d96:	193b      	adds	r3, r7, r4
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	193a      	adds	r2, r7, r4
 8006d9c:	1c59      	adds	r1, r3, #1
 8006d9e:	7011      	strb	r1, [r2, #0]
 8006da0:	001a      	movs	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	7812      	ldrb	r2, [r2, #0]
 8006daa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006dac:	193b      	adds	r3, r7, r4
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	193a      	adds	r2, r7, r4
 8006db2:	1c59      	adds	r1, r3, #1
 8006db4:	7011      	strb	r1, [r2, #0]
 8006db6:	001a      	movs	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	189b      	adds	r3, r3, r2
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006dc0:	e017      	b.n	8006df2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	60fa      	str	r2, [r7, #12]
 8006dc8:	2417      	movs	r4, #23
 8006dca:	193a      	adds	r2, r7, r4
 8006dcc:	7812      	ldrb	r2, [r2, #0]
 8006dce:	1939      	adds	r1, r7, r4
 8006dd0:	1c50      	adds	r0, r2, #1
 8006dd2:	7008      	strb	r0, [r1, #0]
 8006dd4:	0011      	movs	r1, r2
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	1852      	adds	r2, r2, r1
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006dde:	193b      	adds	r3, r7, r4
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	193a      	adds	r2, r7, r4
 8006de4:	1c59      	adds	r1, r3, #1
 8006de6:	7011      	strb	r1, [r2, #0]
 8006de8:	001a      	movs	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	189b      	adds	r3, r3, r2
 8006dee:	2200      	movs	r2, #0
 8006df0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e3      	bne.n	8006dc2 <USBD_GetString+0x5c>
    }
  }
}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b007      	add	sp, #28
 8006e00:	bd90      	pop	{r4, r7, pc}

08006e02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e0a:	230f      	movs	r3, #15
 8006e0c:	18fb      	adds	r3, r7, r3
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006e12:	e008      	b.n	8006e26 <USBD_GetLen+0x24>
  {
    len++;
 8006e14:	210f      	movs	r1, #15
 8006e16:	187b      	adds	r3, r7, r1
 8006e18:	781a      	ldrb	r2, [r3, #0]
 8006e1a:	187b      	adds	r3, r7, r1
 8006e1c:	3201      	adds	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
    buf++;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3301      	adds	r3, #1
 8006e24:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f2      	bne.n	8006e14 <USBD_GetLen+0x12>
  }

  return len;
 8006e2e:	230f      	movs	r3, #15
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	781b      	ldrb	r3, [r3, #0]
}
 8006e34:	0018      	movs	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b004      	add	sp, #16
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	1dbb      	adds	r3, r7, #6
 8006e48:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	23a5      	movs	r3, #165	; 0xa5
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	2102      	movs	r1, #2
 8006e52:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006e54:	1dbb      	adds	r3, r7, #6
 8006e56:	881a      	ldrh	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006e5c:	1dbb      	adds	r3, r7, #6
 8006e5e:	881a      	ldrh	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e64:	1dbb      	adds	r3, r7, #6
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f000 fc14 	bl	800769a <USBD_LL_Transmit>

  return USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	0018      	movs	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	b004      	add	sp, #16
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	1dbb      	adds	r3, r7, #6
 8006e88:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e8a:	1dbb      	adds	r3, r7, #6
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	2100      	movs	r1, #0
 8006e94:	f000 fc01 	bl	800769a <USBD_LL_Transmit>

  return USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	b004      	add	sp, #16
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	1dbb      	adds	r3, r7, #6
 8006eae:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eb0:	1dbb      	adds	r3, r7, #6
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	2100      	movs	r1, #0
 8006eba:	f000 fc25 	bl	8007708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b004      	add	sp, #16
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	23a5      	movs	r3, #165	; 0xa5
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	2104      	movs	r1, #4
 8006ed8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	2300      	movs	r3, #0
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f000 fbda 	bl	800769a <USBD_LL_Transmit>

  return USBD_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	0018      	movs	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	b002      	add	sp, #8
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	23a5      	movs	r3, #165	; 0xa5
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	2105      	movs	r1, #5
 8006f00:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	2300      	movs	r3, #0
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f000 fbfd 	bl	8007708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	0018      	movs	r0, r3
 8006f12:	46bd      	mov	sp, r7
 8006f14:	b002      	add	sp, #8
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f1c:	490f      	ldr	r1, [pc, #60]	; (8006f5c <MX_USB_DEVICE_Init+0x44>)
 8006f1e:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <MX_USB_DEVICE_Init+0x48>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7fe fe0e 	bl	8005b44 <USBD_Init>
 8006f28:	1e03      	subs	r3, r0, #0
 8006f2a:	d001      	beq.n	8006f30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f2c:	f7f9 fc1e 	bl	800076c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006f30:	4a0c      	ldr	r2, [pc, #48]	; (8006f64 <MX_USB_DEVICE_Init+0x4c>)
 8006f32:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <MX_USB_DEVICE_Init+0x48>)
 8006f34:	0011      	movs	r1, r2
 8006f36:	0018      	movs	r0, r3
 8006f38:	f7fe fe35 	bl	8005ba6 <USBD_RegisterClass>
 8006f3c:	1e03      	subs	r3, r0, #0
 8006f3e:	d001      	beq.n	8006f44 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006f40:	f7f9 fc14 	bl	800076c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <MX_USB_DEVICE_Init+0x48>)
 8006f46:	0018      	movs	r0, r3
 8006f48:	f7fe fe4d 	bl	8005be6 <USBD_Start>
 8006f4c:	1e03      	subs	r3, r0, #0
 8006f4e:	d001      	beq.n	8006f54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f50:	f7f9 fc0c 	bl	800076c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	20000108 	.word	0x20000108
 8006f60:	20000184 	.word	0x20000184
 8006f64:	2000000c 	.word	0x2000000c

08006f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	0002      	movs	r2, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	1dfb      	adds	r3, r7, #7
 8006f74:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2212      	movs	r2, #18
 8006f7a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f7e:	0018      	movs	r0, r3
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b002      	add	sp, #8
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	20000124 	.word	0x20000124

08006f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	0002      	movs	r2, r0
 8006f94:	6039      	str	r1, [r7, #0]
 8006f96:	1dfb      	adds	r3, r7, #7
 8006f98:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fa0:	4b02      	ldr	r3, [pc, #8]	; (8006fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	b002      	add	sp, #8
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	20000138 	.word	0x20000138

08006fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	0002      	movs	r2, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	1dfb      	adds	r3, r7, #7
 8006fbc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006fbe:	1dfb      	adds	r3, r7, #7
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	4908      	ldr	r1, [pc, #32]	; (8006fec <USBD_FS_ProductStrDescriptor+0x3c>)
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <USBD_FS_ProductStrDescriptor+0x40>)
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f7ff feca 	bl	8006d66 <USBD_GetString>
 8006fd2:	e005      	b.n	8006fe0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	4905      	ldr	r1, [pc, #20]	; (8006fec <USBD_FS_ProductStrDescriptor+0x3c>)
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <USBD_FS_ProductStrDescriptor+0x40>)
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f7ff fec3 	bl	8006d66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fe0:	4b02      	ldr	r3, [pc, #8]	; (8006fec <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b002      	add	sp, #8
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	20000448 	.word	0x20000448
 8006ff0:	0800788c 	.word	0x0800788c

08006ff4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	0002      	movs	r2, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	1dfb      	adds	r3, r7, #7
 8007000:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	4904      	ldr	r1, [pc, #16]	; (8007018 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007006:	4b05      	ldr	r3, [pc, #20]	; (800701c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007008:	0018      	movs	r0, r3
 800700a:	f7ff feac 	bl	8006d66 <USBD_GetString>
  return USBD_StrDesc;
 800700e:	4b02      	ldr	r3, [pc, #8]	; (8007018 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007010:	0018      	movs	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	b002      	add	sp, #8
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000448 	.word	0x20000448
 800701c:	08007898 	.word	0x08007898

08007020 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	0002      	movs	r2, r0
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	1dfb      	adds	r3, r7, #7
 800702c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	221a      	movs	r2, #26
 8007032:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007034:	f000 f84c 	bl	80070d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800703a:	0018      	movs	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	b002      	add	sp, #8
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	2000013c 	.word	0x2000013c

08007048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	0002      	movs	r2, r0
 8007050:	6039      	str	r1, [r7, #0]
 8007052:	1dfb      	adds	r3, r7, #7
 8007054:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007056:	1dfb      	adds	r3, r7, #7
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	4908      	ldr	r1, [pc, #32]	; (8007084 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007062:	4b09      	ldr	r3, [pc, #36]	; (8007088 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007064:	0018      	movs	r0, r3
 8007066:	f7ff fe7e 	bl	8006d66 <USBD_GetString>
 800706a:	e005      	b.n	8007078 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	4905      	ldr	r1, [pc, #20]	; (8007084 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007070:	4b05      	ldr	r3, [pc, #20]	; (8007088 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007072:	0018      	movs	r0, r3
 8007074:	f7ff fe77 	bl	8006d66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007078:	4b02      	ldr	r3, [pc, #8]	; (8007084 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800707a:	0018      	movs	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	b002      	add	sp, #8
 8007080:	bd80      	pop	{r7, pc}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	20000448 	.word	0x20000448
 8007088:	080078ac 	.word	0x080078ac

0800708c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	0002      	movs	r2, r0
 8007094:	6039      	str	r1, [r7, #0]
 8007096:	1dfb      	adds	r3, r7, #7
 8007098:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800709a:	1dfb      	adds	r3, r7, #7
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4908      	ldr	r1, [pc, #32]	; (80070c8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80070a6:	4b09      	ldr	r3, [pc, #36]	; (80070cc <USBD_FS_InterfaceStrDescriptor+0x40>)
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7ff fe5c 	bl	8006d66 <USBD_GetString>
 80070ae:	e005      	b.n	80070bc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	4905      	ldr	r1, [pc, #20]	; (80070c8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <USBD_FS_InterfaceStrDescriptor+0x40>)
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7ff fe55 	bl	8006d66 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070bc:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b002      	add	sp, #8
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	20000448 	.word	0x20000448
 80070cc:	080078b8 	.word	0x080078b8

080070d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070d6:	4b10      	ldr	r3, [pc, #64]	; (8007118 <Get_SerialNum+0x48>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070dc:	4b0f      	ldr	r3, [pc, #60]	; (800711c <Get_SerialNum+0x4c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070e2:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <Get_SerialNum+0x50>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	18d3      	adds	r3, r2, r3
 80070ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00b      	beq.n	800710e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070f6:	490b      	ldr	r1, [pc, #44]	; (8007124 <Get_SerialNum+0x54>)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2208      	movs	r2, #8
 80070fc:	0018      	movs	r0, r3
 80070fe:	f000 f815 	bl	800712c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007102:	4909      	ldr	r1, [pc, #36]	; (8007128 <Get_SerialNum+0x58>)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2204      	movs	r2, #4
 8007108:	0018      	movs	r0, r3
 800710a:	f000 f80f 	bl	800712c <IntToUnicode>
  }
}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	46bd      	mov	sp, r7
 8007112:	b004      	add	sp, #16
 8007114:	bd80      	pop	{r7, pc}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	1ff80050 	.word	0x1ff80050
 800711c:	1ff80054 	.word	0x1ff80054
 8007120:	1ff80058 	.word	0x1ff80058
 8007124:	2000013e 	.word	0x2000013e
 8007128:	2000014e 	.word	0x2000014e

0800712c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	1dfb      	adds	r3, r7, #7
 8007138:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800713a:	2117      	movs	r1, #23
 800713c:	187b      	adds	r3, r7, r1
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007142:	187b      	adds	r3, r7, r1
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	e02f      	b.n	80071aa <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	0f1b      	lsrs	r3, r3, #28
 800714e:	2b09      	cmp	r3, #9
 8007150:	d80d      	bhi.n	800716e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	0f1b      	lsrs	r3, r3, #28
 8007156:	b2da      	uxtb	r2, r3
 8007158:	2317      	movs	r3, #23
 800715a:	18fb      	adds	r3, r7, r3
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	0019      	movs	r1, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	185b      	adds	r3, r3, r1
 8007166:	3230      	adds	r2, #48	; 0x30
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	e00c      	b.n	8007188 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	0f1b      	lsrs	r3, r3, #28
 8007172:	b2da      	uxtb	r2, r3
 8007174:	2317      	movs	r3, #23
 8007176:	18fb      	adds	r3, r7, r3
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	0019      	movs	r1, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	185b      	adds	r3, r3, r1
 8007182:	3237      	adds	r2, #55	; 0x37
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800718e:	2117      	movs	r1, #23
 8007190:	187b      	adds	r3, r7, r1
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	3301      	adds	r3, #1
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	18d3      	adds	r3, r2, r3
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071a0:	187b      	adds	r3, r7, r1
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	187b      	adds	r3, r7, r1
 80071a6:	3201      	adds	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	2317      	movs	r3, #23
 80071ac:	18fa      	adds	r2, r7, r3
 80071ae:	1dfb      	adds	r3, r7, #7
 80071b0:	7812      	ldrb	r2, [r2, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d3c8      	bcc.n	800714a <IntToUnicode+0x1e>
  }
}
 80071b8:	46c0      	nop			; (mov r8, r8)
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	46bd      	mov	sp, r7
 80071be:	b006      	add	sp, #24
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <HAL_PCD_MspInit+0x38>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d10e      	bne.n	80071f4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80071d6:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <HAL_PCD_MspInit+0x3c>)
 80071d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071da:	4b09      	ldr	r3, [pc, #36]	; (8007200 <HAL_PCD_MspInit+0x3c>)
 80071dc:	2180      	movs	r1, #128	; 0x80
 80071de:	0409      	lsls	r1, r1, #16
 80071e0:	430a      	orrs	r2, r1
 80071e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80071e4:	2200      	movs	r2, #0
 80071e6:	2100      	movs	r1, #0
 80071e8:	201f      	movs	r0, #31
 80071ea:	f7f9 fc6d 	bl	8000ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80071ee:	201f      	movs	r0, #31
 80071f0:	f7f9 fc7f 	bl	8000af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80071f4:	46c0      	nop			; (mov r8, r8)
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b002      	add	sp, #8
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40005c00 	.word	0x40005c00
 8007200:	40021000 	.word	0x40021000

08007204 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	23bc      	movs	r3, #188	; 0xbc
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	58d2      	ldr	r2, [r2, r3]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	21ac      	movs	r1, #172	; 0xac
 8007218:	0089      	lsls	r1, r1, #2
 800721a:	468c      	mov	ip, r1
 800721c:	4463      	add	r3, ip
 800721e:	0019      	movs	r1, r3
 8007220:	0010      	movs	r0, r2
 8007222:	f7fe fd33 	bl	8005c8c <USBD_LL_SetupStage>
}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	46bd      	mov	sp, r7
 800722a:	b002      	add	sp, #8
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800722e:	b590      	push	{r4, r7, lr}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	000a      	movs	r2, r1
 8007238:	1cfb      	adds	r3, r7, #3
 800723a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	23bc      	movs	r3, #188	; 0xbc
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	58d4      	ldr	r4, [r2, r3]
 8007244:	1cfb      	adds	r3, r7, #3
 8007246:	781a      	ldrb	r2, [r3, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	23be      	movs	r3, #190	; 0xbe
 800724c:	0059      	lsls	r1, r3, #1
 800724e:	0013      	movs	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	189b      	adds	r3, r3, r2
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	18c3      	adds	r3, r0, r3
 8007258:	185b      	adds	r3, r3, r1
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	1cfb      	adds	r3, r7, #3
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	0019      	movs	r1, r3
 8007262:	0020      	movs	r0, r4
 8007264:	f7fe fd70 	bl	8005d48 <USBD_LL_DataOutStage>
}
 8007268:	46c0      	nop			; (mov r8, r8)
 800726a:	46bd      	mov	sp, r7
 800726c:	b003      	add	sp, #12
 800726e:	bd90      	pop	{r4, r7, pc}

08007270 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	000a      	movs	r2, r1
 800727a:	1cfb      	adds	r3, r7, #3
 800727c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	23bc      	movs	r3, #188	; 0xbc
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	58d0      	ldr	r0, [r2, r3]
 8007286:	1cfb      	adds	r3, r7, #3
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	0013      	movs	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	189b      	adds	r3, r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	18cb      	adds	r3, r1, r3
 8007296:	333c      	adds	r3, #60	; 0x3c
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	1cfb      	adds	r3, r7, #3
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	0019      	movs	r1, r3
 80072a0:	f7fe fdd4 	bl	8005e4c <USBD_LL_DataInStage>
}
 80072a4:	46c0      	nop			; (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b002      	add	sp, #8
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	23bc      	movs	r3, #188	; 0xbc
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	58d3      	ldr	r3, [r2, r3]
 80072bc:	0018      	movs	r0, r3
 80072be:	f7fe ff0b 	bl	80060d8 <USBD_LL_SOF>
}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	46bd      	mov	sp, r7
 80072c6:	b002      	add	sp, #8
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072d2:	230f      	movs	r3, #15
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	2201      	movs	r2, #1
 80072d8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d001      	beq.n	80072e6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80072e2:	f7f9 fa43 	bl	800076c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	23bc      	movs	r3, #188	; 0xbc
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	58d2      	ldr	r2, [r2, r3]
 80072ee:	230f      	movs	r3, #15
 80072f0:	18fb      	adds	r3, r7, r3
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	0019      	movs	r1, r3
 80072f6:	0010      	movs	r0, r2
 80072f8:	f7fe fead 	bl	8006056 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	23bc      	movs	r3, #188	; 0xbc
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	58d3      	ldr	r3, [r2, r3]
 8007304:	0018      	movs	r0, r3
 8007306:	f7fe fe5e 	bl	8005fc6 <USBD_LL_Reset>
}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	b004      	add	sp, #16
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	23bc      	movs	r3, #188	; 0xbc
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	58d3      	ldr	r3, [r2, r3]
 8007324:	0018      	movs	r0, r3
 8007326:	f7fe fea7 	bl	8006078 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007332:	4b05      	ldr	r3, [pc, #20]	; (8007348 <HAL_PCD_SuspendCallback+0x34>)
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	4b04      	ldr	r3, [pc, #16]	; (8007348 <HAL_PCD_SuspendCallback+0x34>)
 8007338:	2106      	movs	r1, #6
 800733a:	430a      	orrs	r2, r1
 800733c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	46bd      	mov	sp, r7
 8007342:	b002      	add	sp, #8
 8007344:	bd80      	pop	{r7, pc}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	e000ed00 	.word	0xe000ed00

0800734c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <HAL_PCD_ResumeCallback+0x38>)
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	4b08      	ldr	r3, [pc, #32]	; (8007384 <HAL_PCD_ResumeCallback+0x38>)
 8007362:	2106      	movs	r1, #6
 8007364:	438a      	bics	r2, r1
 8007366:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007368:	f000 fa1a 	bl	80077a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	23bc      	movs	r3, #188	; 0xbc
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	58d3      	ldr	r3, [r2, r3]
 8007374:	0018      	movs	r0, r3
 8007376:	f7fe fe97 	bl	80060a8 <USBD_LL_Resume>
}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	46bd      	mov	sp, r7
 800737e:	b002      	add	sp, #8
 8007380:	bd80      	pop	{r7, pc}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	e000ed00 	.word	0xe000ed00

08007388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007390:	4a23      	ldr	r2, [pc, #140]	; (8007420 <USBD_LL_Init+0x98>)
 8007392:	23bc      	movs	r3, #188	; 0xbc
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	23b0      	movs	r3, #176	; 0xb0
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	491f      	ldr	r1, [pc, #124]	; (8007420 <USBD_LL_Init+0x98>)
 80073a2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80073a4:	4b1e      	ldr	r3, [pc, #120]	; (8007420 <USBD_LL_Init+0x98>)
 80073a6:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <USBD_LL_Init+0x9c>)
 80073a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80073aa:	4b1d      	ldr	r3, [pc, #116]	; (8007420 <USBD_LL_Init+0x98>)
 80073ac:	2208      	movs	r2, #8
 80073ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80073b0:	4b1b      	ldr	r3, [pc, #108]	; (8007420 <USBD_LL_Init+0x98>)
 80073b2:	2202      	movs	r2, #2
 80073b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073b6:	4b1a      	ldr	r3, [pc, #104]	; (8007420 <USBD_LL_Init+0x98>)
 80073b8:	2202      	movs	r2, #2
 80073ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80073bc:	4b18      	ldr	r3, [pc, #96]	; (8007420 <USBD_LL_Init+0x98>)
 80073be:	2200      	movs	r2, #0
 80073c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80073c2:	4b17      	ldr	r3, [pc, #92]	; (8007420 <USBD_LL_Init+0x98>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80073c8:	4b15      	ldr	r3, [pc, #84]	; (8007420 <USBD_LL_Init+0x98>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80073ce:	4b14      	ldr	r3, [pc, #80]	; (8007420 <USBD_LL_Init+0x98>)
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7f9 fbab 	bl	8000b2c <HAL_PCD_Init>
 80073d6:	1e03      	subs	r3, r0, #0
 80073d8:	d001      	beq.n	80073de <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80073da:	f7f9 f9c7 	bl	800076c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	23b0      	movs	r3, #176	; 0xb0
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	58d0      	ldr	r0, [r2, r3]
 80073e6:	2318      	movs	r3, #24
 80073e8:	2200      	movs	r2, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	f7fb f952 	bl	8002694 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	23b0      	movs	r3, #176	; 0xb0
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	58d0      	ldr	r0, [r2, r3]
 80073f8:	2358      	movs	r3, #88	; 0x58
 80073fa:	2200      	movs	r2, #0
 80073fc:	2180      	movs	r1, #128	; 0x80
 80073fe:	f7fb f949 	bl	8002694 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	23b0      	movs	r3, #176	; 0xb0
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	58d0      	ldr	r0, [r2, r3]
 800740a:	2380      	movs	r3, #128	; 0x80
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	2200      	movs	r2, #0
 8007410:	2181      	movs	r1, #129	; 0x81
 8007412:	f7fb f93f 	bl	8002694 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	0018      	movs	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	b002      	add	sp, #8
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20000648 	.word	0x20000648
 8007424:	40005c00 	.word	0x40005c00

08007428 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007430:	210f      	movs	r1, #15
 8007432:	187b      	adds	r3, r7, r1
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007438:	260e      	movs	r6, #14
 800743a:	19bb      	adds	r3, r7, r6
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	23b0      	movs	r3, #176	; 0xb0
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	58d3      	ldr	r3, [r2, r3]
 8007448:	000d      	movs	r5, r1
 800744a:	187c      	adds	r4, r7, r1
 800744c:	0018      	movs	r0, r3
 800744e:	f7f9 fc6d 	bl	8000d2c <HAL_PCD_Start>
 8007452:	0003      	movs	r3, r0
 8007454:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007456:	19bc      	adds	r4, r7, r6
 8007458:	197b      	adds	r3, r7, r5
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	0018      	movs	r0, r3
 800745e:	f000 f9a6 	bl	80077ae <USBD_Get_USB_Status>
 8007462:	0003      	movs	r3, r0
 8007464:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007466:	19bb      	adds	r3, r7, r6
 8007468:	781b      	ldrb	r3, [r3, #0]
}
 800746a:	0018      	movs	r0, r3
 800746c:	46bd      	mov	sp, r7
 800746e:	b005      	add	sp, #20
 8007470:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007472 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	000c      	movs	r4, r1
 800747c:	0010      	movs	r0, r2
 800747e:	0019      	movs	r1, r3
 8007480:	1cfb      	adds	r3, r7, #3
 8007482:	1c22      	adds	r2, r4, #0
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	1cbb      	adds	r3, r7, #2
 8007488:	1c02      	adds	r2, r0, #0
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	003b      	movs	r3, r7
 800748e:	1c0a      	adds	r2, r1, #0
 8007490:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007492:	260f      	movs	r6, #15
 8007494:	19bb      	adds	r3, r7, r6
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749a:	250e      	movs	r5, #14
 800749c:	197b      	adds	r3, r7, r5
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	23b0      	movs	r3, #176	; 0xb0
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	58d0      	ldr	r0, [r2, r3]
 80074aa:	19bc      	adds	r4, r7, r6
 80074ac:	1cbb      	adds	r3, r7, #2
 80074ae:	781d      	ldrb	r5, [r3, #0]
 80074b0:	003b      	movs	r3, r7
 80074b2:	881a      	ldrh	r2, [r3, #0]
 80074b4:	1cfb      	adds	r3, r7, #3
 80074b6:	7819      	ldrb	r1, [r3, #0]
 80074b8:	002b      	movs	r3, r5
 80074ba:	f7f9 fdcc 	bl	8001056 <HAL_PCD_EP_Open>
 80074be:	0003      	movs	r3, r0
 80074c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074c2:	250e      	movs	r5, #14
 80074c4:	197c      	adds	r4, r7, r5
 80074c6:	19bb      	adds	r3, r7, r6
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	0018      	movs	r0, r3
 80074cc:	f000 f96f 	bl	80077ae <USBD_Get_USB_Status>
 80074d0:	0003      	movs	r3, r0
 80074d2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80074d4:	197b      	adds	r3, r7, r5
 80074d6:	781b      	ldrb	r3, [r3, #0]
}
 80074d8:	0018      	movs	r0, r3
 80074da:	46bd      	mov	sp, r7
 80074dc:	b005      	add	sp, #20
 80074de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	000a      	movs	r2, r1
 80074ea:	1cfb      	adds	r3, r7, #3
 80074ec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ee:	210f      	movs	r1, #15
 80074f0:	187b      	adds	r3, r7, r1
 80074f2:	2200      	movs	r2, #0
 80074f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f6:	260e      	movs	r6, #14
 80074f8:	19bb      	adds	r3, r7, r6
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	23b0      	movs	r3, #176	; 0xb0
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	58d2      	ldr	r2, [r2, r3]
 8007506:	000d      	movs	r5, r1
 8007508:	187c      	adds	r4, r7, r1
 800750a:	1cfb      	adds	r3, r7, #3
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	0019      	movs	r1, r3
 8007510:	0010      	movs	r0, r2
 8007512:	f7f9 fe0f 	bl	8001134 <HAL_PCD_EP_Close>
 8007516:	0003      	movs	r3, r0
 8007518:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800751a:	19bc      	adds	r4, r7, r6
 800751c:	197b      	adds	r3, r7, r5
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	0018      	movs	r0, r3
 8007522:	f000 f944 	bl	80077ae <USBD_Get_USB_Status>
 8007526:	0003      	movs	r3, r0
 8007528:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800752a:	19bb      	adds	r3, r7, r6
 800752c:	781b      	ldrb	r3, [r3, #0]
}
 800752e:	0018      	movs	r0, r3
 8007530:	46bd      	mov	sp, r7
 8007532:	b005      	add	sp, #20
 8007534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007536 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	000a      	movs	r2, r1
 8007540:	1cfb      	adds	r3, r7, #3
 8007542:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007544:	210f      	movs	r1, #15
 8007546:	187b      	adds	r3, r7, r1
 8007548:	2200      	movs	r2, #0
 800754a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754c:	260e      	movs	r6, #14
 800754e:	19bb      	adds	r3, r7, r6
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	23b0      	movs	r3, #176	; 0xb0
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	58d2      	ldr	r2, [r2, r3]
 800755c:	000d      	movs	r5, r1
 800755e:	187c      	adds	r4, r7, r1
 8007560:	1cfb      	adds	r3, r7, #3
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	0019      	movs	r1, r3
 8007566:	0010      	movs	r0, r2
 8007568:	f7f9 fea8 	bl	80012bc <HAL_PCD_EP_SetStall>
 800756c:	0003      	movs	r3, r0
 800756e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007570:	19bc      	adds	r4, r7, r6
 8007572:	197b      	adds	r3, r7, r5
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	0018      	movs	r0, r3
 8007578:	f000 f919 	bl	80077ae <USBD_Get_USB_Status>
 800757c:	0003      	movs	r3, r0
 800757e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007580:	19bb      	adds	r3, r7, r6
 8007582:	781b      	ldrb	r3, [r3, #0]
}
 8007584:	0018      	movs	r0, r3
 8007586:	46bd      	mov	sp, r7
 8007588:	b005      	add	sp, #20
 800758a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800758c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800758c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	000a      	movs	r2, r1
 8007596:	1cfb      	adds	r3, r7, #3
 8007598:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759a:	210f      	movs	r1, #15
 800759c:	187b      	adds	r3, r7, r1
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a2:	260e      	movs	r6, #14
 80075a4:	19bb      	adds	r3, r7, r6
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	23b0      	movs	r3, #176	; 0xb0
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	58d2      	ldr	r2, [r2, r3]
 80075b2:	000d      	movs	r5, r1
 80075b4:	187c      	adds	r4, r7, r1
 80075b6:	1cfb      	adds	r3, r7, #3
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	0019      	movs	r1, r3
 80075bc:	0010      	movs	r0, r2
 80075be:	f7f9 fed9 	bl	8001374 <HAL_PCD_EP_ClrStall>
 80075c2:	0003      	movs	r3, r0
 80075c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c6:	19bc      	adds	r4, r7, r6
 80075c8:	197b      	adds	r3, r7, r5
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	0018      	movs	r0, r3
 80075ce:	f000 f8ee 	bl	80077ae <USBD_Get_USB_Status>
 80075d2:	0003      	movs	r3, r0
 80075d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80075d6:	19bb      	adds	r3, r7, r6
 80075d8:	781b      	ldrb	r3, [r3, #0]
}
 80075da:	0018      	movs	r0, r3
 80075dc:	46bd      	mov	sp, r7
 80075de:	b005      	add	sp, #20
 80075e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075e2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	000a      	movs	r2, r1
 80075ec:	1cfb      	adds	r3, r7, #3
 80075ee:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	23b0      	movs	r3, #176	; 0xb0
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	58d3      	ldr	r3, [r2, r3]
 80075f8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80075fa:	1cfb      	adds	r3, r7, #3
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b25b      	sxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	da0d      	bge.n	8007620 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007604:	1cfb      	adds	r3, r7, #3
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	227f      	movs	r2, #127	; 0x7f
 800760a:	4013      	ands	r3, r2
 800760c:	68f9      	ldr	r1, [r7, #12]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	0013      	movs	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	189b      	adds	r3, r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	18cb      	adds	r3, r1, r3
 800761a:	3302      	adds	r3, #2
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	e00d      	b.n	800763c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007620:	1cfb      	adds	r3, r7, #3
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	227f      	movs	r2, #127	; 0x7f
 8007626:	401a      	ands	r2, r3
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	23b5      	movs	r3, #181	; 0xb5
 800762c:	0059      	lsls	r1, r3, #1
 800762e:	0013      	movs	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	189b      	adds	r3, r3, r2
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	18c3      	adds	r3, r0, r3
 8007638:	185b      	adds	r3, r3, r1
 800763a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800763c:	0018      	movs	r0, r3
 800763e:	46bd      	mov	sp, r7
 8007640:	b004      	add	sp, #16
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	000a      	movs	r2, r1
 800764e:	1cfb      	adds	r3, r7, #3
 8007650:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007652:	210f      	movs	r1, #15
 8007654:	187b      	adds	r3, r7, r1
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765a:	260e      	movs	r6, #14
 800765c:	19bb      	adds	r3, r7, r6
 800765e:	2200      	movs	r2, #0
 8007660:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	23b0      	movs	r3, #176	; 0xb0
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	58d2      	ldr	r2, [r2, r3]
 800766a:	000d      	movs	r5, r1
 800766c:	187c      	adds	r4, r7, r1
 800766e:	1cfb      	adds	r3, r7, #3
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	0019      	movs	r1, r3
 8007674:	0010      	movs	r0, r2
 8007676:	f7f9 fcc3 	bl	8001000 <HAL_PCD_SetAddress>
 800767a:	0003      	movs	r3, r0
 800767c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800767e:	19bc      	adds	r4, r7, r6
 8007680:	197b      	adds	r3, r7, r5
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	0018      	movs	r0, r3
 8007686:	f000 f892 	bl	80077ae <USBD_Get_USB_Status>
 800768a:	0003      	movs	r3, r0
 800768c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800768e:	19bb      	adds	r3, r7, r6
 8007690:	781b      	ldrb	r3, [r3, #0]
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b005      	add	sp, #20
 8007698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800769a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800769a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769c:	b087      	sub	sp, #28
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	0008      	movs	r0, r1
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	0019      	movs	r1, r3
 80076a8:	230b      	movs	r3, #11
 80076aa:	18fb      	adds	r3, r7, r3
 80076ac:	1c02      	adds	r2, r0, #0
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	2408      	movs	r4, #8
 80076b2:	193b      	adds	r3, r7, r4
 80076b4:	1c0a      	adds	r2, r1, #0
 80076b6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b8:	2117      	movs	r1, #23
 80076ba:	187b      	adds	r3, r7, r1
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c0:	2516      	movs	r5, #22
 80076c2:	197b      	adds	r3, r7, r5
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	23b0      	movs	r3, #176	; 0xb0
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	58d0      	ldr	r0, [r2, r3]
 80076d0:	193b      	adds	r3, r7, r4
 80076d2:	881d      	ldrh	r5, [r3, #0]
 80076d4:	000e      	movs	r6, r1
 80076d6:	187c      	adds	r4, r7, r1
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	230b      	movs	r3, #11
 80076dc:	18fb      	adds	r3, r7, r3
 80076de:	7819      	ldrb	r1, [r3, #0]
 80076e0:	002b      	movs	r3, r5
 80076e2:	f7f9 fdaf 	bl	8001244 <HAL_PCD_EP_Transmit>
 80076e6:	0003      	movs	r3, r0
 80076e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ea:	2516      	movs	r5, #22
 80076ec:	197c      	adds	r4, r7, r5
 80076ee:	19bb      	adds	r3, r7, r6
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	0018      	movs	r0, r3
 80076f4:	f000 f85b 	bl	80077ae <USBD_Get_USB_Status>
 80076f8:	0003      	movs	r3, r0
 80076fa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80076fc:	197b      	adds	r3, r7, r5
 80076fe:	781b      	ldrb	r3, [r3, #0]
}
 8007700:	0018      	movs	r0, r3
 8007702:	46bd      	mov	sp, r7
 8007704:	b007      	add	sp, #28
 8007706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007708 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	0008      	movs	r0, r1
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	0019      	movs	r1, r3
 8007716:	230b      	movs	r3, #11
 8007718:	18fb      	adds	r3, r7, r3
 800771a:	1c02      	adds	r2, r0, #0
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	2408      	movs	r4, #8
 8007720:	193b      	adds	r3, r7, r4
 8007722:	1c0a      	adds	r2, r1, #0
 8007724:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007726:	2117      	movs	r1, #23
 8007728:	187b      	adds	r3, r7, r1
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772e:	2516      	movs	r5, #22
 8007730:	197b      	adds	r3, r7, r5
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	23b0      	movs	r3, #176	; 0xb0
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	58d0      	ldr	r0, [r2, r3]
 800773e:	193b      	adds	r3, r7, r4
 8007740:	881d      	ldrh	r5, [r3, #0]
 8007742:	000e      	movs	r6, r1
 8007744:	187c      	adds	r4, r7, r1
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	230b      	movs	r3, #11
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	7819      	ldrb	r1, [r3, #0]
 800774e:	002b      	movs	r3, r5
 8007750:	f7f9 fd41 	bl	80011d6 <HAL_PCD_EP_Receive>
 8007754:	0003      	movs	r3, r0
 8007756:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007758:	2516      	movs	r5, #22
 800775a:	197c      	adds	r4, r7, r5
 800775c:	19bb      	adds	r3, r7, r6
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	0018      	movs	r0, r3
 8007762:	f000 f824 	bl	80077ae <USBD_Get_USB_Status>
 8007766:	0003      	movs	r3, r0
 8007768:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800776a:	197b      	adds	r3, r7, r5
 800776c:	781b      	ldrb	r3, [r3, #0]
}
 800776e:	0018      	movs	r0, r3
 8007770:	46bd      	mov	sp, r7
 8007772:	b007      	add	sp, #28
 8007774:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007778 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007780:	4b02      	ldr	r3, [pc, #8]	; (800778c <USBD_static_malloc+0x14>)
}
 8007782:	0018      	movs	r0, r3
 8007784:	46bd      	mov	sp, r7
 8007786:	b002      	add	sp, #8
 8007788:	bd80      	pop	{r7, pc}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	2000093c 	.word	0x2000093c

08007790 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]

}
 8007798:	46c0      	nop			; (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	b002      	add	sp, #8
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80077a4:	f7f8 ff56 	bl	8000654 <SystemClock_Config>
}
 80077a8:	46c0      	nop			; (mov r8, r8)
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	0002      	movs	r2, r0
 80077b6:	1dfb      	adds	r3, r7, #7
 80077b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ba:	230f      	movs	r3, #15
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	2200      	movs	r2, #0
 80077c0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80077c2:	1dfb      	adds	r3, r7, #7
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d017      	beq.n	80077fa <USBD_Get_USB_Status+0x4c>
 80077ca:	dc1b      	bgt.n	8007804 <USBD_Get_USB_Status+0x56>
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d00f      	beq.n	80077f0 <USBD_Get_USB_Status+0x42>
 80077d0:	dc18      	bgt.n	8007804 <USBD_Get_USB_Status+0x56>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <USBD_Get_USB_Status+0x2e>
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d005      	beq.n	80077e6 <USBD_Get_USB_Status+0x38>
 80077da:	e013      	b.n	8007804 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077dc:	230f      	movs	r3, #15
 80077de:	18fb      	adds	r3, r7, r3
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]
    break;
 80077e4:	e013      	b.n	800780e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077e6:	230f      	movs	r3, #15
 80077e8:	18fb      	adds	r3, r7, r3
 80077ea:	2202      	movs	r2, #2
 80077ec:	701a      	strb	r2, [r3, #0]
    break;
 80077ee:	e00e      	b.n	800780e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077f0:	230f      	movs	r3, #15
 80077f2:	18fb      	adds	r3, r7, r3
 80077f4:	2201      	movs	r2, #1
 80077f6:	701a      	strb	r2, [r3, #0]
    break;
 80077f8:	e009      	b.n	800780e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077fa:	230f      	movs	r3, #15
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	2202      	movs	r2, #2
 8007800:	701a      	strb	r2, [r3, #0]
    break;
 8007802:	e004      	b.n	800780e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007804:	230f      	movs	r3, #15
 8007806:	18fb      	adds	r3, r7, r3
 8007808:	2202      	movs	r2, #2
 800780a:	701a      	strb	r2, [r3, #0]
    break;
 800780c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800780e:	230f      	movs	r3, #15
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	781b      	ldrb	r3, [r3, #0]
}
 8007814:	0018      	movs	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	b004      	add	sp, #16
 800781a:	bd80      	pop	{r7, pc}

0800781c <memset>:
 800781c:	0003      	movs	r3, r0
 800781e:	1882      	adds	r2, r0, r2
 8007820:	4293      	cmp	r3, r2
 8007822:	d100      	bne.n	8007826 <memset+0xa>
 8007824:	4770      	bx	lr
 8007826:	7019      	strb	r1, [r3, #0]
 8007828:	3301      	adds	r3, #1
 800782a:	e7f9      	b.n	8007820 <memset+0x4>

0800782c <__libc_init_array>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	2600      	movs	r6, #0
 8007830:	4c0c      	ldr	r4, [pc, #48]	; (8007864 <__libc_init_array+0x38>)
 8007832:	4d0d      	ldr	r5, [pc, #52]	; (8007868 <__libc_init_array+0x3c>)
 8007834:	1b64      	subs	r4, r4, r5
 8007836:	10a4      	asrs	r4, r4, #2
 8007838:	42a6      	cmp	r6, r4
 800783a:	d109      	bne.n	8007850 <__libc_init_array+0x24>
 800783c:	2600      	movs	r6, #0
 800783e:	f000 f819 	bl	8007874 <_init>
 8007842:	4c0a      	ldr	r4, [pc, #40]	; (800786c <__libc_init_array+0x40>)
 8007844:	4d0a      	ldr	r5, [pc, #40]	; (8007870 <__libc_init_array+0x44>)
 8007846:	1b64      	subs	r4, r4, r5
 8007848:	10a4      	asrs	r4, r4, #2
 800784a:	42a6      	cmp	r6, r4
 800784c:	d105      	bne.n	800785a <__libc_init_array+0x2e>
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	00b3      	lsls	r3, r6, #2
 8007852:	58eb      	ldr	r3, [r5, r3]
 8007854:	4798      	blx	r3
 8007856:	3601      	adds	r6, #1
 8007858:	e7ee      	b.n	8007838 <__libc_init_array+0xc>
 800785a:	00b3      	lsls	r3, r6, #2
 800785c:	58eb      	ldr	r3, [r5, r3]
 800785e:	4798      	blx	r3
 8007860:	3601      	adds	r6, #1
 8007862:	e7f2      	b.n	800784a <__libc_init_array+0x1e>
 8007864:	0800794c 	.word	0x0800794c
 8007868:	0800794c 	.word	0x0800794c
 800786c:	08007950 	.word	0x08007950
 8007870:	0800794c 	.word	0x0800794c

08007874 <_init>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	46c0      	nop			; (mov r8, r8)
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr

08007880 <_fini>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr

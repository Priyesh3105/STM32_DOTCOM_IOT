
SPI_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800388c  0800388c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003900  08003900  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000014  0800391c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  0800391c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aed4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199c  00000000  00000000  0002af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013061  00000000  00000000  0002da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0ce  00000000  00000000  00040ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000758ad  00000000  00000000  0004bb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1434  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002028  00000000  00000000  000c1484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003874 	.word	0x08003874

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003874 	.word	0x08003874

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fae0 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f816 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f90c 	bl	80006d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b8:	f000 f8ec 	bl	8000694 <MX_DMA_Init>
  MX_SPI2_Init();
 80004bc:	f000 f882 	bl	80005c4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004c0:	f000 f8b8 	bl	8000634 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_TransmitReceive_DMA(&hspi2, buffer_tx, buffer_rx, 7);
 80004c4:	4a03      	ldr	r2, [pc, #12]	; (80004d4 <main+0x2c>)
 80004c6:	4904      	ldr	r1, [pc, #16]	; (80004d8 <main+0x30>)
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <main+0x34>)
 80004ca:	2307      	movs	r3, #7
 80004cc:	f001 ffa0 	bl	8002410 <HAL_SPI_TransmitReceive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <main+0x28>
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	200001a0 	.word	0x200001a0
 80004d8:	20000000 	.word	0x20000000
 80004dc:	20000030 	.word	0x20000030

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b09d      	sub	sp, #116	; 0x74
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	2438      	movs	r4, #56	; 0x38
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	0018      	movs	r0, r3
 80004ec:	2338      	movs	r3, #56	; 0x38
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f003 f9b7 	bl	8003864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	2324      	movs	r3, #36	; 0x24
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	0018      	movs	r0, r3
 80004fc:	2314      	movs	r3, #20
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f003 f9af 	bl	8003864 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000506:	003b      	movs	r3, r7
 8000508:	0018      	movs	r0, r3
 800050a:	2324      	movs	r3, #36	; 0x24
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f003 f9a8 	bl	8003864 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000514:	4b29      	ldr	r3, [pc, #164]	; (80005bc <SystemClock_Config+0xdc>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a29      	ldr	r2, [pc, #164]	; (80005c0 <SystemClock_Config+0xe0>)
 800051a:	401a      	ands	r2, r3
 800051c:	4b27      	ldr	r3, [pc, #156]	; (80005bc <SystemClock_Config+0xdc>)
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	0109      	lsls	r1, r1, #4
 8000522:	430a      	orrs	r2, r1
 8000524:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000526:	0021      	movs	r1, r4
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2202      	movs	r2, #2
 800052c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2201      	movs	r2, #1
 8000532:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2210      	movs	r2, #16
 8000538:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2202      	movs	r2, #2
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	02d2      	lsls	r2, r2, #11
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	03d2      	lsls	r2, r2, #15
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	187b      	adds	r3, r7, r1
 8000558:	0018      	movs	r0, r3
 800055a:	f000 ff4f 	bl	80013fc <HAL_RCC_OscConfig>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000562:	f000 f903 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	2124      	movs	r1, #36	; 0x24
 8000568:	187b      	adds	r3, r7, r1
 800056a:	220f      	movs	r2, #15
 800056c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2203      	movs	r2, #3
 8000572:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2101      	movs	r1, #1
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fafa 	bl	8001b84 <HAL_RCC_ClockConfig>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000594:	f000 f8ea 	bl	800076c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000598:	003b      	movs	r3, r7
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800059e:	003b      	movs	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a4:	003b      	movs	r3, r7
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fd10 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005b0:	f000 f8dc 	bl	800076c <Error_Handler>
  }
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b01d      	add	sp, #116	; 0x74
 80005ba:	bd90      	pop	{r4, r7, pc}
 80005bc:	40007000 	.word	0x40007000
 80005c0:	ffffe7ff 	.word	0xffffe7ff

080005c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_SPI2_Init+0x68>)
 80005ca:	4a19      	ldr	r2, [pc, #100]	; (8000630 <MX_SPI2_Init+0x6c>)
 80005cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_SPI2_Init+0x68>)
 80005d0:	2282      	movs	r2, #130	; 0x82
 80005d2:	0052      	lsls	r2, r2, #1
 80005d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_SPI2_Init+0x68>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_SPI2_Init+0x68>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_SPI2_Init+0x68>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_SPI2_Init+0x68>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_SPI2_Init+0x68>)
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	0092      	lsls	r2, r2, #2
 80005f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_SPI2_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_SPI2_Init+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_SPI2_Init+0x68>)
 8000604:	2200      	movs	r2, #0
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_SPI2_Init+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_SPI2_Init+0x68>)
 8000610:	2207      	movs	r2, #7
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <MX_SPI2_Init+0x68>)
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fe66 	bl	80022e8 <HAL_SPI_Init>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000620:	f000 f8a4 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	20000030 	.word	0x20000030
 8000630:	40003800 	.word	0x40003800

08000634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_USART1_UART_Init+0x58>)
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <MX_USART1_UART_Init+0x5c>)
 800063c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000640:	22e1      	movs	r2, #225	; 0xe1
 8000642:	0252      	lsls	r2, r2, #9
 8000644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_USART1_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_USART1_UART_Init+0x58>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_USART1_UART_Init+0x58>)
 8000678:	0018      	movs	r0, r3
 800067a:	f002 fb2d 	bl	8002cd8 <HAL_UART_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000682:	f000 f873 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000118 	.word	0x20000118
 8000690:	40013800 	.word	0x40013800

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_DMA_Init+0x38>)
 800069c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_DMA_Init+0x38>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	631a      	str	r2, [r3, #48]	; 0x30
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_DMA_Init+0x38>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	200b      	movs	r0, #11
 80006b8:	f000 faf6 	bl	8000ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006bc:	200b      	movs	r0, #11
 80006be:	f000 fb08 	bl	8000cd2 <HAL_NVIC_EnableIRQ>

}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_GPIO_Init+0x70>)
 80006d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_GPIO_Init+0x70>)
 80006dc:	2104      	movs	r1, #4
 80006de:	430a      	orrs	r2, r1
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_GPIO_Init+0x70>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e6:	2204      	movs	r2, #4
 80006e8:	4013      	ands	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_GPIO_Init+0x70>)
 80006f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_GPIO_Init+0x70>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_GPIO_Init+0x70>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_GPIO_Init+0x70>)
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_GPIO_Init+0x70>)
 800070c:	2102      	movs	r1, #2
 800070e:	430a      	orrs	r2, r1
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_GPIO_Init+0x70>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	2202      	movs	r2, #2
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_GPIO_Init+0x70>)
 8000720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_GPIO_Init+0x70>)
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MX_GPIO_Init+0x70>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	2201      	movs	r2, #1
 8000730:	4013      	ands	r3, r2
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b004      	add	sp, #16
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, buffer_rx, 7, 1000);
 800074c:	23fa      	movs	r3, #250	; 0xfa
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4904      	ldr	r1, [pc, #16]	; (8000764 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000754:	2207      	movs	r2, #7
 8000756:	f002 fb13 	bl	8002d80 <HAL_UART_Transmit>
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	200001a0 	.word	0x200001a0
 8000768:	20000118 	.word	0x20000118

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_MspInit+0x24>)
 800077e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x24>)
 8000782:	2101      	movs	r1, #1
 8000784:	430a      	orrs	r2, r1
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <HAL_MspInit+0x24>)
 800078a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <HAL_MspInit+0x24>)
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	0549      	lsls	r1, r1, #21
 8000792:	430a      	orrs	r2, r1
 8000794:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	240c      	movs	r4, #12
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	0018      	movs	r0, r3
 80007ae:	2314      	movs	r3, #20
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f003 f856 	bl	8003864 <memset>
  if(hspi->Instance==SPI2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a50      	ldr	r2, [pc, #320]	; (8000900 <HAL_SPI_MspInit+0x160>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d000      	beq.n	80007c4 <HAL_SPI_MspInit+0x24>
 80007c2:	e099      	b.n	80008f8 <HAL_SPI_MspInit+0x158>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007c4:	4b4f      	ldr	r3, [pc, #316]	; (8000904 <HAL_SPI_MspInit+0x164>)
 80007c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007c8:	4b4e      	ldr	r3, [pc, #312]	; (8000904 <HAL_SPI_MspInit+0x164>)
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	01c9      	lsls	r1, r1, #7
 80007ce:	430a      	orrs	r2, r1
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <HAL_SPI_MspInit+0x164>)
 80007d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d6:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <HAL_SPI_MspInit+0x164>)
 80007d8:	2102      	movs	r1, #2
 80007da:	430a      	orrs	r2, r1
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007de:	4b49      	ldr	r3, [pc, #292]	; (8000904 <HAL_SPI_MspInit+0x164>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	2202      	movs	r2, #2
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = BSP_SPI_SCK_Pin;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	00d2      	lsls	r2, r2, #3
 80007f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2202      	movs	r2, #2
 80007f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2203      	movs	r2, #3
 8000802:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2205      	movs	r2, #5
 8000808:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BSP_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 800080a:	193b      	adds	r3, r7, r4
 800080c:	4a3e      	ldr	r2, [pc, #248]	; (8000908 <HAL_SPI_MspInit+0x168>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f000 fc7d 	bl	8001110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BSP_SPI_MISO_Pin|BSP_SPI_MOSI_Pin;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	22c0      	movs	r2, #192	; 0xc0
 800081c:	0212      	lsls	r2, r2, #8
 800081e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2202      	movs	r2, #2
 8000824:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2203      	movs	r2, #3
 8000830:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	187b      	adds	r3, r7, r1
 800083a:	4a33      	ldr	r2, [pc, #204]	; (8000908 <HAL_SPI_MspInit+0x168>)
 800083c:	0019      	movs	r1, r3
 800083e:	0010      	movs	r0, r2
 8000840:	f000 fc66 	bl	8001110 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <HAL_SPI_MspInit+0x16c>)
 8000846:	4a32      	ldr	r2, [pc, #200]	; (8000910 <HAL_SPI_MspInit+0x170>)
 8000848:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <HAL_SPI_MspInit+0x16c>)
 800084c:	2202      	movs	r2, #2
 800084e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <HAL_SPI_MspInit+0x16c>)
 8000852:	2210      	movs	r2, #16
 8000854:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <HAL_SPI_MspInit+0x16c>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <HAL_SPI_MspInit+0x16c>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000862:	4b2a      	ldr	r3, [pc, #168]	; (800090c <HAL_SPI_MspInit+0x16c>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000868:	4b28      	ldr	r3, [pc, #160]	; (800090c <HAL_SPI_MspInit+0x16c>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <HAL_SPI_MspInit+0x16c>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <HAL_SPI_MspInit+0x16c>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <HAL_SPI_MspInit+0x16c>)
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fa45 	bl	8000d0c <HAL_DMA_Init>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 8000886:	f7ff ff71 	bl	800076c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a1f      	ldr	r2, [pc, #124]	; (800090c <HAL_SPI_MspInit+0x16c>)
 800088e:	649a      	str	r2, [r3, #72]	; 0x48
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <HAL_SPI_MspInit+0x16c>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <HAL_SPI_MspInit+0x174>)
 8000898:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <HAL_SPI_MspInit+0x178>)
 800089a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <HAL_SPI_MspInit+0x174>)
 800089e:	2202      	movs	r2, #2
 80008a0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fa1c 	bl	8000d0c <HAL_DMA_Init>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <HAL_SPI_MspInit+0x13c>
    {
      Error_Handler();
 80008d8:	f7ff ff48 	bl	800076c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_SPI_MspInit+0x174>)
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	201a      	movs	r0, #26
 80008ee:	f000 f9db 	bl	8000ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008f2:	201a      	movs	r0, #26
 80008f4:	f000 f9ed 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b009      	add	sp, #36	; 0x24
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	40003800 	.word	0x40003800
 8000904:	40021000 	.word	0x40021000
 8000908:	50000400 	.word	0x50000400
 800090c:	20000088 	.word	0x20000088
 8000910:	40020058 	.word	0x40020058
 8000914:	200000d0 	.word	0x200000d0
 8000918:	40020044 	.word	0x40020044

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	240c      	movs	r4, #12
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0018      	movs	r0, r3
 800092a:	2314      	movs	r3, #20
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 ff98 	bl	8003864 <memset>
  if(huart->Instance==USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a18      	ldr	r2, [pc, #96]	; (800099c <HAL_UART_MspInit+0x80>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12a      	bne.n	8000994 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_UART_MspInit+0x84>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_UART_MspInit+0x84>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	01c9      	lsls	r1, r1, #7
 8000948:	430a      	orrs	r2, r1
 800094a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_UART_MspInit+0x84>)
 800094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_UART_MspInit+0x84>)
 8000952:	2101      	movs	r1, #1
 8000954:	430a      	orrs	r2, r1
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_UART_MspInit+0x84>)
 800095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095c:	2201      	movs	r2, #1
 800095e:	4013      	ands	r3, r2
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	22c0      	movs	r2, #192	; 0xc0
 8000968:	00d2      	lsls	r2, r2, #3
 800096a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	0021      	movs	r1, r4
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2202      	movs	r2, #2
 8000972:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2203      	movs	r2, #3
 800097e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2204      	movs	r2, #4
 8000984:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	187a      	adds	r2, r7, r1
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fbbe 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b009      	add	sp, #36	; 0x24
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	40013800 	.word	0x40013800
 80009a0:	40021000 	.word	0x40021000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8a6 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fabb 	bl	8000f56 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fab7 	bl	8000f56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	200000d0 	.word	0x200000d0
 80009f4:	20000088 	.word	0x20000088

080009f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <SPI2_IRQHandler+0x14>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fe18 	bl	8002634 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000030 	.word	0x20000030

08000a10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a20:	f7ff fff6 	bl	8000a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	; (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	; (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f002 fee7 	bl	800381c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fd2b 	bl	80004a8 <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   r0, =_estack
 8000a54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a60:	08003908 	.word	0x08003908
  ldr r2, =_sbss
 8000a64:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a68:	200001ac 	.word	0x200001ac

08000a6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_COMP_IRQHandler>
	...

08000a70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_Init+0x3c>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_Init+0x3c>)
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f000 f811 	bl	8000ab0 <HAL_InitTick>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e001      	b.n	8000a9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a9a:	f7ff fe6d 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
}
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_InitTick+0x5c>)
 8000aba:	681c      	ldr	r4, [r3, #0]
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_InitTick+0x60>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	23fa      	movs	r3, #250	; 0xfa
 8000ac4:	0098      	lsls	r0, r3, #2
 8000ac6:	f7ff fb1f 	bl	8000108 <__udivsi3>
 8000aca:	0003      	movs	r3, r0
 8000acc:	0019      	movs	r1, r3
 8000ace:	0020      	movs	r0, r4
 8000ad0:	f7ff fb1a 	bl	8000108 <__udivsi3>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f90b 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e00f      	b.n	8000b04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d80b      	bhi.n	8000b02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2301      	movs	r3, #1
 8000aee:	425b      	negs	r3, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f8d8 	bl	8000ca8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_InitTick+0x64>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b003      	add	sp, #12
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000010 	.word	0x20000010
 8000b14:	2000000c 	.word	0x2000000c

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	001a      	movs	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	18d2      	adds	r2, r2, r3
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000010 	.word	0x20000010
 8000b38:	200001a8 	.word	0x200001a8

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	200001a8 	.word	0x200001a8

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	0002      	movs	r2, r0
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b7f      	cmp	r3, #127	; 0x7f
 8000b62:	d809      	bhi.n	8000b78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	001a      	movs	r2, r3
 8000b6a:	231f      	movs	r3, #31
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_EnableIRQ+0x30>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	4091      	lsls	r1, r2
 8000b74:	000a      	movs	r2, r1
 8000b76:	601a      	str	r2, [r3, #0]
  }
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b002      	add	sp, #8
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b7f      	cmp	r3, #127	; 0x7f
 8000b98:	d828      	bhi.n	8000bec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9a:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <__NVIC_SetPriority+0xd4>)
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	33c0      	adds	r3, #192	; 0xc0
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	589b      	ldr	r3, [r3, r2]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	481f      	ldr	r0, [pc, #124]	; (8000c58 <__NVIC_SetPriority+0xd4>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	430a      	orrs	r2, r1
 8000be4:	33c0      	adds	r3, #192	; 0xc0
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bea:	e031      	b.n	8000c50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bec:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <__NVIC_SetPriority+0xd8>)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	3b08      	subs	r3, #8
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3306      	adds	r3, #6
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	3304      	adds	r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	; 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	; 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <__NVIC_SetPriority+0xd8>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	4023      	ands	r3, r4
 8000c40:	3b08      	subs	r3, #8
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	430a      	orrs	r2, r1
 8000c46:	3306      	adds	r3, #6
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	18c3      	adds	r3, r0, r3
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b003      	add	sp, #12
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	045b      	lsls	r3, r3, #17
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d301      	bcc.n	8000c78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c74:	2301      	movs	r3, #1
 8000c76:	e010      	b.n	8000c9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <SysTick_Config+0x44>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c80:	2301      	movs	r3, #1
 8000c82:	425b      	negs	r3, r3
 8000c84:	2103      	movs	r1, #3
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ff7c 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x44>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x44>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	1c02      	adds	r2, r0, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	0002      	movs	r2, r0
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ff33 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ffaf 	bl	8000c60 <SysTick_Config>
 8000d02:	0003      	movs	r3, r0
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e061      	b.n	8000de2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a32      	ldr	r2, [pc, #200]	; (8000dec <HAL_DMA_Init+0xe0>)
 8000d24:	4694      	mov	ip, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	2114      	movs	r1, #20
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff f9ec 	bl	8000108 <__udivsi3>
 8000d30:	0003      	movs	r3, r0
 8000d32:	009a      	lsls	r2, r3, #2
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	; (8000df0 <HAL_DMA_Init+0xe4>)
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2225      	movs	r2, #37	; 0x25
 8000d42:	2102      	movs	r1, #2
 8000d44:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4a28      	ldr	r2, [pc, #160]	; (8000df4 <HAL_DMA_Init+0xe8>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	01db      	lsls	r3, r3, #7
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d018      	beq.n	8000dca <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_DMA_Init+0xec>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da0:	211c      	movs	r1, #28
 8000da2:	400b      	ands	r3, r1
 8000da4:	210f      	movs	r1, #15
 8000da6:	4099      	lsls	r1, r3
 8000da8:	000b      	movs	r3, r1
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_DMA_Init+0xec>)
 8000dae:	400a      	ands	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_DMA_Init+0xec>)
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	201c      	movs	r0, #28
 8000dc0:	4003      	ands	r3, r0
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_DMA_Init+0xec>)
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2225      	movs	r2, #37	; 0x25
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2224      	movs	r2, #36	; 0x24
 8000ddc:	2100      	movs	r1, #0
 8000dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b004      	add	sp, #16
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	bffdfff8 	.word	0xbffdfff8
 8000df0:	40020000 	.word	0x40020000
 8000df4:	ffff800f 	.word	0xffff800f
 8000df8:	400200a8 	.word	0x400200a8

08000dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0a:	2317      	movs	r3, #23
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2224      	movs	r2, #36	; 0x24
 8000e16:	5c9b      	ldrb	r3, [r3, r2]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_DMA_Start_IT+0x24>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e04f      	b.n	8000ec0 <HAL_DMA_Start_IT+0xc4>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2224      	movs	r2, #36	; 0x24
 8000e24:	2101      	movs	r1, #1
 8000e26:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2225      	movs	r2, #37	; 0x25
 8000e2c:	5c9b      	ldrb	r3, [r3, r2]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d13a      	bne.n	8000eaa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2225      	movs	r2, #37	; 0x25
 8000e38:	2102      	movs	r1, #2
 8000e3a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	438a      	bics	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f000 f92a 	bl	80010b2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d008      	beq.n	8000e78 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	210e      	movs	r1, #14
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e00f      	b.n	8000e98 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2104      	movs	r1, #4
 8000e84:	438a      	bics	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	210a      	movs	r1, #10
 8000e94:	430a      	orrs	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e007      	b.n	8000eba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2224      	movs	r2, #36	; 0x24
 8000eae:	2100      	movs	r1, #0
 8000eb0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000eb2:	2317      	movs	r3, #23
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000eba:	2317      	movs	r3, #23
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	781b      	ldrb	r3, [r3, #0]
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b006      	add	sp, #24
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2225      	movs	r2, #37	; 0x25
 8000edc:	5c9b      	ldrb	r3, [r3, r2]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d006      	beq.n	8000ef2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e02a      	b.n	8000f48 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	210e      	movs	r1, #14
 8000efe:	438a      	bics	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	438a      	bics	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	221c      	movs	r2, #28
 8000f18:	401a      	ands	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4091      	lsls	r1, r2
 8000f22:	000a      	movs	r2, r1
 8000f24:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2225      	movs	r2, #37	; 0x25
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2224      	movs	r2, #36	; 0x24
 8000f32:	2100      	movs	r1, #0
 8000f34:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	0010      	movs	r0, r2
 8000f46:	4798      	blx	r3
    }
  }
  return status;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b004      	add	sp, #16
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	221c      	movs	r2, #28
 8000f74:	4013      	ands	r3, r2
 8000f76:	2204      	movs	r2, #4
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d026      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0x7a>
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2204      	movs	r2, #4
 8000f86:	4013      	ands	r3, r2
 8000f88:	d022      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2220      	movs	r2, #32
 8000f92:	4013      	ands	r3, r2
 8000f94:	d107      	bne.n	8000fa6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	438a      	bics	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	221c      	movs	r2, #28
 8000fac:	401a      	ands	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <HAL_DMA_IRQHandler+0x6e>
 8000fc2:	e071      	b.n	80010a8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	0010      	movs	r0, r2
 8000fcc:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000fce:	e06b      	b.n	80010a8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd4:	221c      	movs	r2, #28
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2202      	movs	r2, #2
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d02d      	beq.n	8001040 <HAL_DMA_IRQHandler+0xea>
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d029      	beq.n	8001040 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d10b      	bne.n	8001010 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	210a      	movs	r1, #10
 8001004:	438a      	bics	r2, r1
 8001006:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2225      	movs	r2, #37	; 0x25
 800100c:	2101      	movs	r1, #1
 800100e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	221c      	movs	r2, #28
 8001016:	401a      	ands	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	2102      	movs	r1, #2
 800101e:	4091      	lsls	r1, r2
 8001020:	000a      	movs	r2, r1
 8001022:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2224      	movs	r2, #36	; 0x24
 8001028:	2100      	movs	r1, #0
 800102a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b00      	cmp	r3, #0
 8001032:	d039      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	0010      	movs	r0, r2
 800103c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800103e:	e033      	b.n	80010a8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	221c      	movs	r2, #28
 8001046:	4013      	ands	r3, r2
 8001048:	2208      	movs	r2, #8
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4013      	ands	r3, r2
 8001052:	d02a      	beq.n	80010aa <HAL_DMA_IRQHandler+0x154>
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2208      	movs	r2, #8
 8001058:	4013      	ands	r3, r2
 800105a:	d026      	beq.n	80010aa <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	210e      	movs	r1, #14
 8001068:	438a      	bics	r2, r1
 800106a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	221c      	movs	r2, #28
 8001072:	401a      	ands	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	2101      	movs	r1, #1
 800107a:	4091      	lsls	r1, r2
 800107c:	000a      	movs	r2, r1
 800107e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2225      	movs	r2, #37	; 0x25
 800108a:	2101      	movs	r1, #1
 800108c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2224      	movs	r2, #36	; 0x24
 8001092:	2100      	movs	r1, #0
 8001094:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	0010      	movs	r0, r2
 80010a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46c0      	nop			; (mov r8, r8)
}
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c4:	221c      	movs	r2, #28
 80010c6:	401a      	ands	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	2101      	movs	r1, #1
 80010ce:	4091      	lsls	r1, r2
 80010d0:	000a      	movs	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	d108      	bne.n	80010f6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010f4:	e007      	b.n	8001106 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	60da      	str	r2, [r3, #12]
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b004      	add	sp, #16
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001126:	e14f      	b.n	80013c8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2101      	movs	r1, #1
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4091      	lsls	r1, r2
 8001132:	000a      	movs	r2, r1
 8001134:	4013      	ands	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d100      	bne.n	8001140 <HAL_GPIO_Init+0x30>
 800113e:	e140      	b.n	80013c2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	4013      	ands	r3, r2
 8001148:	2b01      	cmp	r3, #1
 800114a:	d005      	beq.n	8001158 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2203      	movs	r2, #3
 8001152:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001154:	2b02      	cmp	r3, #2
 8001156:	d130      	bne.n	80011ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	409a      	lsls	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118e:	2201      	movs	r2, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	2201      	movs	r2, #1
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d017      	beq.n	80011f6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d123      	bne.n	800124a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	58d3      	ldr	r3, [r2, r3]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2207      	movs	r2, #7
 8001214:	4013      	ands	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	409a      	lsls	r2, r3
 800121c:	0013      	movs	r3, r2
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	691a      	ldr	r2, [r3, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2107      	movs	r1, #7
 800122e:	400b      	ands	r3, r1
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	6939      	ldr	r1, [r7, #16]
 8001248:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	43da      	mvns	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2203      	movs	r2, #3
 8001268:	401a      	ands	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	23c0      	movs	r3, #192	; 0xc0
 8001284:	029b      	lsls	r3, r3, #10
 8001286:	4013      	ands	r3, r2
 8001288:	d100      	bne.n	800128c <HAL_GPIO_Init+0x17c>
 800128a:	e09a      	b.n	80013c2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128c:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800128e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001292:	2101      	movs	r1, #1
 8001294:	430a      	orrs	r2, r1
 8001296:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001298:	4a52      	ldr	r2, [pc, #328]	; (80013e4 <HAL_GPIO_Init+0x2d4>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	589b      	ldr	r3, [r3, r2]
 80012a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2203      	movs	r2, #3
 80012aa:	4013      	ands	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	23a0      	movs	r3, #160	; 0xa0
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x1ea>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_GPIO_Init+0x2d8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1e6>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a46      	ldr	r2, [pc, #280]	; (80013ec <HAL_GPIO_Init+0x2dc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1e2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <HAL_GPIO_Init+0x2e0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1de>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a44      	ldr	r2, [pc, #272]	; (80013f4 <HAL_GPIO_Init+0x2e4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1da>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x1ec>
 80012ea:	2306      	movs	r3, #6
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x1ec>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x1ec>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x1ec>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x1ec>
 80012fa:	2300      	movs	r3, #0
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	2103      	movs	r1, #3
 8001300:	400a      	ands	r2, r1
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	; (80013e4 <HAL_GPIO_Init+0x2d4>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	035b      	lsls	r3, r3, #13
 8001332:	4013      	ands	r3, r2
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43da      	mvns	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	039b      	lsls	r3, r3, #14
 800135c:	4013      	ands	r3, r2
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4013      	ands	r3, r2
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	4013      	ands	r3, r2
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	40da      	lsrs	r2, r3
 80013d0:	1e13      	subs	r3, r2, #0
 80013d2:	d000      	beq.n	80013d6 <HAL_GPIO_Init+0x2c6>
 80013d4:	e6a8      	b.n	8001128 <HAL_GPIO_Init+0x18>
  }
}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b006      	add	sp, #24
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	50000400 	.word	0x50000400
 80013ec:	50000800 	.word	0x50000800
 80013f0:	50000c00 	.word	0x50000c00
 80013f4:	50001c00 	.word	0x50001c00
 80013f8:	40010400 	.word	0x40010400

080013fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b5b0      	push	{r4, r5, r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	f000 fbaf 	bl	8001b6e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001410:	4bcf      	ldr	r3, [pc, #828]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	220c      	movs	r2, #12
 8001416:	4013      	ands	r3, r2
 8001418:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800141a:	4bcd      	ldr	r3, [pc, #820]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	025b      	lsls	r3, r3, #9
 8001422:	4013      	ands	r3, r2
 8001424:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2201      	movs	r2, #1
 800142c:	4013      	ands	r3, r2
 800142e:	d100      	bne.n	8001432 <HAL_RCC_OscConfig+0x36>
 8001430:	e07e      	b.n	8001530 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d007      	beq.n	8001448 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	2b0c      	cmp	r3, #12
 800143c:	d112      	bne.n	8001464 <HAL_RCC_OscConfig+0x68>
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	025b      	lsls	r3, r3, #9
 8001444:	429a      	cmp	r2, r3
 8001446:	d10d      	bne.n	8001464 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4bc1      	ldr	r3, [pc, #772]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	4013      	ands	r3, r2
 8001452:	d100      	bne.n	8001456 <HAL_RCC_OscConfig+0x5a>
 8001454:	e06b      	b.n	800152e <HAL_RCC_OscConfig+0x132>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d167      	bne.n	800152e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	f000 fb85 	bl	8001b6e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	429a      	cmp	r2, r3
 800146e:	d107      	bne.n	8001480 <HAL_RCC_OscConfig+0x84>
 8001470:	4bb7      	ldr	r3, [pc, #732]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4bb6      	ldr	r3, [pc, #728]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	0249      	lsls	r1, r1, #9
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e027      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	23a0      	movs	r3, #160	; 0xa0
 8001486:	02db      	lsls	r3, r3, #11
 8001488:	429a      	cmp	r2, r3
 800148a:	d10e      	bne.n	80014aa <HAL_RCC_OscConfig+0xae>
 800148c:	4bb0      	ldr	r3, [pc, #704]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4baf      	ldr	r3, [pc, #700]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	02c9      	lsls	r1, r1, #11
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	4bad      	ldr	r3, [pc, #692]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4bac      	ldr	r3, [pc, #688]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80014a0:	2180      	movs	r1, #128	; 0x80
 80014a2:	0249      	lsls	r1, r1, #9
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e012      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 80014aa:	4ba9      	ldr	r3, [pc, #676]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4ba8      	ldr	r3, [pc, #672]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80014b0:	49a8      	ldr	r1, [pc, #672]	; (8001754 <HAL_RCC_OscConfig+0x358>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	4ba6      	ldr	r3, [pc, #664]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4ba2      	ldr	r3, [pc, #648]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4ba1      	ldr	r3, [pc, #644]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80014ca:	49a3      	ldr	r1, [pc, #652]	; (8001758 <HAL_RCC_OscConfig+0x35c>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d015      	beq.n	8001504 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb30 	bl	8000b3c <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014e0:	e009      	b.n	80014f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fb2b 	bl	8000b3c <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	; 0x64
 80014ee:	d902      	bls.n	80014f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	f000 fb3c 	bl	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014f6:	4b96      	ldr	r3, [pc, #600]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	029b      	lsls	r3, r3, #10
 80014fe:	4013      	ands	r3, r2
 8001500:	d0ef      	beq.n	80014e2 <HAL_RCC_OscConfig+0xe6>
 8001502:	e015      	b.n	8001530 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb1a 	bl	8000b3c <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150e:	f7ff fb15 	bl	8000b3c <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b64      	cmp	r3, #100	; 0x64
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e326      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001520:	4b8b      	ldr	r3, [pc, #556]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	029b      	lsls	r3, r3, #10
 8001528:	4013      	ands	r3, r2
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x112>
 800152c:	e000      	b.n	8001530 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d100      	bne.n	800153c <HAL_RCC_OscConfig+0x140>
 800153a:	e08b      	b.n	8001654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d13e      	bne.n	80015cc <HAL_RCC_OscConfig+0x1d0>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d13b      	bne.n	80015cc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001554:	4b7e      	ldr	r3, [pc, #504]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2204      	movs	r2, #4
 800155a:	4013      	ands	r3, r2
 800155c:	d004      	beq.n	8001568 <HAL_RCC_OscConfig+0x16c>
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e302      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b79      	ldr	r3, [pc, #484]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a7b      	ldr	r2, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x360>)
 800156e:	4013      	ands	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	021a      	lsls	r2, r3, #8
 8001578:	4b75      	ldr	r3, [pc, #468]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800157a:	430a      	orrs	r2, r1
 800157c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800157e:	4b74      	ldr	r3, [pc, #464]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2209      	movs	r2, #9
 8001584:	4393      	bics	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	4b71      	ldr	r3, [pc, #452]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001590:	f000 fc40 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001594:	0001      	movs	r1, r0
 8001596:	4b6e      	ldr	r3, [pc, #440]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	220f      	movs	r2, #15
 800159e:	4013      	ands	r3, r2
 80015a0:	4a6f      	ldr	r2, [pc, #444]	; (8001760 <HAL_RCC_OscConfig+0x364>)
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	000a      	movs	r2, r1
 80015a6:	40da      	lsrs	r2, r3
 80015a8:	4b6e      	ldr	r3, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x368>)
 80015aa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80015ac:	4b6e      	ldr	r3, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x36c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2513      	movs	r5, #19
 80015b2:	197c      	adds	r4, r7, r5
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff fa7b 	bl	8000ab0 <HAL_InitTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80015be:	197b      	adds	r3, r7, r5
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d046      	beq.n	8001654 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80015c6:	197b      	adds	r3, r7, r5
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	e2d0      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d027      	beq.n	8001622 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015d2:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2209      	movs	r2, #9
 80015d8:	4393      	bics	r3, r2
 80015da:	0019      	movs	r1, r3
 80015dc:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff faaa 	bl	8000b3c <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff faa5 	bl	8000b3c <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e2b6      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2204      	movs	r2, #4
 8001606:	4013      	ands	r3, r2
 8001608:	d0f1      	beq.n	80015ee <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b51      	ldr	r3, [pc, #324]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a53      	ldr	r2, [pc, #332]	; (800175c <HAL_RCC_OscConfig+0x360>)
 8001610:	4013      	ands	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	021a      	lsls	r2, r3, #8
 800161a:	4b4d      	ldr	r3, [pc, #308]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800161c:	430a      	orrs	r2, r1
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	e018      	b.n	8001654 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001628:	2101      	movs	r1, #1
 800162a:	438a      	bics	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff fa85 	bl	8000b3c <HAL_GetTick>
 8001632:	0003      	movs	r3, r0
 8001634:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fa80 	bl	8000b3c <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e291      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2204      	movs	r2, #4
 8001650:	4013      	ands	r3, r2
 8001652:	d1f1      	bne.n	8001638 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2210      	movs	r2, #16
 800165a:	4013      	ands	r3, r2
 800165c:	d100      	bne.n	8001660 <HAL_RCC_OscConfig+0x264>
 800165e:	e0a1      	b.n	80017a4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d140      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4013      	ands	r3, r2
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x282>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e277      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4a3a      	ldr	r2, [pc, #232]	; (800176c <HAL_RCC_OscConfig+0x370>)
 8001684:	4013      	ands	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800168e:	430a      	orrs	r2, r1
 8001690:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	0a19      	lsrs	r1, r3, #8
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	061a      	lsls	r2, r3, #24
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	0b5b      	lsrs	r3, r3, #13
 80016ac:	3301      	adds	r3, #1
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	0212      	lsls	r2, r2, #8
 80016b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	210f      	movs	r1, #15
 80016bc:	400b      	ands	r3, r1
 80016be:	4928      	ldr	r1, [pc, #160]	; (8001760 <HAL_RCC_OscConfig+0x364>)
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x368>)
 80016c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x36c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2513      	movs	r5, #19
 80016ce:	197c      	adds	r4, r7, r5
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff f9ed 	bl	8000ab0 <HAL_InitTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d060      	beq.n	80017a4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80016e2:	197b      	adds	r3, r7, r5
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	e242      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d03f      	beq.n	8001770 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0049      	lsls	r1, r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fa1d 	bl	8000b3c <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001708:	f7ff fa18 	bl	8000b3c <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e229      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4013      	ands	r3, r2
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x370>)
 800172c:	4013      	ands	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 8001736:	430a      	orrs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	0a19      	lsrs	r1, r3, #8
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	061a      	lsls	r2, r3, #24
 8001748:	4b01      	ldr	r3, [pc, #4]	; (8001750 <HAL_RCC_OscConfig+0x354>)
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	e029      	b.n	80017a4 <HAL_RCC_OscConfig+0x3a8>
 8001750:	40021000 	.word	0x40021000
 8001754:	fffeffff 	.word	0xfffeffff
 8001758:	fffbffff 	.word	0xfffbffff
 800175c:	ffffe0ff 	.word	0xffffe0ff
 8001760:	0800388c 	.word	0x0800388c
 8001764:	20000008 	.word	0x20000008
 8001768:	2000000c 	.word	0x2000000c
 800176c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001770:	4bbd      	ldr	r3, [pc, #756]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4bbc      	ldr	r3, [pc, #752]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001776:	49bd      	ldr	r1, [pc, #756]	; (8001a6c <HAL_RCC_OscConfig+0x670>)
 8001778:	400a      	ands	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff f9de 	bl	8000b3c <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001786:	f7ff f9d9 	bl	8000b3c <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e1ea      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001798:	4bb3      	ldr	r3, [pc, #716]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2208      	movs	r2, #8
 80017aa:	4013      	ands	r3, r2
 80017ac:	d036      	beq.n	800181c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d019      	beq.n	80017ea <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b6:	4bac      	ldr	r3, [pc, #688]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80017b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ba:	4bab      	ldr	r3, [pc, #684]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff f9bb 	bl	8000b3c <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff f9b6 	bl	8000b3c <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1c7      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017de:	4ba2      	ldr	r3, [pc, #648]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f1      	beq.n	80017cc <HAL_RCC_OscConfig+0x3d0>
 80017e8:	e018      	b.n	800181c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ea:	4b9f      	ldr	r3, [pc, #636]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80017ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ee:	4b9e      	ldr	r3, [pc, #632]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	438a      	bics	r2, r1
 80017f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f6:	f7ff f9a1 	bl	8000b3c <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff f99c 	bl	8000b3c <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1ad      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001812:	4b95      	ldr	r3, [pc, #596]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d1f1      	bne.n	8001800 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2204      	movs	r2, #4
 8001822:	4013      	ands	r3, r2
 8001824:	d100      	bne.n	8001828 <HAL_RCC_OscConfig+0x42c>
 8001826:	e0ae      	b.n	8001986 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001828:	2027      	movs	r0, #39	; 0x27
 800182a:	183b      	adds	r3, r7, r0
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001830:	4b8d      	ldr	r3, [pc, #564]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	055b      	lsls	r3, r3, #21
 8001838:	4013      	ands	r3, r2
 800183a:	d109      	bne.n	8001850 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	4b8a      	ldr	r3, [pc, #552]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 800183e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001840:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	0549      	lsls	r1, r1, #21
 8001846:	430a      	orrs	r2, r1
 8001848:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800184a:	183b      	adds	r3, r7, r0
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	4b87      	ldr	r3, [pc, #540]	; (8001a70 <HAL_RCC_OscConfig+0x674>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4013      	ands	r3, r2
 800185a:	d11a      	bne.n	8001892 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185c:	4b84      	ldr	r3, [pc, #528]	; (8001a70 <HAL_RCC_OscConfig+0x674>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b83      	ldr	r3, [pc, #524]	; (8001a70 <HAL_RCC_OscConfig+0x674>)
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	0049      	lsls	r1, r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff f967 	bl	8000b3c <HAL_GetTick>
 800186e:	0003      	movs	r3, r0
 8001870:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001874:	f7ff f962 	bl	8000b3c <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e173      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x674>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4013      	ands	r3, r2
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	429a      	cmp	r2, r3
 800189c:	d107      	bne.n	80018ae <HAL_RCC_OscConfig+0x4b2>
 800189e:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a2:	4b71      	ldr	r3, [pc, #452]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	0049      	lsls	r1, r1, #1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	651a      	str	r2, [r3, #80]	; 0x50
 80018ac:	e031      	b.n	8001912 <HAL_RCC_OscConfig+0x516>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4d4>
 80018b6:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ba:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018bc:	496b      	ldr	r1, [pc, #428]	; (8001a6c <HAL_RCC_OscConfig+0x670>)
 80018be:	400a      	ands	r2, r1
 80018c0:	651a      	str	r2, [r3, #80]	; 0x50
 80018c2:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018c6:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018c8:	496a      	ldr	r1, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x678>)
 80018ca:	400a      	ands	r2, r1
 80018cc:	651a      	str	r2, [r3, #80]	; 0x50
 80018ce:	e020      	b.n	8001912 <HAL_RCC_OscConfig+0x516>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	23a0      	movs	r3, #160	; 0xa0
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	429a      	cmp	r2, r3
 80018da:	d10e      	bne.n	80018fa <HAL_RCC_OscConfig+0x4fe>
 80018dc:	4b62      	ldr	r3, [pc, #392]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e0:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	00c9      	lsls	r1, r1, #3
 80018e6:	430a      	orrs	r2, r1
 80018e8:	651a      	str	r2, [r3, #80]	; 0x50
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ee:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0049      	lsls	r1, r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	651a      	str	r2, [r3, #80]	; 0x50
 80018f8:	e00b      	b.n	8001912 <HAL_RCC_OscConfig+0x516>
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80018fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fe:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001900:	495a      	ldr	r1, [pc, #360]	; (8001a6c <HAL_RCC_OscConfig+0x670>)
 8001902:	400a      	ands	r2, r1
 8001904:	651a      	str	r2, [r3, #80]	; 0x50
 8001906:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001908:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 800190c:	4959      	ldr	r1, [pc, #356]	; (8001a74 <HAL_RCC_OscConfig+0x678>)
 800190e:	400a      	ands	r2, r1
 8001910:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d015      	beq.n	8001946 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff f90f 	bl	8000b3c <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001922:	e009      	b.n	8001938 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff f90a 	bl	8000b3c <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4a52      	ldr	r2, [pc, #328]	; (8001a78 <HAL_RCC_OscConfig+0x67c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e11a      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001938:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 800193a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4013      	ands	r3, r2
 8001942:	d0ef      	beq.n	8001924 <HAL_RCC_OscConfig+0x528>
 8001944:	e014      	b.n	8001970 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7ff f8f9 	bl	8000b3c <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800194e:	e009      	b.n	8001964 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff f8f4 	bl	8000b3c <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	4a47      	ldr	r2, [pc, #284]	; (8001a78 <HAL_RCC_OscConfig+0x67c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e104      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001964:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d1ef      	bne.n	8001950 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001970:	2327      	movs	r3, #39	; 0x27
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d105      	bne.n	8001986 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 800197c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001980:	493e      	ldr	r1, [pc, #248]	; (8001a7c <HAL_RCC_OscConfig+0x680>)
 8001982:	400a      	ands	r2, r1
 8001984:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2220      	movs	r2, #32
 800198c:	4013      	ands	r3, r2
 800198e:	d049      	beq.n	8001a24 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d026      	beq.n	80019e6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 800199e:	2101      	movs	r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80019a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <HAL_RCC_OscConfig+0x684>)
 80019b2:	6a1a      	ldr	r2, [r3, #32]
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <HAL_RCC_OscConfig+0x684>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0189      	lsls	r1, r1, #6
 80019ba:	430a      	orrs	r2, r1
 80019bc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff f8bd 	bl	8000b3c <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c8:	f7ff f8b8 	bl	8000b3c <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0c9      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d0f1      	beq.n	80019c8 <HAL_RCC_OscConfig+0x5cc>
 80019e4:	e01e      	b.n	8001a24 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	438a      	bics	r2, r1
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <HAL_RCC_OscConfig+0x684>)
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_RCC_OscConfig+0x684>)
 80019f8:	4922      	ldr	r1, [pc, #136]	; (8001a84 <HAL_RCC_OscConfig+0x688>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff f89d 	bl	8000b3c <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a08:	f7ff f898 	bl	8000b3c <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e0a9      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d1f1      	bne.n	8001a08 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCC_OscConfig+0x632>
 8001a2c:	e09e      	b.n	8001b6c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x63a>
 8001a34:	e077      	b.n	8001b26 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d158      	bne.n	8001af0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_OscConfig+0x66c>)
 8001a44:	4910      	ldr	r1, [pc, #64]	; (8001a88 <HAL_RCC_OscConfig+0x68c>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f877 	bl	8000b3c <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f872 	bl	8000b3c <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d914      	bls.n	8001a8c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e083      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	fffffeff 	.word	0xfffffeff
 8001a70:	40007000 	.word	0x40007000
 8001a74:	fffffbff 	.word	0xfffffbff
 8001a78:	00001388 	.word	0x00001388
 8001a7c:	efffffff 	.word	0xefffffff
 8001a80:	40010000 	.word	0x40010000
 8001a84:	ffffdfff 	.word	0xffffdfff
 8001a88:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	049b      	lsls	r3, r3, #18
 8001a94:	4013      	ands	r3, r2
 8001a96:	d1dd      	bne.n	8001a54 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a37      	ldr	r2, [pc, #220]	; (8001b7c <HAL_RCC_OscConfig+0x780>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	0449      	lsls	r1, r1, #17
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f839 	bl	8000b3c <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff f834 	bl	8000b3c <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e045      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ae2:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	049b      	lsls	r3, r3, #18
 8001aea:	4013      	ands	r3, r2
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x6d4>
 8001aee:	e03d      	b.n	8001b6c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001af6:	4922      	ldr	r1, [pc, #136]	; (8001b80 <HAL_RCC_OscConfig+0x784>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff f81e 	bl	8000b3c <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff f819 	bl	8000b3c <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e02a      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	049b      	lsls	r3, r3, #18
 8001b20:	4013      	ands	r3, r2
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x70a>
 8001b24:	e022      	b.n	8001b6c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e01d      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_RCC_OscConfig+0x77c>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	401a      	ands	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d10f      	bne.n	8001b68 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	23f0      	movs	r3, #240	; 0xf0
 8001b4c:	039b      	lsls	r3, r3, #14
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	23c0      	movs	r3, #192	; 0xc0
 8001b5c:	041b      	lsls	r3, r3, #16
 8001b5e:	401a      	ands	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b00a      	add	sp, #40	; 0x28
 8001b74:	bdb0      	pop	{r4, r5, r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	ff02ffff 	.word	0xff02ffff
 8001b80:	feffffff 	.word	0xfeffffff

08001b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e128      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b96      	ldr	r3, [pc, #600]	; (8001df4 <HAL_RCC_ClockConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d91e      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b93      	ldr	r3, [pc, #588]	; (8001df4 <HAL_RCC_ClockConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4393      	bics	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	4b90      	ldr	r3, [pc, #576]	; (8001df4 <HAL_RCC_ClockConfig+0x270>)
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bb8:	f7fe ffc0 	bl	8000b3c <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc0:	e009      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc2:	f7fe ffbb 	bl	8000b3c <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	4a8a      	ldr	r2, [pc, #552]	; (8001df8 <HAL_RCC_ClockConfig+0x274>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e109      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b87      	ldr	r3, [pc, #540]	; (8001df4 <HAL_RCC_ClockConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1ee      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bee:	4b83      	ldr	r3, [pc, #524]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	22f0      	movs	r2, #240	; 0xf0
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b7f      	ldr	r3, [pc, #508]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2201      	movs	r2, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d100      	bne.n	8001c0e <HAL_RCC_ClockConfig+0x8a>
 8001c0c:	e089      	b.n	8001d22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c16:	4b79      	ldr	r3, [pc, #484]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d120      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0e1      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c2e:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	049b      	lsls	r3, r3, #18
 8001c36:	4013      	ands	r3, r2
 8001c38:	d114      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0d5      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c46:	4b6d      	ldr	r3, [pc, #436]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d109      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0ca      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c54:	4b69      	ldr	r3, [pc, #420]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0c2      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c64:	4b65      	ldr	r3, [pc, #404]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4b62      	ldr	r3, [pc, #392]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7fe ff60 	bl	8000b3c <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d111      	bne.n	8001cac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8a:	f7fe ff57 	bl	8000b3c <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <HAL_RCC_ClockConfig+0x274>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e0a5      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c9e:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d1ef      	bne.n	8001c8a <HAL_RCC_ClockConfig+0x106>
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d111      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb4:	e009      	b.n	8001cca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb6:	f7fe ff41 	bl	8000b3c <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	4a4d      	ldr	r2, [pc, #308]	; (8001df8 <HAL_RCC_ClockConfig+0x274>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e08f      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cca:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d1ef      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0x132>
 8001cd6:	e024      	b.n	8001d22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d11b      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce0:	e009      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce2:	f7fe ff2b 	bl	8000b3c <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	4a42      	ldr	r2, [pc, #264]	; (8001df8 <HAL_RCC_ClockConfig+0x274>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e079      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d1ef      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0x15e>
 8001d02:	e00e      	b.n	8001d22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7fe ff1a 	bl	8000b3c <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <HAL_RCC_ClockConfig+0x274>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e068      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d18:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_RCC_ClockConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2201      	movs	r2, #1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d21e      	bcs.n	8001d6e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_RCC_ClockConfig+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4393      	bics	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_RCC_ClockConfig+0x270>)
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d42:	f7fe fefb 	bl	8000b3c <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	e009      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7fe fef6 	bl	8000b3c <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <HAL_RCC_ClockConfig+0x274>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e044      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_RCC_ClockConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2201      	movs	r2, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d1ee      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2204      	movs	r2, #4
 8001d74:	4013      	ands	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <HAL_RCC_ClockConfig+0x27c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2208      	movs	r2, #8
 8001d92:	4013      	ands	r3, r2
 8001d94:	d00a      	beq.n	8001dac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <HAL_RCC_ClockConfig+0x280>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	00da      	lsls	r2, r3, #3
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dac:	f000 f832 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001db0:	0001      	movs	r1, r0
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_RCC_ClockConfig+0x278>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	220f      	movs	r2, #15
 8001dba:	4013      	ands	r3, r2
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_RCC_ClockConfig+0x284>)
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	40da      	lsrs	r2, r3
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_RCC_ClockConfig+0x288>)
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_RCC_ClockConfig+0x28c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	250b      	movs	r5, #11
 8001dce:	197c      	adds	r4, r7, r5
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7fe fe6d 	bl	8000ab0 <HAL_InitTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001dda:	197b      	adds	r3, r7, r5
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001de2:	197b      	adds	r3, r7, r5
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	e000      	b.n	8001dea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	0018      	movs	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b004      	add	sp, #16
 8001df0:	bdb0      	pop	{r4, r5, r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40022000 	.word	0x40022000
 8001df8:	00001388 	.word	0x00001388
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	fffff8ff 	.word	0xfffff8ff
 8001e04:	ffffc7ff 	.word	0xffffc7ff
 8001e08:	0800388c 	.word	0x0800388c
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	2000000c 	.word	0x2000000c

08001e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e22:	230c      	movs	r3, #12
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d014      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2a:	d900      	bls.n	8001e2e <HAL_RCC_GetSysClockFreq+0x1a>
 8001e2c:	e07b      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x112>
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d002      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x24>
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d00b      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e36:	e076      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e38:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d002      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e46:	e07c      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e48:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e4c:	e079      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4e:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e52:	e076      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	0c9a      	lsrs	r2, r3, #18
 8001e58:	230f      	movs	r3, #15
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x148>)
 8001e5e:	5c9b      	ldrb	r3, [r3, r2]
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	0d9a      	lsrs	r2, r3, #22
 8001e66:	2303      	movs	r3, #3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6e:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	025b      	lsls	r3, r3, #9
 8001e76:	4013      	ands	r3, r2
 8001e78:	d01a      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	4a35      	ldr	r2, [pc, #212]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e84:	2300      	movs	r3, #0
 8001e86:	69b8      	ldr	r0, [r7, #24]
 8001e88:	69f9      	ldr	r1, [r7, #28]
 8001e8a:	f7fe f9e9 	bl	8000260 <__aeabi_lmul>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	000b      	movs	r3, r1
 8001e92:	0010      	movs	r0, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f7fe f9bd 	bl	8000220 <__aeabi_uldivmod>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	000b      	movs	r3, r1
 8001eaa:	0013      	movs	r3, r2
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
 8001eae:	e037      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d01a      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	68b8      	ldr	r0, [r7, #8]
 8001ec8:	68f9      	ldr	r1, [r7, #12]
 8001eca:	f7fe f9c9 	bl	8000260 <__aeabi_lmul>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	000b      	movs	r3, r1
 8001ed2:	0010      	movs	r0, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f7fe f99d 	bl	8000220 <__aeabi_uldivmod>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	000b      	movs	r3, r1
 8001eea:	0013      	movs	r3, r2
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
 8001eee:	e017      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x140>)
 8001efa:	2300      	movs	r3, #0
 8001efc:	f7fe f9b0 	bl	8000260 <__aeabi_lmul>
 8001f00:	0002      	movs	r2, r0
 8001f02:	000b      	movs	r3, r1
 8001f04:	0010      	movs	r0, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	001c      	movs	r4, r3
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	001d      	movs	r5, r3
 8001f10:	0022      	movs	r2, r4
 8001f12:	002b      	movs	r3, r5
 8001f14:	f7fe f984 	bl	8000220 <__aeabi_uldivmod>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	000b      	movs	r3, r1
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f24:	e00d      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0b5b      	lsrs	r3, r3, #13
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	4013      	ands	r3, r2
 8001f30:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	3301      	adds	r3, #1
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	0212      	lsls	r2, r2, #8
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	0013      	movs	r3, r2
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f40:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b00e      	add	sp, #56	; 0x38
 8001f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	003d0900 	.word	0x003d0900
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	007a1200 	.word	0x007a1200
 8001f5c:	080038a4 	.word	0x080038a4

08001f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b02      	ldr	r3, [pc, #8]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	20000008 	.word	0x20000008

08001f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f78:	f7ff fff2 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f7c:	0001      	movs	r1, r0
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	2207      	movs	r2, #7
 8001f86:	4013      	ands	r3, r2
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	40d9      	lsrs	r1, r3
 8001f8e:	000b      	movs	r3, r1
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	0800389c 	.word	0x0800389c

08001fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fa4:	f7ff ffdc 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fa8:	0001      	movs	r1, r0
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	0adb      	lsrs	r3, r3, #11
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	40d9      	lsrs	r1, r3
 8001fba:	000b      	movs	r3, r1
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	0800389c 	.word	0x0800389c

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001fd4:	2317      	movs	r3, #23
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d106      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d100      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001ff2:	e104      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff4:	4bb1      	ldr	r3, [pc, #708]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	055b      	lsls	r3, r3, #21
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d10a      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	4bae      	ldr	r3, [pc, #696]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002004:	4bad      	ldr	r3, [pc, #692]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	0549      	lsls	r1, r1, #21
 800200a:	430a      	orrs	r2, r1
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800200e:	2317      	movs	r3, #23
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4baa      	ldr	r3, [pc, #680]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4013      	ands	r3, r2
 8002020:	d11a      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002022:	4ba7      	ldr	r3, [pc, #668]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4ba6      	ldr	r3, [pc, #664]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0049      	lsls	r1, r1, #1
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002030:	f7fe fd84 	bl	8000b3c <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7fe fd7f 	bl	8000b3c <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	; 0x64
 8002046:	d901      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e133      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b9c      	ldr	r3, [pc, #624]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d0f0      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002058:	4b98      	ldr	r3, [pc, #608]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	23c0      	movs	r3, #192	; 0xc0
 800205e:	039b      	lsls	r3, r3, #14
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	23c0      	movs	r3, #192	; 0xc0
 800206a:	039b      	lsls	r3, r3, #14
 800206c:	4013      	ands	r3, r2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d107      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	23c0      	movs	r3, #192	; 0xc0
 800207a:	039b      	lsls	r3, r3, #14
 800207c:	4013      	ands	r3, r2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d013      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	23c0      	movs	r3, #192	; 0xc0
 800208a:	029b      	lsls	r3, r3, #10
 800208c:	401a      	ands	r2, r3
 800208e:	23c0      	movs	r3, #192	; 0xc0
 8002090:	029b      	lsls	r3, r3, #10
 8002092:	429a      	cmp	r2, r3
 8002094:	d10a      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002096:	4b89      	ldr	r3, [pc, #548]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	029b      	lsls	r3, r3, #10
 800209e:	401a      	ands	r2, r3
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	029b      	lsls	r3, r3, #10
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d101      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e103      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020ac:	4b83      	ldr	r3, [pc, #524]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020b0:	23c0      	movs	r3, #192	; 0xc0
 80020b2:	029b      	lsls	r3, r3, #10
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d049      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	23c0      	movs	r3, #192	; 0xc0
 80020c4:	029b      	lsls	r3, r3, #10
 80020c6:	4013      	ands	r3, r2
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d004      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2220      	movs	r2, #32
 80020d4:	4013      	ands	r3, r2
 80020d6:	d10d      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	23c0      	movs	r3, #192	; 0xc0
 80020de:	029b      	lsls	r3, r3, #10
 80020e0:	4013      	ands	r3, r2
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d034      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	4013      	ands	r3, r2
 80020f2:	d02e      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80020f4:	4b71      	ldr	r3, [pc, #452]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f8:	4a72      	ldr	r2, [pc, #456]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020fe:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002102:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0309      	lsls	r1, r1, #12
 8002108:	430a      	orrs	r2, r1
 800210a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800210c:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800210e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002112:	496d      	ldr	r1, [pc, #436]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002114:	400a      	ands	r2, r1
 8002116:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4013      	ands	r3, r2
 8002126:	d014      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe fd08 	bl	8000b3c <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002130:	e009      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe fd03 	bl	8000b3c <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	4a63      	ldr	r2, [pc, #396]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0b6      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4013      	ands	r3, r2
 8002150:	d0ef      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	4013      	ands	r3, r2
 800215c:	d01f      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	23c0      	movs	r3, #192	; 0xc0
 8002164:	029b      	lsls	r3, r3, #10
 8002166:	401a      	ands	r2, r3
 8002168:	23c0      	movs	r3, #192	; 0xc0
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	429a      	cmp	r2, r3
 800216e:	d10c      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002170:	4b52      	ldr	r3, [pc, #328]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a56      	ldr	r2, [pc, #344]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	23c0      	movs	r3, #192	; 0xc0
 8002180:	039b      	lsls	r3, r3, #14
 8002182:	401a      	ands	r2, r3
 8002184:	4b4d      	ldr	r3, [pc, #308]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800218c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	23c0      	movs	r3, #192	; 0xc0
 8002194:	029b      	lsls	r3, r3, #10
 8002196:	401a      	ands	r2, r3
 8002198:	4b48      	ldr	r3, [pc, #288]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800219a:	430a      	orrs	r2, r1
 800219c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2220      	movs	r2, #32
 80021a4:	4013      	ands	r3, r2
 80021a6:	d01f      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	23c0      	movs	r3, #192	; 0xc0
 80021ae:	029b      	lsls	r3, r3, #10
 80021b0:	401a      	ands	r2, r3
 80021b2:	23c0      	movs	r3, #192	; 0xc0
 80021b4:	029b      	lsls	r3, r3, #10
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80021ba:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a44      	ldr	r2, [pc, #272]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	23c0      	movs	r3, #192	; 0xc0
 80021ca:	039b      	lsls	r3, r3, #14
 80021cc:	401a      	ands	r2, r3
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	23c0      	movs	r3, #192	; 0xc0
 80021de:	029b      	lsls	r3, r3, #10
 80021e0:	401a      	ands	r2, r3
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e8:	2317      	movs	r3, #23
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021f8:	4936      	ldr	r1, [pc, #216]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021fa:	400a      	ands	r2, r1
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	4013      	ands	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002208:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	2203      	movs	r2, #3
 800220e:	4393      	bics	r3, r2
 8002210:	0019      	movs	r1, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002218:	430a      	orrs	r2, r1
 800221a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2202      	movs	r2, #2
 8002222:	4013      	ands	r3, r2
 8002224:	d009      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	220c      	movs	r2, #12
 800222c:	4393      	bics	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	4b21      	ldr	r3, [pc, #132]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002236:	430a      	orrs	r2, r1
 8002238:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2204      	movs	r2, #4
 8002240:	4013      	ands	r3, r2
 8002242:	d009      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002254:	430a      	orrs	r2, r1
 8002256:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2208      	movs	r2, #8
 800225e:	4013      	ands	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002262:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002268:	4013      	ands	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002272:	430a      	orrs	r2, r1
 8002274:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	4013      	ands	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002290:	430a      	orrs	r2, r1
 8002292:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	4013      	ands	r3, r2
 800229c:	d009      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	0019      	movs	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022ae:	430a      	orrs	r2, r1
 80022b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b006      	add	sp, #24
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40007000 	.word	0x40007000
 80022c4:	fffcffff 	.word	0xfffcffff
 80022c8:	fff7ffff 	.word	0xfff7ffff
 80022cc:	00001388 	.word	0x00001388
 80022d0:	ffcfffff 	.word	0xffcfffff
 80022d4:	efffffff 	.word	0xefffffff
 80022d8:	fffff3ff 	.word	0xfffff3ff
 80022dc:	ffffcfff 	.word	0xffffcfff
 80022e0:	fbffffff 	.word	0xfbffffff
 80022e4:	fff3ffff 	.word	0xfff3ffff

080022e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e083      	b.n	8002402 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	2382      	movs	r3, #130	; 0x82
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	429a      	cmp	r2, r3
 800230c:	d009      	beq.n	8002322 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	61da      	str	r2, [r3, #28]
 8002314:	e005      	b.n	8002322 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2251      	movs	r2, #81	; 0x51
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2250      	movs	r2, #80	; 0x50
 8002338:	2100      	movs	r1, #0
 800233a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f7fe fa2e 	bl	80007a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2251      	movs	r2, #81	; 0x51
 8002348:	2102      	movs	r1, #2
 800234a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2140      	movs	r1, #64	; 0x40
 8002358:	438a      	bics	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	2382      	movs	r3, #130	; 0x82
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	2384      	movs	r3, #132	; 0x84
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	400b      	ands	r3, r1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68d9      	ldr	r1, [r3, #12]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	400b      	ands	r3, r1
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2102      	movs	r1, #2
 8002384:	400b      	ands	r3, r1
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2101      	movs	r1, #1
 800238e:	400b      	ands	r3, r1
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6999      	ldr	r1, [r3, #24]
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	400b      	ands	r3, r1
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2138      	movs	r1, #56	; 0x38
 80023a4:	400b      	ands	r3, r1
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	400b      	ands	r3, r1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	0011      	movs	r1, r2
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	019b      	lsls	r3, r3, #6
 80023bc:	401a      	ands	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	0c1b      	lsrs	r3, r3, #16
 80023cc:	2204      	movs	r2, #4
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	2210      	movs	r2, #16
 80023d8:	401a      	ands	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <HAL_SPI_Init+0x124>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2251      	movs	r2, #81	; 0x51
 80023fc:	2101      	movs	r1, #1
 80023fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b002      	add	sp, #8
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	fffff7ff 	.word	0xfffff7ff

08002410 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	001a      	movs	r2, r3
 800241e:	1cbb      	adds	r3, r7, #2
 8002420:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002422:	2317      	movs	r3, #23
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2250      	movs	r2, #80	; 0x50
 800242e:	5c9b      	ldrb	r3, [r3, r2]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_SPI_TransmitReceive_DMA+0x28>
 8002434:	2302      	movs	r3, #2
 8002436:	e0ee      	b.n	8002616 <HAL_SPI_TransmitReceive_DMA+0x206>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2250      	movs	r2, #80	; 0x50
 800243c:	2101      	movs	r1, #1
 800243e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002440:	2016      	movs	r0, #22
 8002442:	183b      	adds	r3, r7, r0
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	2151      	movs	r1, #81	; 0x51
 8002448:	5c52      	ldrb	r2, [r2, r1]
 800244a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002452:	0001      	movs	r1, r0
 8002454:	187b      	adds	r3, r7, r1
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d011      	beq.n	8002480 <HAL_SPI_TransmitReceive_DMA+0x70>
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	2382      	movs	r3, #130	; 0x82
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	429a      	cmp	r2, r3
 8002464:	d107      	bne.n	8002476 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_SPI_TransmitReceive_DMA+0x66>
 800246e:	187b      	adds	r3, r7, r1
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d004      	beq.n	8002480 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8002476:	2317      	movs	r3, #23
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
    goto error;
 800247e:	e0c3      	b.n	8002608 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <HAL_SPI_TransmitReceive_DMA+0x84>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_SPI_TransmitReceive_DMA+0x84>
 800248c:	1cbb      	adds	r3, r7, #2
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d104      	bne.n	800249e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8002494:	2317      	movs	r3, #23
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
    goto error;
 800249c:	e0b4      	b.n	8002608 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2251      	movs	r2, #81	; 0x51
 80024a2:	5c9b      	ldrb	r3, [r3, r2]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d003      	beq.n	80024b2 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2251      	movs	r2, #81	; 0x51
 80024ae:	2105      	movs	r1, #5
 80024b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1cba      	adds	r2, r7, #2
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1cba      	adds	r2, r7, #2
 80024ca:	8812      	ldrh	r2, [r2, #0]
 80024cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1cba      	adds	r2, r7, #2
 80024d8:	8812      	ldrh	r2, [r2, #0]
 80024da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1cba      	adds	r2, r7, #2
 80024e0:	8812      	ldrh	r2, [r2, #0]
 80024e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2251      	movs	r2, #81	; 0x51
 80024f4:	5c9b      	ldrb	r3, [r3, r2]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d108      	bne.n	800250e <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	4a47      	ldr	r2, [pc, #284]	; (8002620 <HAL_SPI_TransmitReceive_DMA+0x210>)
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	4a46      	ldr	r2, [pc, #280]	; (8002624 <HAL_SPI_TransmitReceive_DMA+0x214>)
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
 800250c:	e007      	b.n	800251e <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	4a45      	ldr	r2, [pc, #276]	; (8002628 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	4a44      	ldr	r2, [pc, #272]	; (800262c <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800251c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	4a43      	ldr	r2, [pc, #268]	; (8002630 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8002524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	2200      	movs	r2, #0
 800252c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	0019      	movs	r1, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002544:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002546:	f7fe fc59 	bl	8000dfc <HAL_DMA_Start_IT>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d00a      	beq.n	8002564 <HAL_SPI_TransmitReceive_DMA+0x154>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	2210      	movs	r2, #16
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800255a:	2317      	movs	r3, #23
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]

    goto error;
 8002562:	e051      	b.n	8002608 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002580:	2200      	movs	r2, #0
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002588:	2200      	movs	r2, #0
 800258a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002590:	2200      	movs	r2, #0
 8002592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	0019      	movs	r1, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	330c      	adds	r3, #12
 80025a4:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80025ac:	f7fe fc26 	bl	8000dfc <HAL_DMA_Start_IT>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_SPI_TransmitReceive_DMA+0x1ba>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	2210      	movs	r2, #16
 80025ba:	431a      	orrs	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80025c0:	2317      	movs	r3, #23
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]

    goto error;
 80025c8:	e01e      	b.n	8002608 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2240      	movs	r2, #64	; 0x40
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b40      	cmp	r3, #64	; 0x40
 80025d6:	d007      	beq.n	80025e8 <HAL_SPI_TransmitReceive_DMA+0x1d8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2120      	movs	r1, #32
 80025f4:	430a      	orrs	r2, r1
 80025f6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2102      	movs	r1, #2
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2250      	movs	r2, #80	; 0x50
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002610:	2317      	movs	r3, #23
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	781b      	ldrb	r3, [r3, #0]
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b006      	add	sp, #24
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	080029b3 	.word	0x080029b3
 8002624:	08002871 	.word	0x08002871
 8002628:	080029d1 	.word	0x080029d1
 800262c:	0800291f 	.word	0x0800291f
 8002630:	080029ef 	.word	0x080029ef

08002634 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	001a      	movs	r2, r3
 8002652:	2301      	movs	r3, #1
 8002654:	4013      	ands	r3, r2
 8002656:	d10f      	bne.n	8002678 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800265e:	d00b      	beq.n	8002678 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	001a      	movs	r2, r3
 8002666:	2301      	movs	r3, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d005      	beq.n	8002678 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	0010      	movs	r0, r2
 8002674:	4798      	blx	r3
    return;
 8002676:	e0d5      	b.n	8002824 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	001a      	movs	r2, r3
 800267e:	2301      	movs	r3, #1
 8002680:	4013      	ands	r3, r2
 8002682:	d00b      	beq.n	800269c <HAL_SPI_IRQHandler+0x68>
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	09db      	lsrs	r3, r3, #7
 8002688:	001a      	movs	r2, r3
 800268a:	2301      	movs	r3, #1
 800268c:	4013      	ands	r3, r2
 800268e:	d005      	beq.n	800269c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	0010      	movs	r0, r2
 8002698:	4798      	blx	r3
    return;
 800269a:	e0c3      	b.n	8002824 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	001a      	movs	r2, r3
 80026a2:	2301      	movs	r3, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	d10c      	bne.n	80026c2 <HAL_SPI_IRQHandler+0x8e>
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	001a      	movs	r2, r3
 80026ae:	2301      	movs	r3, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d106      	bne.n	80026c2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	001a      	movs	r2, r3
 80026ba:	2301      	movs	r3, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d100      	bne.n	80026c2 <HAL_SPI_IRQHandler+0x8e>
 80026c0:	e0b0      	b.n	8002824 <HAL_SPI_IRQHandler+0x1f0>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	001a      	movs	r2, r3
 80026c8:	2301      	movs	r3, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	d100      	bne.n	80026d0 <HAL_SPI_IRQHandler+0x9c>
 80026ce:	e0a9      	b.n	8002824 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	001a      	movs	r2, r3
 80026d6:	2301      	movs	r3, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d023      	beq.n	8002724 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2251      	movs	r2, #81	; 0x51
 80026e0:	5c9b      	ldrb	r3, [r3, r2]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d011      	beq.n	800270c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	2204      	movs	r2, #4
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	e00b      	b.n	8002724 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
        return;
 8002722:	e07f      	b.n	8002824 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	001a      	movs	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	4013      	ands	r3, r2
 800272e:	d014      	beq.n	800275a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	2201      	movs	r2, #1
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2140      	movs	r1, #64	; 0x40
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	001a      	movs	r2, r3
 8002760:	2301      	movs	r3, #1
 8002762:	4013      	ands	r3, r2
 8002764:	d00c      	beq.n	8002780 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	2208      	movs	r2, #8
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	2b00      	cmp	r3, #0
 8002786:	d04c      	beq.n	8002822 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	21e0      	movs	r1, #224	; 0xe0
 8002794:	438a      	bics	r2, r1
 8002796:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2251      	movs	r2, #81	; 0x51
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2202      	movs	r2, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d103      	bne.n	80027b0 <HAL_SPI_IRQHandler+0x17c>
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2201      	movs	r2, #1
 80027ac:	4013      	ands	r3, r2
 80027ae:	d032      	beq.n	8002816 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2103      	movs	r1, #3
 80027bc:	438a      	bics	r2, r1
 80027be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d010      	beq.n	80027ea <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027cc:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_SPI_IRQHandler+0x1f8>)
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7fe fb77 	bl	8000ec8 <HAL_DMA_Abort_IT>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d005      	beq.n	80027ea <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	2240      	movs	r2, #64	; 0x40
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f6:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_SPI_IRQHandler+0x1f8>)
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fe:	0018      	movs	r0, r3
 8002800:	f7fe fb62 	bl	8000ec8 <HAL_DMA_Abort_IT>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d00b      	beq.n	8002820 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	2240      	movs	r2, #64	; 0x40
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002814:	e004      	b.n	8002820 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0018      	movs	r0, r3
 800281a:	f000 f821 	bl	8002860 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800281e:	e000      	b.n	8002822 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002820:	46c0      	nop			; (mov r8, r8)
    return;
 8002822:	46c0      	nop			; (mov r8, r8)
  }
}
 8002824:	46bd      	mov	sp, r7
 8002826:	b008      	add	sp, #32
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	08002a31 	.word	0x08002a31

08002830 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b002      	add	sp, #8
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800287e:	f7fe f95d 	bl	8000b3c <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2220      	movs	r2, #32
 800288e:	4013      	ands	r3, r2
 8002890:	2b20      	cmp	r3, #32
 8002892:	d03d      	beq.n	8002910 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2120      	movs	r1, #32
 80028a0:	438a      	bics	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10e      	bne.n	80028ca <SPI_DMAReceiveCplt+0x5a>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	2382      	movs	r3, #130	; 0x82
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d108      	bne.n	80028ca <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2103      	movs	r1, #3
 80028c4:	438a      	bics	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	e007      	b.n	80028da <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	438a      	bics	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2164      	movs	r1, #100	; 0x64
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 f949 	bl	8002b78 <SPI_EndRxTransaction>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d002      	beq.n	80028f0 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2251      	movs	r2, #81	; 0x51
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	0018      	movs	r0, r3
 800290a:	f7ff ffa9 	bl	8002860 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800290e:	e003      	b.n	8002918 <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	0018      	movs	r0, r3
 8002914:	f7ff ff8c 	bl	8002830 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002918:	46bd      	mov	sp, r7
 800291a:	b004      	add	sp, #16
 800291c:	bd80      	pop	{r7, pc}

0800291e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800292c:	f7fe f906 	bl	8000b3c <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2220      	movs	r2, #32
 800293c:	4013      	ands	r3, r2
 800293e:	2b20      	cmp	r3, #32
 8002940:	d030      	beq.n	80029a4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2120      	movs	r1, #32
 800294e:	438a      	bics	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2164      	movs	r1, #100	; 0x64
 8002958:	0018      	movs	r0, r3
 800295a:	f000 f977 	bl	8002c4c <SPI_EndRxTxTransaction>
 800295e:	1e03      	subs	r3, r0, #0
 8002960:	d005      	beq.n	800296e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	2220      	movs	r2, #32
 8002968:	431a      	orrs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2103      	movs	r1, #3
 800297a:	438a      	bics	r2, r1
 800297c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2251      	movs	r2, #81	; 0x51
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff ff5f 	bl	8002860 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80029a2:	e003      	b.n	80029ac <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7fd fecc 	bl	8000744 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b004      	add	sp, #16
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7ff ff3c 	bl	8002840 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7ff ff35 	bl	8002850 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b004      	add	sp, #16
 80029ec:	bd80      	pop	{r7, pc}

080029ee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2103      	movs	r1, #3
 8002a08:	438a      	bics	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	2210      	movs	r2, #16
 8002a12:	431a      	orrs	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2251      	movs	r2, #81	; 0x51
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f7ff ff1c 	bl	8002860 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b004      	add	sp, #16
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff ff07 	bl	8002860 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b004      	add	sp, #16
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a6c:	f7fe f866 	bl	8000b3c <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	18d3      	adds	r3, r2, r3
 8002a7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a7c:	f7fe f85e 	bl	8000b3c <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a84:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	015b      	lsls	r3, r3, #5
 8002a8a:	0d1b      	lsrs	r3, r3, #20
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	4353      	muls	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a92:	e058      	b.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3301      	adds	r3, #1
 8002a98:	d055      	beq.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a9a:	f7fe f84f 	bl	8000b3c <HAL_GetTick>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d902      	bls.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d142      	bne.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	21e0      	movs	r1, #224	; 0xe0
 8002abc:	438a      	bics	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	2382      	movs	r3, #130	; 0x82
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d113      	bne.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d005      	beq.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	438a      	bics	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	019b      	lsls	r3, r3, #6
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d110      	bne.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	491a      	ldr	r1, [pc, #104]	; (8002b74 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2180      	movs	r1, #128	; 0x80
 8002b1c:	0189      	lsls	r1, r1, #6
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2251      	movs	r2, #81	; 0x51
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2250      	movs	r2, #80	; 0x50
 8002b2e:	2100      	movs	r1, #0
 8002b30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e017      	b.n	8002b66 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	425a      	negs	r2, r3
 8002b56:	4153      	adcs	r3, r2
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d197      	bne.n	8002a94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b008      	add	sp, #32
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	20000008 	.word	0x20000008
 8002b74:	ffffdfff 	.word	0xffffdfff

08002b78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	2382      	movs	r3, #130	; 0x82
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d113      	bne.n	8002bb8 <SPI_EndRxTransaction+0x40>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d005      	beq.n	8002ba8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d107      	bne.n	8002bb8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2140      	movs	r1, #64	; 0x40
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	2382      	movs	r3, #130	; 0x82
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d12b      	bne.n	8002c1c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d012      	beq.n	8002bf6 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	0013      	movs	r3, r2
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	f7ff ff3d 	bl	8002a5c <SPI_WaitFlagStateUntilTimeout>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d02d      	beq.n	8002c42 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	2220      	movs	r2, #32
 8002bec:	431a      	orrs	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e026      	b.n	8002c44 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	0013      	movs	r3, r2
 8002c00:	2200      	movs	r2, #0
 8002c02:	2101      	movs	r1, #1
 8002c04:	f7ff ff2a 	bl	8002a5c <SPI_WaitFlagStateUntilTimeout>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d01a      	beq.n	8002c42 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	2220      	movs	r2, #32
 8002c12:	431a      	orrs	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e013      	b.n	8002c44 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	0013      	movs	r3, r2
 8002c26:	2200      	movs	r2, #0
 8002c28:	2101      	movs	r1, #1
 8002c2a:	f7ff ff17 	bl	8002a5c <SPI_WaitFlagStateUntilTimeout>
 8002c2e:	1e03      	subs	r3, r0, #0
 8002c30:	d007      	beq.n	8002c42 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	2220      	movs	r2, #32
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e000      	b.n	8002c44 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <SPI_EndRxTxTransaction+0x84>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	491d      	ldr	r1, [pc, #116]	; (8002cd4 <SPI_EndRxTxTransaction+0x88>)
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7fd fa52 	bl	8000108 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	001a      	movs	r2, r3
 8002c68:	0013      	movs	r3, r2
 8002c6a:	015b      	lsls	r3, r3, #5
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	189b      	adds	r3, r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	2382      	movs	r3, #130	; 0x82
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d112      	bne.n	8002ca8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	0013      	movs	r3, r2
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	f7ff fee4 	bl	8002a5c <SPI_WaitFlagStateUntilTimeout>
 8002c94:	1e03      	subs	r3, r0, #0
 8002c96:	d016      	beq.n	8002cc6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e00f      	b.n	8002cc8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b80      	cmp	r3, #128	; 0x80
 8002cc0:	d0f2      	beq.n	8002ca8 <SPI_EndRxTxTransaction+0x5c>
 8002cc2:	e000      	b.n	8002cc6 <SPI_EndRxTxTransaction+0x7a>
        break;
 8002cc4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b006      	add	sp, #24
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	016e3600 	.word	0x016e3600

08002cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e044      	b.n	8002d74 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d107      	bne.n	8002d02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2278      	movs	r2, #120	; 0x78
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7fd fe0d 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2224      	movs	r2, #36	; 0x24
 8002d06:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2101      	movs	r1, #1
 8002d14:	438a      	bics	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 f8d0 	bl	8002ec0 <UART_SetConfig>
 8002d20:	0003      	movs	r3, r0
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e024      	b.n	8002d74 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 fb47 	bl	80033c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	490d      	ldr	r1, [pc, #52]	; (8002d7c <HAL_UART_Init+0xa4>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	212a      	movs	r1, #42	; 0x2a
 8002d56:	438a      	bics	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 fbdf 	bl	8003530 <UART_CheckIdleState>
 8002d72:	0003      	movs	r3, r0
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	ffffb7ff 	.word	0xffffb7ff

08002d80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	1dbb      	adds	r3, r7, #6
 8002d8e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d000      	beq.n	8002d9a <HAL_UART_Transmit+0x1a>
 8002d98:	e08c      	b.n	8002eb4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_UART_Transmit+0x28>
 8002da0:	1dbb      	adds	r3, r7, #6
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e084      	b.n	8002eb6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	015b      	lsls	r3, r3, #5
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d109      	bne.n	8002dcc <HAL_UART_Transmit+0x4c>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e074      	b.n	8002eb6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2284      	movs	r2, #132	; 0x84
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2221      	movs	r2, #33	; 0x21
 8002dd8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dda:	f7fd feaf 	bl	8000b3c <HAL_GetTick>
 8002dde:	0003      	movs	r3, r0
 8002de0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1dba      	adds	r2, r7, #6
 8002de6:	2150      	movs	r1, #80	; 0x50
 8002de8:	8812      	ldrh	r2, [r2, #0]
 8002dea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1dba      	adds	r2, r7, #6
 8002df0:	2152      	movs	r1, #82	; 0x52
 8002df2:	8812      	ldrh	r2, [r2, #0]
 8002df4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	015b      	lsls	r3, r3, #5
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d108      	bne.n	8002e14 <HAL_UART_Transmit+0x94>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d104      	bne.n	8002e14 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	e003      	b.n	8002e1c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e1c:	e02f      	b.n	8002e7e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	0013      	movs	r3, r2
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	f000 fc28 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 8002e30:	1e03      	subs	r3, r0, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e03b      	b.n	8002eb6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	001a      	movs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	05d2      	lsls	r2, r2, #23
 8002e50:	0dd2      	lsrs	r2, r2, #23
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	3302      	adds	r3, #2
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	e007      	b.n	8002e6c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2252      	movs	r2, #82	; 0x52
 8002e70:	5a9b      	ldrh	r3, [r3, r2]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b299      	uxth	r1, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2252      	movs	r2, #82	; 0x52
 8002e7c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2252      	movs	r2, #82	; 0x52
 8002e82:	5a9b      	ldrh	r3, [r3, r2]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1c9      	bne.n	8002e1e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	0013      	movs	r3, r2
 8002e94:	2200      	movs	r2, #0
 8002e96:	2140      	movs	r1, #64	; 0x40
 8002e98:	f000 fbf2 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e005      	b.n	8002eb6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b008      	add	sp, #32
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b08e      	sub	sp, #56	; 0x38
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ec8:	231a      	movs	r3, #26
 8002eca:	2218      	movs	r2, #24
 8002ecc:	189b      	adds	r3, r3, r2
 8002ece:	19db      	adds	r3, r3, r7
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4ac6      	ldr	r2, [pc, #792]	; (800320c <UART_SetConfig+0x34c>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4ac1      	ldr	r2, [pc, #772]	; (8003210 <UART_SetConfig+0x350>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4abb      	ldr	r2, [pc, #748]	; (8003214 <UART_SetConfig+0x354>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f30:	4313      	orrs	r3, r2
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	4ab7      	ldr	r2, [pc, #732]	; (8003218 <UART_SetConfig+0x358>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f46:	430a      	orrs	r2, r1
 8002f48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4ab3      	ldr	r2, [pc, #716]	; (800321c <UART_SetConfig+0x35c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d131      	bne.n	8002fb8 <UART_SetConfig+0xf8>
 8002f54:	4bb2      	ldr	r3, [pc, #712]	; (8003220 <UART_SetConfig+0x360>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	2203      	movs	r2, #3
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d01d      	beq.n	8002f9c <UART_SetConfig+0xdc>
 8002f60:	d823      	bhi.n	8002faa <UART_SetConfig+0xea>
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d00c      	beq.n	8002f80 <UART_SetConfig+0xc0>
 8002f66:	d820      	bhi.n	8002faa <UART_SetConfig+0xea>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <UART_SetConfig+0xb2>
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d00e      	beq.n	8002f8e <UART_SetConfig+0xce>
 8002f70:	e01b      	b.n	8002faa <UART_SetConfig+0xea>
 8002f72:	231b      	movs	r3, #27
 8002f74:	2218      	movs	r2, #24
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	19db      	adds	r3, r3, r7
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e09c      	b.n	80030ba <UART_SetConfig+0x1fa>
 8002f80:	231b      	movs	r3, #27
 8002f82:	2218      	movs	r2, #24
 8002f84:	189b      	adds	r3, r3, r2
 8002f86:	19db      	adds	r3, r3, r7
 8002f88:	2202      	movs	r2, #2
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	e095      	b.n	80030ba <UART_SetConfig+0x1fa>
 8002f8e:	231b      	movs	r3, #27
 8002f90:	2218      	movs	r2, #24
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	19db      	adds	r3, r3, r7
 8002f96:	2204      	movs	r2, #4
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e08e      	b.n	80030ba <UART_SetConfig+0x1fa>
 8002f9c:	231b      	movs	r3, #27
 8002f9e:	2218      	movs	r2, #24
 8002fa0:	189b      	adds	r3, r3, r2
 8002fa2:	19db      	adds	r3, r3, r7
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e087      	b.n	80030ba <UART_SetConfig+0x1fa>
 8002faa:	231b      	movs	r3, #27
 8002fac:	2218      	movs	r2, #24
 8002fae:	189b      	adds	r3, r3, r2
 8002fb0:	19db      	adds	r3, r3, r7
 8002fb2:	2210      	movs	r2, #16
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e080      	b.n	80030ba <UART_SetConfig+0x1fa>
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a99      	ldr	r2, [pc, #612]	; (8003224 <UART_SetConfig+0x364>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d131      	bne.n	8003026 <UART_SetConfig+0x166>
 8002fc2:	4b97      	ldr	r3, [pc, #604]	; (8003220 <UART_SetConfig+0x360>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d01d      	beq.n	800300a <UART_SetConfig+0x14a>
 8002fce:	d823      	bhi.n	8003018 <UART_SetConfig+0x158>
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d00c      	beq.n	8002fee <UART_SetConfig+0x12e>
 8002fd4:	d820      	bhi.n	8003018 <UART_SetConfig+0x158>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <UART_SetConfig+0x120>
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d00e      	beq.n	8002ffc <UART_SetConfig+0x13c>
 8002fde:	e01b      	b.n	8003018 <UART_SetConfig+0x158>
 8002fe0:	231b      	movs	r3, #27
 8002fe2:	2218      	movs	r2, #24
 8002fe4:	189b      	adds	r3, r3, r2
 8002fe6:	19db      	adds	r3, r3, r7
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	e065      	b.n	80030ba <UART_SetConfig+0x1fa>
 8002fee:	231b      	movs	r3, #27
 8002ff0:	2218      	movs	r2, #24
 8002ff2:	189b      	adds	r3, r3, r2
 8002ff4:	19db      	adds	r3, r3, r7
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	e05e      	b.n	80030ba <UART_SetConfig+0x1fa>
 8002ffc:	231b      	movs	r3, #27
 8002ffe:	2218      	movs	r2, #24
 8003000:	189b      	adds	r3, r3, r2
 8003002:	19db      	adds	r3, r3, r7
 8003004:	2204      	movs	r2, #4
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e057      	b.n	80030ba <UART_SetConfig+0x1fa>
 800300a:	231b      	movs	r3, #27
 800300c:	2218      	movs	r2, #24
 800300e:	189b      	adds	r3, r3, r2
 8003010:	19db      	adds	r3, r3, r7
 8003012:	2208      	movs	r2, #8
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e050      	b.n	80030ba <UART_SetConfig+0x1fa>
 8003018:	231b      	movs	r3, #27
 800301a:	2218      	movs	r2, #24
 800301c:	189b      	adds	r3, r3, r2
 800301e:	19db      	adds	r3, r3, r7
 8003020:	2210      	movs	r2, #16
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e049      	b.n	80030ba <UART_SetConfig+0x1fa>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <UART_SetConfig+0x354>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d13e      	bne.n	80030ae <UART_SetConfig+0x1ee>
 8003030:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <UART_SetConfig+0x360>)
 8003032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003034:	23c0      	movs	r3, #192	; 0xc0
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	4013      	ands	r3, r2
 800303a:	22c0      	movs	r2, #192	; 0xc0
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	4293      	cmp	r3, r2
 8003040:	d027      	beq.n	8003092 <UART_SetConfig+0x1d2>
 8003042:	22c0      	movs	r2, #192	; 0xc0
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	4293      	cmp	r3, r2
 8003048:	d82a      	bhi.n	80030a0 <UART_SetConfig+0x1e0>
 800304a:	2280      	movs	r2, #128	; 0x80
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	4293      	cmp	r3, r2
 8003050:	d011      	beq.n	8003076 <UART_SetConfig+0x1b6>
 8003052:	2280      	movs	r2, #128	; 0x80
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	4293      	cmp	r3, r2
 8003058:	d822      	bhi.n	80030a0 <UART_SetConfig+0x1e0>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <UART_SetConfig+0x1a8>
 800305e:	2280      	movs	r2, #128	; 0x80
 8003060:	00d2      	lsls	r2, r2, #3
 8003062:	4293      	cmp	r3, r2
 8003064:	d00e      	beq.n	8003084 <UART_SetConfig+0x1c4>
 8003066:	e01b      	b.n	80030a0 <UART_SetConfig+0x1e0>
 8003068:	231b      	movs	r3, #27
 800306a:	2218      	movs	r2, #24
 800306c:	189b      	adds	r3, r3, r2
 800306e:	19db      	adds	r3, r3, r7
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e021      	b.n	80030ba <UART_SetConfig+0x1fa>
 8003076:	231b      	movs	r3, #27
 8003078:	2218      	movs	r2, #24
 800307a:	189b      	adds	r3, r3, r2
 800307c:	19db      	adds	r3, r3, r7
 800307e:	2202      	movs	r2, #2
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e01a      	b.n	80030ba <UART_SetConfig+0x1fa>
 8003084:	231b      	movs	r3, #27
 8003086:	2218      	movs	r2, #24
 8003088:	189b      	adds	r3, r3, r2
 800308a:	19db      	adds	r3, r3, r7
 800308c:	2204      	movs	r2, #4
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e013      	b.n	80030ba <UART_SetConfig+0x1fa>
 8003092:	231b      	movs	r3, #27
 8003094:	2218      	movs	r2, #24
 8003096:	189b      	adds	r3, r3, r2
 8003098:	19db      	adds	r3, r3, r7
 800309a:	2208      	movs	r2, #8
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e00c      	b.n	80030ba <UART_SetConfig+0x1fa>
 80030a0:	231b      	movs	r3, #27
 80030a2:	2218      	movs	r2, #24
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	19db      	adds	r3, r3, r7
 80030a8:	2210      	movs	r2, #16
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e005      	b.n	80030ba <UART_SetConfig+0x1fa>
 80030ae:	231b      	movs	r3, #27
 80030b0:	2218      	movs	r2, #24
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2210      	movs	r2, #16
 80030b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a55      	ldr	r2, [pc, #340]	; (8003214 <UART_SetConfig+0x354>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d000      	beq.n	80030c6 <UART_SetConfig+0x206>
 80030c4:	e084      	b.n	80031d0 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030c6:	231b      	movs	r3, #27
 80030c8:	2218      	movs	r2, #24
 80030ca:	189b      	adds	r3, r3, r2
 80030cc:	19db      	adds	r3, r3, r7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d01d      	beq.n	8003110 <UART_SetConfig+0x250>
 80030d4:	dc20      	bgt.n	8003118 <UART_SetConfig+0x258>
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d015      	beq.n	8003106 <UART_SetConfig+0x246>
 80030da:	dc1d      	bgt.n	8003118 <UART_SetConfig+0x258>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <UART_SetConfig+0x226>
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d005      	beq.n	80030f0 <UART_SetConfig+0x230>
 80030e4:	e018      	b.n	8003118 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e6:	f7fe ff45 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 80030ea:	0003      	movs	r3, r0
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030ee:	e01c      	b.n	800312a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030f0:	4b4b      	ldr	r3, [pc, #300]	; (8003220 <UART_SetConfig+0x360>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2210      	movs	r2, #16
 80030f6:	4013      	ands	r3, r2
 80030f8:	d002      	beq.n	8003100 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030fa:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <UART_SetConfig+0x368>)
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80030fe:	e014      	b.n	800312a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003100:	4b4a      	ldr	r3, [pc, #296]	; (800322c <UART_SetConfig+0x36c>)
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003104:	e011      	b.n	800312a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003106:	f7fe fe85 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 800310a:	0003      	movs	r3, r0
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800310e:	e00c      	b.n	800312a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003116:	e008      	b.n	800312a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800311c:	231a      	movs	r3, #26
 800311e:	2218      	movs	r2, #24
 8003120:	189b      	adds	r3, r3, r2
 8003122:	19db      	adds	r3, r3, r7
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
        break;
 8003128:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d100      	bne.n	8003132 <UART_SetConfig+0x272>
 8003130:	e132      	b.n	8003398 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	0013      	movs	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	189b      	adds	r3, r3, r2
 800313c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800313e:	429a      	cmp	r2, r3
 8003140:	d305      	bcc.n	800314e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314a:	429a      	cmp	r2, r3
 800314c:	d906      	bls.n	800315c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800314e:	231a      	movs	r3, #26
 8003150:	2218      	movs	r2, #24
 8003152:	189b      	adds	r3, r3, r2
 8003154:	19db      	adds	r3, r3, r7
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e11d      	b.n	8003398 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	6939      	ldr	r1, [r7, #16]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	000b      	movs	r3, r1
 800316a:	0e1b      	lsrs	r3, r3, #24
 800316c:	0010      	movs	r0, r2
 800316e:	0205      	lsls	r5, r0, #8
 8003170:	431d      	orrs	r5, r3
 8003172:	000b      	movs	r3, r1
 8003174:	021c      	lsls	r4, r3, #8
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68b8      	ldr	r0, [r7, #8]
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	1900      	adds	r0, r0, r4
 8003188:	4169      	adcs	r1, r5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	2300      	movs	r3, #0
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f7fd f842 	bl	8000220 <__aeabi_uldivmod>
 800319c:	0002      	movs	r2, r0
 800319e:	000b      	movs	r3, r1
 80031a0:	0013      	movs	r3, r2
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a6:	23c0      	movs	r3, #192	; 0xc0
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d309      	bcc.n	80031c2 <UART_SetConfig+0x302>
 80031ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	035b      	lsls	r3, r3, #13
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d204      	bcs.n	80031c2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	e0ea      	b.n	8003398 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80031c2:	231a      	movs	r3, #26
 80031c4:	2218      	movs	r2, #24
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	19db      	adds	r3, r3, r7
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e0e3      	b.n	8003398 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	429a      	cmp	r2, r3
 80031da:	d000      	beq.n	80031de <UART_SetConfig+0x31e>
 80031dc:	e085      	b.n	80032ea <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80031de:	231b      	movs	r3, #27
 80031e0:	2218      	movs	r2, #24
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	19db      	adds	r3, r3, r7
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d837      	bhi.n	800325c <UART_SetConfig+0x39c>
 80031ec:	009a      	lsls	r2, r3, #2
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <UART_SetConfig+0x370>)
 80031f0:	18d3      	adds	r3, r2, r3
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f6:	f7fe febd 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 80031fa:	0003      	movs	r3, r0
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031fe:	e036      	b.n	800326e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7fe fece 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 8003204:	0003      	movs	r3, r0
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003208:	e031      	b.n	800326e <UART_SetConfig+0x3ae>
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	efff69f3 	.word	0xefff69f3
 8003210:	ffffcfff 	.word	0xffffcfff
 8003214:	40004800 	.word	0x40004800
 8003218:	fffff4ff 	.word	0xfffff4ff
 800321c:	40013800 	.word	0x40013800
 8003220:	40021000 	.word	0x40021000
 8003224:	40004400 	.word	0x40004400
 8003228:	003d0900 	.word	0x003d0900
 800322c:	00f42400 	.word	0x00f42400
 8003230:	080038b0 	.word	0x080038b0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003234:	4b60      	ldr	r3, [pc, #384]	; (80033b8 <UART_SetConfig+0x4f8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2210      	movs	r2, #16
 800323a:	4013      	ands	r3, r2
 800323c:	d002      	beq.n	8003244 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800323e:	4b5f      	ldr	r3, [pc, #380]	; (80033bc <UART_SetConfig+0x4fc>)
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003242:	e014      	b.n	800326e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003244:	4b5e      	ldr	r3, [pc, #376]	; (80033c0 <UART_SetConfig+0x500>)
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003248:	e011      	b.n	800326e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324a:	f7fe fde3 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 800324e:	0003      	movs	r3, r0
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003252:	e00c      	b.n	800326e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800325a:	e008      	b.n	800326e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003260:	231a      	movs	r3, #26
 8003262:	2218      	movs	r2, #24
 8003264:	189b      	adds	r3, r3, r2
 8003266:	19db      	adds	r3, r3, r7
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
        break;
 800326c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d100      	bne.n	8003276 <UART_SetConfig+0x3b6>
 8003274:	e090      	b.n	8003398 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	005a      	lsls	r2, r3, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	18d2      	adds	r2, r2, r3
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0019      	movs	r1, r3
 8003288:	0010      	movs	r0, r2
 800328a:	f7fc ff3d 	bl	8000108 <__udivsi3>
 800328e:	0003      	movs	r3, r0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d921      	bls.n	80032dc <UART_SetConfig+0x41c>
 8003298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	025b      	lsls	r3, r3, #9
 800329e:	429a      	cmp	r2, r3
 80032a0:	d21c      	bcs.n	80032dc <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	200e      	movs	r0, #14
 80032a8:	2418      	movs	r4, #24
 80032aa:	1903      	adds	r3, r0, r4
 80032ac:	19db      	adds	r3, r3, r7
 80032ae:	210f      	movs	r1, #15
 80032b0:	438a      	bics	r2, r1
 80032b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2207      	movs	r2, #7
 80032bc:	4013      	ands	r3, r2
 80032be:	b299      	uxth	r1, r3
 80032c0:	1903      	adds	r3, r0, r4
 80032c2:	19db      	adds	r3, r3, r7
 80032c4:	1902      	adds	r2, r0, r4
 80032c6:	19d2      	adds	r2, r2, r7
 80032c8:	8812      	ldrh	r2, [r2, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	1902      	adds	r2, r0, r4
 80032d4:	19d2      	adds	r2, r2, r7
 80032d6:	8812      	ldrh	r2, [r2, #0]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	e05d      	b.n	8003398 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80032dc:	231a      	movs	r3, #26
 80032de:	2218      	movs	r2, #24
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	19db      	adds	r3, r3, r7
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e056      	b.n	8003398 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ea:	231b      	movs	r3, #27
 80032ec:	2218      	movs	r2, #24
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	19db      	adds	r3, r3, r7
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d822      	bhi.n	800333e <UART_SetConfig+0x47e>
 80032f8:	009a      	lsls	r2, r3, #2
 80032fa:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <UART_SetConfig+0x504>)
 80032fc:	18d3      	adds	r3, r2, r3
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003302:	f7fe fe37 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003306:	0003      	movs	r3, r0
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800330a:	e021      	b.n	8003350 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800330c:	f7fe fe48 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 8003310:	0003      	movs	r3, r0
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003314:	e01c      	b.n	8003350 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003316:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <UART_SetConfig+0x4f8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2210      	movs	r2, #16
 800331c:	4013      	ands	r3, r2
 800331e:	d002      	beq.n	8003326 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003320:	4b26      	ldr	r3, [pc, #152]	; (80033bc <UART_SetConfig+0x4fc>)
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003324:	e014      	b.n	8003350 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <UART_SetConfig+0x500>)
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800332a:	e011      	b.n	8003350 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332c:	f7fe fd72 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8003330:	0003      	movs	r3, r0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003334:	e00c      	b.n	8003350 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800333c:	e008      	b.n	8003350 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003342:	231a      	movs	r3, #26
 8003344:	2218      	movs	r2, #24
 8003346:	189b      	adds	r3, r3, r2
 8003348:	19db      	adds	r3, r3, r7
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
        break;
 800334e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	085a      	lsrs	r2, r3, #1
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	18d2      	adds	r2, r2, r3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	0019      	movs	r1, r3
 8003366:	0010      	movs	r0, r2
 8003368:	f7fc fece 	bl	8000108 <__udivsi3>
 800336c:	0003      	movs	r3, r0
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	2b0f      	cmp	r3, #15
 8003374:	d90a      	bls.n	800338c <UART_SetConfig+0x4cc>
 8003376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	025b      	lsls	r3, r3, #9
 800337c:	429a      	cmp	r2, r3
 800337e:	d205      	bcs.n	800338c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	b29a      	uxth	r2, r3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	e005      	b.n	8003398 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800338c:	231a      	movs	r3, #26
 800338e:	2218      	movs	r2, #24
 8003390:	189b      	adds	r3, r3, r2
 8003392:	19db      	adds	r3, r3, r7
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2200      	movs	r2, #0
 800339c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	2200      	movs	r2, #0
 80033a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033a4:	231a      	movs	r3, #26
 80033a6:	2218      	movs	r2, #24
 80033a8:	189b      	adds	r3, r3, r2
 80033aa:	19db      	adds	r3, r3, r7
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b00e      	add	sp, #56	; 0x38
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	40021000 	.word	0x40021000
 80033bc:	003d0900 	.word	0x003d0900
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	080038d4 	.word	0x080038d4

080033c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	2201      	movs	r2, #1
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a4a      	ldr	r2, [pc, #296]	; (800350c <UART_AdvFeatureConfig+0x144>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2202      	movs	r2, #2
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00b      	beq.n	8003414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a43      	ldr	r2, [pc, #268]	; (8003510 <UART_AdvFeatureConfig+0x148>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2204      	movs	r2, #4
 800341a:	4013      	ands	r3, r2
 800341c:	d00b      	beq.n	8003436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a3b      	ldr	r2, [pc, #236]	; (8003514 <UART_AdvFeatureConfig+0x14c>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2208      	movs	r2, #8
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4a34      	ldr	r2, [pc, #208]	; (8003518 <UART_AdvFeatureConfig+0x150>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2210      	movs	r2, #16
 800345e:	4013      	ands	r3, r2
 8003460:	d00b      	beq.n	800347a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a2c      	ldr	r2, [pc, #176]	; (800351c <UART_AdvFeatureConfig+0x154>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2220      	movs	r2, #32
 8003480:	4013      	ands	r3, r2
 8003482:	d00b      	beq.n	800349c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	4a25      	ldr	r2, [pc, #148]	; (8003520 <UART_AdvFeatureConfig+0x158>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	4013      	ands	r3, r2
 80034a4:	d01d      	beq.n	80034e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <UART_AdvFeatureConfig+0x15c>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	035b      	lsls	r3, r3, #13
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d10b      	bne.n	80034e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a15      	ldr	r2, [pc, #84]	; (8003528 <UART_AdvFeatureConfig+0x160>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	4013      	ands	r3, r2
 80034ea:	d00b      	beq.n	8003504 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4a0e      	ldr	r2, [pc, #56]	; (800352c <UART_AdvFeatureConfig+0x164>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]
  }
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}
 800350c:	fffdffff 	.word	0xfffdffff
 8003510:	fffeffff 	.word	0xfffeffff
 8003514:	fffbffff 	.word	0xfffbffff
 8003518:	ffff7fff 	.word	0xffff7fff
 800351c:	ffffefff 	.word	0xffffefff
 8003520:	ffffdfff 	.word	0xffffdfff
 8003524:	ffefffff 	.word	0xffefffff
 8003528:	ff9fffff 	.word	0xff9fffff
 800352c:	fff7ffff 	.word	0xfff7ffff

08003530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b092      	sub	sp, #72	; 0x48
 8003534:	af02      	add	r7, sp, #8
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2284      	movs	r2, #132	; 0x84
 800353c:	2100      	movs	r1, #0
 800353e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003540:	f7fd fafc 	bl	8000b3c <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2208      	movs	r2, #8
 8003550:	4013      	ands	r3, r2
 8003552:	2b08      	cmp	r3, #8
 8003554:	d12c      	bne.n	80035b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	0391      	lsls	r1, r2, #14
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4a46      	ldr	r2, [pc, #280]	; (8003678 <UART_CheckIdleState+0x148>)
 8003560:	9200      	str	r2, [sp, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	f000 f88c 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d021      	beq.n	80035b0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8310 	mrs	r3, PRIMASK
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
 8003576:	2301      	movs	r3, #1
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	f383 8810 	msr	PRIMASK, r3
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	438a      	bics	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	f383 8810 	msr	PRIMASK, r3
}
 800359c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2278      	movs	r2, #120	; 0x78
 80035a8:	2100      	movs	r1, #0
 80035aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e05f      	b.n	8003670 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2204      	movs	r2, #4
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d146      	bne.n	800364c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	03d1      	lsls	r1, r2, #15
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <UART_CheckIdleState+0x148>)
 80035c8:	9200      	str	r2, [sp, #0]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f000 f858 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d03b      	beq.n	800364c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d4:	f3ef 8310 	mrs	r3, PRIMASK
 80035d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80035da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
 80035de:	2301      	movs	r3, #1
 80035e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f383 8810 	msr	PRIMASK, r3
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4921      	ldr	r1, [pc, #132]	; (800367c <UART_CheckIdleState+0x14c>)
 80035f6:	400a      	ands	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f383 8810 	msr	PRIMASK, r3
}
 8003604:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003606:	f3ef 8310 	mrs	r3, PRIMASK
 800360a:	61bb      	str	r3, [r7, #24]
  return(result);
 800360c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	633b      	str	r3, [r7, #48]	; 0x30
 8003610:	2301      	movs	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2101      	movs	r1, #1
 8003628:	438a      	bics	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	2120      	movs	r1, #32
 800363e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2278      	movs	r2, #120	; 0x78
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e011      	b.n	8003670 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	2120      	movs	r1, #32
 8003658:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2278      	movs	r2, #120	; 0x78
 800366a:	2100      	movs	r1, #0
 800366c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b010      	add	sp, #64	; 0x40
 8003676:	bd80      	pop	{r7, pc}
 8003678:	01ffffff 	.word	0x01ffffff
 800367c:	fffffedf 	.word	0xfffffedf

08003680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	1dfb      	adds	r3, r7, #7
 800368e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003690:	e04b      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	3301      	adds	r3, #1
 8003696:	d048      	beq.n	800372a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003698:	f7fd fa50 	bl	8000b3c <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d302      	bcc.n	80036ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e04b      	b.n	800374a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2204      	movs	r2, #4
 80036ba:	4013      	ands	r3, r2
 80036bc:	d035      	beq.n	800372a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	2208      	movs	r2, #8
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d111      	bne.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2208      	movs	r2, #8
 80036d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 f83c 	bl	8003754 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2284      	movs	r2, #132	; 0x84
 80036e0:	2108      	movs	r1, #8
 80036e2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2278      	movs	r2, #120	; 0x78
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e02c      	b.n	800374a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	401a      	ands	r2, r3
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	429a      	cmp	r2, r3
 8003702:	d112      	bne.n	800372a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	0018      	movs	r0, r3
 8003712:	f000 f81f 	bl	8003754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2284      	movs	r2, #132	; 0x84
 800371a:	2120      	movs	r1, #32
 800371c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2278      	movs	r2, #120	; 0x78
 8003722:	2100      	movs	r1, #0
 8003724:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e00f      	b.n	800374a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	425a      	negs	r2, r3
 800373a:	4153      	adcs	r3, r2
 800373c:	b2db      	uxtb	r3, r3
 800373e:	001a      	movs	r2, r3
 8003740:	1dfb      	adds	r3, r7, #7
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d0a4      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b004      	add	sp, #16
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	; 0x38
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375c:	f3ef 8310 	mrs	r3, PRIMASK
 8003760:	617b      	str	r3, [r7, #20]
  return(result);
 8003762:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4926      	ldr	r1, [pc, #152]	; (8003818 <UART_EndRxTransfer+0xc4>)
 800377e:	400a      	ands	r2, r1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378e:	f3ef 8310 	mrs	r3, PRIMASK
 8003792:	623b      	str	r3, [r7, #32]
  return(result);
 8003794:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003796:	633b      	str	r3, [r7, #48]	; 0x30
 8003798:	2301      	movs	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	f383 8810 	msr	PRIMASK, r3
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2101      	movs	r1, #1
 80037b0:	438a      	bics	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	f383 8810 	msr	PRIMASK, r3
}
 80037be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d118      	bne.n	80037fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c8:	f3ef 8310 	mrs	r3, PRIMASK
 80037cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	2301      	movs	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2110      	movs	r1, #16
 80037ea:	438a      	bics	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	2120      	movs	r1, #32
 8003800:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b00e      	add	sp, #56	; 0x38
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	fffffedf 	.word	0xfffffedf

0800381c <__libc_init_array>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	2600      	movs	r6, #0
 8003820:	4d0c      	ldr	r5, [pc, #48]	; (8003854 <__libc_init_array+0x38>)
 8003822:	4c0d      	ldr	r4, [pc, #52]	; (8003858 <__libc_init_array+0x3c>)
 8003824:	1b64      	subs	r4, r4, r5
 8003826:	10a4      	asrs	r4, r4, #2
 8003828:	42a6      	cmp	r6, r4
 800382a:	d109      	bne.n	8003840 <__libc_init_array+0x24>
 800382c:	2600      	movs	r6, #0
 800382e:	f000 f821 	bl	8003874 <_init>
 8003832:	4d0a      	ldr	r5, [pc, #40]	; (800385c <__libc_init_array+0x40>)
 8003834:	4c0a      	ldr	r4, [pc, #40]	; (8003860 <__libc_init_array+0x44>)
 8003836:	1b64      	subs	r4, r4, r5
 8003838:	10a4      	asrs	r4, r4, #2
 800383a:	42a6      	cmp	r6, r4
 800383c:	d105      	bne.n	800384a <__libc_init_array+0x2e>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	00b3      	lsls	r3, r6, #2
 8003842:	58eb      	ldr	r3, [r5, r3]
 8003844:	4798      	blx	r3
 8003846:	3601      	adds	r6, #1
 8003848:	e7ee      	b.n	8003828 <__libc_init_array+0xc>
 800384a:	00b3      	lsls	r3, r6, #2
 800384c:	58eb      	ldr	r3, [r5, r3]
 800384e:	4798      	blx	r3
 8003850:	3601      	adds	r6, #1
 8003852:	e7f2      	b.n	800383a <__libc_init_array+0x1e>
 8003854:	08003900 	.word	0x08003900
 8003858:	08003900 	.word	0x08003900
 800385c:	08003900 	.word	0x08003900
 8003860:	08003904 	.word	0x08003904

08003864 <memset>:
 8003864:	0003      	movs	r3, r0
 8003866:	1882      	adds	r2, r0, r2
 8003868:	4293      	cmp	r3, r2
 800386a:	d100      	bne.n	800386e <memset+0xa>
 800386c:	4770      	bx	lr
 800386e:	7019      	strb	r1, [r3, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	e7f9      	b.n	8003868 <memset+0x4>

08003874 <_init>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr

08003880 <_fini>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

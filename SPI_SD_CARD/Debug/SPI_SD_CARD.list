
SPI_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009150  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009980  08009980  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009988  08009988  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009988  08009988  00019988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800998c  0800998c  0001998c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000292c  20000074  08009a04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200029a0  08009a04  000229a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001306b  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad2  00000000  00000000  00033152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00035c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c38  00000000  00000000  00036c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b6b2  00000000  00000000  00037840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016bf5  00000000  00000000  00062ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001011d8  00000000  00000000  00079ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046c8  00000000  00000000  0017acc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0017f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080092f8 	.word	0x080092f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	080092f8 	.word	0x080092f8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b970 	b.w	8000bb4 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9e08      	ldr	r6, [sp, #32]
 80008f2:	460d      	mov	r5, r1
 80008f4:	4604      	mov	r4, r0
 80008f6:	460f      	mov	r7, r1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d14a      	bne.n	8000992 <__udivmoddi4+0xa6>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4694      	mov	ip, r2
 8000900:	d965      	bls.n	80009ce <__udivmoddi4+0xe2>
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	b143      	cbz	r3, 800091a <__udivmoddi4+0x2e>
 8000908:	fa02 fc03 	lsl.w	ip, r2, r3
 800090c:	f1c3 0220 	rsb	r2, r3, #32
 8000910:	409f      	lsls	r7, r3
 8000912:	fa20 f202 	lsr.w	r2, r0, r2
 8000916:	4317      	orrs	r7, r2
 8000918:	409c      	lsls	r4, r3
 800091a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800091e:	fa1f f58c 	uxth.w	r5, ip
 8000922:	fbb7 f1fe 	udiv	r1, r7, lr
 8000926:	0c22      	lsrs	r2, r4, #16
 8000928:	fb0e 7711 	mls	r7, lr, r1, r7
 800092c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000930:	fb01 f005 	mul.w	r0, r1, r5
 8000934:	4290      	cmp	r0, r2
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x62>
 8000938:	eb1c 0202 	adds.w	r2, ip, r2
 800093c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000940:	f080 811c 	bcs.w	8000b7c <__udivmoddi4+0x290>
 8000944:	4290      	cmp	r0, r2
 8000946:	f240 8119 	bls.w	8000b7c <__udivmoddi4+0x290>
 800094a:	3902      	subs	r1, #2
 800094c:	4462      	add	r2, ip
 800094e:	1a12      	subs	r2, r2, r0
 8000950:	b2a4      	uxth	r4, r4
 8000952:	fbb2 f0fe 	udiv	r0, r2, lr
 8000956:	fb0e 2210 	mls	r2, lr, r0, r2
 800095a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800095e:	fb00 f505 	mul.w	r5, r0, r5
 8000962:	42a5      	cmp	r5, r4
 8000964:	d90a      	bls.n	800097c <__udivmoddi4+0x90>
 8000966:	eb1c 0404 	adds.w	r4, ip, r4
 800096a:	f100 32ff 	add.w	r2, r0, #4294967295
 800096e:	f080 8107 	bcs.w	8000b80 <__udivmoddi4+0x294>
 8000972:	42a5      	cmp	r5, r4
 8000974:	f240 8104 	bls.w	8000b80 <__udivmoddi4+0x294>
 8000978:	4464      	add	r4, ip
 800097a:	3802      	subs	r0, #2
 800097c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000980:	1b64      	subs	r4, r4, r5
 8000982:	2100      	movs	r1, #0
 8000984:	b11e      	cbz	r6, 800098e <__udivmoddi4+0xa2>
 8000986:	40dc      	lsrs	r4, r3
 8000988:	2300      	movs	r3, #0
 800098a:	e9c6 4300 	strd	r4, r3, [r6]
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	428b      	cmp	r3, r1
 8000994:	d908      	bls.n	80009a8 <__udivmoddi4+0xbc>
 8000996:	2e00      	cmp	r6, #0
 8000998:	f000 80ed 	beq.w	8000b76 <__udivmoddi4+0x28a>
 800099c:	2100      	movs	r1, #0
 800099e:	e9c6 0500 	strd	r0, r5, [r6]
 80009a2:	4608      	mov	r0, r1
 80009a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a8:	fab3 f183 	clz	r1, r3
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d149      	bne.n	8000a44 <__udivmoddi4+0x158>
 80009b0:	42ab      	cmp	r3, r5
 80009b2:	d302      	bcc.n	80009ba <__udivmoddi4+0xce>
 80009b4:	4282      	cmp	r2, r0
 80009b6:	f200 80f8 	bhi.w	8000baa <__udivmoddi4+0x2be>
 80009ba:	1a84      	subs	r4, r0, r2
 80009bc:	eb65 0203 	sbc.w	r2, r5, r3
 80009c0:	2001      	movs	r0, #1
 80009c2:	4617      	mov	r7, r2
 80009c4:	2e00      	cmp	r6, #0
 80009c6:	d0e2      	beq.n	800098e <__udivmoddi4+0xa2>
 80009c8:	e9c6 4700 	strd	r4, r7, [r6]
 80009cc:	e7df      	b.n	800098e <__udivmoddi4+0xa2>
 80009ce:	b902      	cbnz	r2, 80009d2 <__udivmoddi4+0xe6>
 80009d0:	deff      	udf	#255	; 0xff
 80009d2:	fab2 f382 	clz	r3, r2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 8090 	bne.w	8000afc <__udivmoddi4+0x210>
 80009dc:	1a8a      	subs	r2, r1, r2
 80009de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e2:	fa1f fe8c 	uxth.w	lr, ip
 80009e6:	2101      	movs	r1, #1
 80009e8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ec:	fb07 2015 	mls	r0, r7, r5, r2
 80009f0:	0c22      	lsrs	r2, r4, #16
 80009f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009f6:	fb0e f005 	mul.w	r0, lr, r5
 80009fa:	4290      	cmp	r0, r2
 80009fc:	d908      	bls.n	8000a10 <__udivmoddi4+0x124>
 80009fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000a02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x122>
 8000a08:	4290      	cmp	r0, r2
 8000a0a:	f200 80cb 	bhi.w	8000ba4 <__udivmoddi4+0x2b8>
 8000a0e:	4645      	mov	r5, r8
 8000a10:	1a12      	subs	r2, r2, r0
 8000a12:	b2a4      	uxth	r4, r4
 8000a14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a18:	fb07 2210 	mls	r2, r7, r0, r2
 8000a1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a20:	fb0e fe00 	mul.w	lr, lr, r0
 8000a24:	45a6      	cmp	lr, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x14e>
 8000a28:	eb1c 0404 	adds.w	r4, ip, r4
 8000a2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a30:	d202      	bcs.n	8000a38 <__udivmoddi4+0x14c>
 8000a32:	45a6      	cmp	lr, r4
 8000a34:	f200 80bb 	bhi.w	8000bae <__udivmoddi4+0x2c2>
 8000a38:	4610      	mov	r0, r2
 8000a3a:	eba4 040e 	sub.w	r4, r4, lr
 8000a3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a42:	e79f      	b.n	8000984 <__udivmoddi4+0x98>
 8000a44:	f1c1 0720 	rsb	r7, r1, #32
 8000a48:	408b      	lsls	r3, r1
 8000a4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a52:	fa05 f401 	lsl.w	r4, r5, r1
 8000a56:	fa20 f307 	lsr.w	r3, r0, r7
 8000a5a:	40fd      	lsrs	r5, r7
 8000a5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a60:	4323      	orrs	r3, r4
 8000a62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a66:	fa1f fe8c 	uxth.w	lr, ip
 8000a6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a6e:	0c1c      	lsrs	r4, r3, #16
 8000a70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a74:	fb08 f50e 	mul.w	r5, r8, lr
 8000a78:	42a5      	cmp	r5, r4
 8000a7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a82:	d90b      	bls.n	8000a9c <__udivmoddi4+0x1b0>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a8c:	f080 8088 	bcs.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a90:	42a5      	cmp	r5, r4
 8000a92:	f240 8085 	bls.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a96:	f1a8 0802 	sub.w	r8, r8, #2
 8000a9a:	4464      	add	r4, ip
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	b29d      	uxth	r5, r3
 8000aa0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000aa4:	fb09 4413 	mls	r4, r9, r3, r4
 8000aa8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000aac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d908      	bls.n	8000ac6 <__udivmoddi4+0x1da>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000abc:	d26c      	bcs.n	8000b98 <__udivmoddi4+0x2ac>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	d96a      	bls.n	8000b98 <__udivmoddi4+0x2ac>
 8000ac2:	3b02      	subs	r3, #2
 8000ac4:	4464      	add	r4, ip
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fba3 9502 	umull	r9, r5, r3, r2
 8000ace:	eba4 040e 	sub.w	r4, r4, lr
 8000ad2:	42ac      	cmp	r4, r5
 8000ad4:	46c8      	mov	r8, r9
 8000ad6:	46ae      	mov	lr, r5
 8000ad8:	d356      	bcc.n	8000b88 <__udivmoddi4+0x29c>
 8000ada:	d053      	beq.n	8000b84 <__udivmoddi4+0x298>
 8000adc:	b156      	cbz	r6, 8000af4 <__udivmoddi4+0x208>
 8000ade:	ebb0 0208 	subs.w	r2, r0, r8
 8000ae2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ae6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aea:	40ca      	lsrs	r2, r1
 8000aec:	40cc      	lsrs	r4, r1
 8000aee:	4317      	orrs	r7, r2
 8000af0:	e9c6 7400 	strd	r7, r4, [r6]
 8000af4:	4618      	mov	r0, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afc:	f1c3 0120 	rsb	r1, r3, #32
 8000b00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b04:	fa20 f201 	lsr.w	r2, r0, r1
 8000b08:	fa25 f101 	lsr.w	r1, r5, r1
 8000b0c:	409d      	lsls	r5, r3
 8000b0e:	432a      	orrs	r2, r5
 8000b10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b14:	fa1f fe8c 	uxth.w	lr, ip
 8000b18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b26:	fb00 f50e 	mul.w	r5, r0, lr
 8000b2a:	428d      	cmp	r5, r1
 8000b2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x258>
 8000b32:	eb1c 0101 	adds.w	r1, ip, r1
 8000b36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b3a:	d22f      	bcs.n	8000b9c <__udivmoddi4+0x2b0>
 8000b3c:	428d      	cmp	r5, r1
 8000b3e:	d92d      	bls.n	8000b9c <__udivmoddi4+0x2b0>
 8000b40:	3802      	subs	r0, #2
 8000b42:	4461      	add	r1, ip
 8000b44:	1b49      	subs	r1, r1, r5
 8000b46:	b292      	uxth	r2, r2
 8000b48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b54:	fb05 f10e 	mul.w	r1, r5, lr
 8000b58:	4291      	cmp	r1, r2
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x282>
 8000b5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b64:	d216      	bcs.n	8000b94 <__udivmoddi4+0x2a8>
 8000b66:	4291      	cmp	r1, r2
 8000b68:	d914      	bls.n	8000b94 <__udivmoddi4+0x2a8>
 8000b6a:	3d02      	subs	r5, #2
 8000b6c:	4462      	add	r2, ip
 8000b6e:	1a52      	subs	r2, r2, r1
 8000b70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b74:	e738      	b.n	80009e8 <__udivmoddi4+0xfc>
 8000b76:	4631      	mov	r1, r6
 8000b78:	4630      	mov	r0, r6
 8000b7a:	e708      	b.n	800098e <__udivmoddi4+0xa2>
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e6e6      	b.n	800094e <__udivmoddi4+0x62>
 8000b80:	4610      	mov	r0, r2
 8000b82:	e6fb      	b.n	800097c <__udivmoddi4+0x90>
 8000b84:	4548      	cmp	r0, r9
 8000b86:	d2a9      	bcs.n	8000adc <__udivmoddi4+0x1f0>
 8000b88:	ebb9 0802 	subs.w	r8, r9, r2
 8000b8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b90:	3b01      	subs	r3, #1
 8000b92:	e7a3      	b.n	8000adc <__udivmoddi4+0x1f0>
 8000b94:	4645      	mov	r5, r8
 8000b96:	e7ea      	b.n	8000b6e <__udivmoddi4+0x282>
 8000b98:	462b      	mov	r3, r5
 8000b9a:	e794      	b.n	8000ac6 <__udivmoddi4+0x1da>
 8000b9c:	4640      	mov	r0, r8
 8000b9e:	e7d1      	b.n	8000b44 <__udivmoddi4+0x258>
 8000ba0:	46d0      	mov	r8, sl
 8000ba2:	e77b      	b.n	8000a9c <__udivmoddi4+0x1b0>
 8000ba4:	3d02      	subs	r5, #2
 8000ba6:	4462      	add	r2, ip
 8000ba8:	e732      	b.n	8000a10 <__udivmoddi4+0x124>
 8000baa:	4608      	mov	r0, r1
 8000bac:	e70a      	b.n	80009c4 <__udivmoddi4+0xd8>
 8000bae:	4464      	add	r4, ip
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	e742      	b.n	8000a3a <__udivmoddi4+0x14e>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <SELECT>:
#define SD_CS_Pin GPIO_PIN_5
#define SD_CS_GPIO_Port GPIOA

/* SPI Chip Select */
static void SELECT(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f001 fba4 	bl	8002310 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd8:	f001 fb9a 	bl	8002310 <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000bea:	bf00      	nop
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <SPI_TxByte+0x2c>)
 8000bee:	f003 fca5 	bl	800453c <HAL_SPI_GetState>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d1f9      	bne.n	8000bec <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000bf8:	1df9      	adds	r1, r7, #7
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4803      	ldr	r0, [pc, #12]	; (8000c0c <SPI_TxByte+0x2c>)
 8000c00:	f003 f905 	bl	8003e0e <HAL_SPI_Transmit>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000128 	.word	0x20000128

08000c10 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000c16:	23ff      	movs	r3, #255	; 0xff
 8000c18:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000c1e:	bf00      	nop
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <SPI_RxByte+0x38>)
 8000c22:	f003 fc8b 	bl	800453c <HAL_SPI_GetState>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d1f9      	bne.n	8000c20 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000c2c:	1dba      	adds	r2, r7, #6
 8000c2e:	1df9      	adds	r1, r7, #7
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <SPI_RxByte+0x38>)
 8000c38:	f003 fa5e 	bl	80040f8 <HAL_SPI_TransmitReceive>

  return data;
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000128 	.word	0x20000128

08000c4c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c54:	f7ff ffdc 	bl	8000c10 <SPI_RxByte>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	701a      	strb	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <SD_ReadyWait+0x34>)
 8000c70:	2232      	movs	r2, #50	; 0x32
 8000c72:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000c74:	f7ff ffcc 	bl	8000c10 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000c78:	f7ff ffca 	bl	8000c10 <SPI_RxByte>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2bff      	cmp	r3, #255	; 0xff
 8000c84:	d004      	beq.n	8000c90 <SD_ReadyWait+0x28>
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SD_ReadyWait+0x34>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1f3      	bne.n	8000c78 <SD_ReadyWait+0x10>

  return res;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20002612 	.word	0x20002612

08000ca0 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000ca6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000caa:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000cac:	f7ff ff8e 	bl	8000bcc <DESELECT>

  for(int i = 0; i < 10; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	e005      	b.n	8000cc2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000cb6:	20ff      	movs	r0, #255	; 0xff
 8000cb8:	f7ff ff92 	bl	8000be0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	2b09      	cmp	r3, #9
 8000cc6:	ddf6      	ble.n	8000cb6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000cc8:	f7ff ff76 	bl	8000bb8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000ce0:	2395      	movs	r3, #149	; 0x95
 8000ce2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e009      	b.n	8000cfe <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000cea:	1d3a      	adds	r2, r7, #4
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff74 	bl	8000be0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	ddf2      	ble.n	8000cea <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000d04:	e002      	b.n	8000d0c <SD_PowerOn+0x6c>
  {
    Count--;
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000d0c:	f7ff ff80 	bl	8000c10 <SPI_RxByte>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d002      	beq.n	8000d1c <SD_PowerOn+0x7c>
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f4      	bne.n	8000d06 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000d1c:	f7ff ff56 	bl	8000bcc <DESELECT>
  SPI_TxByte(0XFF);
 8000d20:	20ff      	movs	r0, #255	; 0xff
 8000d22:	f7ff ff5d 	bl	8000be0 <SPI_TxByte>

  PowerFlag = 1;
 8000d26:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <SD_PowerOn+0x94>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000091 	.word	0x20000091

08000d38 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <SD_PowerOff+0x14>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000091 	.word	0x20000091

08000d50 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <SD_CheckPower+0x14>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000091 	.word	0x20000091

08000d68 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <SD_RxDataBlock+0x68>)
 8000d74:	220a      	movs	r2, #10
 8000d76:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000d78:	f7ff ff4a 	bl	8000c10 <SPI_RxByte>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d104      	bne.n	8000d90 <SD_RxDataBlock+0x28>
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <SD_RxDataBlock+0x68>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f3      	bne.n	8000d78 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2bfe      	cmp	r3, #254	; 0xfe
 8000d94:	d001      	beq.n	8000d9a <SD_RxDataBlock+0x32>
    return FALSE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e016      	b.n	8000dc8 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff53 	bl	8000c4c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff4d 	bl	8000c4c <SPI_RxBytePtr>
  } while(btr -= 2);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3b02      	subs	r3, #2
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1ed      	bne.n	8000d9a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000dbe:	f7ff ff27 	bl	8000c10 <SPI_RxByte>
  SPI_RxByte();
 8000dc2:	f7ff ff25 	bl	8000c10 <SPI_RxByte>

  return TRUE;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20002611 	.word	0x20002611

08000dd4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000de4:	f7ff ff40 	bl	8000c68 <SD_ReadyWait>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2bff      	cmp	r3, #255	; 0xff
 8000dec:	d001      	beq.n	8000df2 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e040      	b.n	8000e74 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fef3 	bl	8000be0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	2bfd      	cmp	r3, #253	; 0xfd
 8000dfe:	d031      	beq.n	8000e64 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fee7 	bl	8000be0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fee0 	bl	8000be0 <SPI_TxByte>
    } while (--wc);
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	73bb      	strb	r3, [r7, #14]
 8000e26:	7bbb      	ldrb	r3, [r7, #14]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1eb      	bne.n	8000e04 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000e2c:	f7ff fef0 	bl	8000c10 <SPI_RxByte>
    SPI_RxByte();
 8000e30:	f7ff feee 	bl	8000c10 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000e34:	e00b      	b.n	8000e4e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000e36:	f7ff feeb 	bl	8000c10 <SPI_RxByte>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	f003 031f 	and.w	r3, r3, #31
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	d006      	beq.n	8000e56 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000e48:	7b7b      	ldrb	r3, [r7, #13]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	2b40      	cmp	r3, #64	; 0x40
 8000e52:	d9f0      	bls.n	8000e36 <SD_TxDataBlock+0x62>
 8000e54:	e000      	b.n	8000e58 <SD_TxDataBlock+0x84>
        break;
 8000e56:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000e58:	bf00      	nop
 8000e5a:	f7ff fed9 	bl	8000c10 <SPI_RxByte>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0fa      	beq.n	8000e5a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	f003 031f 	and.w	r3, r3, #31
 8000e6a:	2b05      	cmp	r3, #5
 8000e6c:	d101      	bne.n	8000e72 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e88:	f7ff feee 	bl	8000c68 <SD_ReadyWait>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2bff      	cmp	r3, #255	; 0xff
 8000e90:	d001      	beq.n	8000e96 <SD_SendCmd+0x1a>
    return 0xFF;
 8000e92:	23ff      	movs	r3, #255	; 0xff
 8000e94:	e040      	b.n	8000f18 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fea1 	bl	8000be0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	0e1b      	lsrs	r3, r3, #24
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fe9b 	bl	8000be0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	0c1b      	lsrs	r3, r3, #16
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fe95 	bl	8000be0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe8f 	bl	8000be0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fe8a 	bl	8000be0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b40      	cmp	r3, #64	; 0x40
 8000ed4:	d101      	bne.n	8000eda <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000ed6:	2395      	movs	r3, #149	; 0x95
 8000ed8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b48      	cmp	r3, #72	; 0x48
 8000ede:	d101      	bne.n	8000ee4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000ee0:	2387      	movs	r3, #135	; 0x87
 8000ee2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fe7a 	bl	8000be0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b4c      	cmp	r3, #76	; 0x4c
 8000ef0:	d101      	bne.n	8000ef6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000ef2:	f7ff fe8d 	bl	8000c10 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000efa:	f7ff fe89 	bl	8000c10 <SPI_RxByte>
 8000efe:	4603      	mov	r3, r0
 8000f00:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000f02:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	da05      	bge.n	8000f16 <SD_SendCmd+0x9a>
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	73bb      	strb	r3, [r7, #14]
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f1      	bne.n	8000efa <SD_SendCmd+0x7e>

  return res;
 8000f16:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e0d5      	b.n	80010e0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000f34:	4b6c      	ldr	r3, [pc, #432]	; (80010e8 <SD_disk_initialize+0x1c8>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <SD_disk_initialize+0x2a>
    return Stat;
 8000f42:	4b69      	ldr	r3, [pc, #420]	; (80010e8 <SD_disk_initialize+0x1c8>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	e0ca      	b.n	80010e0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000f4a:	f7ff fea9 	bl	8000ca0 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000f4e:	f7ff fe33 	bl	8000bb8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f56:	2100      	movs	r1, #0
 8000f58:	2040      	movs	r0, #64	; 0x40
 8000f5a:	f7ff ff8f 	bl	8000e7c <SD_SendCmd>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f040 80a5 	bne.w	80010b0 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000f66:	4b61      	ldr	r3, [pc, #388]	; (80010ec <SD_disk_initialize+0x1cc>)
 8000f68:	2264      	movs	r2, #100	; 0x64
 8000f6a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f70:	2048      	movs	r0, #72	; 0x48
 8000f72:	f7ff ff83 	bl	8000e7c <SD_SendCmd>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d158      	bne.n	800102e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e00c      	b.n	8000f9c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000f82:	7bfc      	ldrb	r4, [r7, #15]
 8000f84:	f7ff fe44 	bl	8000c10 <SPI_RxByte>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f104 0310 	add.w	r3, r4, #16
 8000f90:	443b      	add	r3, r7
 8000f92:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d9ef      	bls.n	8000f82 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000fa2:	7abb      	ldrb	r3, [r7, #10]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	f040 8083 	bne.w	80010b0 <SD_disk_initialize+0x190>
 8000faa:	7afb      	ldrb	r3, [r7, #11]
 8000fac:	2baa      	cmp	r3, #170	; 0xaa
 8000fae:	d17f      	bne.n	80010b0 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2077      	movs	r0, #119	; 0x77
 8000fb4:	f7ff ff62 	bl	8000e7c <SD_SendCmd>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d807      	bhi.n	8000fce <SD_disk_initialize+0xae>
 8000fbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fc2:	2069      	movs	r0, #105	; 0x69
 8000fc4:	f7ff ff5a 	bl	8000e7c <SD_SendCmd>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000fce:	4b47      	ldr	r3, [pc, #284]	; (80010ec <SD_disk_initialize+0x1cc>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1eb      	bne.n	8000fb0 <SD_disk_initialize+0x90>
 8000fd8:	e000      	b.n	8000fdc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000fda:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <SD_disk_initialize+0x1cc>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d064      	beq.n	80010b0 <SD_disk_initialize+0x190>
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	207a      	movs	r0, #122	; 0x7a
 8000fea:	f7ff ff47 	bl	8000e7c <SD_SendCmd>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d15d      	bne.n	80010b0 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e00c      	b.n	8001014 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000ffa:	7bfc      	ldrb	r4, [r7, #15]
 8000ffc:	f7ff fe08 	bl	8000c10 <SPI_RxByte>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	f104 0310 	add.w	r3, r4, #16
 8001008:	443b      	add	r3, r7
 800100a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d9ef      	bls.n	8000ffa <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800101a:	7a3b      	ldrb	r3, [r7, #8]
 800101c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SD_disk_initialize+0x108>
 8001024:	2306      	movs	r3, #6
 8001026:	e000      	b.n	800102a <SD_disk_initialize+0x10a>
 8001028:	2302      	movs	r3, #2
 800102a:	73bb      	strb	r3, [r7, #14]
 800102c:	e040      	b.n	80010b0 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800102e:	2100      	movs	r1, #0
 8001030:	2077      	movs	r0, #119	; 0x77
 8001032:	f7ff ff23 	bl	8000e7c <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d808      	bhi.n	800104e <SD_disk_initialize+0x12e>
 800103c:	2100      	movs	r1, #0
 800103e:	2069      	movs	r0, #105	; 0x69
 8001040:	f7ff ff1c 	bl	8000e7c <SD_SendCmd>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d801      	bhi.n	800104e <SD_disk_initialize+0x12e>
 800104a:	2302      	movs	r3, #2
 800104c:	e000      	b.n	8001050 <SD_disk_initialize+0x130>
 800104e:	2301      	movs	r3, #1
 8001050:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d10e      	bne.n	8001076 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001058:	2100      	movs	r1, #0
 800105a:	2077      	movs	r0, #119	; 0x77
 800105c:	f7ff ff0e 	bl	8000e7c <SD_SendCmd>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d80e      	bhi.n	8001084 <SD_disk_initialize+0x164>
 8001066:	2100      	movs	r1, #0
 8001068:	2069      	movs	r0, #105	; 0x69
 800106a:	f7ff ff07 	bl	8000e7c <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001074:	e00d      	b.n	8001092 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001076:	2100      	movs	r1, #0
 8001078:	2041      	movs	r0, #65	; 0x41
 800107a:	f7ff feff 	bl	8000e7c <SD_SendCmd>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <SD_disk_initialize+0x1cc>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1e1      	bne.n	8001052 <SD_disk_initialize+0x132>
 800108e:	e000      	b.n	8001092 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001090:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <SD_disk_initialize+0x1cc>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d007      	beq.n	80010ac <SD_disk_initialize+0x18c>
 800109c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a0:	2050      	movs	r0, #80	; 0x50
 80010a2:	f7ff feeb 	bl	8000e7c <SD_SendCmd>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <SD_disk_initialize+0x1d0>)
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80010b6:	f7ff fd89 	bl	8000bcc <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80010ba:	f7ff fda9 	bl	8000c10 <SPI_RxByte>

  if (type)
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <SD_disk_initialize+0x1c8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SD_disk_initialize+0x1c8>)
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e001      	b.n	80010da <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010d6:	f7ff fe2f 	bl	8000d38 <SD_PowerOff>
  }

  return Stat;
 80010da:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <SD_disk_initialize+0x1c8>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20002611 	.word	0x20002611
 80010f0:	20000090 	.word	0x20000090

080010f4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001104:	2301      	movs	r3, #1
 8001106:	e002      	b.n	800110e <SD_disk_status+0x1a>

  return Stat;
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <SD_disk_status+0x28>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000

08001120 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <SD_disk_read+0x1c>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <SD_disk_read+0x20>
    return RES_PARERR;
 800113c:	2304      	movs	r3, #4
 800113e:	e051      	b.n	80011e4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <SD_disk_read+0xcc>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800114e:	2303      	movs	r3, #3
 8001150:	e048      	b.n	80011e4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <SD_disk_read+0xd0>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	d102      	bne.n	8001164 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	607b      	str	r3, [r7, #4]

  SELECT();
 8001164:	f7ff fd28 	bl	8000bb8 <SELECT>

  if (count == 1)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d111      	bne.n	8001192 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	2051      	movs	r0, #81	; 0x51
 8001172:	f7ff fe83 	bl	8000e7c <SD_SendCmd>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d129      	bne.n	80011d0 <SD_disk_read+0xb0>
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	68b8      	ldr	r0, [r7, #8]
 8001182:	f7ff fdf1 	bl	8000d68 <SD_RxDataBlock>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d021      	beq.n	80011d0 <SD_disk_read+0xb0>
      count = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	e01e      	b.n	80011d0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	2052      	movs	r0, #82	; 0x52
 8001196:	f7ff fe71 	bl	8000e7c <SD_SendCmd>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d117      	bne.n	80011d0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80011a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a4:	68b8      	ldr	r0, [r7, #8]
 80011a6:	f7ff fddf 	bl	8000d68 <SD_RxDataBlock>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011b6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1ed      	bne.n	80011a0 <SD_disk_read+0x80>
 80011c4:	e000      	b.n	80011c8 <SD_disk_read+0xa8>
          break;
 80011c6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80011c8:	2100      	movs	r1, #0
 80011ca:	204c      	movs	r0, #76	; 0x4c
 80011cc:	f7ff fe56 	bl	8000e7c <SD_SendCmd>
    }
  }

  DESELECT();
 80011d0:	f7ff fcfc 	bl	8000bcc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80011d4:	f7ff fd1c 	bl	8000c10 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000090 	.word	0x20000090

080011f4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <SD_disk_write+0x1c>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <SD_disk_write+0x20>
    return RES_PARERR;
 8001210:	2304      	movs	r3, #4
 8001212:	e06b      	b.n	80012ec <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <SD_disk_write+0x100>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001222:	2303      	movs	r3, #3
 8001224:	e062      	b.n	80012ec <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001226:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <SD_disk_write+0x100>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001234:	2302      	movs	r3, #2
 8001236:	e059      	b.n	80012ec <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <SD_disk_write+0x104>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	607b      	str	r3, [r7, #4]

  SELECT();
 800124a:	f7ff fcb5 	bl	8000bb8 <SELECT>

  if (count == 1)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d110      	bne.n	8001276 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	2058      	movs	r0, #88	; 0x58
 8001258:	f7ff fe10 	bl	8000e7c <SD_SendCmd>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d13a      	bne.n	80012d8 <SD_disk_write+0xe4>
 8001262:	21fe      	movs	r1, #254	; 0xfe
 8001264:	68b8      	ldr	r0, [r7, #8]
 8001266:	f7ff fdb5 	bl	8000dd4 <SD_TxDataBlock>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d033      	beq.n	80012d8 <SD_disk_write+0xe4>
      count = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	e030      	b.n	80012d8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <SD_disk_write+0x104>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001282:	2100      	movs	r1, #0
 8001284:	2077      	movs	r0, #119	; 0x77
 8001286:	f7ff fdf9 	bl	8000e7c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	2057      	movs	r0, #87	; 0x57
 800128e:	f7ff fdf5 	bl	8000e7c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	2059      	movs	r0, #89	; 0x59
 8001296:	f7ff fdf1 	bl	8000e7c <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d11b      	bne.n	80012d8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80012a0:	21fc      	movs	r1, #252	; 0xfc
 80012a2:	68b8      	ldr	r0, [r7, #8]
 80012a4:	f7ff fd96 	bl	8000dd4 <SD_TxDataBlock>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00a      	beq.n	80012c4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012b4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ee      	bne.n	80012a0 <SD_disk_write+0xac>
 80012c2:	e000      	b.n	80012c6 <SD_disk_write+0xd2>
          break;
 80012c4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80012c6:	21fd      	movs	r1, #253	; 0xfd
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fd83 	bl	8000dd4 <SD_TxDataBlock>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <SD_disk_write+0xe4>
      {
        count = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80012d8:	f7ff fc78 	bl	8000bcc <DESELECT>
  SPI_RxByte();
 80012dc:	f7ff fc98 	bl	8000c10 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bf14      	ite	ne
 80012e6:	2301      	movne	r3, #1
 80012e8:	2300      	moveq	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000090 	.word	0x20000090

080012fc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b08b      	sub	sp, #44	; 0x2c
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	603a      	str	r2, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	460b      	mov	r3, r1
 800130a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001316:	2304      	movs	r3, #4
 8001318:	e11b      	b.n	8001552 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	2b05      	cmp	r3, #5
 8001324:	d129      	bne.n	800137a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d017      	beq.n	800135e <SD_disk_ioctl+0x62>
 800132e:	2b02      	cmp	r3, #2
 8001330:	dc1f      	bgt.n	8001372 <SD_disk_ioctl+0x76>
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <SD_disk_ioctl+0x40>
 8001336:	2b01      	cmp	r3, #1
 8001338:	d00b      	beq.n	8001352 <SD_disk_ioctl+0x56>
 800133a:	e01a      	b.n	8001372 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800133c:	f7ff fd08 	bl	8000d50 <SD_CheckPower>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001346:	f7ff fcf7 	bl	8000d38 <SD_PowerOff>
      res = RES_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001350:	e0fd      	b.n	800154e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001352:	f7ff fca5 	bl	8000ca0 <SD_PowerOn>
      res = RES_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800135c:	e0f7      	b.n	800154e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	1c5c      	adds	r4, r3, #1
 8001362:	f7ff fcf5 	bl	8000d50 <SD_CheckPower>
 8001366:	4603      	mov	r3, r0
 8001368:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800136a:	2300      	movs	r3, #0
 800136c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001370:	e0ed      	b.n	800154e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001372:	2304      	movs	r3, #4
 8001374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001378:	e0e9      	b.n	800154e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800137a:	4b78      	ldr	r3, [pc, #480]	; (800155c <SD_disk_ioctl+0x260>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001388:	2303      	movs	r3, #3
 800138a:	e0e2      	b.n	8001552 <SD_disk_ioctl+0x256>

    SELECT();
 800138c:	f7ff fc14 	bl	8000bb8 <SELECT>

    switch (ctrl)
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	2b0d      	cmp	r3, #13
 8001394:	f200 80cc 	bhi.w	8001530 <SD_disk_ioctl+0x234>
 8001398:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <SD_disk_ioctl+0xa4>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	0800149b 	.word	0x0800149b
 80013a4:	080013d9 	.word	0x080013d9
 80013a8:	0800148b 	.word	0x0800148b
 80013ac:	08001531 	.word	0x08001531
 80013b0:	08001531 	.word	0x08001531
 80013b4:	08001531 	.word	0x08001531
 80013b8:	08001531 	.word	0x08001531
 80013bc:	08001531 	.word	0x08001531
 80013c0:	08001531 	.word	0x08001531
 80013c4:	08001531 	.word	0x08001531
 80013c8:	08001531 	.word	0x08001531
 80013cc:	080014ad 	.word	0x080014ad
 80013d0:	080014d1 	.word	0x080014d1
 80013d4:	080014f5 	.word	0x080014f5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013d8:	2100      	movs	r1, #0
 80013da:	2049      	movs	r0, #73	; 0x49
 80013dc:	f7ff fd4e 	bl	8000e7c <SD_SendCmd>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f040 80a8 	bne.w	8001538 <SD_disk_ioctl+0x23c>
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2110      	movs	r1, #16
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fcba 	bl	8000d68 <SD_RxDataBlock>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 809e 	beq.w	8001538 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80013fc:	7b3b      	ldrb	r3, [r7, #12]
 80013fe:	099b      	lsrs	r3, r3, #6
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10e      	bne.n	8001424 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001406:	7d7b      	ldrb	r3, [r7, #21]
 8001408:	b29a      	uxth	r2, r3
 800140a:	7d3b      	ldrb	r3, [r7, #20]
 800140c:	b29b      	uxth	r3, r3
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b29b      	uxth	r3, r3
 8001412:	4413      	add	r3, r2
 8001414:	b29b      	uxth	r3, r3
 8001416:	3301      	adds	r3, #1
 8001418:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800141a:	8bfb      	ldrh	r3, [r7, #30]
 800141c:	029a      	lsls	r2, r3, #10
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e02e      	b.n	8001482 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001424:	7c7b      	ldrb	r3, [r7, #17]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	b2da      	uxtb	r2, r3
 800142c:	7dbb      	ldrb	r3, [r7, #22]
 800142e:	09db      	lsrs	r3, r3, #7
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4413      	add	r3, r2
 8001434:	b2da      	uxtb	r2, r3
 8001436:	7d7b      	ldrb	r3, [r7, #21]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f003 0306 	and.w	r3, r3, #6
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4413      	add	r3, r2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3302      	adds	r3, #2
 8001448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800144c:	7d3b      	ldrb	r3, [r7, #20]
 800144e:	099b      	lsrs	r3, r3, #6
 8001450:	b2db      	uxtb	r3, r3
 8001452:	b29a      	uxth	r2, r3
 8001454:	7cfb      	ldrb	r3, [r7, #19]
 8001456:	b29b      	uxth	r3, r3
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	b29b      	uxth	r3, r3
 800145c:	4413      	add	r3, r2
 800145e:	b29a      	uxth	r2, r3
 8001460:	7cbb      	ldrb	r3, [r7, #18]
 8001462:	029b      	lsls	r3, r3, #10
 8001464:	b29b      	uxth	r3, r3
 8001466:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800146a:	b29b      	uxth	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b29b      	uxth	r3, r3
 8001470:	3301      	adds	r3, #1
 8001472:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001474:	8bfa      	ldrh	r2, [r7, #30]
 8001476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800147a:	3b09      	subs	r3, #9
 800147c:	409a      	lsls	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001488:	e056      	b.n	8001538 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001490:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001498:	e055      	b.n	8001546 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800149a:	f7ff fbe5 	bl	8000c68 <SD_ReadyWait>
 800149e:	4603      	mov	r3, r0
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d14b      	bne.n	800153c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014aa:	e047      	b.n	800153c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014ac:	2100      	movs	r1, #0
 80014ae:	2049      	movs	r0, #73	; 0x49
 80014b0:	f7ff fce4 	bl	8000e7c <SD_SendCmd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d142      	bne.n	8001540 <SD_disk_ioctl+0x244>
 80014ba:	2110      	movs	r1, #16
 80014bc:	6a38      	ldr	r0, [r7, #32]
 80014be:	f7ff fc53 	bl	8000d68 <SD_RxDataBlock>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d03b      	beq.n	8001540 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014ce:	e037      	b.n	8001540 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014d0:	2100      	movs	r1, #0
 80014d2:	204a      	movs	r0, #74	; 0x4a
 80014d4:	f7ff fcd2 	bl	8000e7c <SD_SendCmd>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d132      	bne.n	8001544 <SD_disk_ioctl+0x248>
 80014de:	2110      	movs	r1, #16
 80014e0:	6a38      	ldr	r0, [r7, #32]
 80014e2:	f7ff fc41 	bl	8000d68 <SD_RxDataBlock>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02b      	beq.n	8001544 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014f2:	e027      	b.n	8001544 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014f4:	2100      	movs	r1, #0
 80014f6:	207a      	movs	r0, #122	; 0x7a
 80014f8:	f7ff fcc0 	bl	8000e7c <SD_SendCmd>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d116      	bne.n	8001530 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001502:	2300      	movs	r3, #0
 8001504:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001508:	e00b      	b.n	8001522 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800150a:	6a3c      	ldr	r4, [r7, #32]
 800150c:	1c63      	adds	r3, r4, #1
 800150e:	623b      	str	r3, [r7, #32]
 8001510:	f7ff fb7e 	bl	8000c10 <SPI_RxByte>
 8001514:	4603      	mov	r3, r0
 8001516:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001518:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800151c:	3301      	adds	r3, #1
 800151e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001522:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001526:	2b03      	cmp	r3, #3
 8001528:	d9ef      	bls.n	800150a <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001530:	2304      	movs	r3, #4
 8001532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001536:	e006      	b.n	8001546 <SD_disk_ioctl+0x24a>
      break;
 8001538:	bf00      	nop
 800153a:	e004      	b.n	8001546 <SD_disk_ioctl+0x24a>
      break;
 800153c:	bf00      	nop
 800153e:	e002      	b.n	8001546 <SD_disk_ioctl+0x24a>
      break;
 8001540:	bf00      	nop
 8001542:	e000      	b.n	8001546 <SD_disk_ioctl+0x24a>
      break;
 8001544:	bf00      	nop
    }

    DESELECT();
 8001546:	f7ff fb41 	bl	8000bcc <DESELECT>
    SPI_RxByte();
 800154a:	f7ff fb61 	bl	8000c10 <SPI_RxByte>
  }

  return res;
 800154e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001552:	4618      	mov	r0, r3
 8001554:	372c      	adds	r7, #44	; 0x2c
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	bf00      	nop
 800155c:	20000000 	.word	0x20000000

08001560 <send_uart>:
uint32_t total, free_space;


// to send the uart

void send_uart(char *string){
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7fe fe49 	bl	8000200 <strlen>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&hlpuart1,(uint8_t *)string,len,2000); // transmiting in bloking mode
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	b29a      	uxth	r2, r3
 8001576:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <send_uart+0x2c>)
 800157e:	f003 f99f 	bl	80048c0 <HAL_UART_Transmit>

}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000094 	.word	0x20000094

08001590 <bufsize>:

// to fined the size of data in buffer

int bufsize(char *buf){
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	int i=0;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
	while(*buf++ != '\0');
 800159c:	bf00      	nop
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f9      	bne.n	800159e <bufsize+0xe>
	return i;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <bufclear>:

void bufclear(void){  // clear the buffer
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0

	for(int i=0;i<1024; i++){
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	e007      	b.n	80015d4 <bufclear+0x1c>
		buffer[i]='\0';
 80015c4:	4a09      	ldr	r2, [pc, #36]	; (80015ec <bufclear+0x34>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024; i++){
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3301      	adds	r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015da:	dbf3      	blt.n	80015c4 <bufclear+0xc>
	}
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20002200 	.word	0x20002200

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f000 fb9f 	bl	8001d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f8e0 	bl	80017bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f000 f9ae 	bl	800195c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001600:	f000 f922 	bl	8001848 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001604:	f000 f96c 	bl	80018e0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001608:	f004 f802 	bl	8005610 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //Mount sd card

   fresult = f_mount(&fs, "/", 1);
 800160c:	2201      	movs	r2, #1
 800160e:	4955      	ldr	r1, [pc, #340]	; (8001764 <main+0x174>)
 8001610:	4855      	ldr	r0, [pc, #340]	; (8001768 <main+0x178>)
 8001612:	f006 fa49 	bl	8007aa8 <f_mount>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b54      	ldr	r3, [pc, #336]	; (800176c <main+0x17c>)
 800161c:	701a      	strb	r2, [r3, #0]
   if (fresult != FR_OK)
 800161e:	4b53      	ldr	r3, [pc, #332]	; (800176c <main+0x17c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <main+0x3e>
 	   send_uart ("ERROR!!! in mounting SD CARD...\r\n");
 8001626:	4852      	ldr	r0, [pc, #328]	; (8001770 <main+0x180>)
 8001628:	f7ff ff9a 	bl	8001560 <send_uart>
 800162c:	e002      	b.n	8001634 <main+0x44>
   else send_uart("SD CARD mounted successfully...\r\n");
 800162e:	4851      	ldr	r0, [pc, #324]	; (8001774 <main+0x184>)
 8001630:	f7ff ff96 	bl	8001560 <send_uart>


   /*************** Card capacity details ********************/

     	/* Check free space */
     	f_getfree("", &fre_clust, &pfs);
 8001634:	4a50      	ldr	r2, [pc, #320]	; (8001778 <main+0x188>)
 8001636:	4951      	ldr	r1, [pc, #324]	; (800177c <main+0x18c>)
 8001638:	4851      	ldr	r0, [pc, #324]	; (8001780 <main+0x190>)
 800163a:	f006 ffe2 	bl	8008602 <f_getfree>

     	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <main+0x188>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	3b02      	subs	r3, #2
 8001646:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <main+0x188>)
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	8952      	ldrh	r2, [r2, #10]
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff f899 	bl	8000788 <__aeabi_ui2d>
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <main+0x194>)
 800165c:	f7fe fe28 	bl	80002b0 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff f908 	bl	800087c <__aeabi_d2uiz>
 800166c:	4603      	mov	r3, r0
 800166e:	4a46      	ldr	r2, [pc, #280]	; (8001788 <main+0x198>)
 8001670:	6013      	str	r3, [r2, #0]
     	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 8001672:	4b45      	ldr	r3, [pc, #276]	; (8001788 <main+0x198>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4944      	ldr	r1, [pc, #272]	; (800178c <main+0x19c>)
 800167a:	4845      	ldr	r0, [pc, #276]	; (8001790 <main+0x1a0>)
 800167c:	f007 f998 	bl	80089b0 <siprintf>
     	send_uart(buffer);
 8001680:	4843      	ldr	r0, [pc, #268]	; (8001790 <main+0x1a0>)
 8001682:	f7ff ff6d 	bl	8001560 <send_uart>
     	bufclear();
 8001686:	f7ff ff97 	bl	80015b8 <bufclear>
     	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <main+0x188>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	895b      	ldrh	r3, [r3, #10]
 8001690:	461a      	mov	r2, r3
 8001692:	4b3a      	ldr	r3, [pc, #232]	; (800177c <main+0x18c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f874 	bl	8000788 <__aeabi_ui2d>
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b37      	ldr	r3, [pc, #220]	; (8001784 <main+0x194>)
 80016a6:	f7fe fe03 	bl	80002b0 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff f8e3 	bl	800087c <__aeabi_d2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a36      	ldr	r2, [pc, #216]	; (8001794 <main+0x1a4>)
 80016ba:	6013      	str	r3, [r2, #0]
     	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n",free_space);
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <main+0x1a4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4935      	ldr	r1, [pc, #212]	; (8001798 <main+0x1a8>)
 80016c4:	4832      	ldr	r0, [pc, #200]	; (8001790 <main+0x1a0>)
 80016c6:	f007 f973 	bl	80089b0 <siprintf>
     	send_uart(buffer);
 80016ca:	4831      	ldr	r0, [pc, #196]	; (8001790 <main+0x1a0>)
 80016cc:	f7ff ff48 	bl	8001560 <send_uart>
     	bufclear();
 80016d0:	f7ff ff72 	bl	80015b8 <bufclear>


           	  	/**************** The following operation is using f_write and f_read **************************/

           	  	/* Create second file with read write access and open it */
           	  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80016d4:	220a      	movs	r2, #10
 80016d6:	4931      	ldr	r1, [pc, #196]	; (800179c <main+0x1ac>)
 80016d8:	4831      	ldr	r0, [pc, #196]	; (80017a0 <main+0x1b0>)
 80016da:	f006 fa2b 	bl	8007b34 <f_open>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <main+0x17c>)
 80016e4:	701a      	strb	r2, [r3, #0]

           	  	/* Writing text */
           	  	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Priyesh \r\n");
 80016e6:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <main+0x1a0>)
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <main+0x1b4>)
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	2351      	movs	r3, #81	; 0x51
 80016f0:	461a      	mov	r2, r3
 80016f2:	f007 f9b1 	bl	8008a58 <memcpy>

           	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80016f6:	4826      	ldr	r0, [pc, #152]	; (8001790 <main+0x1a0>)
 80016f8:	f7ff ff4a 	bl	8001590 <bufsize>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <main+0x1b8>)
 8001702:	4923      	ldr	r1, [pc, #140]	; (8001790 <main+0x1a0>)
 8001704:	4826      	ldr	r0, [pc, #152]	; (80017a0 <main+0x1b0>)
 8001706:	f006 fd40 	bl	800818a <f_write>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <main+0x17c>)
 8001710:	701a      	strb	r2, [r3, #0]

           	  	send_uart ("File2.txt created and data is written\r\n");
 8001712:	4826      	ldr	r0, [pc, #152]	; (80017ac <main+0x1bc>)
 8001714:	f7ff ff24 	bl	8001560 <send_uart>

           	  	/* Close file */
           	  	f_close(&fil);
 8001718:	4821      	ldr	r0, [pc, #132]	; (80017a0 <main+0x1b0>)
 800171a:	f006 ff48 	bl	80085ae <f_close>

           	  	// clearing buffer to show that result obtained is from the file
 //          	    bufclear();

           	  	/* Open second file to read */
           	  	fresult = f_open(&fil, "file2.txt", FA_READ);
 800171e:	2201      	movs	r2, #1
 8001720:	491e      	ldr	r1, [pc, #120]	; (800179c <main+0x1ac>)
 8001722:	481f      	ldr	r0, [pc, #124]	; (80017a0 <main+0x1b0>)
 8001724:	f006 fa06 	bl	8007b34 <f_open>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <main+0x17c>)
 800172e:	701a      	strb	r2, [r3, #0]



           	  	if (fresult == FR_OK){
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <main+0x17c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <main+0x14e>
           	  		send_uart ("file2.txt is open and the data is shown below\r\n");
 8001738:	481d      	ldr	r0, [pc, #116]	; (80017b0 <main+0x1c0>)
 800173a:	f7ff ff11 	bl	8001560 <send_uart>

           	  	}
           	  /* Read data from the file
           	            	     * Please see the function details for the arguments */
           	   f_read (&fil, buffer, f_size(&fil), &br);
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <main+0x1b0>)
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <main+0x1c4>)
 8001744:	4912      	ldr	r1, [pc, #72]	; (8001790 <main+0x1a0>)
 8001746:	4816      	ldr	r0, [pc, #88]	; (80017a0 <main+0x1b0>)
 8001748:	f006 fbc0 	bl	8007ecc <f_read>

           		send_uart(buffer);
 800174c:	4810      	ldr	r0, [pc, #64]	; (8001790 <main+0x1a0>)
 800174e:	f7ff ff07 	bl	8001560 <send_uart>
           	    send_uart("\r\n");
 8001752:	4819      	ldr	r0, [pc, #100]	; (80017b8 <main+0x1c8>)
 8001754:	f7ff ff04 	bl	8001560 <send_uart>



           	  	/* Close file */
           	  	f_close(&fil);
 8001758:	4811      	ldr	r0, [pc, #68]	; (80017a0 <main+0x1b0>)
 800175a:	f006 ff28 	bl	80085ae <f_close>

           	     bufclear();
 800175e:	f7ff ff2b 	bl	80015b8 <bufclear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001762:	e7fe      	b.n	8001762 <main+0x172>
 8001764:	08009310 	.word	0x08009310
 8001768:	2000018c 	.word	0x2000018c
 800176c:	200021f4 	.word	0x200021f4
 8001770:	08009314 	.word	0x08009314
 8001774:	08009338 	.word	0x08009338
 8001778:	20002600 	.word	0x20002600
 800177c:	20002604 	.word	0x20002604
 8001780:	0800935c 	.word	0x0800935c
 8001784:	3fe00000 	.word	0x3fe00000
 8001788:	20002608 	.word	0x20002608
 800178c:	08009360 	.word	0x08009360
 8001790:	20002200 	.word	0x20002200
 8001794:	2000260c 	.word	0x2000260c
 8001798:	0800937c 	.word	0x0800937c
 800179c:	08009398 	.word	0x08009398
 80017a0:	200011c4 	.word	0x200011c4
 80017a4:	080093a4 	.word	0x080093a4
 80017a8:	200021fc 	.word	0x200021fc
 80017ac:	080093f8 	.word	0x080093f8
 80017b0:	08009420 	.word	0x08009420
 80017b4:	200021f8 	.word	0x200021f8
 80017b8:	08009450 	.word	0x08009450

080017bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b096      	sub	sp, #88	; 0x58
 80017c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	2244      	movs	r2, #68	; 0x44
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 f910 	bl	80089f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d0:	463b      	mov	r3, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017e2:	f000 fdcd 	bl	8002380 <HAL_PWREx_ControlVoltageScaling>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017ec:	f000 f902 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f0:	2302      	movs	r3, #2
 80017f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fa:	2340      	movs	r3, #64	; 0x40
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fe6e 	bl	80024e8 <HAL_RCC_OscConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001812:	f000 f8ef 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001816:	230f      	movs	r3, #15
 8001818:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f001 fa73 	bl	8002d1c <HAL_RCC_ClockConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800183c:	f000 f8da 	bl	80019f4 <Error_Handler>
  }
}
 8001840:	bf00      	nop
 8001842:	3758      	adds	r7, #88	; 0x58
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 800184e:	4a23      	ldr	r2, [pc, #140]	; (80018dc <MX_LPUART1_UART_Init+0x94>)
 8001850:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 800186e:	220c      	movs	r2, #12
 8001870:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001890:	4811      	ldr	r0, [pc, #68]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 8001892:	f002 ffc5 	bl	8004820 <HAL_UART_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800189c:	f000 f8aa 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a0:	2100      	movs	r1, #0
 80018a2:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 80018a4:	f003 fdea 	bl	800547c <HAL_UARTEx_SetTxFifoThreshold>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018ae:	f000 f8a1 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b2:	2100      	movs	r1, #0
 80018b4:	4808      	ldr	r0, [pc, #32]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 80018b6:	f003 fe1f 	bl	80054f8 <HAL_UARTEx_SetRxFifoThreshold>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018c0:	f000 f898 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_LPUART1_UART_Init+0x90>)
 80018c6:	f003 fda0 	bl	800540a <HAL_UARTEx_DisableFifoMode>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018d0:	f000 f890 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000094 	.word	0x20000094
 80018dc:	40008000 	.word	0x40008000

080018e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_SPI1_Init+0x74>)
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <MX_SPI1_Init+0x78>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_SPI1_Init+0x74>)
 80018ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_SPI1_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_SPI1_Init+0x74>)
 80018fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_SPI1_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_SPI1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_SPI1_Init+0x74>)
 800190e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001912:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_SPI1_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_SPI1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_SPI1_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_SPI1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_SPI1_Init+0x74>)
 800192e:	2207      	movs	r2, #7
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <MX_SPI1_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_SPI1_Init+0x74>)
 800193a:	2208      	movs	r2, #8
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_SPI1_Init+0x74>)
 8001940:	f002 f9c2 	bl	8003cc8 <HAL_SPI_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800194a:	f000 f853 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000128 	.word	0x20000128
 8001958:	40013000 	.word	0x40013000

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <MX_GPIO_Init+0x94>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a1e      	ldr	r2, [pc, #120]	; (80019f0 <MX_GPIO_Init+0x94>)
 8001978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <MX_GPIO_Init+0x94>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <MX_GPIO_Init+0x94>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <MX_GPIO_Init+0x94>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_GPIO_Init+0x94>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_GPIO_Init+0x94>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_GPIO_Init+0x94>)
 80019a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <MX_GPIO_Init+0x94>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80019ba:	f000 fd85 	bl	80024c8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2120      	movs	r1, #32
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f000 fca3 	bl	8002310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80019ca:	2320      	movs	r3, #32
 80019cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e4:	f000 fb02 	bl	8001fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_MspInit+0x44>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_MspInit+0x44>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6613      	str	r3, [r2, #96]	; 0x60
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_MspInit+0x44>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_MspInit+0x44>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_MspInit+0x44>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_MspInit+0x44>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000

08001a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b0ae      	sub	sp, #184	; 0xb8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2294      	movs	r2, #148	; 0x94
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f006 ffc1 	bl	80089f0 <memset>
  if(huart->Instance==LPUART1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a23      	ldr	r2, [pc, #140]	; (8001b00 <HAL_UART_MspInit+0xb8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d13e      	bne.n	8001af6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8001a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a80:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 fc06 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a92:	f7ff ffaf 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_UART_MspInit+0xbc>)
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <HAL_UART_MspInit+0xbc>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_UART_MspInit+0xbc>)
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_UART_MspInit+0xbc>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <HAL_UART_MspInit+0xbc>)
 8001ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_UART_MspInit+0xbc>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001ac6:	f000 fcff 	bl	80024c8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001aca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <HAL_UART_MspInit+0xc0>)
 8001af2:	f000 fa7b 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	37b8      	adds	r7, #184	; 0xb8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40008000 	.word	0x40008000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48001800 	.word	0x48001800

08001b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_SPI_MspInit+0x7c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d128      	bne.n	8001b80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_SPI_MspInit+0x80>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	4a16      	ldr	r2, [pc, #88]	; (8001b8c <HAL_SPI_MspInit+0x80>)
 8001b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b38:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_SPI_MspInit+0x80>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_SPI_MspInit+0x80>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a10      	ldr	r2, [pc, #64]	; (8001b8c <HAL_SPI_MspInit+0x80>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_SPI_MspInit+0x80>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001b5e:	23c2      	movs	r3, #194	; 0xc2
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b6e:	2305      	movs	r3, #5
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7c:	f000 fa36 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	; 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40013000 	.word	0x40013000
 8001b8c:	40021000 	.word	0x40021000

08001b90 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void) {
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <SDTimer_Handler+0x40>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <SDTimer_Handler+0x1c>
		Timer1--;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <SDTimer_Handler+0x40>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <SDTimer_Handler+0x40>)
 8001baa:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <SDTimer_Handler+0x44>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <SDTimer_Handler+0x34>
		Timer2--;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <SDTimer_Handler+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SDTimer_Handler+0x44>)
 8001bc2:	701a      	strb	r2, [r3, #0]

}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20002611 	.word	0x20002611
 8001bd4:	20002612 	.word	0x20002612

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001bdc:	e7fe      	b.n	8001bdc <NMI_Handler+0x4>

08001bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <SysTick_Handler+0x30>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <SysTick_Handler+0x30>)
 8001c30:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <SysTick_Handler+0x30>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b09      	cmp	r3, #9
 8001c3a:	d904      	bls.n	8001c46 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Handler+0x30>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001c42:	f7ff ffa5 	bl	8001b90 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c46:	f000 f8cb 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20002610 	.word	0x20002610

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f006 febc 	bl	8008a00 <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200a0000 	.word	0x200a0000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	20002614 	.word	0x20002614
 8001cbc:	200029a0 	.word	0x200029a0

08001cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ce8:	f7ff ffea 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	; (8001d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <LoopForever+0xe>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	; (8001d30 <LoopForever+0x16>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d12:	f006 fe7b 	bl	8008a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d16:	f7ff fc6b 	bl	80015f0 <main>

08001d1a <LoopForever>:

LoopForever:
    b LoopForever
 8001d1a:	e7fe      	b.n	8001d1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d1c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d28:	08009990 	.word	0x08009990
  ldr r2, =_sbss
 8001d2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d30:	200029a0 	.word	0x200029a0

08001d34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_IRQHandler>

08001d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 f91f 	bl	8001f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f80e 	bl	8001d68 <HAL_InitTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	e001      	b.n	8001d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d58:	f7ff fe52 	bl	8001a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_InitTick+0x6c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d023      	beq.n	8001dc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_InitTick+0x70>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_InitTick+0x6c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f91d 	bl	8001fd2 <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10f      	bne.n	8001dbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d809      	bhi.n	8001db8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f000 f8f5 	bl	8001f9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_InitTick+0x74>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e007      	b.n	8001dc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	e004      	b.n	8001dc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	e001      	b.n	8001dc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000000c 	.word	0x2000000c
 8001dd8:	20000004 	.word	0x20000004
 8001ddc:	20000008 	.word	0x20000008

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000000c 	.word	0x2000000c
 8001e04:	20002618 	.word	0x20002618

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20002618 	.word	0x20002618

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f50:	d301      	bcc.n	8001f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00f      	b.n	8001f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <SysTick_Config+0x40>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5e:	210f      	movs	r1, #15
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f7ff ff8e 	bl	8001e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SysTick_Config+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <SysTick_Config+0x40>)
 8001f70:	2207      	movs	r2, #7
 8001f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	e000e010 	.word	0xe000e010

08001f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff47 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fac:	f7ff ff5c 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff ff8e 	bl	8001ed8 <NVIC_EncodePriority>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff5d 	bl	8001e84 <__NVIC_SetPriority>
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffb0 	bl	8001f40 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffa:	e166      	b.n	80022ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8158 	beq.w	80022c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d005      	beq.n	800202c <HAL_GPIO_Init+0x40>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d130      	bne.n	800208e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002062:	2201      	movs	r2, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 0201 	and.w	r2, r3, #1
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b03      	cmp	r3, #3
 8002098:	d017      	beq.n	80020ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d123      	bne.n	800211e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	6939      	ldr	r1, [r7, #16]
 800211a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0203 	and.w	r2, r3, #3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80b2 	beq.w	80022c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002160:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <HAL_GPIO_Init+0x2fc>)
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	4a60      	ldr	r2, [pc, #384]	; (80022e8 <HAL_GPIO_Init+0x2fc>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6613      	str	r3, [r2, #96]	; 0x60
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <HAL_GPIO_Init+0x2fc>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002178:	4a5c      	ldr	r2, [pc, #368]	; (80022ec <HAL_GPIO_Init+0x300>)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	3302      	adds	r3, #2
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021a2:	d02b      	beq.n	80021fc <HAL_GPIO_Init+0x210>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_GPIO_Init+0x304>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d025      	beq.n	80021f8 <HAL_GPIO_Init+0x20c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_GPIO_Init+0x308>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01f      	beq.n	80021f4 <HAL_GPIO_Init+0x208>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_GPIO_Init+0x30c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d019      	beq.n	80021f0 <HAL_GPIO_Init+0x204>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a4f      	ldr	r2, [pc, #316]	; (80022fc <HAL_GPIO_Init+0x310>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <HAL_GPIO_Init+0x200>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <HAL_GPIO_Init+0x314>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00d      	beq.n	80021e8 <HAL_GPIO_Init+0x1fc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a4d      	ldr	r2, [pc, #308]	; (8002304 <HAL_GPIO_Init+0x318>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <HAL_GPIO_Init+0x1f8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a4c      	ldr	r2, [pc, #304]	; (8002308 <HAL_GPIO_Init+0x31c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_GPIO_Init+0x1f4>
 80021dc:	2307      	movs	r3, #7
 80021de:	e00e      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021e0:	2308      	movs	r3, #8
 80021e2:	e00c      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021e4:	2306      	movs	r3, #6
 80021e6:	e00a      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021e8:	2305      	movs	r3, #5
 80021ea:	e008      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e006      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021f0:	2303      	movs	r3, #3
 80021f2:	e004      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e002      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_GPIO_Init+0x212>
 80021fc:	2300      	movs	r3, #0
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	f002 0203 	and.w	r2, r2, #3
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	4093      	lsls	r3, r2
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800220e:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_GPIO_Init+0x300>)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_GPIO_Init+0x320>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002240:	4a32      	ldr	r2, [pc, #200]	; (800230c <HAL_GPIO_Init+0x320>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002246:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_GPIO_Init+0x320>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800226a:	4a28      	ldr	r2, [pc, #160]	; (800230c <HAL_GPIO_Init+0x320>)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002270:	4b26      	ldr	r3, [pc, #152]	; (800230c <HAL_GPIO_Init+0x320>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002294:	4a1d      	ldr	r2, [pc, #116]	; (800230c <HAL_GPIO_Init+0x320>)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_GPIO_Init+0x320>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_GPIO_Init+0x320>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f47f ae91 	bne.w	8001ffc <HAL_GPIO_Init+0x10>
  }
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000
 80022f0:	48000400 	.word	0x48000400
 80022f4:	48000800 	.word	0x48000800
 80022f8:	48000c00 	.word	0x48000c00
 80022fc:	48001000 	.word	0x48001000
 8002300:	48001400 	.word	0x48001400
 8002304:	48001800 	.word	0x48001800
 8002308:	48001c00 	.word	0x48001c00
 800230c:	40010400 	.word	0x40010400

08002310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
 800231c:	4613      	mov	r3, r2
 800231e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002320:	787b      	ldrb	r3, [r7, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800232c:	e002      	b.n	8002334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800234c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002350:	d102      	bne.n	8002358 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002356:	e00b      	b.n	8002370 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_PWREx_GetVoltageRange+0x3c>)
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002366:	d102      	bne.n	800236e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236c:	e000      	b.n	8002370 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800236e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40007000 	.word	0x40007000

08002380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d141      	bne.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800238e:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239a:	d131      	bne.n	8002400 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800239c:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023a2:	4a46      	ldr	r2, [pc, #280]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023b4:	4a41      	ldr	r2, [pc, #260]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023bc:	4b40      	ldr	r3, [pc, #256]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2232      	movs	r2, #50	; 0x32
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	4a3f      	ldr	r2, [pc, #252]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	0c9b      	lsrs	r3, r3, #18
 80023ce:	3301      	adds	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d2:	e002      	b.n	80023da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e6:	d102      	bne.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f2      	bne.n	80023d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fa:	d158      	bne.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e057      	b.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002400:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002406:	4a2d      	ldr	r2, [pc, #180]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800240c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002410:	e04d      	b.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002418:	d141      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002426:	d131      	bne.n	800248c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002428:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800242e:	4a23      	ldr	r2, [pc, #140]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002438:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2232      	movs	r2, #50	; 0x32
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	0c9b      	lsrs	r3, r3, #18
 800245a:	3301      	adds	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245e:	e002      	b.n	8002466 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3b01      	subs	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002472:	d102      	bne.n	800247a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f2      	bne.n	8002460 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002486:	d112      	bne.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e011      	b.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800249c:	e007      	b.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40007000 	.word	0x40007000
 80024c0:	20000004 	.word	0x20000004
 80024c4:	431bde83 	.word	0x431bde83

080024c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80024d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d6:	6053      	str	r3, [r2, #4]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40007000 	.word	0x40007000

080024e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f000 bc08 	b.w	8002d0c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fc:	4b96      	ldr	r3, [pc, #600]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002506:	4b94      	ldr	r3, [pc, #592]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80e4 	beq.w	80026e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_RCC_OscConfig+0x4c>
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	f040 808b 	bne.w	8002642 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b01      	cmp	r3, #1
 8002530:	f040 8087 	bne.w	8002642 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002534:	4b88      	ldr	r3, [pc, #544]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_OscConfig+0x64>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e3df      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	4b81      	ldr	r3, [pc, #516]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d004      	beq.n	8002566 <HAL_RCC_OscConfig+0x7e>
 800255c:	4b7e      	ldr	r3, [pc, #504]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002564:	e005      	b.n	8002572 <HAL_RCC_OscConfig+0x8a>
 8002566:	4b7c      	ldr	r3, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002572:	4293      	cmp	r3, r2
 8002574:	d223      	bcs.n	80025be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fdcc 	bl	8003118 <RCC_SetFlashLatencyFromMSIRange>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e3c0      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800258a:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002590:	f043 0308 	orr.w	r3, r3, #8
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b70      	ldr	r3, [pc, #448]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	496d      	ldr	r1, [pc, #436]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a8:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	4968      	ldr	r1, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	e025      	b.n	800260a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025be:	4b66      	ldr	r3, [pc, #408]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a65      	ldr	r2, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b63      	ldr	r3, [pc, #396]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4960      	ldr	r1, [pc, #384]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025dc:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	495b      	ldr	r1, [pc, #364]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fd8c 	bl	8003118 <RCC_SetFlashLatencyFromMSIRange>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e380      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800260a:	f000 fcc1 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b51      	ldr	r3, [pc, #324]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	4950      	ldr	r1, [pc, #320]	; (800275c <HAL_RCC_OscConfig+0x274>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	fa22 f303 	lsr.w	r3, r2, r3
 8002626:	4a4e      	ldr	r2, [pc, #312]	; (8002760 <HAL_RCC_OscConfig+0x278>)
 8002628:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800262a:	4b4e      	ldr	r3, [pc, #312]	; (8002764 <HAL_RCC_OscConfig+0x27c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fb9a 	bl	8001d68 <HAL_InitTick>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d052      	beq.n	80026e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	e364      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d032      	beq.n	80026b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800264a:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a42      	ldr	r2, [pc, #264]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002656:	f7ff fbd7 	bl	8001e08 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800265e:	f7ff fbd3 	bl	8001e08 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e34d      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002670:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a35      	ldr	r2, [pc, #212]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b33      	ldr	r3, [pc, #204]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4930      	ldr	r1, [pc, #192]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269a:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	492b      	ldr	r1, [pc, #172]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 80026ae:	e01a      	b.n	80026e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a28      	ldr	r2, [pc, #160]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026bc:	f7ff fba4 	bl	8001e08 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c4:	f7ff fba0 	bl	8001e08 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e31a      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1dc>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d073      	beq.n	80027da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_OscConfig+0x21c>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d10e      	bne.n	800271c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d10b      	bne.n	800271c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d063      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d15f      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e2f7      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d106      	bne.n	8002734 <HAL_RCC_OscConfig+0x24c>
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e025      	b.n	8002780 <HAL_RCC_OscConfig+0x298>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800273c:	d114      	bne.n	8002768 <HAL_RCC_OscConfig+0x280>
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a02      	ldr	r2, [pc, #8]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e013      	b.n	8002780 <HAL_RCC_OscConfig+0x298>
 8002758:	40021000 	.word	0x40021000
 800275c:	0800949c 	.word	0x0800949c
 8002760:	20000004 	.word	0x20000004
 8002764:	20000008 	.word	0x20000008
 8002768:	4ba0      	ldr	r3, [pc, #640]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a9f      	ldr	r2, [pc, #636]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b9d      	ldr	r3, [pc, #628]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a9c      	ldr	r2, [pc, #624]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff fb3e 	bl	8001e08 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff fb3a 	bl	8001e08 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e2b4      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a2:	4b92      	ldr	r3, [pc, #584]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x2a8>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff fb2a 	bl	8001e08 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff fb26 	bl	8001e08 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e2a0      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ca:	4b88      	ldr	r3, [pc, #544]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2d0>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d060      	beq.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x310>
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d116      	bne.n	8002826 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f8:	4b7c      	ldr	r3, [pc, #496]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x328>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e27d      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b76      	ldr	r3, [pc, #472]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	4973      	ldr	r1, [pc, #460]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002824:	e040      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d023      	beq.n	8002876 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282e:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6e      	ldr	r2, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7ff fae5 	bl	8001e08 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7ff fae1 	bl	8001e08 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e25b      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002854:	4b65      	ldr	r3, [pc, #404]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b62      	ldr	r3, [pc, #392]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	495f      	ldr	r1, [pc, #380]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	e018      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a5c      	ldr	r2, [pc, #368]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800287c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7ff fac1 	bl	8001e08 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7ff fabd 	bl	8001e08 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e237      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d03c      	beq.n	800292e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028bc:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c2:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7ff fa9c 	bl	8001e08 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7ff fa98 	bl	8001e08 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e212      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e6:	4b41      	ldr	r3, [pc, #260]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ef      	beq.n	80028d4 <HAL_RCC_OscConfig+0x3ec>
 80028f4:	e01b      	b.n	800292e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fc:	4a3b      	ldr	r2, [pc, #236]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002906:	f7ff fa7f 	bl	8001e08 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290e:	f7ff fa7b 	bl	8001e08 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e1f5      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002920:	4b32      	ldr	r3, [pc, #200]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ef      	bne.n	800290e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80a6 	beq.w	8002a88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10d      	bne.n	8002968 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002956:	6593      	str	r3, [r2, #88]	; 0x58
 8002958:	4b24      	ldr	r3, [pc, #144]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002964:	2301      	movs	r3, #1
 8002966:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_RCC_OscConfig+0x508>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d118      	bne.n	80029a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002974:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_RCC_OscConfig+0x508>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <HAL_RCC_OscConfig+0x508>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002980:	f7ff fa42 	bl	8001e08 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002988:	f7ff fa3e 	bl	8001e08 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1b8      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_RCC_OscConfig+0x508>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d108      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4d8>
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029be:	e029      	b.n	8002a14 <HAL_RCC_OscConfig+0x52c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d115      	bne.n	80029f4 <HAL_RCC_OscConfig+0x50c>
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	4a07      	ldr	r2, [pc, #28]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	4a03      	ldr	r2, [pc, #12]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e8:	e014      	b.n	8002a14 <HAL_RCC_OscConfig+0x52c>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40007000 	.word	0x40007000
 80029f4:	4b9d      	ldr	r3, [pc, #628]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	4a9c      	ldr	r2, [pc, #624]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a04:	4b99      	ldr	r3, [pc, #612]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a98      	ldr	r2, [pc, #608]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d016      	beq.n	8002a4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7ff f9f4 	bl	8001e08 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7ff f9f0 	bl	8001e08 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e168      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	4b8c      	ldr	r3, [pc, #560]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ed      	beq.n	8002a24 <HAL_RCC_OscConfig+0x53c>
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7ff f9dd 	bl	8001e08 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7ff f9d9 	bl	8001e08 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e151      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	4b80      	ldr	r3, [pc, #512]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ed      	bne.n	8002a52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a76:	7ffb      	ldrb	r3, [r7, #31]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7c:	4b7b      	ldr	r3, [pc, #492]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	4a7a      	ldr	r2, [pc, #488]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d03c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a9c:	4b73      	ldr	r3, [pc, #460]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aa2:	4a72      	ldr	r2, [pc, #456]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7ff f9ac 	bl	8001e08 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab4:	f7ff f9a8 	bl	8001e08 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e122      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ac6:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ef      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x5cc>
 8002ad4:	e01b      	b.n	8002b0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002adc:	4a63      	ldr	r2, [pc, #396]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae6:	f7ff f98f 	bl	8001e08 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aee:	f7ff f98b 	bl	8001e08 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e105      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b00:	4b5a      	ldr	r3, [pc, #360]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ef      	bne.n	8002aee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80f9 	beq.w	8002d0a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	f040 80cf 	bne.w	8002cc0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b22:	4b52      	ldr	r3, [pc, #328]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0203 	and.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d12c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	3b01      	subs	r3, #1
 8002b42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d123      	bne.n	8002b90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d11b      	bne.n	8002b90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d113      	bne.n	8002b90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	3b01      	subs	r3, #1
 8002b76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d071      	beq.n	8002c74 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d068      	beq.n	8002c68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b96:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0ac      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2d      	ldr	r2, [pc, #180]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bbe:	f7ff f923 	bl	8001e08 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7ff f91f 	bl	8001e08 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e099      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <HAL_RCC_OscConfig+0x788>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	4311      	orrs	r1, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bfe:	0212      	lsls	r2, r2, #8
 8002c00:	4311      	orrs	r1, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c06:	0852      	lsrs	r2, r2, #1
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	0552      	lsls	r2, r2, #21
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c12:	0852      	lsrs	r2, r2, #1
 8002c14:	3a01      	subs	r2, #1
 8002c16:	0652      	lsls	r2, r2, #25
 8002c18:	4311      	orrs	r1, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c1e:	06d2      	lsls	r2, r2, #27
 8002c20:	430a      	orrs	r2, r1
 8002c22:	4912      	ldr	r1, [pc, #72]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c40:	f7ff f8e2 	bl	8001e08 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7ff f8de 	bl	8001e08 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e058      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c66:	e050      	b.n	8002d0a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e04f      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d144      	bne.n	8002d0a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a23      	ldr	r2, [pc, #140]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c98:	f7ff f8b6 	bl	8001e08 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7ff f8b2 	bl	8001e08 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e02c      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb2:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x7b8>
 8002cbe:	e024      	b.n	8002d0a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d01f      	beq.n	8002d06 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7ff f899 	bl	8001e08 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cda:	f7ff f895 	bl	8001e08 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e00f      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4905      	ldr	r1, [pc, #20]	; (8002d14 <HAL_RCC_OscConfig+0x82c>)
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x830>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
 8002d04:	e001      	b.n	8002d0a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	feeefffc 	.word	0xfeeefffc

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e11d      	b.n	8002f70 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d34:	4b90      	ldr	r3, [pc, #576]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d910      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b8d      	ldr	r3, [pc, #564]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 020f 	bic.w	r2, r3, #15
 8002d4a:	498b      	ldr	r1, [pc, #556]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b89      	ldr	r3, [pc, #548]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e105      	b.n	8002f70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d010      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	4b81      	ldr	r3, [pc, #516]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d908      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b7e      	ldr	r3, [pc, #504]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	497b      	ldr	r1, [pc, #492]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d079      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d11e      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da6:	4b75      	ldr	r3, [pc, #468]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0dc      	b.n	8002f70 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002db6:	f000 fa09 	bl	80031cc <RCC_GetSysClockFreqFromPLLSource>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a70      	ldr	r2, [pc, #448]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d946      	bls.n	8002e50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002dc2:	4b6e      	ldr	r3, [pc, #440]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d140      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dce:	4b6b      	ldr	r3, [pc, #428]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd6:	4a69      	ldr	r2, [pc, #420]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ddc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e035      	b.n	8002e50 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dec:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d115      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0b9      	b.n	8002f70 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e04:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0ad      	b.n	8002f70 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e14:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0a5      	b.n	8002f70 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e24:	f000 f8b4 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4a55      	ldr	r2, [pc, #340]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d90f      	bls.n	8002e50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e30:	4b52      	ldr	r3, [pc, #328]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e44:	4a4d      	ldr	r2, [pc, #308]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 0203 	bic.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4947      	ldr	r1, [pc, #284]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e62:	f7fe ffd1 	bl	8001e08 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6a:	f7fe ffcd 	bl	8001e08 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e077      	b.n	8002f70 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e80:	4b3e      	ldr	r3, [pc, #248]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 020c 	and.w	r2, r3, #12
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d1eb      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b80      	cmp	r3, #128	; 0x80
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e98:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4a37      	ldr	r2, [pc, #220]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d208      	bcs.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	492b      	ldr	r1, [pc, #172]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed2:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d210      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee0:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 020f 	bic.w	r2, r3, #15
 8002ee8:	4923      	ldr	r1, [pc, #140]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef0:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <HAL_RCC_ClockConfig+0x25c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e036      	b.n	8002f70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4918      	ldr	r1, [pc, #96]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4910      	ldr	r1, [pc, #64]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f40:	f000 f826 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	490c      	ldr	r1, [pc, #48]	; (8002f84 <HAL_RCC_ClockConfig+0x268>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_RCC_ClockConfig+0x26c>)
 8002f5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x270>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe feff 	bl	8001d68 <HAL_InitTick>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	04c4b400 	.word	0x04c4b400
 8002f84:	0800949c 	.word	0x0800949c
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	20000008 	.word	0x20000008

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d121      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d11e      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fc4:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e005      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe0:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fec:	4a2b      	ldr	r2, [pc, #172]	; (800309c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10d      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d102      	bne.n	800300e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e004      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d101      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003014:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003016:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2b0c      	cmp	r3, #12
 800301c:	d134      	bne.n	8003088 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0xa6>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d003      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0xac>
 8003034:	e005      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003038:	617b      	str	r3, [r7, #20]
      break;
 800303a:	e005      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800303e:	617b      	str	r3, [r7, #20]
      break;
 8003040:	e002      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	617b      	str	r3, [r7, #20]
      break;
 8003046:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3301      	adds	r3, #1
 8003054:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	fb03 f202 	mul.w	r2, r3, r2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	0e5b      	lsrs	r3, r3, #25
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	3301      	adds	r3, #1
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	fbb2 f3f3 	udiv	r3, r2, r3
 8003086:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003088:	69bb      	ldr	r3, [r7, #24]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3724      	adds	r7, #36	; 0x24
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	080094b4 	.word	0x080094b4
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	007a1200 	.word	0x007a1200

080030a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000004 	.word	0x20000004

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030c4:	f7ff fff0 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4904      	ldr	r1, [pc, #16]	; (80030e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000
 80030e8:	080094ac 	.word	0x080094ac

080030ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030f0:	f7ff ffda 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0adb      	lsrs	r3, r3, #11
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4904      	ldr	r1, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	080094ac 	.word	0x080094ac

08003118 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003124:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003130:	f7ff f906 	bl	8002340 <HAL_PWREx_GetVoltageRange>
 8003134:	6178      	str	r0, [r7, #20]
 8003136:	e014      	b.n	8003162 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	6593      	str	r3, [r2, #88]	; 0x58
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003150:	f7ff f8f6 	bl	8002340 <HAL_PWREx_GetVoltageRange>
 8003154:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	4a1a      	ldr	r2, [pc, #104]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800315c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003160:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003168:	d10b      	bne.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b80      	cmp	r3, #128	; 0x80
 800316e:	d913      	bls.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2ba0      	cmp	r3, #160	; 0xa0
 8003174:	d902      	bls.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003176:	2302      	movs	r3, #2
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	e00d      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800317c:	2301      	movs	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	e00a      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b7f      	cmp	r3, #127	; 0x7f
 8003186:	d902      	bls.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003188:	2302      	movs	r3, #2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	e004      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b70      	cmp	r3, #112	; 0x70
 8003192:	d101      	bne.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003194:	2301      	movs	r3, #1
 8003196:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 020f 	bic.w	r2, r3, #15
 80031a0:	4909      	ldr	r1, [pc, #36]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d001      	beq.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40022000 	.word	0x40022000

080031cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d2:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d00b      	beq.n	80031fa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d825      	bhi.n	8003234 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d008      	beq.n	8003200 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d11f      	bne.n	8003234 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031f6:	613b      	str	r3, [r7, #16]
    break;
 80031f8:	e01f      	b.n	800323a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80031fa:	4b25      	ldr	r3, [pc, #148]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80031fc:	613b      	str	r3, [r7, #16]
    break;
 80031fe:	e01c      	b.n	800323a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	e005      	b.n	8003228 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003228:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003230:	613b      	str	r3, [r7, #16]
    break;
 8003232:	e002      	b.n	800323a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
    break;
 8003238:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	3301      	adds	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	fb03 f202 	mul.w	r2, r3, r2
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	0e5b      	lsrs	r3, r3, #25
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800327a:	683b      	ldr	r3, [r7, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40021000 	.word	0x40021000
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200
 8003294:	080094b4 	.word	0x080094b4

08003298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032a0:	2300      	movs	r3, #0
 80032a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032a4:	2300      	movs	r3, #0
 80032a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d040      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b8:	2b80      	cmp	r3, #128	; 0x80
 80032ba:	d02a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d825      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032c0:	2b60      	cmp	r3, #96	; 0x60
 80032c2:	d026      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032c4:	2b60      	cmp	r3, #96	; 0x60
 80032c6:	d821      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d006      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x42>
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d81d      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d010      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x62>
 80032d8:	e018      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032da:	4b89      	ldr	r3, [pc, #548]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4a88      	ldr	r2, [pc, #544]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e6:	e015      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fb02 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f8:	e00c      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3320      	adds	r3, #32
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fbed 	bl	8003ae0 <RCCEx_PLLSAI2_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800330a:	e003      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	74fb      	strb	r3, [r7, #19]
      break;
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800331a:	4b79      	ldr	r3, [pc, #484]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003320:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003328:	4975      	ldr	r1, [pc, #468]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003330:	e001      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d047      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334a:	d030      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x116>
 800334c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003350:	d82a      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003356:	d02a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800335c:	d824      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800335e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003362:	d008      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003368:	d81e      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800336e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003372:	d010      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003374:	e018      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003376:	4b62      	ldr	r3, [pc, #392]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4a61      	ldr	r2, [pc, #388]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003382:	e015      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fab4 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003394:	e00c      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3320      	adds	r3, #32
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fb9f 	bl	8003ae0 <RCCEx_PLLSAI2_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033a6:	e003      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	74fb      	strb	r3, [r7, #19]
      break;
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80033ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033b6:	4b52      	ldr	r3, [pc, #328]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	494e      	ldr	r1, [pc, #312]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033cc:	e001      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 809f 	beq.w	800351e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e0:	2300      	movs	r3, #0
 80033e2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033e4:	4b46      	ldr	r3, [pc, #280]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	4a40      	ldr	r2, [pc, #256]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003404:	6593      	str	r3, [r2, #88]	; 0x58
 8003406:	4b3e      	ldr	r3, [pc, #248]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003412:	2301      	movs	r3, #1
 8003414:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a3a      	ldr	r2, [pc, #232]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003422:	f7fe fcf1 	bl	8001e08 <HAL_GetTick>
 8003426:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003428:	e009      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe fced 	bl	8001e08 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d902      	bls.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	74fb      	strb	r3, [r7, #19]
        break;
 800343c:	e005      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0ef      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d15b      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01f      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	429a      	cmp	r2, r3
 800346c:	d019      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800349a:	4a19      	ldr	r2, [pc, #100]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d016      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe fcac 	bl	8001e08 <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b2:	e00b      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f7fe fca8 	bl	8001e08 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d902      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	74fb      	strb	r3, [r7, #19]
            break;
 80034ca:	e006      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ec      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10c      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	4903      	ldr	r1, [pc, #12]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034f8:	e008      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	74bb      	strb	r3, [r7, #18]
 80034fe:	e005      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003500:	40021000 	.word	0x40021000
 8003504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350c:	7c7b      	ldrb	r3, [r7, #17]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d105      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003512:	4ba0      	ldr	r3, [pc, #640]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	4a9f      	ldr	r2, [pc, #636]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800352a:	4b9a      	ldr	r3, [pc, #616]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f023 0203 	bic.w	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	4996      	ldr	r1, [pc, #600]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800354c:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 020c 	bic.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	498e      	ldr	r1, [pc, #568]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800356e:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	4985      	ldr	r1, [pc, #532]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003590:	4b80      	ldr	r3, [pc, #512]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359e:	497d      	ldr	r1, [pc, #500]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035b2:	4b78      	ldr	r3, [pc, #480]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	4974      	ldr	r1, [pc, #464]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	496c      	ldr	r1, [pc, #432]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003604:	4963      	ldr	r1, [pc, #396]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003618:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003626:	495b      	ldr	r1, [pc, #364]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800363a:	4b56      	ldr	r3, [pc, #344]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	4952      	ldr	r1, [pc, #328]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800365c:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	494a      	ldr	r1, [pc, #296]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800367e:	4b45      	ldr	r3, [pc, #276]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368c:	4941      	ldr	r1, [pc, #260]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036a0:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ae:	4939      	ldr	r1, [pc, #228]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d028      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036c2:	4b34      	ldr	r3, [pc, #208]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	4930      	ldr	r1, [pc, #192]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e2:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	4a2b      	ldr	r2, [pc, #172]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ec:	60d3      	str	r3, [r2, #12]
 80036ee:	e011      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2101      	movs	r1, #1
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f8f9 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d04d      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003728:	d108      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003730:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003736:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800373a:	e012      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800373c:	4b15      	ldr	r3, [pc, #84]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003748:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375a:	490e      	ldr	r1, [pc, #56]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800376a:	d106      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003776:	60d3      	str	r3, [r2, #12]
 8003778:	e020      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003782:	d109      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a02      	ldr	r2, [pc, #8]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378e:	60d3      	str	r3, [r2, #12]
 8003790:	e014      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f8a5 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d028      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037c8:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d6:	4947      	ldr	r1, [pc, #284]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037e6:	d106      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e8:	4b42      	ldr	r3, [pc, #264]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a41      	ldr	r2, [pc, #260]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f2:	60d3      	str	r3, [r2, #12]
 80037f4:	e011      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037fe:	d10c      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	2101      	movs	r1, #1
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f876 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01e      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003826:	4b33      	ldr	r3, [pc, #204]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003836:	492f      	ldr	r1, [pc, #188]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003848:	d10c      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f851 	bl	80038f8 <RCCEx_PLLSAI1_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003870:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003876:	f023 0204 	bic.w	r2, r3, #4
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003880:	491c      	ldr	r1, [pc, #112]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003894:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800389a:	f023 0218 	bic.w	r2, r3, #24
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	4913      	ldr	r1, [pc, #76]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d017      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038b8:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c8:	490a      	ldr	r1, [pc, #40]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038da:	d105      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000

080038f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003906:	4b72      	ldr	r3, [pc, #456]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00e      	beq.n	8003930 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003912:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d103      	bne.n	800392a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
       ||
 8003926:	2b00      	cmp	r3, #0
 8003928:	d142      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
 800392e:	e03f      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d018      	beq.n	800396a <RCCEx_PLLSAI1_Config+0x72>
 8003938:	2b03      	cmp	r3, #3
 800393a:	d825      	bhi.n	8003988 <RCCEx_PLLSAI1_Config+0x90>
 800393c:	2b01      	cmp	r3, #1
 800393e:	d002      	beq.n	8003946 <RCCEx_PLLSAI1_Config+0x4e>
 8003940:	2b02      	cmp	r3, #2
 8003942:	d009      	beq.n	8003958 <RCCEx_PLLSAI1_Config+0x60>
 8003944:	e020      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003946:	4b62      	ldr	r3, [pc, #392]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11d      	bne.n	800398e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003956:	e01a      	b.n	800398e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003958:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003968:	e013      	b.n	8003992 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800396a:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003976:	4b56      	ldr	r3, [pc, #344]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003986:	e006      	b.n	8003996 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      break;
 800398c:	e004      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003996:	bf00      	nop
    }

    if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d108      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800399e:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4949      	ldr	r1, [pc, #292]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 8086 	bne.w	8003ac4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039b8:	4b45      	ldr	r3, [pc, #276]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a44      	ldr	r2, [pc, #272]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fe fa20 	bl	8001e08 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ca:	e009      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039cc:	f7fe fa1c 	bl	8001e08 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	73fb      	strb	r3, [r7, #15]
        break;
 80039de:	e005      	b.n	80039ec <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039e0:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ef      	bne.n	80039cc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d168      	bne.n	8003ac4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d113      	bne.n	8003a20 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f8:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6892      	ldr	r2, [r2, #8]
 8003a04:	0211      	lsls	r1, r2, #8
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68d2      	ldr	r2, [r2, #12]
 8003a0a:	06d2      	lsls	r2, r2, #27
 8003a0c:	4311      	orrs	r1, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6852      	ldr	r2, [r2, #4]
 8003a12:	3a01      	subs	r2, #1
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	430a      	orrs	r2, r1
 8003a18:	492d      	ldr	r1, [pc, #180]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	610b      	str	r3, [r1, #16]
 8003a1e:	e02d      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d115      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6892      	ldr	r2, [r2, #8]
 8003a32:	0211      	lsls	r1, r2, #8
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6912      	ldr	r2, [r2, #16]
 8003a38:	0852      	lsrs	r2, r2, #1
 8003a3a:	3a01      	subs	r2, #1
 8003a3c:	0552      	lsls	r2, r2, #21
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6852      	ldr	r2, [r2, #4]
 8003a44:	3a01      	subs	r2, #1
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	4921      	ldr	r1, [pc, #132]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	610b      	str	r3, [r1, #16]
 8003a50:	e014      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a52:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	4b21      	ldr	r3, [pc, #132]	; (8003adc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6892      	ldr	r2, [r2, #8]
 8003a5e:	0211      	lsls	r1, r2, #8
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6952      	ldr	r2, [r2, #20]
 8003a64:	0852      	lsrs	r2, r2, #1
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0652      	lsls	r2, r2, #25
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6852      	ldr	r2, [r2, #4]
 8003a70:	3a01      	subs	r2, #1
 8003a72:	0112      	lsls	r2, r2, #4
 8003a74:	430a      	orrs	r2, r1
 8003a76:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fe f9be 	bl	8001e08 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a8e:	e009      	b.n	8003aa4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a90:	f7fe f9ba 	bl	8001e08 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d902      	bls.n	8003aa4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8003aa2:	e005      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ef      	beq.n	8003a90 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	4904      	ldr	r1, [pc, #16]	; (8003ad0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	07ff800f 	.word	0x07ff800f
 8003ad8:	ff9f800f 	.word	0xff9f800f
 8003adc:	f9ff800f 	.word	0xf9ff800f

08003ae0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aee:	4b72      	ldr	r3, [pc, #456]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003afa:	4b6f      	ldr	r3, [pc, #444]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0203 	and.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d103      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d142      	bne.n	8003b98 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	e03f      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d018      	beq.n	8003b52 <RCCEx_PLLSAI2_Config+0x72>
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d825      	bhi.n	8003b70 <RCCEx_PLLSAI2_Config+0x90>
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <RCCEx_PLLSAI2_Config+0x4e>
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d009      	beq.n	8003b40 <RCCEx_PLLSAI2_Config+0x60>
 8003b2c:	e020      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b2e:	4b62      	ldr	r3, [pc, #392]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11d      	bne.n	8003b76 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3e:	e01a      	b.n	8003b76 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b40:	4b5d      	ldr	r3, [pc, #372]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d116      	bne.n	8003b7a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b50:	e013      	b.n	8003b7a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b52:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b5e:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b6e:	e006      	b.n	8003b7e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	e004      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b76:	bf00      	nop
 8003b78:	e002      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b86:	4b4c      	ldr	r3, [pc, #304]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4949      	ldr	r1, [pc, #292]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 8086 	bne.w	8003cac <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ba0:	4b45      	ldr	r3, [pc, #276]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a44      	ldr	r2, [pc, #272]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bac:	f7fe f92c 	bl	8001e08 <HAL_GetTick>
 8003bb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bb2:	e009      	b.n	8003bc8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bb4:	f7fe f928 	bl	8001e08 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d902      	bls.n	8003bc8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003bc6:	e005      	b.n	8003bd4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ef      	bne.n	8003bb4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d168      	bne.n	8003cac <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d113      	bne.n	8003c08 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003be0:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <RCCEx_PLLSAI2_Config+0x1dc>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6892      	ldr	r2, [r2, #8]
 8003bec:	0211      	lsls	r1, r2, #8
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68d2      	ldr	r2, [r2, #12]
 8003bf2:	06d2      	lsls	r2, r2, #27
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6852      	ldr	r2, [r2, #4]
 8003bfa:	3a01      	subs	r2, #1
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	492d      	ldr	r1, [pc, #180]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	614b      	str	r3, [r1, #20]
 8003c06:	e02d      	b.n	8003c64 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d115      	bne.n	8003c3a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c0e:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6892      	ldr	r2, [r2, #8]
 8003c1a:	0211      	lsls	r1, r2, #8
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6912      	ldr	r2, [r2, #16]
 8003c20:	0852      	lsrs	r2, r2, #1
 8003c22:	3a01      	subs	r2, #1
 8003c24:	0552      	lsls	r2, r2, #21
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6852      	ldr	r2, [r2, #4]
 8003c2c:	3a01      	subs	r2, #1
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	430a      	orrs	r2, r1
 8003c32:	4921      	ldr	r1, [pc, #132]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	614b      	str	r3, [r1, #20]
 8003c38:	e014      	b.n	8003c64 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6892      	ldr	r2, [r2, #8]
 8003c46:	0211      	lsls	r1, r2, #8
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6952      	ldr	r2, [r2, #20]
 8003c4c:	0852      	lsrs	r2, r2, #1
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	0652      	lsls	r2, r2, #25
 8003c52:	4311      	orrs	r1, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6852      	ldr	r2, [r2, #4]
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	4916      	ldr	r1, [pc, #88]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fe f8ca 	bl	8001e08 <HAL_GetTick>
 8003c74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c76:	e009      	b.n	8003c8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c78:	f7fe f8c6 	bl	8001e08 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d902      	bls.n	8003c8c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	73fb      	strb	r3, [r7, #15]
          break;
 8003c8a:	e005      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ef      	beq.n	8003c78 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	4904      	ldr	r1, [pc, #16]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	07ff800f 	.word	0x07ff800f
 8003cc0:	ff9f800f 	.word	0xff9f800f
 8003cc4:	f9ff800f 	.word	0xf9ff800f

08003cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e095      	b.n	8003e06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cea:	d009      	beq.n	8003d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
 8003cf2:	e005      	b.n	8003d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd fef6 	bl	8001b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d40:	d902      	bls.n	8003d48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e002      	b.n	8003d4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d56:	d007      	beq.n	8003d68 <HAL_SPI_Init+0xa0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	ea42 0103 	orr.w	r1, r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	f003 0204 	and.w	r2, r3, #4
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003de4:	ea42 0103 	orr.w	r1, r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b088      	sub	sp, #32
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_SPI_Transmit+0x22>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e15f      	b.n	80040f0 <HAL_SPI_Transmit+0x2e2>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e38:	f7fd ffe6 	bl	8001e08 <HAL_GetTick>
 8003e3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e52:	e148      	b.n	80040e6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Transmit+0x52>
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d102      	bne.n	8003e66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e64:	e13f      	b.n	80040e6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb0:	d10f      	bne.n	8003ed2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d007      	beq.n	8003ef0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef8:	d94f      	bls.n	8003f9a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_SPI_Transmit+0xfa>
 8003f02:	8afb      	ldrh	r3, [r7, #22]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d142      	bne.n	8003f8e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	1c9a      	adds	r2, r3, #2
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f2c:	e02f      	b.n	8003f8e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d112      	bne.n	8003f62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	881a      	ldrh	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	1c9a      	adds	r2, r3, #2
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f60:	e015      	b.n	8003f8e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f62:	f7fd ff51 	bl	8001e08 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d803      	bhi.n	8003f7a <HAL_SPI_Transmit+0x16c>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d102      	bne.n	8003f80 <HAL_SPI_Transmit+0x172>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003f8c:	e0ab      	b.n	80040e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ca      	bne.n	8003f2e <HAL_SPI_Transmit+0x120>
 8003f98:	e080      	b.n	800409c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_Transmit+0x19a>
 8003fa2:	8afb      	ldrh	r3, [r7, #22]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d174      	bne.n	8004092 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d912      	bls.n	8003fd8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	881a      	ldrh	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	1c9a      	adds	r2, r3, #2
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b02      	subs	r3, #2
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fd6:	e05c      	b.n	8004092 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	7812      	ldrb	r2, [r2, #0]
 8003fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ffe:	e048      	b.n	8004092 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d12b      	bne.n	8004066 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d912      	bls.n	800403e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	881a      	ldrh	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	1c9a      	adds	r2, r3, #2
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b02      	subs	r3, #2
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800403c:	e029      	b.n	8004092 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	330c      	adds	r3, #12
 8004048:	7812      	ldrb	r2, [r2, #0]
 800404a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004064:	e015      	b.n	8004092 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004066:	f7fd fecf 	bl	8001e08 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d803      	bhi.n	800407e <HAL_SPI_Transmit+0x270>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d102      	bne.n	8004084 <HAL_SPI_Transmit+0x276>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d106      	bne.n	8004092 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004090:	e029      	b.n	80040e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1b1      	bne.n	8004000 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fb77 	bl	8004794 <SPI_EndRxTxTransaction>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e003      	b.n	80040e6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004106:	2301      	movs	r3, #1
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_SPI_TransmitReceive+0x26>
 800411a:	2302      	movs	r3, #2
 800411c:	e20a      	b.n	8004534 <HAL_SPI_TransmitReceive+0x43c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004126:	f7fd fe6f 	bl	8001e08 <HAL_GetTick>
 800412a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004132:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800413a:	887b      	ldrh	r3, [r7, #2]
 800413c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004142:	7efb      	ldrb	r3, [r7, #27]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d00e      	beq.n	8004166 <HAL_SPI_TransmitReceive+0x6e>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414e:	d106      	bne.n	800415e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <HAL_SPI_TransmitReceive+0x66>
 8004158:	7efb      	ldrb	r3, [r7, #27]
 800415a:	2b04      	cmp	r3, #4
 800415c:	d003      	beq.n	8004166 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800415e:	2302      	movs	r3, #2
 8004160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004164:	e1e0      	b.n	8004528 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x80>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x80>
 8004172:	887b      	ldrh	r3, [r7, #2]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d103      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800417e:	e1d3      	b.n	8004528 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b04      	cmp	r3, #4
 800418a:	d003      	beq.n	8004194 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2205      	movs	r2, #5
 8004190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	887a      	ldrh	r2, [r7, #2]
 80041ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	887a      	ldrh	r2, [r7, #2]
 80041c0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041d6:	d802      	bhi.n	80041de <HAL_SPI_TransmitReceive+0xe6>
 80041d8:	8a3b      	ldrh	r3, [r7, #16]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d908      	bls.n	80041f0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	e007      	b.n	8004200 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d007      	beq.n	800421e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004226:	f240 8081 	bls.w	800432c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x140>
 8004232:	8a7b      	ldrh	r3, [r7, #18]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d16d      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	881a      	ldrh	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	1c9a      	adds	r2, r3, #2
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800425c:	e05a      	b.n	8004314 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b02      	cmp	r3, #2
 800426a:	d11b      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x1ac>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d016      	beq.n	80042a4 <HAL_SPI_TransmitReceive+0x1ac>
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	2b01      	cmp	r3, #1
 800427a:	d113      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	881a      	ldrh	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	1c9a      	adds	r2, r3, #2
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d11c      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x1f4>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	b292      	uxth	r2, r2
 80042ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	1c9a      	adds	r2, r3, #2
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042e8:	2301      	movs	r3, #1
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042ec:	f7fd fd8c 	bl	8001e08 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d80b      	bhi.n	8004314 <HAL_SPI_TransmitReceive+0x21c>
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d007      	beq.n	8004314 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004312:	e109      	b.n	8004528 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d19f      	bne.n	800425e <HAL_SPI_TransmitReceive+0x166>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d199      	bne.n	800425e <HAL_SPI_TransmitReceive+0x166>
 800432a:	e0e3      	b.n	80044f4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_SPI_TransmitReceive+0x244>
 8004334:	8a7b      	ldrh	r3, [r7, #18]
 8004336:	2b01      	cmp	r3, #1
 8004338:	f040 80cf 	bne.w	80044da <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	d912      	bls.n	800436c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	881a      	ldrh	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	1c9a      	adds	r2, r3, #2
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b02      	subs	r3, #2
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800436a:	e0b6      	b.n	80044da <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	7812      	ldrb	r2, [r2, #0]
 8004378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004392:	e0a2      	b.n	80044da <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d134      	bne.n	800440c <HAL_SPI_TransmitReceive+0x314>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02f      	beq.n	800440c <HAL_SPI_TransmitReceive+0x314>
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d12c      	bne.n	800440c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d912      	bls.n	80043e2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	881a      	ldrh	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b02      	subs	r3, #2
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043e0:	e012      	b.n	8004408 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	7812      	ldrb	r2, [r2, #0]
 80043ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d148      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x3b4>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d042      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d923      	bls.n	800447a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	b292      	uxth	r2, r2
 800443e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b02      	subs	r3, #2
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d81f      	bhi.n	80044a8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	e016      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f103 020c 	add.w	r2, r3, #12
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044ac:	f7fd fcac 	bl	8001e08 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d803      	bhi.n	80044c4 <HAL_SPI_TransmitReceive+0x3cc>
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d102      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x3d2>
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d107      	bne.n	80044da <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80044d8:	e026      	b.n	8004528 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f af57 	bne.w	8004394 <HAL_SPI_TransmitReceive+0x29c>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f47f af50 	bne.w	8004394 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f94b 	bl	8004794 <SPI_EndRxTxTransaction>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e003      	b.n	8004528 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004534:	4618      	mov	r0, r3
 8004536:	3728      	adds	r7, #40	; 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800454a:	b2db      	uxtb	r3, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004568:	f7fd fc4e 	bl	8001e08 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	4413      	add	r3, r2
 8004576:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004578:	f7fd fc46 	bl	8001e08 <HAL_GetTick>
 800457c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800457e:	4b39      	ldr	r3, [pc, #228]	; (8004664 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	015b      	lsls	r3, r3, #5
 8004584:	0d1b      	lsrs	r3, r3, #20
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800458e:	e054      	b.n	800463a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d050      	beq.n	800463a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004598:	f7fd fc36 	bl	8001e08 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d902      	bls.n	80045ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d13d      	bne.n	800462a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c6:	d111      	bne.n	80045ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d0:	d004      	beq.n	80045dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045da:	d107      	bne.n	80045ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f4:	d10f      	bne.n	8004616 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004614:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e017      	b.n	800465a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	3b01      	subs	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	429a      	cmp	r2, r3
 8004656:	d19b      	bne.n	8004590 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000004 	.word	0x20000004

08004668 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800467a:	f7fd fbc5 	bl	8001e08 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	4413      	add	r3, r2
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800468a:	f7fd fbbd 	bl	8001e08 <HAL_GetTick>
 800468e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004698:	4b3d      	ldr	r3, [pc, #244]	; (8004790 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	00da      	lsls	r2, r3, #3
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	0d1b      	lsrs	r3, r3, #20
 80046a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046aa:	fb02 f303 	mul.w	r3, r2, r3
 80046ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046b0:	e060      	b.n	8004774 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046b8:	d107      	bne.n	80046ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d050      	beq.n	8004774 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046d2:	f7fd fb99 	bl	8001e08 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	429a      	cmp	r2, r3
 80046e0:	d902      	bls.n	80046e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d13d      	bne.n	8004764 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004700:	d111      	bne.n	8004726 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470a:	d004      	beq.n	8004716 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004714:	d107      	bne.n	8004726 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004724:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472e:	d10f      	bne.n	8004750 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800474e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e010      	b.n	8004786 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3b01      	subs	r3, #1
 8004772:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d196      	bne.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3728      	adds	r7, #40	; 0x28
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000004 	.word	0x20000004

08004794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff ff5b 	bl	8004668 <SPI_WaitFifoStateUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e027      	b.n	8004818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff fec0 	bl	8004558 <SPI_WaitFlagStateUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e014      	b.n	8004818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff ff34 	bl	8004668 <SPI_WaitFifoStateUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e000      	b.n	8004818 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e042      	b.n	80048b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fd f8ff 	bl	8001a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2224      	movs	r2, #36	; 0x24
 800484e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fbb4 	bl	8004fd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f8b5 	bl	80049e0 <UART_SetConfig>
 8004876:	4603      	mov	r3, r0
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e01b      	b.n	80048b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800488e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800489e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fc33 	bl	800511c <UART_CheckIdleState>
 80048b6:	4603      	mov	r3, r0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	4613      	mov	r3, r2
 80048ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d17c      	bne.n	80049d4 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_UART_Transmit+0x26>
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e075      	b.n	80049d6 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2221      	movs	r2, #33	; 0x21
 80048f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048fa:	f7fd fa85 	bl	8001e08 <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	88fa      	ldrh	r2, [r7, #6]
 8004904:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004918:	d108      	bne.n	800492c <HAL_UART_Transmit+0x6c>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e003      	b.n	8004934 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004934:	e031      	b.n	800499a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2200      	movs	r2, #0
 800493e:	2180      	movs	r1, #128	; 0x80
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fc95 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e03e      	b.n	80049d6 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10b      	bne.n	8004976 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	881a      	ldrh	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800496a:	b292      	uxth	r2, r2
 800496c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	3302      	adds	r3, #2
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	e008      	b.n	8004988 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	b292      	uxth	r2, r2
 8004980:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1c7      	bne.n	8004936 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2140      	movs	r1, #64	; 0x40
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fc5d 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e006      	b.n	80049d6 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e4:	b08c      	sub	sp, #48	; 0x30
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4baa      	ldr	r3, [pc, #680]	; (8004cb8 <UART_SetConfig+0x2d8>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a9f      	ldr	r2, [pc, #636]	; (8004cbc <UART_SetConfig+0x2dc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	6812      	ldr	r2, [r2, #0]
 8004a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	f023 010f 	bic.w	r1, r3, #15
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a90      	ldr	r2, [pc, #576]	; (8004cc0 <UART_SetConfig+0x2e0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d125      	bne.n	8004ad0 <UART_SetConfig+0xf0>
 8004a84:	4b8f      	ldr	r3, [pc, #572]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d81a      	bhi.n	8004ac8 <UART_SetConfig+0xe8>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <UART_SetConfig+0xb8>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004aa9 	.word	0x08004aa9
 8004a9c:	08004ab9 	.word	0x08004ab9
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004ac1 	.word	0x08004ac1
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aae:	e116      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab6:	e112      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004abe:	e10e      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ac6:	e10a      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ace:	e106      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a7c      	ldr	r2, [pc, #496]	; (8004cc8 <UART_SetConfig+0x2e8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d138      	bne.n	8004b4c <UART_SetConfig+0x16c>
 8004ada:	4b7a      	ldr	r3, [pc, #488]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b0c      	cmp	r3, #12
 8004ae6:	d82d      	bhi.n	8004b44 <UART_SetConfig+0x164>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <UART_SetConfig+0x110>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b25 	.word	0x08004b25
 8004af4:	08004b45 	.word	0x08004b45
 8004af8:	08004b45 	.word	0x08004b45
 8004afc:	08004b45 	.word	0x08004b45
 8004b00:	08004b35 	.word	0x08004b35
 8004b04:	08004b45 	.word	0x08004b45
 8004b08:	08004b45 	.word	0x08004b45
 8004b0c:	08004b45 	.word	0x08004b45
 8004b10:	08004b2d 	.word	0x08004b2d
 8004b14:	08004b45 	.word	0x08004b45
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2a:	e0d8      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b32:	e0d4      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b34:	2304      	movs	r3, #4
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3a:	e0d0      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b42:	e0cc      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b44:	2310      	movs	r3, #16
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	e0c8      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a5e      	ldr	r2, [pc, #376]	; (8004ccc <UART_SetConfig+0x2ec>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d125      	bne.n	8004ba2 <UART_SetConfig+0x1c2>
 8004b56:	4b5b      	ldr	r3, [pc, #364]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b60:	2b30      	cmp	r3, #48	; 0x30
 8004b62:	d016      	beq.n	8004b92 <UART_SetConfig+0x1b2>
 8004b64:	2b30      	cmp	r3, #48	; 0x30
 8004b66:	d818      	bhi.n	8004b9a <UART_SetConfig+0x1ba>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d00a      	beq.n	8004b82 <UART_SetConfig+0x1a2>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d814      	bhi.n	8004b9a <UART_SetConfig+0x1ba>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <UART_SetConfig+0x19a>
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d008      	beq.n	8004b8a <UART_SetConfig+0x1aa>
 8004b78:	e00f      	b.n	8004b9a <UART_SetConfig+0x1ba>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b80:	e0ad      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b82:	2302      	movs	r3, #2
 8004b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b88:	e0a9      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b90:	e0a5      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b92:	2308      	movs	r3, #8
 8004b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b98:	e0a1      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba0:	e09d      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a4a      	ldr	r2, [pc, #296]	; (8004cd0 <UART_SetConfig+0x2f0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d125      	bne.n	8004bf8 <UART_SetConfig+0x218>
 8004bac:	4b45      	ldr	r3, [pc, #276]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb8:	d016      	beq.n	8004be8 <UART_SetConfig+0x208>
 8004bba:	2bc0      	cmp	r3, #192	; 0xc0
 8004bbc:	d818      	bhi.n	8004bf0 <UART_SetConfig+0x210>
 8004bbe:	2b80      	cmp	r3, #128	; 0x80
 8004bc0:	d00a      	beq.n	8004bd8 <UART_SetConfig+0x1f8>
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d814      	bhi.n	8004bf0 <UART_SetConfig+0x210>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <UART_SetConfig+0x1f0>
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d008      	beq.n	8004be0 <UART_SetConfig+0x200>
 8004bce:	e00f      	b.n	8004bf0 <UART_SetConfig+0x210>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	e082      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bde:	e07e      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be6:	e07a      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bee:	e076      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf6:	e072      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a35      	ldr	r2, [pc, #212]	; (8004cd4 <UART_SetConfig+0x2f4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d12a      	bne.n	8004c58 <UART_SetConfig+0x278>
 8004c02:	4b30      	ldr	r3, [pc, #192]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c10:	d01a      	beq.n	8004c48 <UART_SetConfig+0x268>
 8004c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c16:	d81b      	bhi.n	8004c50 <UART_SetConfig+0x270>
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1c:	d00c      	beq.n	8004c38 <UART_SetConfig+0x258>
 8004c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c22:	d815      	bhi.n	8004c50 <UART_SetConfig+0x270>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <UART_SetConfig+0x250>
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2c:	d008      	beq.n	8004c40 <UART_SetConfig+0x260>
 8004c2e:	e00f      	b.n	8004c50 <UART_SetConfig+0x270>
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c36:	e052      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3e:	e04e      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c40:	2304      	movs	r3, #4
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c46:	e04a      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4e:	e046      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c50:	2310      	movs	r3, #16
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e042      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <UART_SetConfig+0x2dc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d13a      	bne.n	8004cd8 <UART_SetConfig+0x2f8>
 8004c62:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c70:	d01a      	beq.n	8004ca8 <UART_SetConfig+0x2c8>
 8004c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c76:	d81b      	bhi.n	8004cb0 <UART_SetConfig+0x2d0>
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7c:	d00c      	beq.n	8004c98 <UART_SetConfig+0x2b8>
 8004c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c82:	d815      	bhi.n	8004cb0 <UART_SetConfig+0x2d0>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <UART_SetConfig+0x2b0>
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8c:	d008      	beq.n	8004ca0 <UART_SetConfig+0x2c0>
 8004c8e:	e00f      	b.n	8004cb0 <UART_SetConfig+0x2d0>
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c96:	e022      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9e:	e01e      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca6:	e01a      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ca8:	2308      	movs	r3, #8
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cae:	e016      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb6:	e012      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004cb8:	cfff69f3 	.word	0xcfff69f3
 8004cbc:	40008000 	.word	0x40008000
 8004cc0:	40013800 	.word	0x40013800
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40004400 	.word	0x40004400
 8004ccc:	40004800 	.word	0x40004800
 8004cd0:	40004c00 	.word	0x40004c00
 8004cd4:	40005000 	.word	0x40005000
 8004cd8:	2310      	movs	r3, #16
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4aae      	ldr	r2, [pc, #696]	; (8004f9c <UART_SetConfig+0x5bc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	f040 8097 	bne.w	8004e18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d823      	bhi.n	8004d3a <UART_SetConfig+0x35a>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0x318>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d2b 	.word	0x08004d2b
 8004d0c:	08004d3b 	.word	0x08004d3b
 8004d10:	08004d3b 	.word	0x08004d3b
 8004d14:	08004d3b 	.word	0x08004d3b
 8004d18:	08004d33 	.word	0x08004d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d1c:	f7fe f9d0 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004d20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d22:	e010      	b.n	8004d46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d24:	4b9e      	ldr	r3, [pc, #632]	; (8004fa0 <UART_SetConfig+0x5c0>)
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d28:	e00d      	b.n	8004d46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2a:	f7fe f931 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8004d2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d30:	e009      	b.n	8004d46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d38:	e005      	b.n	8004d46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8130 	beq.w	8004fae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	4a94      	ldr	r2, [pc, #592]	; (8004fa4 <UART_SetConfig+0x5c4>)
 8004d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d305      	bcc.n	8004d7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d903      	bls.n	8004d86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d84:	e113      	b.n	8004fae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	2200      	movs	r2, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	60fa      	str	r2, [r7, #12]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	4a84      	ldr	r2, [pc, #528]	; (8004fa4 <UART_SetConfig+0x5c4>)
 8004d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	603b      	str	r3, [r7, #0]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004da4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004da8:	f7fb fd88 	bl	80008bc <__aeabi_uldivmod>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4610      	mov	r0, r2
 8004db2:	4619      	mov	r1, r3
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	020b      	lsls	r3, r1, #8
 8004dbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dc2:	0202      	lsls	r2, r0, #8
 8004dc4:	6979      	ldr	r1, [r7, #20]
 8004dc6:	6849      	ldr	r1, [r1, #4]
 8004dc8:	0849      	lsrs	r1, r1, #1
 8004dca:	2000      	movs	r0, #0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	4605      	mov	r5, r0
 8004dd0:	eb12 0804 	adds.w	r8, r2, r4
 8004dd4:	eb43 0905 	adc.w	r9, r3, r5
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	469a      	mov	sl, r3
 8004de0:	4693      	mov	fp, r2
 8004de2:	4652      	mov	r2, sl
 8004de4:	465b      	mov	r3, fp
 8004de6:	4640      	mov	r0, r8
 8004de8:	4649      	mov	r1, r9
 8004dea:	f7fb fd67 	bl	80008bc <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4613      	mov	r3, r2
 8004df4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfc:	d308      	bcc.n	8004e10 <UART_SetConfig+0x430>
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e04:	d204      	bcs.n	8004e10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	60da      	str	r2, [r3, #12]
 8004e0e:	e0ce      	b.n	8004fae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e16:	e0ca      	b.n	8004fae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e20:	d166      	bne.n	8004ef0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004e22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d827      	bhi.n	8004e7a <UART_SetConfig+0x49a>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <UART_SetConfig+0x450>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e5d 	.word	0x08004e5d
 8004e38:	08004e65 	.word	0x08004e65
 8004e3c:	08004e7b 	.word	0x08004e7b
 8004e40:	08004e6b 	.word	0x08004e6b
 8004e44:	08004e7b 	.word	0x08004e7b
 8004e48:	08004e7b 	.word	0x08004e7b
 8004e4c:	08004e7b 	.word	0x08004e7b
 8004e50:	08004e73 	.word	0x08004e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e54:	f7fe f934 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004e58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e5a:	e014      	b.n	8004e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e5c:	f7fe f946 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 8004e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e62:	e010      	b.n	8004e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e64:	4b4e      	ldr	r3, [pc, #312]	; (8004fa0 <UART_SetConfig+0x5c0>)
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e68:	e00d      	b.n	8004e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6a:	f7fe f891 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e70:	e009      	b.n	8004e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e78:	e005      	b.n	8004e86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8090 	beq.w	8004fae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	4a44      	ldr	r2, [pc, #272]	; (8004fa4 <UART_SetConfig+0x5c4>)
 8004e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea0:	005a      	lsls	r2, r3, #1
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	441a      	add	r2, r3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2b0f      	cmp	r3, #15
 8004eb8:	d916      	bls.n	8004ee8 <UART_SetConfig+0x508>
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d212      	bcs.n	8004ee8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f023 030f 	bic.w	r3, r3, #15
 8004eca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	8bfb      	ldrh	r3, [r7, #30]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	8bfa      	ldrh	r2, [r7, #30]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	e062      	b.n	8004fae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004eee:	e05e      	b.n	8004fae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d828      	bhi.n	8004f4a <UART_SetConfig+0x56a>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x520>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f3b 	.word	0x08004f3b
 8004f14:	08004f4b 	.word	0x08004f4b
 8004f18:	08004f4b 	.word	0x08004f4b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fe f8cc 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f2a:	e014      	b.n	8004f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe f8de 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 8004f30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f32:	e010      	b.n	8004f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <UART_SetConfig+0x5c0>)
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f38:	e00d      	b.n	8004f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fe f829 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8004f3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f40:	e009      	b.n	8004f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f48:	e005      	b.n	8004f56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f54:	bf00      	nop
    }

    if (pclk != 0U)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d028      	beq.n	8004fae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <UART_SetConfig+0x5c4>)
 8004f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	441a      	add	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	2b0f      	cmp	r3, #15
 8004f84:	d910      	bls.n	8004fa8 <UART_SetConfig+0x5c8>
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8c:	d20c      	bcs.n	8004fa8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
 8004f98:	e009      	b.n	8004fae <UART_SetConfig+0x5ce>
 8004f9a:	bf00      	nop
 8004f9c:	40008000 	.word	0x40008000
 8004fa0:	00f42400 	.word	0x00f42400
 8004fa4:	080094e4 	.word	0x080094e4
      }
      else
      {
        ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004fca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3730      	adds	r7, #48	; 0x30
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01a      	beq.n	80050ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d6:	d10a      	bne.n	80050ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	605a      	str	r2, [r3, #4]
  }
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b098      	sub	sp, #96	; 0x60
 8005120:	af02      	add	r7, sp, #8
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800512c:	f7fc fe6c 	bl	8001e08 <HAL_GetTick>
 8005130:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b08      	cmp	r3, #8
 800513e:	d12f      	bne.n	80051a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005148:	2200      	movs	r2, #0
 800514a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f88e 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d022      	beq.n	80051a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516e:	653b      	str	r3, [r7, #80]	; 0x50
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
 800517a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800517e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e063      	b.n	8005268 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d149      	bne.n	8005242 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b6:	2200      	movs	r2, #0
 80051b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f857 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d03c      	beq.n	8005242 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	623b      	str	r3, [r7, #32]
   return(result);
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
 80051e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e6      	bne.n	80051c8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	60fb      	str	r3, [r7, #12]
   return(result);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	64bb      	str	r3, [r7, #72]	; 0x48
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3308      	adds	r3, #8
 8005218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521a:	61fa      	str	r2, [r7, #28]
 800521c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	69b9      	ldr	r1, [r7, #24]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	617b      	str	r3, [r7, #20]
   return(result);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e012      	b.n	8005268 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3758      	adds	r7, #88	; 0x58
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005280:	e049      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d045      	beq.n	8005316 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528a:	f7fc fdbd 	bl	8001e08 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	429a      	cmp	r2, r3
 8005298:	d302      	bcc.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e048      	b.n	8005336 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d031      	beq.n	8005316 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d110      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2208      	movs	r2, #8
 80052c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f838 	bl	800533e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2208      	movs	r2, #8
 80052d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e029      	b.n	8005336 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f0:	d111      	bne.n	8005316 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f81e 	bl	800533e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e00f      	b.n	8005336 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4013      	ands	r3, r2
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	429a      	cmp	r2, r3
 8005324:	bf0c      	ite	eq
 8005326:	2301      	moveq	r3, #1
 8005328:	2300      	movne	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	429a      	cmp	r2, r3
 8005332:	d0a6      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800533e:	b480      	push	{r7}
 8005340:	b095      	sub	sp, #84	; 0x54
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005364:	643b      	str	r3, [r7, #64]	; 0x40
 8005366:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800536a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3308      	adds	r3, #8
 800537e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	61fb      	str	r3, [r7, #28]
   return(result);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	64bb      	str	r3, [r7, #72]	; 0x48
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800539c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800539e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e3      	bne.n	8005378 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d118      	bne.n	80053ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f023 0310 	bic.w	r3, r3, #16
 80053cc:	647b      	str	r3, [r7, #68]	; 0x44
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6979      	ldr	r1, [r7, #20]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	613b      	str	r3, [r7, #16]
   return(result);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e6      	bne.n	80053b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80053fe:	bf00      	nop
 8005400:	3754      	adds	r7, #84	; 0x54
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_UARTEx_DisableFifoMode+0x16>
 800541c:	2302      	movs	r3, #2
 800541e:	e027      	b.n	8005470 <HAL_UARTEx_DisableFifoMode+0x66>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	; 0x24
 800542c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800544e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005490:	2302      	movs	r3, #2
 8005492:	e02d      	b.n	80054f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2224      	movs	r2, #36	; 0x24
 80054a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f84f 	bl	8005574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800550c:	2302      	movs	r3, #2
 800550e:	e02d      	b.n	800556c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2224      	movs	r2, #36	; 0x24
 800551c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f811 	bl	8005574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005580:	2b00      	cmp	r3, #0
 8005582:	d108      	bne.n	8005596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005594:	e031      	b.n	80055fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005596:	2308      	movs	r3, #8
 8005598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800559a:	2308      	movs	r3, #8
 800559c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	0e5b      	lsrs	r3, r3, #25
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	0f5b      	lsrs	r3, r3, #29
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055be:	7bbb      	ldrb	r3, [r7, #14]
 80055c0:	7b3a      	ldrb	r2, [r7, #12]
 80055c2:	4911      	ldr	r1, [pc, #68]	; (8005608 <UARTEx_SetNbDataToProcess+0x94>)
 80055c4:	5c8a      	ldrb	r2, [r1, r2]
 80055c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055ca:	7b3a      	ldrb	r2, [r7, #12]
 80055cc:	490f      	ldr	r1, [pc, #60]	; (800560c <UARTEx_SetNbDataToProcess+0x98>)
 80055ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	7b7a      	ldrb	r2, [r7, #13]
 80055e0:	4909      	ldr	r1, [pc, #36]	; (8005608 <UARTEx_SetNbDataToProcess+0x94>)
 80055e2:	5c8a      	ldrb	r2, [r1, r2]
 80055e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055e8:	7b7a      	ldrb	r2, [r7, #13]
 80055ea:	4908      	ldr	r1, [pc, #32]	; (800560c <UARTEx_SetNbDataToProcess+0x98>)
 80055ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	080094fc 	.word	0x080094fc
 800560c:	08009504 	.word	0x08009504

08005610 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005614:	4904      	ldr	r1, [pc, #16]	; (8005628 <MX_FATFS_Init+0x18>)
 8005616:	4805      	ldr	r0, [pc, #20]	; (800562c <MX_FATFS_Init+0x1c>)
 8005618:	f003 f8f4 	bl	8008804 <FATFS_LinkDriver>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	4b03      	ldr	r3, [pc, #12]	; (8005630 <MX_FATFS_Init+0x20>)
 8005622:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005624:	bf00      	nop
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20002620 	.word	0x20002620
 800562c:	20000010 	.word	0x20000010
 8005630:	2000261c 	.word	0x2000261c

08005634 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005638:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800563a:	4618      	mov	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	4618      	mov	r0, r3
 8005652:	f7fb fc65 	bl	8000f20 <SD_disk_initialize>
 8005656:	4603      	mov	r3, r0
 8005658:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	4603      	mov	r3, r0
 800566a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fb fd40 	bl	80010f4 <SD_disk_status>
 8005674:	4603      	mov	r3, r0
 8005676:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	4603      	mov	r3, r0
 800568e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005690:	7bf8      	ldrb	r0, [r7, #15]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	f7fb fd42 	bl	8001120 <SD_disk_read>
 800569c:	4603      	mov	r3, r0
 800569e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4603      	mov	r3, r0
 80056b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80056b8:	7bf8      	ldrb	r0, [r7, #15]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	f7fb fd98 	bl	80011f4 <SD_disk_write>
 80056c4:	4603      	mov	r3, r0
 80056c6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	603a      	str	r2, [r7, #0]
 80056da:	71fb      	strb	r3, [r7, #7]
 80056dc:	460b      	mov	r3, r1
 80056de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	79b9      	ldrb	r1, [r7, #6]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fb fe08 	bl	80012fc <SD_disk_ioctl>
 80056ec:	4603      	mov	r3, r0
 80056ee:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <disk_status+0x30>)
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	79fa      	ldrb	r2, [r7, #7]
 8005710:	4905      	ldr	r1, [pc, #20]	; (8005728 <disk_status+0x30>)
 8005712:	440a      	add	r2, r1
 8005714:	7a12      	ldrb	r2, [r2, #8]
 8005716:	4610      	mov	r0, r2
 8005718:	4798      	blx	r3
 800571a:	4603      	mov	r3, r0
 800571c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	2000284c 	.word	0x2000284c

0800572c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	4a0d      	ldr	r2, [pc, #52]	; (8005774 <disk_initialize+0x48>)
 800573e:	5cd3      	ldrb	r3, [r2, r3]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d111      	bne.n	8005768 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	4a0b      	ldr	r2, [pc, #44]	; (8005774 <disk_initialize+0x48>)
 8005748:	2101      	movs	r1, #1
 800574a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	4a09      	ldr	r2, [pc, #36]	; (8005774 <disk_initialize+0x48>)
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	79fa      	ldrb	r2, [r7, #7]
 800575a:	4906      	ldr	r1, [pc, #24]	; (8005774 <disk_initialize+0x48>)
 800575c:	440a      	add	r2, r1
 800575e:	7a12      	ldrb	r2, [r2, #8]
 8005760:	4610      	mov	r0, r2
 8005762:	4798      	blx	r3
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	2000284c 	.word	0x2000284c

08005778 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	4603      	mov	r3, r0
 8005786:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	4a0a      	ldr	r2, [pc, #40]	; (80057b4 <disk_read+0x3c>)
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	689c      	ldr	r4, [r3, #8]
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	4a07      	ldr	r2, [pc, #28]	; (80057b4 <disk_read+0x3c>)
 8005798:	4413      	add	r3, r2
 800579a:	7a18      	ldrb	r0, [r3, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	47a0      	blx	r4
 80057a4:	4603      	mov	r3, r0
 80057a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd90      	pop	{r4, r7, pc}
 80057b2:	bf00      	nop
 80057b4:	2000284c 	.word	0x2000284c

080057b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <disk_write+0x3c>)
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	68dc      	ldr	r4, [r3, #12]
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	4a07      	ldr	r2, [pc, #28]	; (80057f4 <disk_write+0x3c>)
 80057d8:	4413      	add	r3, r2
 80057da:	7a18      	ldrb	r0, [r3, #8]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	47a0      	blx	r4
 80057e4:	4603      	mov	r3, r0
 80057e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}
 80057f2:	bf00      	nop
 80057f4:	2000284c 	.word	0x2000284c

080057f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	603a      	str	r2, [r7, #0]
 8005802:	71fb      	strb	r3, [r7, #7]
 8005804:	460b      	mov	r3, r1
 8005806:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	4a09      	ldr	r2, [pc, #36]	; (8005830 <disk_ioctl+0x38>)
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	79fa      	ldrb	r2, [r7, #7]
 8005816:	4906      	ldr	r1, [pc, #24]	; (8005830 <disk_ioctl+0x38>)
 8005818:	440a      	add	r2, r1
 800581a:	7a10      	ldrb	r0, [r2, #8]
 800581c:	79b9      	ldrb	r1, [r7, #6]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	4798      	blx	r3
 8005822:	4603      	mov	r3, r0
 8005824:	73fb      	strb	r3, [r7, #15]
  return res;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	2000284c 	.word	0x2000284c

08005834 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3301      	adds	r3, #1
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005844:	89fb      	ldrh	r3, [r7, #14]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	b21a      	sxth	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	b21b      	sxth	r3, r3
 8005850:	4313      	orrs	r3, r2
 8005852:	b21b      	sxth	r3, r3
 8005854:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005856:	89fb      	ldrh	r3, [r7, #14]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3303      	adds	r3, #3
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	3202      	adds	r2, #2
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	3201      	adds	r2, #1
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
	return rv;
 800589c:	68fb      	ldr	r3, [r7, #12]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	887a      	ldrh	r2, [r7, #2]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	607a      	str	r2, [r7, #4]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	0a1b      	lsrs	r3, r3, #8
 800591e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00d      	beq.n	800596e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	1c53      	adds	r3, r2, #1
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	6179      	str	r1, [r7, #20]
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3b01      	subs	r3, #1
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f1      	bne.n	8005952 <mem_cpy+0x1a>
	}
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800597a:	b480      	push	{r7}
 800597c:	b087      	sub	sp, #28
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	617a      	str	r2, [r7, #20]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3b01      	subs	r3, #1
 800599a:	607b      	str	r3, [r7, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f3      	bne.n	800598a <mem_set+0x10>
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80059b0:	b480      	push	{r7}
 80059b2:	b089      	sub	sp, #36	; 0x24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	61fa      	str	r2, [r7, #28]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	4619      	mov	r1, r3
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	61ba      	str	r2, [r7, #24]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	1acb      	subs	r3, r1, r3
 80059dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <mem_cmp+0x40>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0eb      	beq.n	80059c8 <mem_cmp+0x18>

	return r;
 80059f0:	697b      	ldr	r3, [r7, #20]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3724      	adds	r7, #36	; 0x24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a08:	e002      	b.n	8005a10 <chk_chr+0x12>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <chk_chr+0x26>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d1f2      	bne.n	8005a0a <chk_chr+0xc>
	return *str;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	781b      	ldrb	r3, [r3, #0]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e029      	b.n	8005a9c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005a48:	4a27      	ldr	r2, [pc, #156]	; (8005ae8 <chk_lock+0xb4>)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	4413      	add	r3, r2
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01d      	beq.n	8005a92 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a56:	4a24      	ldr	r2, [pc, #144]	; (8005ae8 <chk_lock+0xb4>)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	4413      	add	r3, r2
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d116      	bne.n	8005a96 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a68:	4a1f      	ldr	r2, [pc, #124]	; (8005ae8 <chk_lock+0xb4>)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	4413      	add	r3, r2
 8005a70:	3304      	adds	r3, #4
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d10c      	bne.n	8005a96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ae8 <chk_lock+0xb4>)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	4413      	add	r3, r2
 8005a84:	3308      	adds	r3, #8
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d102      	bne.n	8005a96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a90:	e007      	b.n	8005aa2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005a92:	2301      	movs	r3, #1
 8005a94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d9d2      	bls.n	8005a48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d109      	bne.n	8005abc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <chk_lock+0x80>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d101      	bne.n	8005ab8 <chk_lock+0x84>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e010      	b.n	8005ada <chk_lock+0xa6>
 8005ab8:	2312      	movs	r3, #18
 8005aba:	e00e      	b.n	8005ada <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <chk_lock+0xa0>
 8005ac2:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <chk_lock+0xb4>)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	4413      	add	r3, r2
 8005aca:	330c      	adds	r3, #12
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad2:	d101      	bne.n	8005ad8 <chk_lock+0xa4>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	e000      	b.n	8005ada <chk_lock+0xa6>
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	2000262c 	.word	0x2000262c

08005aec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]
 8005af6:	e002      	b.n	8005afe <enq_lock+0x12>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3301      	adds	r3, #1
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d806      	bhi.n	8005b12 <enq_lock+0x26>
 8005b04:	4a09      	ldr	r2, [pc, #36]	; (8005b2c <enq_lock+0x40>)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	4413      	add	r3, r2
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f2      	bne.n	8005af8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	2000262c 	.word	0x2000262c

08005b30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	e01f      	b.n	8005b80 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b40:	4a41      	ldr	r2, [pc, #260]	; (8005c48 <inc_lock+0x118>)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	4413      	add	r3, r2
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d113      	bne.n	8005b7a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005b52:	4a3d      	ldr	r2, [pc, #244]	; (8005c48 <inc_lock+0x118>)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	4413      	add	r3, r2
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d109      	bne.n	8005b7a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b66:	4a38      	ldr	r2, [pc, #224]	; (8005c48 <inc_lock+0x118>)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	4413      	add	r3, r2
 8005b6e:	3308      	adds	r3, #8
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d006      	beq.n	8005b88 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d9dc      	bls.n	8005b40 <inc_lock+0x10>
 8005b86:	e000      	b.n	8005b8a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d132      	bne.n	8005bf6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e002      	b.n	8005b9c <inc_lock+0x6c>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d806      	bhi.n	8005bb0 <inc_lock+0x80>
 8005ba2:	4a29      	ldr	r2, [pc, #164]	; (8005c48 <inc_lock+0x118>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	4413      	add	r3, r2
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1f2      	bne.n	8005b96 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d101      	bne.n	8005bba <inc_lock+0x8a>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e040      	b.n	8005c3c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4922      	ldr	r1, [pc, #136]	; (8005c48 <inc_lock+0x118>)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	440b      	add	r3, r1
 8005bc6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	491e      	ldr	r1, [pc, #120]	; (8005c48 <inc_lock+0x118>)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	440b      	add	r3, r1
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	491a      	ldr	r1, [pc, #104]	; (8005c48 <inc_lock+0x118>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	440b      	add	r3, r1
 8005be4:	3308      	adds	r3, #8
 8005be6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005be8:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <inc_lock+0x118>)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	4413      	add	r3, r2
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <inc_lock+0xe0>
 8005bfc:	4a12      	ldr	r2, [pc, #72]	; (8005c48 <inc_lock+0x118>)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	4413      	add	r3, r2
 8005c04:	330c      	adds	r3, #12
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <inc_lock+0xe0>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e015      	b.n	8005c3c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d108      	bne.n	8005c28 <inc_lock+0xf8>
 8005c16:	4a0c      	ldr	r2, [pc, #48]	; (8005c48 <inc_lock+0x118>)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	4413      	add	r3, r2
 8005c1e:	330c      	adds	r3, #12
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	e001      	b.n	8005c2c <inc_lock+0xfc>
 8005c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c2c:	4906      	ldr	r1, [pc, #24]	; (8005c48 <inc_lock+0x118>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	440b      	add	r3, r1
 8005c34:	330c      	adds	r3, #12
 8005c36:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3301      	adds	r3, #1
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	2000262c 	.word	0x2000262c

08005c4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d825      	bhi.n	8005cac <dec_lock+0x60>
		n = Files[i].ctr;
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <dec_lock+0x74>)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	4413      	add	r3, r2
 8005c68:	330c      	adds	r3, #12
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c6e:	89fb      	ldrh	r3, [r7, #14]
 8005c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c74:	d101      	bne.n	8005c7a <dec_lock+0x2e>
 8005c76:	2300      	movs	r3, #0
 8005c78:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c7a:	89fb      	ldrh	r3, [r7, #14]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <dec_lock+0x3a>
 8005c80:	89fb      	ldrh	r3, [r7, #14]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c86:	4a0e      	ldr	r2, [pc, #56]	; (8005cc0 <dec_lock+0x74>)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	4413      	add	r3, r2
 8005c8e:	330c      	adds	r3, #12
 8005c90:	89fa      	ldrh	r2, [r7, #14]
 8005c92:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c94:	89fb      	ldrh	r3, [r7, #14]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d105      	bne.n	8005ca6 <dec_lock+0x5a>
 8005c9a:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <dec_lock+0x74>)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	4413      	add	r3, r2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	737b      	strb	r3, [r7, #13]
 8005caa:	e001      	b.n	8005cb0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005cac:	2302      	movs	r3, #2
 8005cae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005cb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	2000262c 	.word	0x2000262c

08005cc4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e010      	b.n	8005cf4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005cd2:	4a0d      	ldr	r2, [pc, #52]	; (8005d08 <clear_lock+0x44>)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	4413      	add	r3, r2
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d105      	bne.n	8005cee <clear_lock+0x2a>
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <clear_lock+0x44>)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	4413      	add	r3, r2
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d9eb      	bls.n	8005cd2 <clear_lock+0xe>
	}
}
 8005cfa:	bf00      	nop
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	2000262c 	.word	0x2000262c

08005d0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	78db      	ldrb	r3, [r3, #3]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d034      	beq.n	8005d8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7858      	ldrb	r0, [r3, #1]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d30:	2301      	movs	r3, #1
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	f7ff fd40 	bl	80057b8 <disk_write>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
 8005d42:	e022      	b.n	8005d8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	1ad2      	subs	r2, r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d217      	bcs.n	8005d8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	789b      	ldrb	r3, [r3, #2]
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	e010      	b.n	8005d84 <sync_window+0x78>
					wsect += fs->fsize;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	7858      	ldrb	r0, [r3, #1]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d76:	2301      	movs	r3, #1
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	f7ff fd1d 	bl	80057b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d8eb      	bhi.n	8005d62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d01b      	beq.n	8005de4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ffad 	bl	8005d0c <sync_window>
 8005db2:	4603      	mov	r3, r0
 8005db4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d113      	bne.n	8005de4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7858      	ldrb	r0, [r3, #1]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	f7ff fcd5 	bl	8005778 <disk_read>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff ff87 	bl	8005d0c <sync_window>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d159      	bne.n	8005ebc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d149      	bne.n	8005ea4 <sync_fs+0xb4>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	791b      	ldrb	r3, [r3, #4]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d145      	bne.n	8005ea4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	899b      	ldrh	r3, [r3, #12]
 8005e22:	461a      	mov	r2, r3
 8005e24:	2100      	movs	r1, #0
 8005e26:	f7ff fda8 	bl	800597a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3338      	adds	r3, #56	; 0x38
 8005e2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e32:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fd37 	bl	80058aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3338      	adds	r3, #56	; 0x38
 8005e40:	4921      	ldr	r1, [pc, #132]	; (8005ec8 <sync_fs+0xd8>)
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fd4c 	bl	80058e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3338      	adds	r3, #56	; 0x38
 8005e4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e50:	491e      	ldr	r1, [pc, #120]	; (8005ecc <sync_fs+0xdc>)
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fd44 	bl	80058e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3338      	adds	r3, #56	; 0x38
 8005e5c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f7ff fd3a 	bl	80058e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3338      	adds	r3, #56	; 0x38
 8005e70:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f7ff fd30 	bl	80058e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	7858      	ldrb	r0, [r3, #1]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f7ff fc8d 	bl	80057b8 <disk_write>
			fs->fsi_flag = 0;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fca3 	bl	80057f8 <disk_ioctl>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <sync_fs+0xcc>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	41615252 	.word	0x41615252
 8005ecc:	61417272 	.word	0x61417272

08005ed0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	3b02      	subs	r3, #2
 8005ede:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	3b02      	subs	r3, #2
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d301      	bcc.n	8005ef0 <clust2sect+0x20>
 8005eec:	2300      	movs	r3, #0
 8005eee:	e008      	b.n	8005f02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	895b      	ldrh	r3, [r3, #10]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	fb03 f202 	mul.w	r2, r3, r2
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	4413      	add	r3, r2
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b086      	sub	sp, #24
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d904      	bls.n	8005f2e <get_fat+0x20>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d302      	bcc.n	8005f34 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f2e:	2301      	movs	r3, #1
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e0bb      	b.n	80060ac <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f34:	f04f 33ff 	mov.w	r3, #4294967295
 8005f38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	f000 8083 	beq.w	800604a <get_fat+0x13c>
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	f300 80a7 	bgt.w	8006098 <get_fat+0x18a>
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d002      	beq.n	8005f54 <get_fat+0x46>
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d056      	beq.n	8006000 <get_fat+0xf2>
 8005f52:	e0a1      	b.n	8006098 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	899b      	ldrh	r3, [r3, #12]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f72:	4413      	add	r3, r2
 8005f74:	4619      	mov	r1, r3
 8005f76:	6938      	ldr	r0, [r7, #16]
 8005f78:	f7ff ff0c 	bl	8005d94 <move_window>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f040 808d 	bne.w	800609e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	60fa      	str	r2, [r7, #12]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	8992      	ldrh	r2, [r2, #12]
 8005f8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f92:	fb01 f202 	mul.w	r2, r1, r2
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fa0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	899b      	ldrh	r3, [r3, #12]
 8005faa:	4619      	mov	r1, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6938      	ldr	r0, [r7, #16]
 8005fb8:	f7ff feec 	bl	8005d94 <move_window>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d16f      	bne.n	80060a2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	899b      	ldrh	r3, [r3, #12]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fce:	fb01 f202 	mul.w	r2, r1, r2
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <get_fat+0xe8>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	e002      	b.n	8005ffc <get_fat+0xee>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ffc:	617b      	str	r3, [r7, #20]
			break;
 8005ffe:	e055      	b.n	80060ac <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	899b      	ldrh	r3, [r3, #12]
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	b29b      	uxth	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	fbb3 f3f1 	udiv	r3, r3, r1
 8006014:	4413      	add	r3, r2
 8006016:	4619      	mov	r1, r3
 8006018:	6938      	ldr	r0, [r7, #16]
 800601a:	f7ff febb 	bl	8005d94 <move_window>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d140      	bne.n	80060a6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	8992      	ldrh	r2, [r2, #12]
 8006032:	fbb3 f0f2 	udiv	r0, r3, r2
 8006036:	fb00 f202 	mul.w	r2, r0, r2
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	440b      	add	r3, r1
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fbf8 	bl	8005834 <ld_word>
 8006044:	4603      	mov	r3, r0
 8006046:	617b      	str	r3, [r7, #20]
			break;
 8006048:	e030      	b.n	80060ac <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	899b      	ldrh	r3, [r3, #12]
 8006052:	089b      	lsrs	r3, r3, #2
 8006054:	b29b      	uxth	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	fbb3 f3f1 	udiv	r3, r3, r1
 800605e:	4413      	add	r3, r2
 8006060:	4619      	mov	r1, r3
 8006062:	6938      	ldr	r0, [r7, #16]
 8006064:	f7ff fe96 	bl	8005d94 <move_window>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d11d      	bne.n	80060aa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	8992      	ldrh	r2, [r2, #12]
 800607c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006080:	fb00 f202 	mul.w	r2, r0, r2
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	440b      	add	r3, r1
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff fbeb 	bl	8005864 <ld_dword>
 800608e:	4603      	mov	r3, r0
 8006090:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006094:	617b      	str	r3, [r7, #20]
			break;
 8006096:	e009      	b.n	80060ac <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006098:	2301      	movs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e006      	b.n	80060ac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800609e:	bf00      	nop
 80060a0:	e004      	b.n	80060ac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060a2:	bf00      	nop
 80060a4:	e002      	b.n	80060ac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060a6:	bf00      	nop
 80060a8:	e000      	b.n	80060ac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060aa:	bf00      	nop
		}
	}

	return val;
 80060ac:	697b      	ldr	r3, [r7, #20]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80060b6:	b590      	push	{r4, r7, lr}
 80060b8:	b089      	sub	sp, #36	; 0x24
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80060c2:	2302      	movs	r3, #2
 80060c4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	f240 8109 	bls.w	80062e0 <put_fat+0x22a>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	f080 8103 	bcs.w	80062e0 <put_fat+0x22a>
		switch (fs->fs_type) {
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b03      	cmp	r3, #3
 80060e0:	f000 80b6 	beq.w	8006250 <put_fat+0x19a>
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	f300 80fb 	bgt.w	80062e0 <put_fat+0x22a>
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d003      	beq.n	80060f6 <put_fat+0x40>
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	f000 8083 	beq.w	80061fa <put_fat+0x144>
 80060f4:	e0f4      	b.n	80062e0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4413      	add	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	899b      	ldrh	r3, [r3, #12]
 800610c:	4619      	mov	r1, r3
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	fbb3 f3f1 	udiv	r3, r3, r1
 8006114:	4413      	add	r3, r2
 8006116:	4619      	mov	r1, r3
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff fe3b 	bl	8005d94 <move_window>
 800611e:	4603      	mov	r3, r0
 8006120:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006122:	7ffb      	ldrb	r3, [r7, #31]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f040 80d4 	bne.w	80062d2 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	61ba      	str	r2, [r7, #24]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	8992      	ldrh	r2, [r2, #12]
 800613a:	fbb3 f0f2 	udiv	r0, r3, r2
 800613e:	fb00 f202 	mul.w	r2, r0, r2
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	440b      	add	r3, r1
 8006146:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <put_fat+0xb8>
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b25b      	sxtb	r3, r3
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	b25a      	sxtb	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	b25b      	sxtb	r3, r3
 8006166:	4313      	orrs	r3, r2
 8006168:	b25b      	sxtb	r3, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	e001      	b.n	8006172 <put_fat+0xbc>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	899b      	ldrh	r3, [r3, #12]
 8006184:	4619      	mov	r1, r3
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	fbb3 f3f1 	udiv	r3, r3, r1
 800618c:	4413      	add	r3, r2
 800618e:	4619      	mov	r1, r3
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff fdff 	bl	8005d94 <move_window>
 8006196:	4603      	mov	r3, r0
 8006198:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800619a:	7ffb      	ldrb	r3, [r7, #31]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f040 809a 	bne.w	80062d6 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	899b      	ldrh	r3, [r3, #12]
 80061ac:	461a      	mov	r2, r3
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80061b4:	fb00 f202 	mul.w	r2, r0, r2
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	440b      	add	r3, r1
 80061bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <put_fat+0x11a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	091b      	lsrs	r3, r3, #4
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e00e      	b.n	80061ee <put_fat+0x138>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	b25b      	sxtb	r3, r3
 80061d6:	f023 030f 	bic.w	r3, r3, #15
 80061da:	b25a      	sxtb	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	b25b      	sxtb	r3, r3
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	b25b      	sxtb	r3, r3
 80061e8:	4313      	orrs	r3, r2
 80061ea:	b25b      	sxtb	r3, r3
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	70da      	strb	r2, [r3, #3]
			break;
 80061f8:	e072      	b.n	80062e0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	899b      	ldrh	r3, [r3, #12]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	b29b      	uxth	r3, r3
 8006206:	4619      	mov	r1, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	fbb3 f3f1 	udiv	r3, r3, r1
 800620e:	4413      	add	r3, r2
 8006210:	4619      	mov	r1, r3
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff fdbe 	bl	8005d94 <move_window>
 8006218:	4603      	mov	r3, r0
 800621a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800621c:	7ffb      	ldrb	r3, [r7, #31]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d15b      	bne.n	80062da <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	8992      	ldrh	r2, [r2, #12]
 8006230:	fbb3 f0f2 	udiv	r0, r3, r2
 8006234:	fb00 f202 	mul.w	r2, r0, r2
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	440b      	add	r3, r1
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	b292      	uxth	r2, r2
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fb31 	bl	80058aa <st_word>
			fs->wflag = 1;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	70da      	strb	r2, [r3, #3]
			break;
 800624e:	e047      	b.n	80062e0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	899b      	ldrh	r3, [r3, #12]
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	b29b      	uxth	r3, r3
 800625c:	4619      	mov	r1, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	fbb3 f3f1 	udiv	r3, r3, r1
 8006264:	4413      	add	r3, r2
 8006266:	4619      	mov	r1, r3
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff fd93 	bl	8005d94 <move_window>
 800626e:	4603      	mov	r3, r0
 8006270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006272:	7ffb      	ldrb	r3, [r7, #31]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d132      	bne.n	80062de <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	8992      	ldrh	r2, [r2, #12]
 800628c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006290:	fb00 f202 	mul.w	r2, r0, r2
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	440b      	add	r3, r1
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fae3 	bl	8005864 <ld_dword>
 800629e:	4603      	mov	r3, r0
 80062a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062a4:	4323      	orrs	r3, r4
 80062a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	8992      	ldrh	r2, [r2, #12]
 80062b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80062ba:	fb00 f202 	mul.w	r2, r0, r2
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	440b      	add	r3, r1
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fb0b 	bl	80058e0 <st_dword>
			fs->wflag = 1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	70da      	strb	r2, [r3, #3]
			break;
 80062d0:	e006      	b.n	80062e0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80062d2:	bf00      	nop
 80062d4:	e004      	b.n	80062e0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80062de:	bf00      	nop
		}
	}
	return res;
 80062e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3724      	adds	r7, #36	; 0x24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd90      	pop	{r4, r7, pc}

080062ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b088      	sub	sp, #32
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d904      	bls.n	8006310 <remove_chain+0x26>
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	429a      	cmp	r2, r3
 800630e:	d301      	bcc.n	8006314 <remove_chain+0x2a>
 8006310:	2302      	movs	r3, #2
 8006312:	e04b      	b.n	80063ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00c      	beq.n	8006334 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800631a:	f04f 32ff 	mov.w	r2, #4294967295
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	69b8      	ldr	r0, [r7, #24]
 8006322:	f7ff fec8 	bl	80060b6 <put_fat>
 8006326:	4603      	mov	r3, r0
 8006328:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800632a:	7ffb      	ldrb	r3, [r7, #31]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <remove_chain+0x4a>
 8006330:	7ffb      	ldrb	r3, [r7, #31]
 8006332:	e03b      	b.n	80063ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff fde9 	bl	8005f0e <get_fat>
 800633c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d031      	beq.n	80063a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <remove_chain+0x64>
 800634a:	2302      	movs	r3, #2
 800634c:	e02e      	b.n	80063ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d101      	bne.n	800635a <remove_chain+0x70>
 8006356:	2301      	movs	r3, #1
 8006358:	e028      	b.n	80063ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800635a:	2200      	movs	r2, #0
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	69b8      	ldr	r0, [r7, #24]
 8006360:	f7ff fea9 	bl	80060b6 <put_fat>
 8006364:	4603      	mov	r3, r0
 8006366:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006368:	7ffb      	ldrb	r3, [r7, #31]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <remove_chain+0x88>
 800636e:	7ffb      	ldrb	r3, [r7, #31]
 8006370:	e01c      	b.n	80063ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	3b02      	subs	r3, #2
 800637c:	429a      	cmp	r2, r3
 800637e:	d20b      	bcs.n	8006398 <remove_chain+0xae>
			fs->free_clst++;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	791b      	ldrb	r3, [r3, #4]
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	b2da      	uxtb	r2, r3
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d3c6      	bcc.n	8006334 <remove_chain+0x4a>
 80063a6:	e000      	b.n	80063aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80063a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10d      	bne.n	80063e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <create_chain+0x2c>
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d31b      	bcc.n	8006418 <create_chain+0x64>
 80063e0:	2301      	movs	r3, #1
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	e018      	b.n	8006418 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff fd90 	bl	8005f0e <get_fat>
 80063ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d801      	bhi.n	80063fa <create_chain+0x46>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e070      	b.n	80064dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d101      	bne.n	8006406 <create_chain+0x52>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	e06a      	b.n	80064dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	429a      	cmp	r2, r3
 800640e:	d201      	bcs.n	8006414 <create_chain+0x60>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	e063      	b.n	80064dc <create_chain+0x128>
		scl = clst;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	3301      	adds	r3, #1
 8006420:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	429a      	cmp	r2, r3
 800642a:	d307      	bcc.n	800643c <create_chain+0x88>
				ncl = 2;
 800642c:	2302      	movs	r3, #2
 800642e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	429a      	cmp	r2, r3
 8006436:	d901      	bls.n	800643c <create_chain+0x88>
 8006438:	2300      	movs	r3, #0
 800643a:	e04f      	b.n	80064dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800643c:	69f9      	ldr	r1, [r7, #28]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff fd65 	bl	8005f0e <get_fat>
 8006444:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d003      	beq.n	800645a <create_chain+0xa6>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d101      	bne.n	800645e <create_chain+0xaa>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	e03e      	b.n	80064dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	429a      	cmp	r2, r3
 8006464:	d1da      	bne.n	800641c <create_chain+0x68>
 8006466:	2300      	movs	r3, #0
 8006468:	e038      	b.n	80064dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800646a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800646c:	f04f 32ff 	mov.w	r2, #4294967295
 8006470:	69f9      	ldr	r1, [r7, #28]
 8006472:	6938      	ldr	r0, [r7, #16]
 8006474:	f7ff fe1f 	bl	80060b6 <put_fat>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <create_chain+0xe2>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d006      	beq.n	8006496 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6938      	ldr	r0, [r7, #16]
 800648e:	f7ff fe12 	bl	80060b6 <put_fat>
 8006492:	4603      	mov	r3, r0
 8006494:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d116      	bne.n	80064ca <create_chain+0x116>
		fs->last_clst = ncl;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	3b02      	subs	r3, #2
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d804      	bhi.n	80064ba <create_chain+0x106>
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	1e5a      	subs	r2, r3, #1
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	791b      	ldrb	r3, [r3, #4]
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	711a      	strb	r2, [r3, #4]
 80064c8:	e007      	b.n	80064da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d102      	bne.n	80064d6 <create_chain+0x122>
 80064d0:	f04f 33ff 	mov.w	r3, #4294967295
 80064d4:	e000      	b.n	80064d8 <create_chain+0x124>
 80064d6:	2301      	movs	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80064da:	69fb      	ldr	r3, [r7, #28]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	3304      	adds	r3, #4
 80064fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	899b      	ldrh	r3, [r3, #12]
 8006500:	461a      	mov	r2, r3
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	fbb3 f3f2 	udiv	r3, r3, r2
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	8952      	ldrh	r2, [r2, #10]
 800650c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006510:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1d1a      	adds	r2, r3, #4
 8006516:	613a      	str	r2, [r7, #16]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <clmt_clust+0x42>
 8006522:	2300      	movs	r3, #0
 8006524:	e010      	b.n	8006548 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	429a      	cmp	r2, r3
 800652c:	d307      	bcc.n	800653e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	3304      	adds	r3, #4
 800653a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800653c:	e7e9      	b.n	8006512 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800653e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	4413      	add	r3, r2
}
 8006548:	4618      	mov	r0, r3
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800656a:	d204      	bcs.n	8006576 <dir_sdi+0x22>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006576:	2302      	movs	r3, #2
 8006578:	e071      	b.n	800665e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <dir_sdi+0x46>
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d902      	bls.n	800659a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10c      	bne.n	80065ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	8912      	ldrh	r2, [r2, #8]
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d301      	bcc.n	80065b0 <dir_sdi+0x5c>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e056      	b.n	800665e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	61da      	str	r2, [r3, #28]
 80065b8:	e02d      	b.n	8006616 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	895b      	ldrh	r3, [r3, #10]
 80065be:	461a      	mov	r2, r3
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	899b      	ldrh	r3, [r3, #12]
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
 80065c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065ca:	e019      	b.n	8006600 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6979      	ldr	r1, [r7, #20]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fc9c 	bl	8005f0e <get_fat>
 80065d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d101      	bne.n	80065e4 <dir_sdi+0x90>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e03c      	b.n	800665e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d904      	bls.n	80065f4 <dir_sdi+0xa0>
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d301      	bcc.n	80065f8 <dir_sdi+0xa4>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e032      	b.n	800665e <dir_sdi+0x10a>
			ofs -= csz;
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	429a      	cmp	r2, r3
 8006606:	d2e1      	bcs.n	80065cc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006608:	6979      	ldr	r1, [r7, #20]
 800660a:	6938      	ldr	r0, [r7, #16]
 800660c:	f7ff fc60 	bl	8005ed0 <clust2sect>
 8006610:	4602      	mov	r2, r0
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <dir_sdi+0xd4>
 8006624:	2302      	movs	r3, #2
 8006626:	e01a      	b.n	800665e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	899b      	ldrh	r3, [r3, #12]
 8006630:	4619      	mov	r1, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	fbb3 f3f1 	udiv	r3, r3, r1
 8006638:	441a      	add	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	899b      	ldrh	r3, [r3, #12]
 8006648:	461a      	mov	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006650:	fb00 f202 	mul.w	r2, r0, r2
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	18ca      	adds	r2, r1, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b086      	sub	sp, #24
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	3320      	adds	r3, #32
 800667c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <dir_next+0x28>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800668c:	d301      	bcc.n	8006692 <dir_next+0x2c>
 800668e:	2304      	movs	r3, #4
 8006690:	e0bb      	b.n	800680a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	899b      	ldrh	r3, [r3, #12]
 8006696:	461a      	mov	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	fbb3 f1f2 	udiv	r1, r3, r2
 800669e:	fb01 f202 	mul.w	r2, r1, r2
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f040 809d 	bne.w	80067e4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10b      	bne.n	80066d4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	8912      	ldrh	r2, [r2, #8]
 80066c4:	4293      	cmp	r3, r2
 80066c6:	f0c0 808d 	bcc.w	80067e4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	61da      	str	r2, [r3, #28]
 80066d0:	2304      	movs	r3, #4
 80066d2:	e09a      	b.n	800680a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	899b      	ldrh	r3, [r3, #12]
 80066d8:	461a      	mov	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	8952      	ldrh	r2, [r2, #10]
 80066e4:	3a01      	subs	r2, #1
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d17b      	bne.n	80067e4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f7ff fc0a 	bl	8005f0e <get_fat>
 80066fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d801      	bhi.n	8006706 <dir_next+0xa0>
 8006702:	2302      	movs	r3, #2
 8006704:	e081      	b.n	800680a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d101      	bne.n	8006712 <dir_next+0xac>
 800670e:	2301      	movs	r3, #1
 8006710:	e07b      	b.n	800680a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	429a      	cmp	r2, r3
 800671a:	d359      	bcc.n	80067d0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d104      	bne.n	800672c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	61da      	str	r2, [r3, #28]
 8006728:	2304      	movs	r3, #4
 800672a:	e06e      	b.n	800680a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7ff fe3d 	bl	80063b4 <create_chain>
 800673a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <dir_next+0xe0>
 8006742:	2307      	movs	r3, #7
 8006744:	e061      	b.n	800680a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <dir_next+0xea>
 800674c:	2302      	movs	r3, #2
 800674e:	e05c      	b.n	800680a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006756:	d101      	bne.n	800675c <dir_next+0xf6>
 8006758:	2301      	movs	r3, #1
 800675a:	e056      	b.n	800680a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff fad5 	bl	8005d0c <sync_window>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <dir_next+0x106>
 8006768:	2301      	movs	r3, #1
 800676a:	e04e      	b.n	800680a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	899b      	ldrh	r3, [r3, #12]
 8006776:	461a      	mov	r2, r3
 8006778:	2100      	movs	r1, #0
 800677a:	f7ff f8fe 	bl	800597a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800677e:	2300      	movs	r3, #0
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	6979      	ldr	r1, [r7, #20]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff fba3 	bl	8005ed0 <clust2sect>
 800678a:	4602      	mov	r2, r0
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	635a      	str	r2, [r3, #52]	; 0x34
 8006790:	e012      	b.n	80067b8 <dir_next+0x152>
						fs->wflag = 1;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff fab7 	bl	8005d0c <sync_window>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <dir_next+0x142>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e030      	b.n	800680a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	3301      	adds	r3, #1
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	635a      	str	r2, [r3, #52]	; 0x34
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	895b      	ldrh	r3, [r3, #10]
 80067bc:	461a      	mov	r2, r3
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d3e6      	bcc.n	8006792 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad2      	subs	r2, r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80067d6:	6979      	ldr	r1, [r7, #20]
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff fb79 	bl	8005ed0 <clust2sect>
 80067de:	4602      	mov	r2, r0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	899b      	ldrh	r3, [r3, #12]
 80067f4:	461a      	mov	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80067fc:	fb00 f202 	mul.w	r2, r0, r2
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	18ca      	adds	r2, r1, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b086      	sub	sp, #24
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006822:	2100      	movs	r1, #0
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff fe95 	bl	8006554 <dir_sdi>
 800682a:	4603      	mov	r3, r0
 800682c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d12b      	bne.n	800688c <dir_alloc+0x7a>
		n = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	4619      	mov	r1, r3
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7ff faa8 	bl	8005d94 <move_window>
 8006844:	4603      	mov	r3, r0
 8006846:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11d      	bne.n	800688a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2be5      	cmp	r3, #229	; 0xe5
 8006856:	d004      	beq.n	8006862 <dir_alloc+0x50>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d107      	bne.n	8006872 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3301      	adds	r3, #1
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d102      	bne.n	8006876 <dir_alloc+0x64>
 8006870:	e00c      	b.n	800688c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006872:	2300      	movs	r3, #0
 8006874:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006876:	2101      	movs	r1, #1
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff fef4 	bl	8006666 <dir_next>
 800687e:	4603      	mov	r3, r0
 8006880:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0d7      	beq.n	8006838 <dir_alloc+0x26>
 8006888:	e000      	b.n	800688c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800688a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b04      	cmp	r3, #4
 8006890:	d101      	bne.n	8006896 <dir_alloc+0x84>
 8006892:	2307      	movs	r3, #7
 8006894:	75fb      	strb	r3, [r7, #23]
	return res;
 8006896:	7dfb      	ldrb	r3, [r7, #23]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	331a      	adds	r3, #26
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe ffc0 	bl	8005834 <ld_word>
 80068b4:	4603      	mov	r3, r0
 80068b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d109      	bne.n	80068d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	3314      	adds	r3, #20
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe ffb5 	bl	8005834 <ld_word>
 80068ca:	4603      	mov	r3, r0
 80068cc:	041b      	lsls	r3, r3, #16
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068d4:	68fb      	ldr	r3, [r7, #12]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	331a      	adds	r3, #26
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	b292      	uxth	r2, r2
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe ffd8 	bl	80058aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d109      	bne.n	8006916 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f103 0214 	add.w	r2, r3, #20
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	0c1b      	lsrs	r3, r3, #16
 800690c:	b29b      	uxth	r3, r3
 800690e:	4619      	mov	r1, r3
 8006910:	4610      	mov	r0, r2
 8006912:	f7fe ffca 	bl	80058aa <st_word>
	}
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	331a      	adds	r3, #26
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe ff80 	bl	8005834 <ld_word>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <cmp_lfn+0x1e>
 800693a:	2300      	movs	r3, #0
 800693c:	e059      	b.n	80069f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006946:	1e5a      	subs	r2, r3, #1
 8006948:	4613      	mov	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006954:	2301      	movs	r3, #1
 8006956:	81fb      	strh	r3, [r7, #14]
 8006958:	2300      	movs	r3, #0
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	e033      	b.n	80069c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800695e:	4a27      	ldr	r2, [pc, #156]	; (80069fc <cmp_lfn+0xdc>)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4413      	add	r3, r2
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	4413      	add	r3, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe ff61 	bl	8005834 <ld_word>
 8006972:	4603      	mov	r3, r0
 8006974:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006976:	89fb      	ldrh	r3, [r7, #14]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01a      	beq.n	80069b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2bfe      	cmp	r3, #254	; 0xfe
 8006980:	d812      	bhi.n	80069a8 <cmp_lfn+0x88>
 8006982:	89bb      	ldrh	r3, [r7, #12]
 8006984:	4618      	mov	r0, r3
 8006986:	f001 ff89 	bl	800889c <ff_wtoupper>
 800698a:	4603      	mov	r3, r0
 800698c:	461c      	mov	r4, r3
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	617a      	str	r2, [r7, #20]
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f001 ff7d 	bl	800889c <ff_wtoupper>
 80069a2:	4603      	mov	r3, r0
 80069a4:	429c      	cmp	r4, r3
 80069a6:	d001      	beq.n	80069ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80069a8:	2300      	movs	r3, #0
 80069aa:	e022      	b.n	80069f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 80069ac:	89bb      	ldrh	r3, [r7, #12]
 80069ae:	81fb      	strh	r3, [r7, #14]
 80069b0:	e006      	b.n	80069c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80069b2:	89bb      	ldrh	r3, [r7, #12]
 80069b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d001      	beq.n	80069c0 <cmp_lfn+0xa0>
 80069bc:	2300      	movs	r3, #0
 80069be:	e018      	b.n	80069f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	3301      	adds	r3, #1
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b0c      	cmp	r3, #12
 80069ca:	d9c8      	bls.n	800695e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <cmp_lfn+0xd0>
 80069d8:	89fb      	ldrh	r3, [r7, #14]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d008      	beq.n	80069f0 <cmp_lfn+0xd0>
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <cmp_lfn+0xd0>
 80069ec:	2300      	movs	r3, #0
 80069ee:	e000      	b.n	80069f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80069f0:	2301      	movs	r3, #1
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd90      	pop	{r4, r7, pc}
 80069fa:	bf00      	nop
 80069fc:	0800958c 	.word	0x0800958c

08006a00 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	460b      	mov	r3, r1
 8006a10:	71fb      	strb	r3, [r7, #7]
 8006a12:	4613      	mov	r3, r2
 8006a14:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	330d      	adds	r3, #13
 8006a1a:	79ba      	ldrb	r2, [r7, #6]
 8006a1c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	330b      	adds	r3, #11
 8006a22:	220f      	movs	r2, #15
 8006a24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	331a      	adds	r3, #26
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fe ff38 	bl	80058aa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	1e5a      	subs	r2, r3, #1
 8006a3e:	4613      	mov	r3, r2
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	82fb      	strh	r3, [r7, #22]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006a52:	8afb      	ldrh	r3, [r7, #22]
 8006a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d007      	beq.n	8006a6c <put_lfn+0x6c>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	61fa      	str	r2, [r7, #28]
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a6c:	4a17      	ldr	r2, [pc, #92]	; (8006acc <put_lfn+0xcc>)
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	4413      	add	r3, r2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4413      	add	r3, r2
 8006a7a:	8afa      	ldrh	r2, [r7, #22]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe ff13 	bl	80058aa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006a84:	8afb      	ldrh	r3, [r7, #22]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d102      	bne.n	8006a90 <put_lfn+0x90>
 8006a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	3301      	adds	r3, #1
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b0c      	cmp	r3, #12
 8006a9a:	d9da      	bls.n	8006a52 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006a9c:	8afb      	ldrh	r3, [r7, #22]
 8006a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d006      	beq.n	8006ab4 <put_lfn+0xb4>
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <put_lfn+0xbc>
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	79fa      	ldrb	r2, [r7, #7]
 8006ac0:	701a      	strb	r2, [r3, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	3720      	adds	r7, #32
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	0800958c 	.word	0x0800958c

08006ad0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08c      	sub	sp, #48	; 0x30
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006ade:	220b      	movs	r2, #11
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7fe ff28 	bl	8005938 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d92b      	bls.n	8006b46 <gen_numname+0x76>
		sr = seq;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006af2:	e022      	b.n	8006b3a <gen_numname+0x6a>
			wc = *lfn++;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	1c9a      	adds	r2, r3, #2
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006afe:	2300      	movs	r3, #0
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b02:	e017      	b.n	8006b34 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	005a      	lsls	r2, r3, #1
 8006b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	4413      	add	r3, r2
 8006b10:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <gen_numname+0x5e>
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006b28:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006b2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	3301      	adds	r3, #1
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d9e4      	bls.n	8006b04 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1d8      	bne.n	8006af4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006b46:	2307      	movs	r3, #7
 8006b48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	3330      	adds	r3, #48	; 0x30
 8006b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b5e:	2b39      	cmp	r3, #57	; 0x39
 8006b60:	d904      	bls.n	8006b6c <gen_numname+0x9c>
 8006b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b66:	3307      	adds	r3, #7
 8006b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	1e5a      	subs	r2, r3, #1
 8006b70:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b72:	3330      	adds	r3, #48	; 0x30
 8006b74:	443b      	add	r3, r7
 8006b76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1df      	bne.n	8006b4a <gen_numname+0x7a>
	ns[i] = '~';
 8006b8a:	f107 0214 	add.w	r2, r7, #20
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	4413      	add	r3, r2
 8006b92:	227e      	movs	r2, #126	; 0x7e
 8006b94:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b96:	2300      	movs	r3, #0
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9a:	e002      	b.n	8006ba2 <gen_numname+0xd2>
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d205      	bcs.n	8006bb6 <gen_numname+0xe6>
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	d1f2      	bne.n	8006b9c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	2b07      	cmp	r3, #7
 8006bba:	d807      	bhi.n	8006bcc <gen_numname+0xfc>
 8006bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	62ba      	str	r2, [r7, #40]	; 0x28
 8006bc2:	3330      	adds	r3, #48	; 0x30
 8006bc4:	443b      	add	r3, r7
 8006bc6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006bca:	e000      	b.n	8006bce <gen_numname+0xfe>
 8006bcc:	2120      	movs	r1, #32
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	627a      	str	r2, [r7, #36]	; 0x24
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	460a      	mov	r2, r1
 8006bda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	2b07      	cmp	r3, #7
 8006be0:	d9e9      	bls.n	8006bb6 <gen_numname+0xe6>
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	3730      	adds	r7, #48	; 0x30
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006bf8:	230b      	movs	r3, #11
 8006bfa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	0852      	lsrs	r2, r2, #1
 8006c02:	01db      	lsls	r3, r3, #7
 8006c04:	4313      	orrs	r3, r2
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	1c59      	adds	r1, r3, #1
 8006c0c:	6079      	str	r1, [r7, #4]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	4413      	add	r3, r2
 8006c12:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	60bb      	str	r3, [r7, #8]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1ed      	bne.n	8006bfc <sum_sfn+0x10>
	return sum;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff fc88 	bl	8006554 <dir_sdi>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <dir_find+0x24>
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	e0a9      	b.n	8006da6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c52:	23ff      	movs	r3, #255	; 0xff
 8006c54:	753b      	strb	r3, [r7, #20]
 8006c56:	7d3b      	ldrb	r3, [r7, #20]
 8006c58:	757b      	strb	r3, [r7, #21]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6938      	ldr	r0, [r7, #16]
 8006c6a:	f7ff f893 	bl	8005d94 <move_window>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f040 8090 	bne.w	8006d9a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c82:	7dbb      	ldrb	r3, [r7, #22]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <dir_find+0x60>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	75fb      	strb	r3, [r7, #23]
 8006c8c:	e08a      	b.n	8006da4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	330b      	adds	r3, #11
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c9a:	73fb      	strb	r3, [r7, #15]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ca0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006ca2:	7dbb      	ldrb	r3, [r7, #22]
 8006ca4:	2be5      	cmp	r3, #229	; 0xe5
 8006ca6:	d007      	beq.n	8006cb8 <dir_find+0x8a>
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <dir_find+0x98>
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	2b0f      	cmp	r3, #15
 8006cb6:	d006      	beq.n	8006cc6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006cb8:	23ff      	movs	r3, #255	; 0xff
 8006cba:	757b      	strb	r3, [r7, #21]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cc4:	e05e      	b.n	8006d84 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d136      	bne.n	8006d3a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d154      	bne.n	8006d84 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006cda:	7dbb      	ldrb	r3, [r7, #22]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00d      	beq.n	8006d00 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	7b5b      	ldrb	r3, [r3, #13]
 8006cea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006cec:	7dbb      	ldrb	r3, [r7, #22]
 8006cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf2:	75bb      	strb	r3, [r7, #22]
 8006cf4:	7dbb      	ldrb	r3, [r7, #22]
 8006cf6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006d00:	7dba      	ldrb	r2, [r7, #22]
 8006d02:	7d7b      	ldrb	r3, [r7, #21]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d115      	bne.n	8006d34 <dir_find+0x106>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	330d      	adds	r3, #13
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	7d3a      	ldrb	r2, [r7, #20]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d10e      	bne.n	8006d34 <dir_find+0x106>
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4610      	mov	r0, r2
 8006d22:	f7ff fdfd 	bl	8006920 <cmp_lfn>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <dir_find+0x106>
 8006d2c:	7d7b      	ldrb	r3, [r7, #21]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	e000      	b.n	8006d36 <dir_find+0x108>
 8006d34:	23ff      	movs	r3, #255	; 0xff
 8006d36:	757b      	strb	r3, [r7, #21]
 8006d38:	e024      	b.n	8006d84 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d3a:	7d7b      	ldrb	r3, [r7, #21]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <dir_find+0x126>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff ff51 	bl	8006bec <sum_sfn>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	7d3b      	ldrb	r3, [r7, #20]
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d024      	beq.n	8006d9e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <dir_find+0x14a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a18      	ldr	r0, [r3, #32]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3324      	adds	r3, #36	; 0x24
 8006d6a:	220b      	movs	r2, #11
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	f7fe fe1f 	bl	80059b0 <mem_cmp>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d014      	beq.n	8006da2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d78:	23ff      	movs	r3, #255	; 0xff
 8006d7a:	757b      	strb	r3, [r7, #21]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d84:	2100      	movs	r1, #0
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fc6d 	bl	8006666 <dir_next>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f43f af65 	beq.w	8006c62 <dir_find+0x34>
 8006d98:	e004      	b.n	8006da4 <dir_find+0x176>
		if (res != FR_OK) break;
 8006d9a:	bf00      	nop
 8006d9c:	e002      	b.n	8006da4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006da2:	bf00      	nop

	return res;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	; 0x30
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dc4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <dir_register+0x20>
 8006dcc:	2306      	movs	r3, #6
 8006dce:	e0e0      	b.n	8006f92 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd4:	e002      	b.n	8006ddc <dir_register+0x2c>
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	3301      	adds	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1f4      	bne.n	8006dd6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006df2:	f107 030c 	add.w	r3, r7, #12
 8006df6:	220c      	movs	r2, #12
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe fd9d 	bl	8005938 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d032      	beq.n	8006e6e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2240      	movs	r2, #64	; 0x40
 8006e0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006e10:	2301      	movs	r3, #1
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e14:	e016      	b.n	8006e44 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	f107 010c 	add.w	r1, r7, #12
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	f7ff fe53 	bl	8006ad0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff feff 	bl	8006c2e <dir_find>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	3301      	adds	r3, #1
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	2b63      	cmp	r3, #99	; 0x63
 8006e48:	d9e5      	bls.n	8006e16 <dir_register+0x66>
 8006e4a:	e000      	b.n	8006e4e <dir_register+0x9e>
			if (res != FR_OK) break;
 8006e4c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	2b64      	cmp	r3, #100	; 0x64
 8006e52:	d101      	bne.n	8006e58 <dir_register+0xa8>
 8006e54:	2307      	movs	r3, #7
 8006e56:	e09c      	b.n	8006f92 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006e58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d002      	beq.n	8006e66 <dir_register+0xb6>
 8006e60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e64:	e095      	b.n	8006f92 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006e66:	7dfa      	ldrb	r2, [r7, #23]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <dir_register+0xd8>
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	4a47      	ldr	r2, [pc, #284]	; (8006f9c <dir_register+0x1ec>)
 8006e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e82:	089b      	lsrs	r3, r3, #2
 8006e84:	3301      	adds	r3, #1
 8006e86:	e000      	b.n	8006e8a <dir_register+0xda>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006e8c:	6a39      	ldr	r1, [r7, #32]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff fcbf 	bl	8006812 <dir_alloc>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d148      	bne.n	8006f34 <dir_register+0x184>
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	623b      	str	r3, [r7, #32]
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d042      	beq.n	8006f34 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695a      	ldr	r2, [r3, #20]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	015b      	lsls	r3, r3, #5
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff fb4a 	bl	8006554 <dir_sdi>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d132      	bne.n	8006f34 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3324      	adds	r3, #36	; 0x24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff fe8a 	bl	8006bec <sum_sfn>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	69f8      	ldr	r0, [r7, #28]
 8006ee4:	f7fe ff56 	bl	8005d94 <move_window>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006eee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d11d      	bne.n	8006f32 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	6918      	ldr	r0, [r3, #16]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a19      	ldr	r1, [r3, #32]
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	7efb      	ldrb	r3, [r7, #27]
 8006f04:	f7ff fd7c 	bl	8006a00 <put_lfn>
				fs->wflag = 1;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006f0e:	2100      	movs	r1, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff fba8 	bl	8006666 <dir_next>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d107      	bne.n	8006f34 <dir_register+0x184>
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	623b      	str	r3, [r7, #32]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1d5      	bne.n	8006edc <dir_register+0x12c>
 8006f30:	e000      	b.n	8006f34 <dir_register+0x184>
				if (res != FR_OK) break;
 8006f32:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d128      	bne.n	8006f8e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	4619      	mov	r1, r3
 8006f42:	69f8      	ldr	r0, [r7, #28]
 8006f44:	f7fe ff26 	bl	8005d94 <move_window>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d11b      	bne.n	8006f8e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fd0b 	bl	800597a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a18      	ldr	r0, [r3, #32]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3324      	adds	r3, #36	; 0x24
 8006f6c:	220b      	movs	r2, #11
 8006f6e:	4619      	mov	r1, r3
 8006f70:	f7fe fce2 	bl	8005938 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	f002 0218 	and.w	r2, r2, #24
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3730      	adds	r7, #48	; 0x30
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	4ec4ec4f 	.word	0x4ec4ec4f

08006fa0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	61ba      	str	r2, [r7, #24]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4413      	add	r3, r2
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006fce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fd0:	2b1f      	cmp	r3, #31
 8006fd2:	d940      	bls.n	8007056 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006fd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fd6:	2b2f      	cmp	r3, #47	; 0x2f
 8006fd8:	d006      	beq.n	8006fe8 <create_name+0x48>
 8006fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fdc:	2b5c      	cmp	r3, #92	; 0x5c
 8006fde:	d110      	bne.n	8007002 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006fe0:	e002      	b.n	8006fe8 <create_name+0x48>
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	4413      	add	r3, r2
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b2f      	cmp	r3, #47	; 0x2f
 8006ff2:	d0f6      	beq.n	8006fe2 <create_name+0x42>
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8006ffe:	d0f0      	beq.n	8006fe2 <create_name+0x42>
			break;
 8007000:	e02a      	b.n	8007058 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2bfe      	cmp	r3, #254	; 0xfe
 8007006:	d901      	bls.n	800700c <create_name+0x6c>
 8007008:	2306      	movs	r3, #6
 800700a:	e17d      	b.n	8007308 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800700c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800700e:	b2db      	uxtb	r3, r3
 8007010:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007014:	2101      	movs	r1, #1
 8007016:	4618      	mov	r0, r3
 8007018:	f001 fc04 	bl	8008824 <ff_convert>
 800701c:	4603      	mov	r3, r0
 800701e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <create_name+0x8a>
 8007026:	2306      	movs	r3, #6
 8007028:	e16e      	b.n	8007308 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800702a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800702c:	2b7f      	cmp	r3, #127	; 0x7f
 800702e:	d809      	bhi.n	8007044 <create_name+0xa4>
 8007030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007032:	4619      	mov	r1, r3
 8007034:	488d      	ldr	r0, [pc, #564]	; (800726c <create_name+0x2cc>)
 8007036:	f7fe fce2 	bl	80059fe <chk_chr>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <create_name+0xa4>
 8007040:	2306      	movs	r3, #6
 8007042:	e161      	b.n	8007308 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	617a      	str	r2, [r7, #20]
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007052:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007054:	e7b4      	b.n	8006fc0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007056:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	441a      	add	r2, r3
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007064:	2b1f      	cmp	r3, #31
 8007066:	d801      	bhi.n	800706c <create_name+0xcc>
 8007068:	2304      	movs	r3, #4
 800706a:	e000      	b.n	800706e <create_name+0xce>
 800706c:	2300      	movs	r3, #0
 800706e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007072:	e011      	b.n	8007098 <create_name+0xf8>
		w = lfn[di - 1];
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800707a:	3b01      	subs	r3, #1
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007088:	2b20      	cmp	r3, #32
 800708a:	d002      	beq.n	8007092 <create_name+0xf2>
 800708c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800708e:	2b2e      	cmp	r3, #46	; 0x2e
 8007090:	d106      	bne.n	80070a0 <create_name+0x100>
		di--;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	3b01      	subs	r3, #1
 8007096:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1ea      	bne.n	8007074 <create_name+0xd4>
 800709e:	e000      	b.n	80070a2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80070a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <create_name+0x118>
 80070b4:	2306      	movs	r3, #6
 80070b6:	e127      	b.n	8007308 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3324      	adds	r3, #36	; 0x24
 80070bc:	220b      	movs	r2, #11
 80070be:	2120      	movs	r1, #32
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fc5a 	bl	800597a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	e002      	b.n	80070d2 <create_name+0x132>
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	3301      	adds	r3, #1
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d0f5      	beq.n	80070cc <create_name+0x12c>
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	2b2e      	cmp	r3, #46	; 0x2e
 80070ec:	d0ee      	beq.n	80070cc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <create_name+0x168>
 80070f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070f8:	f043 0303 	orr.w	r3, r3, #3
 80070fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007100:	e002      	b.n	8007108 <create_name+0x168>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	3b01      	subs	r3, #1
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d009      	beq.n	8007122 <create_name+0x182>
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007114:	3b01      	subs	r3, #1
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	2b2e      	cmp	r3, #46	; 0x2e
 8007120:	d1ef      	bne.n	8007102 <create_name+0x162>

	i = b = 0; ni = 8;
 8007122:	2300      	movs	r3, #0
 8007124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007128:	2300      	movs	r3, #0
 800712a:	623b      	str	r3, [r7, #32]
 800712c:	2308      	movs	r3, #8
 800712e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	61ba      	str	r2, [r7, #24]
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 8090 	beq.w	8007268 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800714a:	2b20      	cmp	r3, #32
 800714c:	d006      	beq.n	800715c <create_name+0x1bc>
 800714e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007150:	2b2e      	cmp	r3, #46	; 0x2e
 8007152:	d10a      	bne.n	800716a <create_name+0x1ca>
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	429a      	cmp	r2, r3
 800715a:	d006      	beq.n	800716a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800715c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007160:	f043 0303 	orr.w	r3, r3, #3
 8007164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007168:	e07d      	b.n	8007266 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800716a:	6a3a      	ldr	r2, [r7, #32]
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	429a      	cmp	r2, r3
 8007170:	d203      	bcs.n	800717a <create_name+0x1da>
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	429a      	cmp	r2, r3
 8007178:	d123      	bne.n	80071c2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b0b      	cmp	r3, #11
 800717e:	d106      	bne.n	800718e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007184:	f043 0303 	orr.w	r3, r3, #3
 8007188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800718c:	e075      	b.n	800727a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	429a      	cmp	r2, r3
 8007194:	d005      	beq.n	80071a2 <create_name+0x202>
 8007196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800719a:	f043 0303 	orr.w	r3, r3, #3
 800719e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d866      	bhi.n	8007278 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	2308      	movs	r3, #8
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	230b      	movs	r3, #11
 80071b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80071b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071c0:	e051      	b.n	8007266 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80071c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c4:	2b7f      	cmp	r3, #127	; 0x7f
 80071c6:	d914      	bls.n	80071f2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80071c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ca:	2100      	movs	r1, #0
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fb29 	bl	8008824 <ff_convert>
 80071d2:	4603      	mov	r3, r0
 80071d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80071d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <create_name+0x246>
 80071dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071de:	3b80      	subs	r3, #128	; 0x80
 80071e0:	4a23      	ldr	r2, [pc, #140]	; (8007270 <create_name+0x2d0>)
 80071e2:	5cd3      	ldrb	r3, [r2, r3]
 80071e4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80071e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ea:	f043 0302 	orr.w	r3, r3, #2
 80071ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80071f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <create_name+0x268>
 80071f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071fa:	4619      	mov	r1, r3
 80071fc:	481d      	ldr	r0, [pc, #116]	; (8007274 <create_name+0x2d4>)
 80071fe:	f7fe fbfe 	bl	80059fe <chk_chr>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007208:	235f      	movs	r3, #95	; 0x5f
 800720a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800720c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007210:	f043 0303 	orr.w	r3, r3, #3
 8007214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007218:	e01b      	b.n	8007252 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800721a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d909      	bls.n	8007234 <create_name+0x294>
 8007220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007222:	2b5a      	cmp	r3, #90	; 0x5a
 8007224:	d806      	bhi.n	8007234 <create_name+0x294>
					b |= 2;
 8007226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800722a:	f043 0302 	orr.w	r3, r3, #2
 800722e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007232:	e00e      	b.n	8007252 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007236:	2b60      	cmp	r3, #96	; 0x60
 8007238:	d90b      	bls.n	8007252 <create_name+0x2b2>
 800723a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800723c:	2b7a      	cmp	r3, #122	; 0x7a
 800723e:	d808      	bhi.n	8007252 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007240:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800724c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800724e:	3b20      	subs	r3, #32
 8007250:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	623a      	str	r2, [r7, #32]
 8007258:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800725a:	b2d1      	uxtb	r1, r2
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4413      	add	r3, r2
 8007260:	460a      	mov	r2, r1
 8007262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007266:	e763      	b.n	8007130 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007268:	bf00      	nop
 800726a:	e006      	b.n	800727a <create_name+0x2da>
 800726c:	08009454 	.word	0x08009454
 8007270:	0800950c 	.word	0x0800950c
 8007274:	08009460 	.word	0x08009460
			if (si > di) break;			/* No extension */
 8007278:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007280:	2be5      	cmp	r3, #229	; 0xe5
 8007282:	d103      	bne.n	800728c <create_name+0x2ec>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2205      	movs	r2, #5
 8007288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	2b08      	cmp	r3, #8
 8007290:	d104      	bne.n	800729c <create_name+0x2fc>
 8007292:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800729c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b0c      	cmp	r3, #12
 80072a6:	d005      	beq.n	80072b4 <create_name+0x314>
 80072a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072ac:	f003 0303 	and.w	r3, r3, #3
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d105      	bne.n	80072c0 <create_name+0x320>
 80072b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072b8:	f043 0302 	orr.w	r3, r3, #2
 80072bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80072c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d117      	bne.n	80072fc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80072cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d105      	bne.n	80072e4 <create_name+0x344>
 80072d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072dc:	f043 0310 	orr.w	r3, r3, #16
 80072e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80072e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072e8:	f003 030c 	and.w	r3, r3, #12
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d105      	bne.n	80072fc <create_name+0x35c>
 80072f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f4:	f043 0308 	orr.w	r3, r3, #8
 80072f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007302:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007306:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	; 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007324:	e002      	b.n	800732c <follow_path+0x1c>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b2f      	cmp	r3, #47	; 0x2f
 8007332:	d0f8      	beq.n	8007326 <follow_path+0x16>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b5c      	cmp	r3, #92	; 0x5c
 800733a:	d0f4      	beq.n	8007326 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2200      	movs	r2, #0
 8007340:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b1f      	cmp	r3, #31
 8007348:	d80a      	bhi.n	8007360 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2280      	movs	r2, #128	; 0x80
 800734e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007352:	2100      	movs	r1, #0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff f8fd 	bl	8006554 <dir_sdi>
 800735a:	4603      	mov	r3, r0
 800735c:	75fb      	strb	r3, [r7, #23]
 800735e:	e048      	b.n	80073f2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007360:	463b      	mov	r3, r7
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fe1b 	bl	8006fa0 <create_name>
 800736a:	4603      	mov	r3, r0
 800736c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d139      	bne.n	80073e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff fc5a 	bl	8006c2e <dir_find>
 800737a:	4603      	mov	r3, r0
 800737c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007384:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	2b04      	cmp	r3, #4
 8007390:	d12c      	bne.n	80073ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d127      	bne.n	80073ec <follow_path+0xdc>
 800739c:	2305      	movs	r3, #5
 800739e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80073a0:	e024      	b.n	80073ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073a2:	7afb      	ldrb	r3, [r7, #11]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d121      	bne.n	80073f0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	799b      	ldrb	r3, [r3, #6]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <follow_path+0xae>
				res = FR_NO_PATH; break;
 80073b8:	2305      	movs	r3, #5
 80073ba:	75fb      	strb	r3, [r7, #23]
 80073bc:	e019      	b.n	80073f2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	8992      	ldrh	r2, [r2, #12]
 80073cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80073d0:	fb00 f202 	mul.w	r2, r0, r2
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	440b      	add	r3, r1
 80073d8:	4619      	mov	r1, r3
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff fa60 	bl	80068a0 <ld_clust>
 80073e0:	4602      	mov	r2, r0
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073e6:	e7bb      	b.n	8007360 <follow_path+0x50>
			if (res != FR_OK) break;
 80073e8:	bf00      	nop
 80073ea:	e002      	b.n	80073f2 <follow_path+0xe2>
				break;
 80073ec:	bf00      	nop
 80073ee:	e000      	b.n	80073f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073f0:	bf00      	nop
			}
		}
	}

	return res;
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007404:	f04f 33ff 	mov.w	r3, #4294967295
 8007408:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d031      	beq.n	8007476 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e002      	b.n	8007420 <get_ldnumber+0x24>
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	3301      	adds	r3, #1
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b1f      	cmp	r3, #31
 8007426:	d903      	bls.n	8007430 <get_ldnumber+0x34>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b3a      	cmp	r3, #58	; 0x3a
 800742e:	d1f4      	bne.n	800741a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b3a      	cmp	r3, #58	; 0x3a
 8007436:	d11c      	bne.n	8007472 <get_ldnumber+0x76>
			tp = *path;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	60fa      	str	r2, [r7, #12]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	3b30      	subs	r3, #48	; 0x30
 8007448:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b09      	cmp	r3, #9
 800744e:	d80e      	bhi.n	800746e <get_ldnumber+0x72>
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	429a      	cmp	r2, r3
 8007456:	d10a      	bne.n	800746e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d107      	bne.n	800746e <get_ldnumber+0x72>
					vol = (int)i;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	3301      	adds	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	e002      	b.n	8007478 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007472:	2300      	movs	r3, #0
 8007474:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007476:	693b      	ldr	r3, [r7, #16]
}
 8007478:	4618      	mov	r0, r3
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	70da      	strb	r2, [r3, #3]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f04f 32ff 	mov.w	r2, #4294967295
 800749a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fe fc78 	bl	8005d94 <move_window>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <check_fs+0x2a>
 80074aa:	2304      	movs	r3, #4
 80074ac:	e038      	b.n	8007520 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3338      	adds	r3, #56	; 0x38
 80074b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe f9bc 	bl	8005834 <ld_word>
 80074bc:	4603      	mov	r3, r0
 80074be:	461a      	mov	r2, r3
 80074c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d001      	beq.n	80074cc <check_fs+0x48>
 80074c8:	2303      	movs	r3, #3
 80074ca:	e029      	b.n	8007520 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074d2:	2be9      	cmp	r3, #233	; 0xe9
 80074d4:	d009      	beq.n	80074ea <check_fs+0x66>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074dc:	2beb      	cmp	r3, #235	; 0xeb
 80074de:	d11e      	bne.n	800751e <check_fs+0x9a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80074e6:	2b90      	cmp	r3, #144	; 0x90
 80074e8:	d119      	bne.n	800751e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3338      	adds	r3, #56	; 0x38
 80074ee:	3336      	adds	r3, #54	; 0x36
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe f9b7 	bl	8005864 <ld_dword>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80074fc:	4a0a      	ldr	r2, [pc, #40]	; (8007528 <check_fs+0xa4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d101      	bne.n	8007506 <check_fs+0x82>
 8007502:	2300      	movs	r3, #0
 8007504:	e00c      	b.n	8007520 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3338      	adds	r3, #56	; 0x38
 800750a:	3352      	adds	r3, #82	; 0x52
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe f9a9 	bl	8005864 <ld_dword>
 8007512:	4603      	mov	r3, r0
 8007514:	4a05      	ldr	r2, [pc, #20]	; (800752c <check_fs+0xa8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d101      	bne.n	800751e <check_fs+0x9a>
 800751a:	2300      	movs	r3, #0
 800751c:	e000      	b.n	8007520 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800751e:	2302      	movs	r3, #2
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	00544146 	.word	0x00544146
 800752c:	33544146 	.word	0x33544146

08007530 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b096      	sub	sp, #88	; 0x58
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff ff59 	bl	80073fc <get_ldnumber>
 800754a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	2b00      	cmp	r3, #0
 8007550:	da01      	bge.n	8007556 <find_volume+0x26>
 8007552:	230b      	movs	r3, #11
 8007554:	e265      	b.n	8007a22 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007556:	4a9f      	ldr	r2, [pc, #636]	; (80077d4 <find_volume+0x2a4>)
 8007558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <find_volume+0x3a>
 8007566:	230c      	movs	r3, #12
 8007568:	e25b      	b.n	8007a22 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800756e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01a      	beq.n	80075b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe f8b7 	bl	80056f8 <disk_status>
 800758a:	4603      	mov	r3, r0
 800758c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007590:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10c      	bne.n	80075b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <find_volume+0x82>
 80075a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80075ae:	230a      	movs	r3, #10
 80075b0:	e237      	b.n	8007a22 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80075b2:	2300      	movs	r3, #0
 80075b4:	e235      	b.n	8007a22 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80075bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe f8af 	bl	800572c <disk_initialize>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80075d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80075e0:	2303      	movs	r3, #3
 80075e2:	e21e      	b.n	8007a22 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <find_volume+0xca>
 80075ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80075f6:	230a      	movs	r3, #10
 80075f8:	e213      	b.n	8007a22 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	7858      	ldrb	r0, [r3, #1]
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	330c      	adds	r3, #12
 8007602:	461a      	mov	r2, r3
 8007604:	2102      	movs	r1, #2
 8007606:	f7fe f8f7 	bl	80057f8 <disk_ioctl>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <find_volume+0xe4>
 8007610:	2301      	movs	r3, #1
 8007612:	e206      	b.n	8007a22 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	899b      	ldrh	r3, [r3, #12]
 8007618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761c:	d80d      	bhi.n	800763a <find_volume+0x10a>
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	899b      	ldrh	r3, [r3, #12]
 8007622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007626:	d308      	bcc.n	800763a <find_volume+0x10a>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	899b      	ldrh	r3, [r3, #12]
 800762c:	461a      	mov	r2, r3
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	899b      	ldrh	r3, [r3, #12]
 8007632:	3b01      	subs	r3, #1
 8007634:	4013      	ands	r3, r2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <find_volume+0x10e>
 800763a:	2301      	movs	r3, #1
 800763c:	e1f1      	b.n	8007a22 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007642:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007646:	f7ff ff1d 	bl	8007484 <check_fs>
 800764a:	4603      	mov	r3, r0
 800764c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007654:	2b02      	cmp	r3, #2
 8007656:	d149      	bne.n	80076ec <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007658:	2300      	movs	r3, #0
 800765a:	643b      	str	r3, [r7, #64]	; 0x40
 800765c:	e01e      	b.n	800769c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800766c:	4413      	add	r3, r2
 800766e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	3304      	adds	r3, #4
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d006      	beq.n	8007688 <find_volume+0x158>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	3308      	adds	r3, #8
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe f8f0 	bl	8005864 <ld_dword>
 8007684:	4602      	mov	r2, r0
 8007686:	e000      	b.n	800768a <find_volume+0x15a>
 8007688:	2200      	movs	r2, #0
 800768a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	3358      	adds	r3, #88	; 0x58
 8007690:	443b      	add	r3, r7
 8007692:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007698:	3301      	adds	r3, #1
 800769a:	643b      	str	r3, [r7, #64]	; 0x40
 800769c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d9dd      	bls.n	800765e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80076a2:	2300      	movs	r3, #0
 80076a4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <find_volume+0x182>
 80076ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ae:	3b01      	subs	r3, #1
 80076b0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80076b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	3358      	adds	r3, #88	; 0x58
 80076b8:	443b      	add	r3, r7
 80076ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80076be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80076c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <find_volume+0x1a2>
 80076c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076ca:	f7ff fedb 	bl	8007484 <check_fs>
 80076ce:	4603      	mov	r3, r0
 80076d0:	e000      	b.n	80076d4 <find_volume+0x1a4>
 80076d2:	2303      	movs	r3, #3
 80076d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80076d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d905      	bls.n	80076ec <find_volume+0x1bc>
 80076e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e2:	3301      	adds	r3, #1
 80076e4:	643b      	str	r3, [r7, #64]	; 0x40
 80076e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d9e2      	bls.n	80076b2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80076ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d101      	bne.n	80076f8 <find_volume+0x1c8>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e194      	b.n	8007a22 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80076f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d901      	bls.n	8007704 <find_volume+0x1d4>
 8007700:	230d      	movs	r3, #13
 8007702:	e18e      	b.n	8007a22 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	3338      	adds	r3, #56	; 0x38
 8007708:	330b      	adds	r3, #11
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe f892 	bl	8005834 <ld_word>
 8007710:	4603      	mov	r3, r0
 8007712:	461a      	mov	r2, r3
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	899b      	ldrh	r3, [r3, #12]
 8007718:	429a      	cmp	r2, r3
 800771a:	d001      	beq.n	8007720 <find_volume+0x1f0>
 800771c:	230d      	movs	r3, #13
 800771e:	e180      	b.n	8007a22 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	3338      	adds	r3, #56	; 0x38
 8007724:	3316      	adds	r3, #22
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe f884 	bl	8005834 <ld_word>
 800772c:	4603      	mov	r3, r0
 800772e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <find_volume+0x214>
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	3338      	adds	r3, #56	; 0x38
 800773a:	3324      	adds	r3, #36	; 0x24
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe f891 	bl	8005864 <ld_dword>
 8007742:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007748:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	789b      	ldrb	r3, [r3, #2]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d005      	beq.n	8007768 <find_volume+0x238>
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	789b      	ldrb	r3, [r3, #2]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d001      	beq.n	8007768 <find_volume+0x238>
 8007764:	230d      	movs	r3, #13
 8007766:	e15c      	b.n	8007a22 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	789b      	ldrb	r3, [r3, #2]
 800776c:	461a      	mov	r2, r3
 800776e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007770:	fb02 f303 	mul.w	r3, r2, r3
 8007774:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800777c:	b29a      	uxth	r2, r3
 800777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007780:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	895b      	ldrh	r3, [r3, #10]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d008      	beq.n	800779c <find_volume+0x26c>
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	895b      	ldrh	r3, [r3, #10]
 800778e:	461a      	mov	r2, r3
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	895b      	ldrh	r3, [r3, #10]
 8007794:	3b01      	subs	r3, #1
 8007796:	4013      	ands	r3, r2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <find_volume+0x270>
 800779c:	230d      	movs	r3, #13
 800779e:	e140      	b.n	8007a22 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	3338      	adds	r3, #56	; 0x38
 80077a4:	3311      	adds	r3, #17
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe f844 	bl	8005834 <ld_word>
 80077ac:	4603      	mov	r3, r0
 80077ae:	461a      	mov	r2, r3
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	891b      	ldrh	r3, [r3, #8]
 80077b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ba:	8992      	ldrh	r2, [r2, #12]
 80077bc:	0952      	lsrs	r2, r2, #5
 80077be:	b292      	uxth	r2, r2
 80077c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80077c4:	fb01 f202 	mul.w	r2, r1, r2
 80077c8:	1a9b      	subs	r3, r3, r2
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <find_volume+0x2a8>
 80077d0:	230d      	movs	r3, #13
 80077d2:	e126      	b.n	8007a22 <find_volume+0x4f2>
 80077d4:	20002624 	.word	0x20002624

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	3338      	adds	r3, #56	; 0x38
 80077dc:	3313      	adds	r3, #19
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe f828 	bl	8005834 <ld_word>
 80077e4:	4603      	mov	r3, r0
 80077e6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80077e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <find_volume+0x2cc>
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	3338      	adds	r3, #56	; 0x38
 80077f2:	3320      	adds	r3, #32
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fe f835 	bl	8005864 <ld_dword>
 80077fa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fe:	3338      	adds	r3, #56	; 0x38
 8007800:	330e      	adds	r3, #14
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe f816 	bl	8005834 <ld_word>
 8007808:	4603      	mov	r3, r0
 800780a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800780c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <find_volume+0x2e6>
 8007812:	230d      	movs	r3, #13
 8007814:	e105      	b.n	8007a22 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007816:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781a:	4413      	add	r3, r2
 800781c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800781e:	8911      	ldrh	r1, [r2, #8]
 8007820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007822:	8992      	ldrh	r2, [r2, #12]
 8007824:	0952      	lsrs	r2, r2, #5
 8007826:	b292      	uxth	r2, r2
 8007828:	fbb1 f2f2 	udiv	r2, r1, r2
 800782c:	b292      	uxth	r2, r2
 800782e:	4413      	add	r3, r2
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	429a      	cmp	r2, r3
 8007838:	d201      	bcs.n	800783e <find_volume+0x30e>
 800783a:	230d      	movs	r3, #13
 800783c:	e0f1      	b.n	8007a22 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800783e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007846:	8952      	ldrh	r2, [r2, #10]
 8007848:	fbb3 f3f2 	udiv	r3, r3, r2
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <find_volume+0x328>
 8007854:	230d      	movs	r3, #13
 8007856:	e0e4      	b.n	8007a22 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007858:	2303      	movs	r3, #3
 800785a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007864:	4293      	cmp	r3, r2
 8007866:	d802      	bhi.n	800786e <find_volume+0x33e>
 8007868:	2302      	movs	r3, #2
 800786a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007874:	4293      	cmp	r3, r2
 8007876:	d802      	bhi.n	800787e <find_volume+0x34e>
 8007878:	2301      	movs	r3, #1
 800787a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	1c9a      	adds	r2, r3, #2
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800788a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800788c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800788e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007890:	441a      	add	r2, r3
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007896:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	441a      	add	r2, r3
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80078a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d11e      	bne.n	80078e6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	3338      	adds	r3, #56	; 0x38
 80078ac:	332a      	adds	r3, #42	; 0x2a
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fd ffc0 	bl	8005834 <ld_word>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <find_volume+0x38e>
 80078ba:	230d      	movs	r3, #13
 80078bc:	e0b1      	b.n	8007a22 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	891b      	ldrh	r3, [r3, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <find_volume+0x39a>
 80078c6:	230d      	movs	r3, #13
 80078c8:	e0ab      	b.n	8007a22 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	3338      	adds	r3, #56	; 0x38
 80078ce:	332c      	adds	r3, #44	; 0x2c
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fd ffc7 	bl	8005864 <ld_dword>
 80078d6:	4602      	mov	r2, r0
 80078d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	647b      	str	r3, [r7, #68]	; 0x44
 80078e4:	e01f      	b.n	8007926 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	891b      	ldrh	r3, [r3, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <find_volume+0x3c2>
 80078ee:	230d      	movs	r3, #13
 80078f0:	e097      	b.n	8007a22 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f8:	441a      	add	r2, r3
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80078fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007902:	2b02      	cmp	r3, #2
 8007904:	d103      	bne.n	800790e <find_volume+0x3de>
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	e00a      	b.n	8007924 <find_volume+0x3f4>
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	69da      	ldr	r2, [r3, #28]
 8007912:	4613      	mov	r3, r2
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4413      	add	r3, r2
 8007918:	085a      	lsrs	r2, r3, #1
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007924:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	6a1a      	ldr	r2, [r3, #32]
 800792a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792c:	899b      	ldrh	r3, [r3, #12]
 800792e:	4619      	mov	r1, r3
 8007930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007932:	440b      	add	r3, r1
 8007934:	3b01      	subs	r3, #1
 8007936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007938:	8989      	ldrh	r1, [r1, #12]
 800793a:	fbb3 f3f1 	udiv	r3, r3, r1
 800793e:	429a      	cmp	r2, r3
 8007940:	d201      	bcs.n	8007946 <find_volume+0x416>
 8007942:	230d      	movs	r3, #13
 8007944:	e06d      	b.n	8007a22 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	f04f 32ff 	mov.w	r2, #4294967295
 800794c:	619a      	str	r2, [r3, #24]
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	2280      	movs	r2, #128	; 0x80
 800795a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800795c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007960:	2b03      	cmp	r3, #3
 8007962:	d149      	bne.n	80079f8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	3338      	adds	r3, #56	; 0x38
 8007968:	3330      	adds	r3, #48	; 0x30
 800796a:	4618      	mov	r0, r3
 800796c:	f7fd ff62 	bl	8005834 <ld_word>
 8007970:	4603      	mov	r3, r0
 8007972:	2b01      	cmp	r3, #1
 8007974:	d140      	bne.n	80079f8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007978:	3301      	adds	r3, #1
 800797a:	4619      	mov	r1, r3
 800797c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800797e:	f7fe fa09 	bl	8005d94 <move_window>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d137      	bne.n	80079f8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	2200      	movs	r2, #0
 800798c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	3338      	adds	r3, #56	; 0x38
 8007992:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007996:	4618      	mov	r0, r3
 8007998:	f7fd ff4c 	bl	8005834 <ld_word>
 800799c:	4603      	mov	r3, r0
 800799e:	461a      	mov	r2, r3
 80079a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d127      	bne.n	80079f8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	3338      	adds	r3, #56	; 0x38
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fd ff59 	bl	8005864 <ld_dword>
 80079b2:	4603      	mov	r3, r0
 80079b4:	4a1d      	ldr	r2, [pc, #116]	; (8007a2c <find_volume+0x4fc>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d11e      	bne.n	80079f8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	3338      	adds	r3, #56	; 0x38
 80079be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fd ff4e 	bl	8005864 <ld_dword>
 80079c8:	4603      	mov	r3, r0
 80079ca:	4a19      	ldr	r2, [pc, #100]	; (8007a30 <find_volume+0x500>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d113      	bne.n	80079f8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	3338      	adds	r3, #56	; 0x38
 80079d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fd ff43 	bl	8005864 <ld_dword>
 80079de:	4602      	mov	r2, r0
 80079e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	3338      	adds	r3, #56	; 0x38
 80079e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fd ff39 	bl	8005864 <ld_dword>
 80079f2:	4602      	mov	r2, r0
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80079fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007a00:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <find_volume+0x504>)
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <find_volume+0x504>)
 8007a0a:	801a      	strh	r2, [r3, #0]
 8007a0c:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <find_volume+0x504>)
 8007a0e:	881a      	ldrh	r2, [r3, #0]
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	4a08      	ldr	r2, [pc, #32]	; (8007a38 <find_volume+0x508>)
 8007a18:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a1c:	f7fe f952 	bl	8005cc4 <clear_lock>
#endif
	return FR_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3758      	adds	r7, #88	; 0x58
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	41615252 	.word	0x41615252
 8007a30:	61417272 	.word	0x61417272
 8007a34:	20002628 	.word	0x20002628
 8007a38:	2000264c 	.word	0x2000264c

08007a3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a46:	2309      	movs	r3, #9
 8007a48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01c      	beq.n	8007a8a <validate+0x4e>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d018      	beq.n	8007a8a <validate+0x4e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d013      	beq.n	8007a8a <validate+0x4e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	889a      	ldrh	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	88db      	ldrh	r3, [r3, #6]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d10c      	bne.n	8007a8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fd fe3e 	bl	80056f8 <disk_status>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <validate+0x4e>
			res = FR_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <validate+0x5a>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	e000      	b.n	8007a98 <validate+0x5c>
 8007a96:	2300      	movs	r3, #0
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	6013      	str	r3, [r2, #0]
	return res;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007aba:	f107 0310 	add.w	r3, r7, #16
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fc9c 	bl	80073fc <get_ldnumber>
 8007ac4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da01      	bge.n	8007ad0 <f_mount+0x28>
 8007acc:	230b      	movs	r3, #11
 8007ace:	e02b      	b.n	8007b28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ad0:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <f_mount+0x88>)
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007ae0:	69b8      	ldr	r0, [r7, #24]
 8007ae2:	f7fe f8ef 	bl	8005cc4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	490d      	ldr	r1, [pc, #52]	; (8007b30 <f_mount+0x88>)
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <f_mount+0x66>
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d001      	beq.n	8007b12 <f_mount+0x6a>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e00a      	b.n	8007b28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007b12:	f107 010c 	add.w	r1, r7, #12
 8007b16:	f107 0308 	add.w	r3, r7, #8
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fd07 	bl	8007530 <find_volume>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3720      	adds	r7, #32
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20002624 	.word	0x20002624

08007b34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b09a      	sub	sp, #104	; 0x68
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <f_open+0x18>
 8007b48:	2309      	movs	r3, #9
 8007b4a:	e1bb      	b.n	8007ec4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b54:	79fa      	ldrb	r2, [r7, #7]
 8007b56:	f107 0114 	add.w	r1, r7, #20
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff fce6 	bl	8007530 <find_volume>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007b6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 819f 	bne.w	8007eb2 <f_open+0x37e>
		dj.obj.fs = fs;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	f107 0318 	add.w	r3, r7, #24
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fbc5 	bl	8007310 <follow_path>
 8007b86:	4603      	mov	r3, r0
 8007b88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d11a      	bne.n	8007bca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007b98:	b25b      	sxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da03      	bge.n	8007ba6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007b9e:	2306      	movs	r3, #6
 8007ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007ba4:	e011      	b.n	8007bca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	f023 0301 	bic.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bf14      	ite	ne
 8007bb0:	2301      	movne	r3, #1
 8007bb2:	2300      	moveq	r3, #0
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f107 0318 	add.w	r3, r7, #24
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fd ff38 	bl	8005a34 <chk_lock>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	f003 031c 	and.w	r3, r3, #28
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d07f      	beq.n	8007cd4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007bd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d017      	beq.n	8007c0c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007bdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d10e      	bne.n	8007c02 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007be4:	f7fd ff82 	bl	8005aec <enq_lock>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d006      	beq.n	8007bfc <f_open+0xc8>
 8007bee:	f107 0318 	add.w	r3, r7, #24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff f8dc 	bl	8006db0 <dir_register>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	e000      	b.n	8007bfe <f_open+0xca>
 8007bfc:	2312      	movs	r3, #18
 8007bfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	f043 0308 	orr.w	r3, r3, #8
 8007c08:	71fb      	strb	r3, [r7, #7]
 8007c0a:	e010      	b.n	8007c2e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007c0c:	7fbb      	ldrb	r3, [r7, #30]
 8007c0e:	f003 0311 	and.w	r3, r3, #17
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <f_open+0xea>
					res = FR_DENIED;
 8007c16:	2307      	movs	r3, #7
 8007c18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007c1c:	e007      	b.n	8007c2e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <f_open+0xfa>
 8007c28:	2308      	movs	r3, #8
 8007c2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d168      	bne.n	8007d08 <f_open+0x1d4>
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d063      	beq.n	8007d08 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007c40:	f7fd fcf8 	bl	8005634 <get_fattime>
 8007c44:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	330e      	adds	r3, #14
 8007c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fd fe47 	bl	80058e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c54:	3316      	adds	r3, #22
 8007c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fd fe41 	bl	80058e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c60:	330b      	adds	r3, #11
 8007c62:	2220      	movs	r2, #32
 8007c64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe fe17 	bl	80068a0 <ld_clust>
 8007c72:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fe2f 	bl	80068de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	331c      	adds	r3, #28
 8007c84:	2100      	movs	r1, #0
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fd fe2a 	bl	80058e0 <st_dword>
					fs->wflag = 1;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d037      	beq.n	8007d08 <f_open+0x1d4>
						dw = fs->winsect;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007c9e:	f107 0318 	add.w	r3, r7, #24
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fb1f 	bl	80062ea <remove_chain>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007cb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d126      	bne.n	8007d08 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe f868 	bl	8005d94 <move_window>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cce:	3a01      	subs	r2, #1
 8007cd0:	615a      	str	r2, [r3, #20]
 8007cd2:	e019      	b.n	8007d08 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007cd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d115      	bne.n	8007d08 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007cdc:	7fbb      	ldrb	r3, [r7, #30]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <f_open+0x1ba>
					res = FR_NO_FILE;
 8007ce6:	2304      	movs	r3, #4
 8007ce8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007cec:	e00c      	b.n	8007d08 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <f_open+0x1d4>
 8007cf8:	7fbb      	ldrb	r3, [r7, #30]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <f_open+0x1d4>
						res = FR_DENIED;
 8007d02:	2307      	movs	r3, #7
 8007d04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007d08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d128      	bne.n	8007d62 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bf14      	ite	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	2300      	moveq	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	f107 0318 	add.w	r3, r7, #24
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fd fef1 	bl	8005b30 <inc_lock>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d102      	bne.n	8007d62 <f_open+0x22e>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 80a3 	bne.w	8007eb2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fd94 	bl	80068a0 <ld_clust>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	331c      	adds	r3, #28
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fd fd6e 	bl	8005864 <ld_dword>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	88da      	ldrh	r2, [r3, #6]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	79fa      	ldrb	r2, [r7, #7]
 8007da6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3330      	adds	r3, #48	; 0x30
 8007dbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd fdd8 	bl	800597a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d06e      	beq.n	8007eb2 <f_open+0x37e>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d06a      	beq.n	8007eb2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	895b      	ldrh	r3, [r3, #10]
 8007de8:	461a      	mov	r2, r3
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	899b      	ldrh	r3, [r3, #12]
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
 8007df2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e00:	e016      	b.n	8007e30 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe f881 	bl	8005f0e <get_fat>
 8007e0c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d802      	bhi.n	8007e1a <f_open+0x2e6>
 8007e14:	2302      	movs	r3, #2
 8007e16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d102      	bne.n	8007e28 <f_open+0x2f4>
 8007e22:	2301      	movs	r3, #1
 8007e24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d103      	bne.n	8007e40 <f_open+0x30c>
 8007e38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d8e0      	bhi.n	8007e02 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007e46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d131      	bne.n	8007eb2 <f_open+0x37e>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	899b      	ldrh	r3, [r3, #12]
 8007e52:	461a      	mov	r2, r3
 8007e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e56:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e5a:	fb01 f202 	mul.w	r2, r1, r2
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d026      	beq.n	8007eb2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe f831 	bl	8005ed0 <clust2sect>
 8007e6e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d103      	bne.n	8007e7e <f_open+0x34a>
						res = FR_INT_ERR;
 8007e76:	2302      	movs	r3, #2
 8007e78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007e7c:	e019      	b.n	8007eb2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	899b      	ldrh	r3, [r3, #12]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e86:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8c:	441a      	add	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	7858      	ldrb	r0, [r3, #1]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a1a      	ldr	r2, [r3, #32]
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f7fd fc69 	bl	8005778 <disk_read>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <f_open+0x37e>
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007eb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <f_open+0x38c>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ec0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3768      	adds	r7, #104	; 0x68
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08e      	sub	sp, #56	; 0x38
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f107 0214 	add.w	r2, r7, #20
 8007eea:	4611      	mov	r1, r2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff fda5 	bl	8007a3c <validate>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d107      	bne.n	8007f10 <f_read+0x44>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	7d5b      	ldrb	r3, [r3, #21]
 8007f04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <f_read+0x4a>
 8007f10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f14:	e135      	b.n	8008182 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	7d1b      	ldrb	r3, [r3, #20]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <f_read+0x5a>
 8007f22:	2307      	movs	r3, #7
 8007f24:	e12d      	b.n	8008182 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	f240 811e 	bls.w	8008178 <f_read+0x2ac>
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007f40:	e11a      	b.n	8008178 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	8992      	ldrh	r2, [r2, #12]
 8007f4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f4e:	fb01 f202 	mul.w	r2, r1, r2
 8007f52:	1a9b      	subs	r3, r3, r2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 80d5 	bne.w	8008104 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	8992      	ldrh	r2, [r2, #12]
 8007f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	8952      	ldrh	r2, [r2, #10]
 8007f6a:	3a01      	subs	r2, #1
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d12f      	bne.n	8007fd6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	633b      	str	r3, [r7, #48]	; 0x30
 8007f84:	e013      	b.n	8007fae <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d007      	beq.n	8007f9e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	4619      	mov	r1, r3
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7fe faa5 	bl	80064e4 <clmt_clust>
 8007f9a:	6338      	str	r0, [r7, #48]	; 0x30
 8007f9c:	e007      	b.n	8007fae <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fd ffb1 	bl	8005f0e <get_fat>
 8007fac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d804      	bhi.n	8007fbe <f_read+0xf2>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	755a      	strb	r2, [r3, #21]
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e0e1      	b.n	8008182 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d104      	bne.n	8007fd0 <f_read+0x104>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	755a      	strb	r2, [r3, #21]
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0d8      	b.n	8008182 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7fd ff76 	bl	8005ed0 <clust2sect>
 8007fe4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d104      	bne.n	8007ff6 <f_read+0x12a>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	755a      	strb	r2, [r3, #21]
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e0c5      	b.n	8008182 <f_read+0x2b6>
			sect += csect;
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	899b      	ldrh	r3, [r3, #12]
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	fbb3 f3f2 	udiv	r3, r3, r2
 800800a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d041      	beq.n	8008096 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	4413      	add	r3, r2
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	8952      	ldrh	r2, [r2, #10]
 800801c:	4293      	cmp	r3, r2
 800801e:	d905      	bls.n	800802c <f_read+0x160>
					cc = fs->csize - csect;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	895b      	ldrh	r3, [r3, #10]
 8008024:	461a      	mov	r2, r3
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	7858      	ldrb	r0, [r3, #1]
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008036:	f7fd fb9f 	bl	8005778 <disk_read>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <f_read+0x17e>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	755a      	strb	r2, [r3, #21]
 8008046:	2301      	movs	r3, #1
 8008048:	e09b      	b.n	8008182 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	7d1b      	ldrb	r3, [r3, #20]
 800804e:	b25b      	sxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	da18      	bge.n	8008086 <f_read+0x1ba>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a1a      	ldr	r2, [r3, #32]
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800805e:	429a      	cmp	r2, r3
 8008060:	d911      	bls.n	8008086 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a1a      	ldr	r2, [r3, #32]
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	8992      	ldrh	r2, [r2, #12]
 800806e:	fb02 f303 	mul.w	r3, r2, r3
 8008072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008074:	18d0      	adds	r0, r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	899b      	ldrh	r3, [r3, #12]
 8008080:	461a      	mov	r2, r3
 8008082:	f7fd fc59 	bl	8005938 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	899b      	ldrh	r3, [r3, #12]
 800808a:	461a      	mov	r2, r3
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	fb02 f303 	mul.w	r3, r2, r3
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008094:	e05c      	b.n	8008150 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	429a      	cmp	r2, r3
 800809e:	d02e      	beq.n	80080fe <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	7d1b      	ldrb	r3, [r3, #20]
 80080a4:	b25b      	sxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da18      	bge.n	80080dc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	7858      	ldrb	r0, [r3, #1]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a1a      	ldr	r2, [r3, #32]
 80080b8:	2301      	movs	r3, #1
 80080ba:	f7fd fb7d 	bl	80057b8 <disk_write>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <f_read+0x202>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	755a      	strb	r2, [r3, #21]
 80080ca:	2301      	movs	r3, #1
 80080cc:	e059      	b.n	8008182 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	7d1b      	ldrb	r3, [r3, #20]
 80080d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	7858      	ldrb	r0, [r3, #1]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080e6:	2301      	movs	r3, #1
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	f7fd fb45 	bl	8005778 <disk_read>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d004      	beq.n	80080fe <f_read+0x232>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	755a      	strb	r2, [r3, #21]
 80080fa:	2301      	movs	r3, #1
 80080fc:	e041      	b.n	8008182 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	899b      	ldrh	r3, [r3, #12]
 8008108:	4618      	mov	r0, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	8992      	ldrh	r2, [r2, #12]
 8008112:	fbb3 f1f2 	udiv	r1, r3, r2
 8008116:	fb01 f202 	mul.w	r2, r1, r2
 800811a:	1a9b      	subs	r3, r3, r2
 800811c:	1ac3      	subs	r3, r0, r3
 800811e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d901      	bls.n	800812c <f_read+0x260>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	8992      	ldrh	r2, [r2, #12]
 800813a:	fbb3 f0f2 	udiv	r0, r3, r2
 800813e:	fb00 f202 	mul.w	r2, r0, r2
 8008142:	1a9b      	subs	r3, r3, r2
 8008144:	440b      	add	r3, r1
 8008146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008148:	4619      	mov	r1, r3
 800814a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800814c:	f7fd fbf4 	bl	8005938 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	4413      	add	r3, r2
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	699a      	ldr	r2, [r3, #24]
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	441a      	add	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	619a      	str	r2, [r3, #24]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	441a      	add	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f47f aee1 	bne.w	8007f42 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3738      	adds	r7, #56	; 0x38
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b08c      	sub	sp, #48	; 0x30
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f107 0210 	add.w	r2, r7, #16
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff fc46 	bl	8007a3c <validate>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80081b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d107      	bne.n	80081ce <f_write+0x44>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	7d5b      	ldrb	r3, [r3, #21]
 80081c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <f_write+0x4a>
 80081ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081d2:	e16a      	b.n	80084aa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	7d1b      	ldrb	r3, [r3, #20]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <f_write+0x5a>
 80081e0:	2307      	movs	r3, #7
 80081e2:	e162      	b.n	80084aa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	699a      	ldr	r2, [r3, #24]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	441a      	add	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	f080 814c 	bcs.w	800848e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	43db      	mvns	r3, r3
 80081fc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80081fe:	e146      	b.n	800848e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	8992      	ldrh	r2, [r2, #12]
 8008208:	fbb3 f1f2 	udiv	r1, r3, r2
 800820c:	fb01 f202 	mul.w	r2, r1, r2
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 80f1 	bne.w	80083fa <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	8992      	ldrh	r2, [r2, #12]
 8008220:	fbb3 f3f2 	udiv	r3, r3, r2
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	8952      	ldrh	r2, [r2, #10]
 8008228:	3a01      	subs	r2, #1
 800822a:	4013      	ands	r3, r2
 800822c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d143      	bne.n	80082bc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10c      	bne.n	8008256 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d11a      	bne.n	800827e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe f8b1 	bl	80063b4 <create_chain>
 8008252:	62b8      	str	r0, [r7, #40]	; 0x28
 8008254:	e013      	b.n	800827e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	4619      	mov	r1, r3
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7fe f93d 	bl	80064e4 <clmt_clust>
 800826a:	62b8      	str	r0, [r7, #40]	; 0x28
 800826c:	e007      	b.n	800827e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fe f89c 	bl	80063b4 <create_chain>
 800827c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 8109 	beq.w	8008498 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	2b01      	cmp	r3, #1
 800828a:	d104      	bne.n	8008296 <f_write+0x10c>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2202      	movs	r2, #2
 8008290:	755a      	strb	r2, [r3, #21]
 8008292:	2302      	movs	r3, #2
 8008294:	e109      	b.n	80084aa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d104      	bne.n	80082a8 <f_write+0x11e>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	755a      	strb	r2, [r3, #21]
 80082a4:	2301      	movs	r3, #1
 80082a6:	e100      	b.n	80084aa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <f_write+0x132>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	7d1b      	ldrb	r3, [r3, #20]
 80082c0:	b25b      	sxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	da18      	bge.n	80082f8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	7858      	ldrb	r0, [r3, #1]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a1a      	ldr	r2, [r3, #32]
 80082d4:	2301      	movs	r3, #1
 80082d6:	f7fd fa6f 	bl	80057b8 <disk_write>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <f_write+0x160>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	755a      	strb	r2, [r3, #21]
 80082e6:	2301      	movs	r3, #1
 80082e8:	e0df      	b.n	80084aa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	7d1b      	ldrb	r3, [r3, #20]
 80082ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	4619      	mov	r1, r3
 8008300:	4610      	mov	r0, r2
 8008302:	f7fd fde5 	bl	8005ed0 <clust2sect>
 8008306:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d104      	bne.n	8008318 <f_write+0x18e>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2202      	movs	r2, #2
 8008312:	755a      	strb	r2, [r3, #21]
 8008314:	2302      	movs	r3, #2
 8008316:	e0c8      	b.n	80084aa <f_write+0x320>
			sect += csect;
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	4413      	add	r3, r2
 800831e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	899b      	ldrh	r3, [r3, #12]
 8008324:	461a      	mov	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	fbb3 f3f2 	udiv	r3, r3, r2
 800832c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d043      	beq.n	80083bc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	4413      	add	r3, r2
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	8952      	ldrh	r2, [r2, #10]
 800833e:	4293      	cmp	r3, r2
 8008340:	d905      	bls.n	800834e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	895b      	ldrh	r3, [r3, #10]
 8008346:	461a      	mov	r2, r3
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	7858      	ldrb	r0, [r3, #1]
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	69f9      	ldr	r1, [r7, #28]
 8008358:	f7fd fa2e 	bl	80057b8 <disk_write>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d004      	beq.n	800836c <f_write+0x1e2>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	755a      	strb	r2, [r3, #21]
 8008368:	2301      	movs	r3, #1
 800836a:	e09e      	b.n	80084aa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a1a      	ldr	r2, [r3, #32]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	6a3a      	ldr	r2, [r7, #32]
 8008376:	429a      	cmp	r2, r3
 8008378:	d918      	bls.n	80083ac <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a1a      	ldr	r2, [r3, #32]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	8992      	ldrh	r2, [r2, #12]
 800838c:	fb02 f303 	mul.w	r3, r2, r3
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	18d1      	adds	r1, r2, r3
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	899b      	ldrh	r3, [r3, #12]
 8008398:	461a      	mov	r2, r3
 800839a:	f7fd facd 	bl	8005938 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	7d1b      	ldrb	r3, [r3, #20]
 80083a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	899b      	ldrh	r3, [r3, #12]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	fb02 f303 	mul.w	r3, r2, r3
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80083ba:	e04b      	b.n	8008454 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d016      	beq.n	80083f4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d210      	bcs.n	80083f4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	7858      	ldrb	r0, [r3, #1]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083dc:	2301      	movs	r3, #1
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	f7fd f9ca 	bl	8005778 <disk_read>
 80083e4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d004      	beq.n	80083f4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	755a      	strb	r2, [r3, #21]
 80083f0:	2301      	movs	r3, #1
 80083f2:	e05a      	b.n	80084aa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	899b      	ldrh	r3, [r3, #12]
 80083fe:	4618      	mov	r0, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	8992      	ldrh	r2, [r2, #12]
 8008408:	fbb3 f1f2 	udiv	r1, r3, r2
 800840c:	fb01 f202 	mul.w	r2, r1, r2
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	1ac3      	subs	r3, r0, r3
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	429a      	cmp	r2, r3
 800841c:	d901      	bls.n	8008422 <f_write+0x298>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	8992      	ldrh	r2, [r2, #12]
 8008430:	fbb3 f0f2 	udiv	r0, r3, r2
 8008434:	fb00 f202 	mul.w	r2, r0, r2
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	440b      	add	r3, r1
 800843c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843e:	69f9      	ldr	r1, [r7, #28]
 8008440:	4618      	mov	r0, r3
 8008442:	f7fd fa79 	bl	8005938 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	7d1b      	ldrb	r3, [r3, #20]
 800844a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800844e:	b2da      	uxtb	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	4413      	add	r3, r2
 800845a:	61fb      	str	r3, [r7, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	699a      	ldr	r2, [r3, #24]
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	441a      	add	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	619a      	str	r2, [r3, #24]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	429a      	cmp	r2, r3
 8008472:	bf38      	it	cc
 8008474:	461a      	movcc	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	60da      	str	r2, [r3, #12]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	441a      	add	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	f47f aeb5 	bne.w	8008200 <f_write+0x76>
 8008496:	e000      	b.n	800849a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008498:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	7d1b      	ldrb	r3, [r3, #20]
 800849e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3730      	adds	r7, #48	; 0x30
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f107 0208 	add.w	r2, r7, #8
 80084c0:	4611      	mov	r1, r2
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff faba 	bl	8007a3c <validate>
 80084c8:	4603      	mov	r3, r0
 80084ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d168      	bne.n	80085a4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	7d1b      	ldrb	r3, [r3, #20]
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d062      	beq.n	80085a4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	7d1b      	ldrb	r3, [r3, #20]
 80084e2:	b25b      	sxtb	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	da15      	bge.n	8008514 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	7858      	ldrb	r0, [r3, #1]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1a      	ldr	r2, [r3, #32]
 80084f6:	2301      	movs	r3, #1
 80084f8:	f7fd f95e 	bl	80057b8 <disk_write>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <f_sync+0x54>
 8008502:	2301      	movs	r3, #1
 8008504:	e04f      	b.n	80085a6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	7d1b      	ldrb	r3, [r3, #20]
 800850a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850e:	b2da      	uxtb	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008514:	f7fd f88e 	bl	8005634 <get_fattime>
 8008518:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f7fd fc36 	bl	8005d94 <move_window>
 8008528:	4603      	mov	r3, r0
 800852a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d138      	bne.n	80085a4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008536:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	330b      	adds	r3, #11
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	330b      	adds	r3, #11
 8008542:	f042 0220 	orr.w	r2, r2, #32
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	461a      	mov	r2, r3
 8008554:	68f9      	ldr	r1, [r7, #12]
 8008556:	f7fe f9c2 	bl	80068de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f103 021c 	add.w	r2, r3, #28
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	4619      	mov	r1, r3
 8008566:	4610      	mov	r0, r2
 8008568:	f7fd f9ba 	bl	80058e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3316      	adds	r3, #22
 8008570:	6939      	ldr	r1, [r7, #16]
 8008572:	4618      	mov	r0, r3
 8008574:	f7fd f9b4 	bl	80058e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3312      	adds	r3, #18
 800857c:	2100      	movs	r1, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f7fd f993 	bl	80058aa <st_word>
					fs->wflag = 1;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2201      	movs	r2, #1
 8008588:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd fc2f 	bl	8005df0 <sync_fs>
 8008592:	4603      	mov	r3, r0
 8008594:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	7d1b      	ldrb	r3, [r3, #20]
 800859a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff ff7b 	bl	80084b2 <f_sync>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d118      	bne.n	80085f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f107 0208 	add.w	r2, r7, #8
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff fa34 	bl	8007a3c <validate>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10c      	bne.n	80085f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fd fb32 	bl	8005c4c <dec_lock>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b092      	sub	sp, #72	; 0x48
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800860e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008612:	f107 030c 	add.w	r3, r7, #12
 8008616:	2200      	movs	r2, #0
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe ff89 	bl	8007530 <find_volume>
 800861e:	4603      	mov	r3, r0
 8008620:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008624:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008628:	2b00      	cmp	r3, #0
 800862a:	f040 8099 	bne.w	8008760 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800862e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	3b02      	subs	r3, #2
 800863e:	429a      	cmp	r2, r3
 8008640:	d804      	bhi.n	800864c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	699a      	ldr	r2, [r3, #24]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	e089      	b.n	8008760 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d128      	bne.n	80086aa <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008658:	2302      	movs	r3, #2
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008660:	f107 0314 	add.w	r3, r7, #20
 8008664:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008666:	4618      	mov	r0, r3
 8008668:	f7fd fc51 	bl	8005f0e <get_fat>
 800866c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008674:	d103      	bne.n	800867e <f_getfree+0x7c>
 8008676:	2301      	movs	r3, #1
 8008678:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800867c:	e063      	b.n	8008746 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	2b01      	cmp	r3, #1
 8008682:	d103      	bne.n	800868c <f_getfree+0x8a>
 8008684:	2302      	movs	r3, #2
 8008686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800868a:	e05c      	b.n	8008746 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <f_getfree+0x96>
 8008692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008694:	3301      	adds	r3, #1
 8008696:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869a:	3301      	adds	r3, #1
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d3db      	bcc.n	8008660 <f_getfree+0x5e>
 80086a8:	e04d      	b.n	8008746 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ba:	2300      	movs	r3, #0
 80086bc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d113      	bne.n	80086ec <f_getfree+0xea>
							res = move_window(fs, sect++);
 80086c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80086cc:	4619      	mov	r1, r3
 80086ce:	f7fd fb61 	bl	8005d94 <move_window>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80086d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d131      	bne.n	8008744 <f_getfree+0x142>
							p = fs->win;
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	3338      	adds	r3, #56	; 0x38
 80086e4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	899b      	ldrh	r3, [r3, #12]
 80086ea:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d10f      	bne.n	8008714 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80086f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086f6:	f7fd f89d 	bl	8005834 <ld_word>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <f_getfree+0x104>
 8008700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008702:	3301      	adds	r3, #1
 8008704:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	3302      	adds	r3, #2
 800870a:	633b      	str	r3, [r7, #48]	; 0x30
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	3b02      	subs	r3, #2
 8008710:	637b      	str	r3, [r7, #52]	; 0x34
 8008712:	e010      	b.n	8008736 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008716:	f7fd f8a5 	bl	8005864 <ld_dword>
 800871a:	4603      	mov	r3, r0
 800871c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d102      	bne.n	800872a <f_getfree+0x128>
 8008724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008726:	3301      	adds	r3, #1
 8008728:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	3304      	adds	r3, #4
 800872e:	633b      	str	r3, [r7, #48]	; 0x30
 8008730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008732:	3b04      	subs	r3, #4
 8008734:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008738:	3b01      	subs	r3, #1
 800873a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800873c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1bd      	bne.n	80086be <f_getfree+0xbc>
 8008742:	e000      	b.n	8008746 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008744:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800874a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008750:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	791a      	ldrb	r2, [r3, #4]
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	f042 0201 	orr.w	r2, r2, #1
 800875c:	b2d2      	uxtb	r2, r2
 800875e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008760:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008764:	4618      	mov	r0, r3
 8008766:	3748      	adds	r7, #72	; 0x48
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800877a:	2301      	movs	r3, #1
 800877c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800877e:	2300      	movs	r3, #0
 8008780:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008782:	4b1f      	ldr	r3, [pc, #124]	; (8008800 <FATFS_LinkDriverEx+0x94>)
 8008784:	7a5b      	ldrb	r3, [r3, #9]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d131      	bne.n	80087f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800878c:	4b1c      	ldr	r3, [pc, #112]	; (8008800 <FATFS_LinkDriverEx+0x94>)
 800878e:	7a5b      	ldrb	r3, [r3, #9]
 8008790:	b2db      	uxtb	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <FATFS_LinkDriverEx+0x94>)
 8008796:	2100      	movs	r1, #0
 8008798:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800879a:	4b19      	ldr	r3, [pc, #100]	; (8008800 <FATFS_LinkDriverEx+0x94>)
 800879c:	7a5b      	ldrb	r3, [r3, #9]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	4a17      	ldr	r2, [pc, #92]	; (8008800 <FATFS_LinkDriverEx+0x94>)
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <FATFS_LinkDriverEx+0x94>)
 80087ac:	7a5b      	ldrb	r3, [r3, #9]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	4b13      	ldr	r3, [pc, #76]	; (8008800 <FATFS_LinkDriverEx+0x94>)
 80087b4:	4413      	add	r3, r2
 80087b6:	79fa      	ldrb	r2, [r7, #7]
 80087b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80087ba:	4b11      	ldr	r3, [pc, #68]	; (8008800 <FATFS_LinkDriverEx+0x94>)
 80087bc:	7a5b      	ldrb	r3, [r3, #9]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	b2d1      	uxtb	r1, r2
 80087c4:	4a0e      	ldr	r2, [pc, #56]	; (8008800 <FATFS_LinkDriverEx+0x94>)
 80087c6:	7251      	strb	r1, [r2, #9]
 80087c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80087ca:	7dbb      	ldrb	r3, [r7, #22]
 80087cc:	3330      	adds	r3, #48	; 0x30
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	3301      	adds	r3, #1
 80087d8:	223a      	movs	r2, #58	; 0x3a
 80087da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	3302      	adds	r3, #2
 80087e0:	222f      	movs	r2, #47	; 0x2f
 80087e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	3303      	adds	r3, #3
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	2000284c 	.word	0x2000284c

08008804 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800880e:	2200      	movs	r2, #0
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff ffaa 	bl	800876c <FATFS_LinkDriverEx>
 8008818:	4603      	mov	r3, r0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	6039      	str	r1, [r7, #0]
 800882e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008830:	88fb      	ldrh	r3, [r7, #6]
 8008832:	2b7f      	cmp	r3, #127	; 0x7f
 8008834:	d802      	bhi.n	800883c <ff_convert+0x18>
		c = chr;
 8008836:	88fb      	ldrh	r3, [r7, #6]
 8008838:	81fb      	strh	r3, [r7, #14]
 800883a:	e025      	b.n	8008888 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00b      	beq.n	800885a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008842:	88fb      	ldrh	r3, [r7, #6]
 8008844:	2bff      	cmp	r3, #255	; 0xff
 8008846:	d805      	bhi.n	8008854 <ff_convert+0x30>
 8008848:	88fb      	ldrh	r3, [r7, #6]
 800884a:	3b80      	subs	r3, #128	; 0x80
 800884c:	4a12      	ldr	r2, [pc, #72]	; (8008898 <ff_convert+0x74>)
 800884e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008852:	e000      	b.n	8008856 <ff_convert+0x32>
 8008854:	2300      	movs	r3, #0
 8008856:	81fb      	strh	r3, [r7, #14]
 8008858:	e016      	b.n	8008888 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800885a:	2300      	movs	r3, #0
 800885c:	81fb      	strh	r3, [r7, #14]
 800885e:	e009      	b.n	8008874 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008860:	89fb      	ldrh	r3, [r7, #14]
 8008862:	4a0d      	ldr	r2, [pc, #52]	; (8008898 <ff_convert+0x74>)
 8008864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008868:	88fa      	ldrh	r2, [r7, #6]
 800886a:	429a      	cmp	r2, r3
 800886c:	d006      	beq.n	800887c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800886e:	89fb      	ldrh	r3, [r7, #14]
 8008870:	3301      	adds	r3, #1
 8008872:	81fb      	strh	r3, [r7, #14]
 8008874:	89fb      	ldrh	r3, [r7, #14]
 8008876:	2b7f      	cmp	r3, #127	; 0x7f
 8008878:	d9f2      	bls.n	8008860 <ff_convert+0x3c>
 800887a:	e000      	b.n	800887e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800887c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800887e:	89fb      	ldrh	r3, [r7, #14]
 8008880:	3380      	adds	r3, #128	; 0x80
 8008882:	b29b      	uxth	r3, r3
 8008884:	b2db      	uxtb	r3, r3
 8008886:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008888:	89fb      	ldrh	r3, [r7, #14]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	0800959c 	.word	0x0800959c

0800889c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ac:	d201      	bcs.n	80088b2 <ff_wtoupper+0x16>
 80088ae:	4b3e      	ldr	r3, [pc, #248]	; (80089a8 <ff_wtoupper+0x10c>)
 80088b0:	e000      	b.n	80088b4 <ff_wtoupper+0x18>
 80088b2:	4b3e      	ldr	r3, [pc, #248]	; (80089ac <ff_wtoupper+0x110>)
 80088b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	1c9a      	adds	r2, r3, #2
 80088ba:	617a      	str	r2, [r7, #20]
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80088c0:	8a7b      	ldrh	r3, [r7, #18]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d068      	beq.n	8008998 <ff_wtoupper+0xfc>
 80088c6:	88fa      	ldrh	r2, [r7, #6]
 80088c8:	8a7b      	ldrh	r3, [r7, #18]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d364      	bcc.n	8008998 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	1c9a      	adds	r2, r3, #2
 80088d2:	617a      	str	r2, [r7, #20]
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	823b      	strh	r3, [r7, #16]
 80088d8:	8a3b      	ldrh	r3, [r7, #16]
 80088da:	0a1b      	lsrs	r3, r3, #8
 80088dc:	81fb      	strh	r3, [r7, #14]
 80088de:	8a3b      	ldrh	r3, [r7, #16]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80088e4:	88fa      	ldrh	r2, [r7, #6]
 80088e6:	8a79      	ldrh	r1, [r7, #18]
 80088e8:	8a3b      	ldrh	r3, [r7, #16]
 80088ea:	440b      	add	r3, r1
 80088ec:	429a      	cmp	r2, r3
 80088ee:	da49      	bge.n	8008984 <ff_wtoupper+0xe8>
			switch (cmd) {
 80088f0:	89fb      	ldrh	r3, [r7, #14]
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d84f      	bhi.n	8008996 <ff_wtoupper+0xfa>
 80088f6:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <ff_wtoupper+0x60>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008933 	.word	0x08008933
 8008904:	08008949 	.word	0x08008949
 8008908:	08008951 	.word	0x08008951
 800890c:	08008959 	.word	0x08008959
 8008910:	08008961 	.word	0x08008961
 8008914:	08008969 	.word	0x08008969
 8008918:	08008971 	.word	0x08008971
 800891c:	08008979 	.word	0x08008979
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008920:	88fa      	ldrh	r2, [r7, #6]
 8008922:	8a7b      	ldrh	r3, [r7, #18]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4413      	add	r3, r2
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	80fb      	strh	r3, [r7, #6]
 8008930:	e027      	b.n	8008982 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008932:	88fa      	ldrh	r2, [r7, #6]
 8008934:	8a7b      	ldrh	r3, [r7, #18]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	b29b      	uxth	r3, r3
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	b29b      	uxth	r3, r3
 8008940:	88fa      	ldrh	r2, [r7, #6]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	80fb      	strh	r3, [r7, #6]
 8008946:	e01c      	b.n	8008982 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008948:	88fb      	ldrh	r3, [r7, #6]
 800894a:	3b10      	subs	r3, #16
 800894c:	80fb      	strh	r3, [r7, #6]
 800894e:	e018      	b.n	8008982 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008950:	88fb      	ldrh	r3, [r7, #6]
 8008952:	3b20      	subs	r3, #32
 8008954:	80fb      	strh	r3, [r7, #6]
 8008956:	e014      	b.n	8008982 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	3b30      	subs	r3, #48	; 0x30
 800895c:	80fb      	strh	r3, [r7, #6]
 800895e:	e010      	b.n	8008982 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008960:	88fb      	ldrh	r3, [r7, #6]
 8008962:	3b1a      	subs	r3, #26
 8008964:	80fb      	strh	r3, [r7, #6]
 8008966:	e00c      	b.n	8008982 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008968:	88fb      	ldrh	r3, [r7, #6]
 800896a:	3308      	adds	r3, #8
 800896c:	80fb      	strh	r3, [r7, #6]
 800896e:	e008      	b.n	8008982 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008970:	88fb      	ldrh	r3, [r7, #6]
 8008972:	3b50      	subs	r3, #80	; 0x50
 8008974:	80fb      	strh	r3, [r7, #6]
 8008976:	e004      	b.n	8008982 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008978:	88fb      	ldrh	r3, [r7, #6]
 800897a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800897e:	80fb      	strh	r3, [r7, #6]
 8008980:	bf00      	nop
			}
			break;
 8008982:	e008      	b.n	8008996 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008984:	89fb      	ldrh	r3, [r7, #14]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d195      	bne.n	80088b6 <ff_wtoupper+0x1a>
 800898a:	8a3b      	ldrh	r3, [r7, #16]
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4413      	add	r3, r2
 8008992:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008994:	e78f      	b.n	80088b6 <ff_wtoupper+0x1a>
			break;
 8008996:	bf00      	nop
	}

	return chr;
 8008998:	88fb      	ldrh	r3, [r7, #6]
}
 800899a:	4618      	mov	r0, r3
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	0800969c 	.word	0x0800969c
 80089ac:	08009890 	.word	0x08009890

080089b0 <siprintf>:
 80089b0:	b40e      	push	{r1, r2, r3}
 80089b2:	b500      	push	{lr}
 80089b4:	b09c      	sub	sp, #112	; 0x70
 80089b6:	ab1d      	add	r3, sp, #116	; 0x74
 80089b8:	9002      	str	r0, [sp, #8]
 80089ba:	9006      	str	r0, [sp, #24]
 80089bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089c0:	4809      	ldr	r0, [pc, #36]	; (80089e8 <siprintf+0x38>)
 80089c2:	9107      	str	r1, [sp, #28]
 80089c4:	9104      	str	r1, [sp, #16]
 80089c6:	4909      	ldr	r1, [pc, #36]	; (80089ec <siprintf+0x3c>)
 80089c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089cc:	9105      	str	r1, [sp, #20]
 80089ce:	6800      	ldr	r0, [r0, #0]
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	a902      	add	r1, sp, #8
 80089d4:	f000 f9a0 	bl	8008d18 <_svfiprintf_r>
 80089d8:	9b02      	ldr	r3, [sp, #8]
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	b01c      	add	sp, #112	; 0x70
 80089e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e4:	b003      	add	sp, #12
 80089e6:	4770      	bx	lr
 80089e8:	20000070 	.word	0x20000070
 80089ec:	ffff0208 	.word	0xffff0208

080089f0 <memset>:
 80089f0:	4402      	add	r2, r0
 80089f2:	4603      	mov	r3, r0
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d100      	bne.n	80089fa <memset+0xa>
 80089f8:	4770      	bx	lr
 80089fa:	f803 1b01 	strb.w	r1, [r3], #1
 80089fe:	e7f9      	b.n	80089f4 <memset+0x4>

08008a00 <__errno>:
 8008a00:	4b01      	ldr	r3, [pc, #4]	; (8008a08 <__errno+0x8>)
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20000070 	.word	0x20000070

08008a0c <__libc_init_array>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	4d0d      	ldr	r5, [pc, #52]	; (8008a44 <__libc_init_array+0x38>)
 8008a10:	4c0d      	ldr	r4, [pc, #52]	; (8008a48 <__libc_init_array+0x3c>)
 8008a12:	1b64      	subs	r4, r4, r5
 8008a14:	10a4      	asrs	r4, r4, #2
 8008a16:	2600      	movs	r6, #0
 8008a18:	42a6      	cmp	r6, r4
 8008a1a:	d109      	bne.n	8008a30 <__libc_init_array+0x24>
 8008a1c:	4d0b      	ldr	r5, [pc, #44]	; (8008a4c <__libc_init_array+0x40>)
 8008a1e:	4c0c      	ldr	r4, [pc, #48]	; (8008a50 <__libc_init_array+0x44>)
 8008a20:	f000 fc6a 	bl	80092f8 <_init>
 8008a24:	1b64      	subs	r4, r4, r5
 8008a26:	10a4      	asrs	r4, r4, #2
 8008a28:	2600      	movs	r6, #0
 8008a2a:	42a6      	cmp	r6, r4
 8008a2c:	d105      	bne.n	8008a3a <__libc_init_array+0x2e>
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
 8008a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a34:	4798      	blx	r3
 8008a36:	3601      	adds	r6, #1
 8008a38:	e7ee      	b.n	8008a18 <__libc_init_array+0xc>
 8008a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a3e:	4798      	blx	r3
 8008a40:	3601      	adds	r6, #1
 8008a42:	e7f2      	b.n	8008a2a <__libc_init_array+0x1e>
 8008a44:	08009988 	.word	0x08009988
 8008a48:	08009988 	.word	0x08009988
 8008a4c:	08009988 	.word	0x08009988
 8008a50:	0800998c 	.word	0x0800998c

08008a54 <__retarget_lock_acquire_recursive>:
 8008a54:	4770      	bx	lr

08008a56 <__retarget_lock_release_recursive>:
 8008a56:	4770      	bx	lr

08008a58 <memcpy>:
 8008a58:	440a      	add	r2, r1
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a60:	d100      	bne.n	8008a64 <memcpy+0xc>
 8008a62:	4770      	bx	lr
 8008a64:	b510      	push	{r4, lr}
 8008a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a6e:	4291      	cmp	r1, r2
 8008a70:	d1f9      	bne.n	8008a66 <memcpy+0xe>
 8008a72:	bd10      	pop	{r4, pc}

08008a74 <_free_r>:
 8008a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a76:	2900      	cmp	r1, #0
 8008a78:	d044      	beq.n	8008b04 <_free_r+0x90>
 8008a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7e:	9001      	str	r0, [sp, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f1a1 0404 	sub.w	r4, r1, #4
 8008a86:	bfb8      	it	lt
 8008a88:	18e4      	addlt	r4, r4, r3
 8008a8a:	f000 f8df 	bl	8008c4c <__malloc_lock>
 8008a8e:	4a1e      	ldr	r2, [pc, #120]	; (8008b08 <_free_r+0x94>)
 8008a90:	9801      	ldr	r0, [sp, #4]
 8008a92:	6813      	ldr	r3, [r2, #0]
 8008a94:	b933      	cbnz	r3, 8008aa4 <_free_r+0x30>
 8008a96:	6063      	str	r3, [r4, #4]
 8008a98:	6014      	str	r4, [r2, #0]
 8008a9a:	b003      	add	sp, #12
 8008a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008aa0:	f000 b8da 	b.w	8008c58 <__malloc_unlock>
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	d908      	bls.n	8008aba <_free_r+0x46>
 8008aa8:	6825      	ldr	r5, [r4, #0]
 8008aaa:	1961      	adds	r1, r4, r5
 8008aac:	428b      	cmp	r3, r1
 8008aae:	bf01      	itttt	eq
 8008ab0:	6819      	ldreq	r1, [r3, #0]
 8008ab2:	685b      	ldreq	r3, [r3, #4]
 8008ab4:	1949      	addeq	r1, r1, r5
 8008ab6:	6021      	streq	r1, [r4, #0]
 8008ab8:	e7ed      	b.n	8008a96 <_free_r+0x22>
 8008aba:	461a      	mov	r2, r3
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b10b      	cbz	r3, 8008ac4 <_free_r+0x50>
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	d9fa      	bls.n	8008aba <_free_r+0x46>
 8008ac4:	6811      	ldr	r1, [r2, #0]
 8008ac6:	1855      	adds	r5, r2, r1
 8008ac8:	42a5      	cmp	r5, r4
 8008aca:	d10b      	bne.n	8008ae4 <_free_r+0x70>
 8008acc:	6824      	ldr	r4, [r4, #0]
 8008ace:	4421      	add	r1, r4
 8008ad0:	1854      	adds	r4, r2, r1
 8008ad2:	42a3      	cmp	r3, r4
 8008ad4:	6011      	str	r1, [r2, #0]
 8008ad6:	d1e0      	bne.n	8008a9a <_free_r+0x26>
 8008ad8:	681c      	ldr	r4, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	6053      	str	r3, [r2, #4]
 8008ade:	440c      	add	r4, r1
 8008ae0:	6014      	str	r4, [r2, #0]
 8008ae2:	e7da      	b.n	8008a9a <_free_r+0x26>
 8008ae4:	d902      	bls.n	8008aec <_free_r+0x78>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	6003      	str	r3, [r0, #0]
 8008aea:	e7d6      	b.n	8008a9a <_free_r+0x26>
 8008aec:	6825      	ldr	r5, [r4, #0]
 8008aee:	1961      	adds	r1, r4, r5
 8008af0:	428b      	cmp	r3, r1
 8008af2:	bf04      	itt	eq
 8008af4:	6819      	ldreq	r1, [r3, #0]
 8008af6:	685b      	ldreq	r3, [r3, #4]
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	bf04      	itt	eq
 8008afc:	1949      	addeq	r1, r1, r5
 8008afe:	6021      	streq	r1, [r4, #0]
 8008b00:	6054      	str	r4, [r2, #4]
 8008b02:	e7ca      	b.n	8008a9a <_free_r+0x26>
 8008b04:	b003      	add	sp, #12
 8008b06:	bd30      	pop	{r4, r5, pc}
 8008b08:	20002998 	.word	0x20002998

08008b0c <sbrk_aligned>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	4e0e      	ldr	r6, [pc, #56]	; (8008b48 <sbrk_aligned+0x3c>)
 8008b10:	460c      	mov	r4, r1
 8008b12:	6831      	ldr	r1, [r6, #0]
 8008b14:	4605      	mov	r5, r0
 8008b16:	b911      	cbnz	r1, 8008b1e <sbrk_aligned+0x12>
 8008b18:	f000 fba6 	bl	8009268 <_sbrk_r>
 8008b1c:	6030      	str	r0, [r6, #0]
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4628      	mov	r0, r5
 8008b22:	f000 fba1 	bl	8009268 <_sbrk_r>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	d00a      	beq.n	8008b40 <sbrk_aligned+0x34>
 8008b2a:	1cc4      	adds	r4, r0, #3
 8008b2c:	f024 0403 	bic.w	r4, r4, #3
 8008b30:	42a0      	cmp	r0, r4
 8008b32:	d007      	beq.n	8008b44 <sbrk_aligned+0x38>
 8008b34:	1a21      	subs	r1, r4, r0
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 fb96 	bl	8009268 <_sbrk_r>
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d101      	bne.n	8008b44 <sbrk_aligned+0x38>
 8008b40:	f04f 34ff 	mov.w	r4, #4294967295
 8008b44:	4620      	mov	r0, r4
 8008b46:	bd70      	pop	{r4, r5, r6, pc}
 8008b48:	2000299c 	.word	0x2000299c

08008b4c <_malloc_r>:
 8008b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b50:	1ccd      	adds	r5, r1, #3
 8008b52:	f025 0503 	bic.w	r5, r5, #3
 8008b56:	3508      	adds	r5, #8
 8008b58:	2d0c      	cmp	r5, #12
 8008b5a:	bf38      	it	cc
 8008b5c:	250c      	movcc	r5, #12
 8008b5e:	2d00      	cmp	r5, #0
 8008b60:	4607      	mov	r7, r0
 8008b62:	db01      	blt.n	8008b68 <_malloc_r+0x1c>
 8008b64:	42a9      	cmp	r1, r5
 8008b66:	d905      	bls.n	8008b74 <_malloc_r+0x28>
 8008b68:	230c      	movs	r3, #12
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	2600      	movs	r6, #0
 8008b6e:	4630      	mov	r0, r6
 8008b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c48 <_malloc_r+0xfc>
 8008b78:	f000 f868 	bl	8008c4c <__malloc_lock>
 8008b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b80:	461c      	mov	r4, r3
 8008b82:	bb5c      	cbnz	r4, 8008bdc <_malloc_r+0x90>
 8008b84:	4629      	mov	r1, r5
 8008b86:	4638      	mov	r0, r7
 8008b88:	f7ff ffc0 	bl	8008b0c <sbrk_aligned>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	4604      	mov	r4, r0
 8008b90:	d155      	bne.n	8008c3e <_malloc_r+0xf2>
 8008b92:	f8d8 4000 	ldr.w	r4, [r8]
 8008b96:	4626      	mov	r6, r4
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	d145      	bne.n	8008c28 <_malloc_r+0xdc>
 8008b9c:	2c00      	cmp	r4, #0
 8008b9e:	d048      	beq.n	8008c32 <_malloc_r+0xe6>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	eb04 0903 	add.w	r9, r4, r3
 8008baa:	f000 fb5d 	bl	8009268 <_sbrk_r>
 8008bae:	4581      	cmp	r9, r0
 8008bb0:	d13f      	bne.n	8008c32 <_malloc_r+0xe6>
 8008bb2:	6821      	ldr	r1, [r4, #0]
 8008bb4:	1a6d      	subs	r5, r5, r1
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff ffa7 	bl	8008b0c <sbrk_aligned>
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d037      	beq.n	8008c32 <_malloc_r+0xe6>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	442b      	add	r3, r5
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d038      	beq.n	8008c42 <_malloc_r+0xf6>
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	42a2      	cmp	r2, r4
 8008bd4:	d12b      	bne.n	8008c2e <_malloc_r+0xe2>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	605a      	str	r2, [r3, #4]
 8008bda:	e00f      	b.n	8008bfc <_malloc_r+0xb0>
 8008bdc:	6822      	ldr	r2, [r4, #0]
 8008bde:	1b52      	subs	r2, r2, r5
 8008be0:	d41f      	bmi.n	8008c22 <_malloc_r+0xd6>
 8008be2:	2a0b      	cmp	r2, #11
 8008be4:	d917      	bls.n	8008c16 <_malloc_r+0xca>
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	6025      	str	r5, [r4, #0]
 8008bec:	bf18      	it	ne
 8008bee:	6059      	strne	r1, [r3, #4]
 8008bf0:	6863      	ldr	r3, [r4, #4]
 8008bf2:	bf08      	it	eq
 8008bf4:	f8c8 1000 	streq.w	r1, [r8]
 8008bf8:	5162      	str	r2, [r4, r5]
 8008bfa:	604b      	str	r3, [r1, #4]
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f104 060b 	add.w	r6, r4, #11
 8008c02:	f000 f829 	bl	8008c58 <__malloc_unlock>
 8008c06:	f026 0607 	bic.w	r6, r6, #7
 8008c0a:	1d23      	adds	r3, r4, #4
 8008c0c:	1af2      	subs	r2, r6, r3
 8008c0e:	d0ae      	beq.n	8008b6e <_malloc_r+0x22>
 8008c10:	1b9b      	subs	r3, r3, r6
 8008c12:	50a3      	str	r3, [r4, r2]
 8008c14:	e7ab      	b.n	8008b6e <_malloc_r+0x22>
 8008c16:	42a3      	cmp	r3, r4
 8008c18:	6862      	ldr	r2, [r4, #4]
 8008c1a:	d1dd      	bne.n	8008bd8 <_malloc_r+0x8c>
 8008c1c:	f8c8 2000 	str.w	r2, [r8]
 8008c20:	e7ec      	b.n	8008bfc <_malloc_r+0xb0>
 8008c22:	4623      	mov	r3, r4
 8008c24:	6864      	ldr	r4, [r4, #4]
 8008c26:	e7ac      	b.n	8008b82 <_malloc_r+0x36>
 8008c28:	4634      	mov	r4, r6
 8008c2a:	6876      	ldr	r6, [r6, #4]
 8008c2c:	e7b4      	b.n	8008b98 <_malloc_r+0x4c>
 8008c2e:	4613      	mov	r3, r2
 8008c30:	e7cc      	b.n	8008bcc <_malloc_r+0x80>
 8008c32:	230c      	movs	r3, #12
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	4638      	mov	r0, r7
 8008c38:	f000 f80e 	bl	8008c58 <__malloc_unlock>
 8008c3c:	e797      	b.n	8008b6e <_malloc_r+0x22>
 8008c3e:	6025      	str	r5, [r4, #0]
 8008c40:	e7dc      	b.n	8008bfc <_malloc_r+0xb0>
 8008c42:	605b      	str	r3, [r3, #4]
 8008c44:	deff      	udf	#255	; 0xff
 8008c46:	bf00      	nop
 8008c48:	20002998 	.word	0x20002998

08008c4c <__malloc_lock>:
 8008c4c:	4801      	ldr	r0, [pc, #4]	; (8008c54 <__malloc_lock+0x8>)
 8008c4e:	f7ff bf01 	b.w	8008a54 <__retarget_lock_acquire_recursive>
 8008c52:	bf00      	nop
 8008c54:	20002994 	.word	0x20002994

08008c58 <__malloc_unlock>:
 8008c58:	4801      	ldr	r0, [pc, #4]	; (8008c60 <__malloc_unlock+0x8>)
 8008c5a:	f7ff befc 	b.w	8008a56 <__retarget_lock_release_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20002994 	.word	0x20002994

08008c64 <__ssputs_r>:
 8008c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c68:	688e      	ldr	r6, [r1, #8]
 8008c6a:	461f      	mov	r7, r3
 8008c6c:	42be      	cmp	r6, r7
 8008c6e:	680b      	ldr	r3, [r1, #0]
 8008c70:	4682      	mov	sl, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	4690      	mov	r8, r2
 8008c76:	d82c      	bhi.n	8008cd2 <__ssputs_r+0x6e>
 8008c78:	898a      	ldrh	r2, [r1, #12]
 8008c7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c7e:	d026      	beq.n	8008cce <__ssputs_r+0x6a>
 8008c80:	6965      	ldr	r5, [r4, #20]
 8008c82:	6909      	ldr	r1, [r1, #16]
 8008c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c88:	eba3 0901 	sub.w	r9, r3, r1
 8008c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c90:	1c7b      	adds	r3, r7, #1
 8008c92:	444b      	add	r3, r9
 8008c94:	106d      	asrs	r5, r5, #1
 8008c96:	429d      	cmp	r5, r3
 8008c98:	bf38      	it	cc
 8008c9a:	461d      	movcc	r5, r3
 8008c9c:	0553      	lsls	r3, r2, #21
 8008c9e:	d527      	bpl.n	8008cf0 <__ssputs_r+0x8c>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7ff ff53 	bl	8008b4c <_malloc_r>
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	b360      	cbz	r0, 8008d04 <__ssputs_r+0xa0>
 8008caa:	6921      	ldr	r1, [r4, #16]
 8008cac:	464a      	mov	r2, r9
 8008cae:	f7ff fed3 	bl	8008a58 <memcpy>
 8008cb2:	89a3      	ldrh	r3, [r4, #12]
 8008cb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	6126      	str	r6, [r4, #16]
 8008cc0:	6165      	str	r5, [r4, #20]
 8008cc2:	444e      	add	r6, r9
 8008cc4:	eba5 0509 	sub.w	r5, r5, r9
 8008cc8:	6026      	str	r6, [r4, #0]
 8008cca:	60a5      	str	r5, [r4, #8]
 8008ccc:	463e      	mov	r6, r7
 8008cce:	42be      	cmp	r6, r7
 8008cd0:	d900      	bls.n	8008cd4 <__ssputs_r+0x70>
 8008cd2:	463e      	mov	r6, r7
 8008cd4:	6820      	ldr	r0, [r4, #0]
 8008cd6:	4632      	mov	r2, r6
 8008cd8:	4641      	mov	r1, r8
 8008cda:	f000 faab 	bl	8009234 <memmove>
 8008cde:	68a3      	ldr	r3, [r4, #8]
 8008ce0:	1b9b      	subs	r3, r3, r6
 8008ce2:	60a3      	str	r3, [r4, #8]
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	4433      	add	r3, r6
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	2000      	movs	r0, #0
 8008cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf0:	462a      	mov	r2, r5
 8008cf2:	f000 fac9 	bl	8009288 <_realloc_r>
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d1e0      	bne.n	8008cbe <__ssputs_r+0x5a>
 8008cfc:	6921      	ldr	r1, [r4, #16]
 8008cfe:	4650      	mov	r0, sl
 8008d00:	f7ff feb8 	bl	8008a74 <_free_r>
 8008d04:	230c      	movs	r3, #12
 8008d06:	f8ca 3000 	str.w	r3, [sl]
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	f04f 30ff 	mov.w	r0, #4294967295
 8008d16:	e7e9      	b.n	8008cec <__ssputs_r+0x88>

08008d18 <_svfiprintf_r>:
 8008d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	4698      	mov	r8, r3
 8008d1e:	898b      	ldrh	r3, [r1, #12]
 8008d20:	061b      	lsls	r3, r3, #24
 8008d22:	b09d      	sub	sp, #116	; 0x74
 8008d24:	4607      	mov	r7, r0
 8008d26:	460d      	mov	r5, r1
 8008d28:	4614      	mov	r4, r2
 8008d2a:	d50e      	bpl.n	8008d4a <_svfiprintf_r+0x32>
 8008d2c:	690b      	ldr	r3, [r1, #16]
 8008d2e:	b963      	cbnz	r3, 8008d4a <_svfiprintf_r+0x32>
 8008d30:	2140      	movs	r1, #64	; 0x40
 8008d32:	f7ff ff0b 	bl	8008b4c <_malloc_r>
 8008d36:	6028      	str	r0, [r5, #0]
 8008d38:	6128      	str	r0, [r5, #16]
 8008d3a:	b920      	cbnz	r0, 8008d46 <_svfiprintf_r+0x2e>
 8008d3c:	230c      	movs	r3, #12
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	f04f 30ff 	mov.w	r0, #4294967295
 8008d44:	e0d0      	b.n	8008ee8 <_svfiprintf_r+0x1d0>
 8008d46:	2340      	movs	r3, #64	; 0x40
 8008d48:	616b      	str	r3, [r5, #20]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d4e:	2320      	movs	r3, #32
 8008d50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d58:	2330      	movs	r3, #48	; 0x30
 8008d5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f00 <_svfiprintf_r+0x1e8>
 8008d5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d62:	f04f 0901 	mov.w	r9, #1
 8008d66:	4623      	mov	r3, r4
 8008d68:	469a      	mov	sl, r3
 8008d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d6e:	b10a      	cbz	r2, 8008d74 <_svfiprintf_r+0x5c>
 8008d70:	2a25      	cmp	r2, #37	; 0x25
 8008d72:	d1f9      	bne.n	8008d68 <_svfiprintf_r+0x50>
 8008d74:	ebba 0b04 	subs.w	fp, sl, r4
 8008d78:	d00b      	beq.n	8008d92 <_svfiprintf_r+0x7a>
 8008d7a:	465b      	mov	r3, fp
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4638      	mov	r0, r7
 8008d82:	f7ff ff6f 	bl	8008c64 <__ssputs_r>
 8008d86:	3001      	adds	r0, #1
 8008d88:	f000 80a9 	beq.w	8008ede <_svfiprintf_r+0x1c6>
 8008d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d8e:	445a      	add	r2, fp
 8008d90:	9209      	str	r2, [sp, #36]	; 0x24
 8008d92:	f89a 3000 	ldrb.w	r3, [sl]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 80a1 	beq.w	8008ede <_svfiprintf_r+0x1c6>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008da6:	f10a 0a01 	add.w	sl, sl, #1
 8008daa:	9304      	str	r3, [sp, #16]
 8008dac:	9307      	str	r3, [sp, #28]
 8008dae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008db2:	931a      	str	r3, [sp, #104]	; 0x68
 8008db4:	4654      	mov	r4, sl
 8008db6:	2205      	movs	r2, #5
 8008db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dbc:	4850      	ldr	r0, [pc, #320]	; (8008f00 <_svfiprintf_r+0x1e8>)
 8008dbe:	f7f7 fa27 	bl	8000210 <memchr>
 8008dc2:	9a04      	ldr	r2, [sp, #16]
 8008dc4:	b9d8      	cbnz	r0, 8008dfe <_svfiprintf_r+0xe6>
 8008dc6:	06d0      	lsls	r0, r2, #27
 8008dc8:	bf44      	itt	mi
 8008dca:	2320      	movmi	r3, #32
 8008dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dd0:	0711      	lsls	r1, r2, #28
 8008dd2:	bf44      	itt	mi
 8008dd4:	232b      	movmi	r3, #43	; 0x2b
 8008dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dda:	f89a 3000 	ldrb.w	r3, [sl]
 8008dde:	2b2a      	cmp	r3, #42	; 0x2a
 8008de0:	d015      	beq.n	8008e0e <_svfiprintf_r+0xf6>
 8008de2:	9a07      	ldr	r2, [sp, #28]
 8008de4:	4654      	mov	r4, sl
 8008de6:	2000      	movs	r0, #0
 8008de8:	f04f 0c0a 	mov.w	ip, #10
 8008dec:	4621      	mov	r1, r4
 8008dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df2:	3b30      	subs	r3, #48	; 0x30
 8008df4:	2b09      	cmp	r3, #9
 8008df6:	d94d      	bls.n	8008e94 <_svfiprintf_r+0x17c>
 8008df8:	b1b0      	cbz	r0, 8008e28 <_svfiprintf_r+0x110>
 8008dfa:	9207      	str	r2, [sp, #28]
 8008dfc:	e014      	b.n	8008e28 <_svfiprintf_r+0x110>
 8008dfe:	eba0 0308 	sub.w	r3, r0, r8
 8008e02:	fa09 f303 	lsl.w	r3, r9, r3
 8008e06:	4313      	orrs	r3, r2
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	46a2      	mov	sl, r4
 8008e0c:	e7d2      	b.n	8008db4 <_svfiprintf_r+0x9c>
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	1d19      	adds	r1, r3, #4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	9103      	str	r1, [sp, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bfbb      	ittet	lt
 8008e1a:	425b      	neglt	r3, r3
 8008e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e20:	9307      	strge	r3, [sp, #28]
 8008e22:	9307      	strlt	r3, [sp, #28]
 8008e24:	bfb8      	it	lt
 8008e26:	9204      	strlt	r2, [sp, #16]
 8008e28:	7823      	ldrb	r3, [r4, #0]
 8008e2a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e2c:	d10c      	bne.n	8008e48 <_svfiprintf_r+0x130>
 8008e2e:	7863      	ldrb	r3, [r4, #1]
 8008e30:	2b2a      	cmp	r3, #42	; 0x2a
 8008e32:	d134      	bne.n	8008e9e <_svfiprintf_r+0x186>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	1d1a      	adds	r2, r3, #4
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	9203      	str	r2, [sp, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	bfb8      	it	lt
 8008e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e44:	3402      	adds	r4, #2
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f10 <_svfiprintf_r+0x1f8>
 8008e4c:	7821      	ldrb	r1, [r4, #0]
 8008e4e:	2203      	movs	r2, #3
 8008e50:	4650      	mov	r0, sl
 8008e52:	f7f7 f9dd 	bl	8000210 <memchr>
 8008e56:	b138      	cbz	r0, 8008e68 <_svfiprintf_r+0x150>
 8008e58:	9b04      	ldr	r3, [sp, #16]
 8008e5a:	eba0 000a 	sub.w	r0, r0, sl
 8008e5e:	2240      	movs	r2, #64	; 0x40
 8008e60:	4082      	lsls	r2, r0
 8008e62:	4313      	orrs	r3, r2
 8008e64:	3401      	adds	r4, #1
 8008e66:	9304      	str	r3, [sp, #16]
 8008e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e6c:	4825      	ldr	r0, [pc, #148]	; (8008f04 <_svfiprintf_r+0x1ec>)
 8008e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e72:	2206      	movs	r2, #6
 8008e74:	f7f7 f9cc 	bl	8000210 <memchr>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d038      	beq.n	8008eee <_svfiprintf_r+0x1d6>
 8008e7c:	4b22      	ldr	r3, [pc, #136]	; (8008f08 <_svfiprintf_r+0x1f0>)
 8008e7e:	bb1b      	cbnz	r3, 8008ec8 <_svfiprintf_r+0x1b0>
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	3307      	adds	r3, #7
 8008e84:	f023 0307 	bic.w	r3, r3, #7
 8008e88:	3308      	adds	r3, #8
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8e:	4433      	add	r3, r6
 8008e90:	9309      	str	r3, [sp, #36]	; 0x24
 8008e92:	e768      	b.n	8008d66 <_svfiprintf_r+0x4e>
 8008e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e98:	460c      	mov	r4, r1
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	e7a6      	b.n	8008dec <_svfiprintf_r+0xd4>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	3401      	adds	r4, #1
 8008ea2:	9305      	str	r3, [sp, #20]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f04f 0c0a 	mov.w	ip, #10
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb0:	3a30      	subs	r2, #48	; 0x30
 8008eb2:	2a09      	cmp	r2, #9
 8008eb4:	d903      	bls.n	8008ebe <_svfiprintf_r+0x1a6>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0c6      	beq.n	8008e48 <_svfiprintf_r+0x130>
 8008eba:	9105      	str	r1, [sp, #20]
 8008ebc:	e7c4      	b.n	8008e48 <_svfiprintf_r+0x130>
 8008ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e7f0      	b.n	8008eaa <_svfiprintf_r+0x192>
 8008ec8:	ab03      	add	r3, sp, #12
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	462a      	mov	r2, r5
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <_svfiprintf_r+0x1f4>)
 8008ed0:	a904      	add	r1, sp, #16
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	1c42      	adds	r2, r0, #1
 8008eda:	4606      	mov	r6, r0
 8008edc:	d1d6      	bne.n	8008e8c <_svfiprintf_r+0x174>
 8008ede:	89ab      	ldrh	r3, [r5, #12]
 8008ee0:	065b      	lsls	r3, r3, #25
 8008ee2:	f53f af2d 	bmi.w	8008d40 <_svfiprintf_r+0x28>
 8008ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ee8:	b01d      	add	sp, #116	; 0x74
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	ab03      	add	r3, sp, #12
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <_svfiprintf_r+0x1f4>)
 8008ef6:	a904      	add	r1, sp, #16
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f000 f879 	bl	8008ff0 <_printf_i>
 8008efe:	e7eb      	b.n	8008ed8 <_svfiprintf_r+0x1c0>
 8008f00:	0800994c 	.word	0x0800994c
 8008f04:	08009956 	.word	0x08009956
 8008f08:	00000000 	.word	0x00000000
 8008f0c:	08008c65 	.word	0x08008c65
 8008f10:	08009952 	.word	0x08009952

08008f14 <_printf_common>:
 8008f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f18:	4616      	mov	r6, r2
 8008f1a:	4699      	mov	r9, r3
 8008f1c:	688a      	ldr	r2, [r1, #8]
 8008f1e:	690b      	ldr	r3, [r1, #16]
 8008f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f24:	4293      	cmp	r3, r2
 8008f26:	bfb8      	it	lt
 8008f28:	4613      	movlt	r3, r2
 8008f2a:	6033      	str	r3, [r6, #0]
 8008f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f30:	4607      	mov	r7, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	b10a      	cbz	r2, 8008f3a <_printf_common+0x26>
 8008f36:	3301      	adds	r3, #1
 8008f38:	6033      	str	r3, [r6, #0]
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	0699      	lsls	r1, r3, #26
 8008f3e:	bf42      	ittt	mi
 8008f40:	6833      	ldrmi	r3, [r6, #0]
 8008f42:	3302      	addmi	r3, #2
 8008f44:	6033      	strmi	r3, [r6, #0]
 8008f46:	6825      	ldr	r5, [r4, #0]
 8008f48:	f015 0506 	ands.w	r5, r5, #6
 8008f4c:	d106      	bne.n	8008f5c <_printf_common+0x48>
 8008f4e:	f104 0a19 	add.w	sl, r4, #25
 8008f52:	68e3      	ldr	r3, [r4, #12]
 8008f54:	6832      	ldr	r2, [r6, #0]
 8008f56:	1a9b      	subs	r3, r3, r2
 8008f58:	42ab      	cmp	r3, r5
 8008f5a:	dc26      	bgt.n	8008faa <_printf_common+0x96>
 8008f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f60:	1e13      	subs	r3, r2, #0
 8008f62:	6822      	ldr	r2, [r4, #0]
 8008f64:	bf18      	it	ne
 8008f66:	2301      	movne	r3, #1
 8008f68:	0692      	lsls	r2, r2, #26
 8008f6a:	d42b      	bmi.n	8008fc4 <_printf_common+0xb0>
 8008f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f70:	4649      	mov	r1, r9
 8008f72:	4638      	mov	r0, r7
 8008f74:	47c0      	blx	r8
 8008f76:	3001      	adds	r0, #1
 8008f78:	d01e      	beq.n	8008fb8 <_printf_common+0xa4>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	6922      	ldr	r2, [r4, #16]
 8008f7e:	f003 0306 	and.w	r3, r3, #6
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	bf02      	ittt	eq
 8008f86:	68e5      	ldreq	r5, [r4, #12]
 8008f88:	6833      	ldreq	r3, [r6, #0]
 8008f8a:	1aed      	subeq	r5, r5, r3
 8008f8c:	68a3      	ldr	r3, [r4, #8]
 8008f8e:	bf0c      	ite	eq
 8008f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f94:	2500      	movne	r5, #0
 8008f96:	4293      	cmp	r3, r2
 8008f98:	bfc4      	itt	gt
 8008f9a:	1a9b      	subgt	r3, r3, r2
 8008f9c:	18ed      	addgt	r5, r5, r3
 8008f9e:	2600      	movs	r6, #0
 8008fa0:	341a      	adds	r4, #26
 8008fa2:	42b5      	cmp	r5, r6
 8008fa4:	d11a      	bne.n	8008fdc <_printf_common+0xc8>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	e008      	b.n	8008fbc <_printf_common+0xa8>
 8008faa:	2301      	movs	r3, #1
 8008fac:	4652      	mov	r2, sl
 8008fae:	4649      	mov	r1, r9
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	47c0      	blx	r8
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d103      	bne.n	8008fc0 <_printf_common+0xac>
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc0:	3501      	adds	r5, #1
 8008fc2:	e7c6      	b.n	8008f52 <_printf_common+0x3e>
 8008fc4:	18e1      	adds	r1, r4, r3
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	2030      	movs	r0, #48	; 0x30
 8008fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fce:	4422      	add	r2, r4
 8008fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fd8:	3302      	adds	r3, #2
 8008fda:	e7c7      	b.n	8008f6c <_printf_common+0x58>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	4622      	mov	r2, r4
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	47c0      	blx	r8
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	d0e6      	beq.n	8008fb8 <_printf_common+0xa4>
 8008fea:	3601      	adds	r6, #1
 8008fec:	e7d9      	b.n	8008fa2 <_printf_common+0x8e>
	...

08008ff0 <_printf_i>:
 8008ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff4:	7e0f      	ldrb	r7, [r1, #24]
 8008ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ff8:	2f78      	cmp	r7, #120	; 0x78
 8008ffa:	4691      	mov	r9, r2
 8008ffc:	4680      	mov	r8, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	469a      	mov	sl, r3
 8009002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009006:	d807      	bhi.n	8009018 <_printf_i+0x28>
 8009008:	2f62      	cmp	r7, #98	; 0x62
 800900a:	d80a      	bhi.n	8009022 <_printf_i+0x32>
 800900c:	2f00      	cmp	r7, #0
 800900e:	f000 80d4 	beq.w	80091ba <_printf_i+0x1ca>
 8009012:	2f58      	cmp	r7, #88	; 0x58
 8009014:	f000 80c0 	beq.w	8009198 <_printf_i+0x1a8>
 8009018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800901c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009020:	e03a      	b.n	8009098 <_printf_i+0xa8>
 8009022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009026:	2b15      	cmp	r3, #21
 8009028:	d8f6      	bhi.n	8009018 <_printf_i+0x28>
 800902a:	a101      	add	r1, pc, #4	; (adr r1, 8009030 <_printf_i+0x40>)
 800902c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009030:	08009089 	.word	0x08009089
 8009034:	0800909d 	.word	0x0800909d
 8009038:	08009019 	.word	0x08009019
 800903c:	08009019 	.word	0x08009019
 8009040:	08009019 	.word	0x08009019
 8009044:	08009019 	.word	0x08009019
 8009048:	0800909d 	.word	0x0800909d
 800904c:	08009019 	.word	0x08009019
 8009050:	08009019 	.word	0x08009019
 8009054:	08009019 	.word	0x08009019
 8009058:	08009019 	.word	0x08009019
 800905c:	080091a1 	.word	0x080091a1
 8009060:	080090c9 	.word	0x080090c9
 8009064:	0800915b 	.word	0x0800915b
 8009068:	08009019 	.word	0x08009019
 800906c:	08009019 	.word	0x08009019
 8009070:	080091c3 	.word	0x080091c3
 8009074:	08009019 	.word	0x08009019
 8009078:	080090c9 	.word	0x080090c9
 800907c:	08009019 	.word	0x08009019
 8009080:	08009019 	.word	0x08009019
 8009084:	08009163 	.word	0x08009163
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	1d1a      	adds	r2, r3, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	602a      	str	r2, [r5, #0]
 8009090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009098:	2301      	movs	r3, #1
 800909a:	e09f      	b.n	80091dc <_printf_i+0x1ec>
 800909c:	6820      	ldr	r0, [r4, #0]
 800909e:	682b      	ldr	r3, [r5, #0]
 80090a0:	0607      	lsls	r7, r0, #24
 80090a2:	f103 0104 	add.w	r1, r3, #4
 80090a6:	6029      	str	r1, [r5, #0]
 80090a8:	d501      	bpl.n	80090ae <_printf_i+0xbe>
 80090aa:	681e      	ldr	r6, [r3, #0]
 80090ac:	e003      	b.n	80090b6 <_printf_i+0xc6>
 80090ae:	0646      	lsls	r6, r0, #25
 80090b0:	d5fb      	bpl.n	80090aa <_printf_i+0xba>
 80090b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80090b6:	2e00      	cmp	r6, #0
 80090b8:	da03      	bge.n	80090c2 <_printf_i+0xd2>
 80090ba:	232d      	movs	r3, #45	; 0x2d
 80090bc:	4276      	negs	r6, r6
 80090be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c2:	485a      	ldr	r0, [pc, #360]	; (800922c <_printf_i+0x23c>)
 80090c4:	230a      	movs	r3, #10
 80090c6:	e012      	b.n	80090ee <_printf_i+0xfe>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	6820      	ldr	r0, [r4, #0]
 80090cc:	1d19      	adds	r1, r3, #4
 80090ce:	6029      	str	r1, [r5, #0]
 80090d0:	0605      	lsls	r5, r0, #24
 80090d2:	d501      	bpl.n	80090d8 <_printf_i+0xe8>
 80090d4:	681e      	ldr	r6, [r3, #0]
 80090d6:	e002      	b.n	80090de <_printf_i+0xee>
 80090d8:	0641      	lsls	r1, r0, #25
 80090da:	d5fb      	bpl.n	80090d4 <_printf_i+0xe4>
 80090dc:	881e      	ldrh	r6, [r3, #0]
 80090de:	4853      	ldr	r0, [pc, #332]	; (800922c <_printf_i+0x23c>)
 80090e0:	2f6f      	cmp	r7, #111	; 0x6f
 80090e2:	bf0c      	ite	eq
 80090e4:	2308      	moveq	r3, #8
 80090e6:	230a      	movne	r3, #10
 80090e8:	2100      	movs	r1, #0
 80090ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090ee:	6865      	ldr	r5, [r4, #4]
 80090f0:	60a5      	str	r5, [r4, #8]
 80090f2:	2d00      	cmp	r5, #0
 80090f4:	bfa2      	ittt	ge
 80090f6:	6821      	ldrge	r1, [r4, #0]
 80090f8:	f021 0104 	bicge.w	r1, r1, #4
 80090fc:	6021      	strge	r1, [r4, #0]
 80090fe:	b90e      	cbnz	r6, 8009104 <_printf_i+0x114>
 8009100:	2d00      	cmp	r5, #0
 8009102:	d04b      	beq.n	800919c <_printf_i+0x1ac>
 8009104:	4615      	mov	r5, r2
 8009106:	fbb6 f1f3 	udiv	r1, r6, r3
 800910a:	fb03 6711 	mls	r7, r3, r1, r6
 800910e:	5dc7      	ldrb	r7, [r0, r7]
 8009110:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009114:	4637      	mov	r7, r6
 8009116:	42bb      	cmp	r3, r7
 8009118:	460e      	mov	r6, r1
 800911a:	d9f4      	bls.n	8009106 <_printf_i+0x116>
 800911c:	2b08      	cmp	r3, #8
 800911e:	d10b      	bne.n	8009138 <_printf_i+0x148>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	07de      	lsls	r6, r3, #31
 8009124:	d508      	bpl.n	8009138 <_printf_i+0x148>
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	6861      	ldr	r1, [r4, #4]
 800912a:	4299      	cmp	r1, r3
 800912c:	bfde      	ittt	le
 800912e:	2330      	movle	r3, #48	; 0x30
 8009130:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009134:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009138:	1b52      	subs	r2, r2, r5
 800913a:	6122      	str	r2, [r4, #16]
 800913c:	f8cd a000 	str.w	sl, [sp]
 8009140:	464b      	mov	r3, r9
 8009142:	aa03      	add	r2, sp, #12
 8009144:	4621      	mov	r1, r4
 8009146:	4640      	mov	r0, r8
 8009148:	f7ff fee4 	bl	8008f14 <_printf_common>
 800914c:	3001      	adds	r0, #1
 800914e:	d14a      	bne.n	80091e6 <_printf_i+0x1f6>
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	b004      	add	sp, #16
 8009156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	f043 0320 	orr.w	r3, r3, #32
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	4833      	ldr	r0, [pc, #204]	; (8009230 <_printf_i+0x240>)
 8009164:	2778      	movs	r7, #120	; 0x78
 8009166:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	6829      	ldr	r1, [r5, #0]
 800916e:	061f      	lsls	r7, r3, #24
 8009170:	f851 6b04 	ldr.w	r6, [r1], #4
 8009174:	d402      	bmi.n	800917c <_printf_i+0x18c>
 8009176:	065f      	lsls	r7, r3, #25
 8009178:	bf48      	it	mi
 800917a:	b2b6      	uxthmi	r6, r6
 800917c:	07df      	lsls	r7, r3, #31
 800917e:	bf48      	it	mi
 8009180:	f043 0320 	orrmi.w	r3, r3, #32
 8009184:	6029      	str	r1, [r5, #0]
 8009186:	bf48      	it	mi
 8009188:	6023      	strmi	r3, [r4, #0]
 800918a:	b91e      	cbnz	r6, 8009194 <_printf_i+0x1a4>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	f023 0320 	bic.w	r3, r3, #32
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	2310      	movs	r3, #16
 8009196:	e7a7      	b.n	80090e8 <_printf_i+0xf8>
 8009198:	4824      	ldr	r0, [pc, #144]	; (800922c <_printf_i+0x23c>)
 800919a:	e7e4      	b.n	8009166 <_printf_i+0x176>
 800919c:	4615      	mov	r5, r2
 800919e:	e7bd      	b.n	800911c <_printf_i+0x12c>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	6826      	ldr	r6, [r4, #0]
 80091a4:	6961      	ldr	r1, [r4, #20]
 80091a6:	1d18      	adds	r0, r3, #4
 80091a8:	6028      	str	r0, [r5, #0]
 80091aa:	0635      	lsls	r5, r6, #24
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	d501      	bpl.n	80091b4 <_printf_i+0x1c4>
 80091b0:	6019      	str	r1, [r3, #0]
 80091b2:	e002      	b.n	80091ba <_printf_i+0x1ca>
 80091b4:	0670      	lsls	r0, r6, #25
 80091b6:	d5fb      	bpl.n	80091b0 <_printf_i+0x1c0>
 80091b8:	8019      	strh	r1, [r3, #0]
 80091ba:	2300      	movs	r3, #0
 80091bc:	6123      	str	r3, [r4, #16]
 80091be:	4615      	mov	r5, r2
 80091c0:	e7bc      	b.n	800913c <_printf_i+0x14c>
 80091c2:	682b      	ldr	r3, [r5, #0]
 80091c4:	1d1a      	adds	r2, r3, #4
 80091c6:	602a      	str	r2, [r5, #0]
 80091c8:	681d      	ldr	r5, [r3, #0]
 80091ca:	6862      	ldr	r2, [r4, #4]
 80091cc:	2100      	movs	r1, #0
 80091ce:	4628      	mov	r0, r5
 80091d0:	f7f7 f81e 	bl	8000210 <memchr>
 80091d4:	b108      	cbz	r0, 80091da <_printf_i+0x1ea>
 80091d6:	1b40      	subs	r0, r0, r5
 80091d8:	6060      	str	r0, [r4, #4]
 80091da:	6863      	ldr	r3, [r4, #4]
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	2300      	movs	r3, #0
 80091e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091e4:	e7aa      	b.n	800913c <_printf_i+0x14c>
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	462a      	mov	r2, r5
 80091ea:	4649      	mov	r1, r9
 80091ec:	4640      	mov	r0, r8
 80091ee:	47d0      	blx	sl
 80091f0:	3001      	adds	r0, #1
 80091f2:	d0ad      	beq.n	8009150 <_printf_i+0x160>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	079b      	lsls	r3, r3, #30
 80091f8:	d413      	bmi.n	8009222 <_printf_i+0x232>
 80091fa:	68e0      	ldr	r0, [r4, #12]
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	4298      	cmp	r0, r3
 8009200:	bfb8      	it	lt
 8009202:	4618      	movlt	r0, r3
 8009204:	e7a6      	b.n	8009154 <_printf_i+0x164>
 8009206:	2301      	movs	r3, #1
 8009208:	4632      	mov	r2, r6
 800920a:	4649      	mov	r1, r9
 800920c:	4640      	mov	r0, r8
 800920e:	47d0      	blx	sl
 8009210:	3001      	adds	r0, #1
 8009212:	d09d      	beq.n	8009150 <_printf_i+0x160>
 8009214:	3501      	adds	r5, #1
 8009216:	68e3      	ldr	r3, [r4, #12]
 8009218:	9903      	ldr	r1, [sp, #12]
 800921a:	1a5b      	subs	r3, r3, r1
 800921c:	42ab      	cmp	r3, r5
 800921e:	dcf2      	bgt.n	8009206 <_printf_i+0x216>
 8009220:	e7eb      	b.n	80091fa <_printf_i+0x20a>
 8009222:	2500      	movs	r5, #0
 8009224:	f104 0619 	add.w	r6, r4, #25
 8009228:	e7f5      	b.n	8009216 <_printf_i+0x226>
 800922a:	bf00      	nop
 800922c:	0800995d 	.word	0x0800995d
 8009230:	0800996e 	.word	0x0800996e

08009234 <memmove>:
 8009234:	4288      	cmp	r0, r1
 8009236:	b510      	push	{r4, lr}
 8009238:	eb01 0402 	add.w	r4, r1, r2
 800923c:	d902      	bls.n	8009244 <memmove+0x10>
 800923e:	4284      	cmp	r4, r0
 8009240:	4623      	mov	r3, r4
 8009242:	d807      	bhi.n	8009254 <memmove+0x20>
 8009244:	1e43      	subs	r3, r0, #1
 8009246:	42a1      	cmp	r1, r4
 8009248:	d008      	beq.n	800925c <memmove+0x28>
 800924a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800924e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009252:	e7f8      	b.n	8009246 <memmove+0x12>
 8009254:	4402      	add	r2, r0
 8009256:	4601      	mov	r1, r0
 8009258:	428a      	cmp	r2, r1
 800925a:	d100      	bne.n	800925e <memmove+0x2a>
 800925c:	bd10      	pop	{r4, pc}
 800925e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009266:	e7f7      	b.n	8009258 <memmove+0x24>

08009268 <_sbrk_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d06      	ldr	r5, [pc, #24]	; (8009284 <_sbrk_r+0x1c>)
 800926c:	2300      	movs	r3, #0
 800926e:	4604      	mov	r4, r0
 8009270:	4608      	mov	r0, r1
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	f7f8 fcee 	bl	8001c54 <_sbrk>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_sbrk_r+0x1a>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_sbrk_r+0x1a>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20002990 	.word	0x20002990

08009288 <_realloc_r>:
 8009288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800928c:	4680      	mov	r8, r0
 800928e:	4614      	mov	r4, r2
 8009290:	460e      	mov	r6, r1
 8009292:	b921      	cbnz	r1, 800929e <_realloc_r+0x16>
 8009294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	4611      	mov	r1, r2
 800929a:	f7ff bc57 	b.w	8008b4c <_malloc_r>
 800929e:	b92a      	cbnz	r2, 80092ac <_realloc_r+0x24>
 80092a0:	f7ff fbe8 	bl	8008a74 <_free_r>
 80092a4:	4625      	mov	r5, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ac:	f000 f81b 	bl	80092e6 <_malloc_usable_size_r>
 80092b0:	4284      	cmp	r4, r0
 80092b2:	4607      	mov	r7, r0
 80092b4:	d802      	bhi.n	80092bc <_realloc_r+0x34>
 80092b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092ba:	d812      	bhi.n	80092e2 <_realloc_r+0x5a>
 80092bc:	4621      	mov	r1, r4
 80092be:	4640      	mov	r0, r8
 80092c0:	f7ff fc44 	bl	8008b4c <_malloc_r>
 80092c4:	4605      	mov	r5, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d0ed      	beq.n	80092a6 <_realloc_r+0x1e>
 80092ca:	42bc      	cmp	r4, r7
 80092cc:	4622      	mov	r2, r4
 80092ce:	4631      	mov	r1, r6
 80092d0:	bf28      	it	cs
 80092d2:	463a      	movcs	r2, r7
 80092d4:	f7ff fbc0 	bl	8008a58 <memcpy>
 80092d8:	4631      	mov	r1, r6
 80092da:	4640      	mov	r0, r8
 80092dc:	f7ff fbca 	bl	8008a74 <_free_r>
 80092e0:	e7e1      	b.n	80092a6 <_realloc_r+0x1e>
 80092e2:	4635      	mov	r5, r6
 80092e4:	e7df      	b.n	80092a6 <_realloc_r+0x1e>

080092e6 <_malloc_usable_size_r>:
 80092e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ea:	1f18      	subs	r0, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bfbc      	itt	lt
 80092f0:	580b      	ldrlt	r3, [r1, r0]
 80092f2:	18c0      	addlt	r0, r0, r3
 80092f4:	4770      	bx	lr
	...

080092f8 <_init>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr

08009304 <_fini>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	bf00      	nop
 8009308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930a:	bc08      	pop	{r3}
 800930c:	469e      	mov	lr, r3
 800930e:	4770      	bx	lr

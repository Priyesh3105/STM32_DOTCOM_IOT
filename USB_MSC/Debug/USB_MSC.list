
USB_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e60  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800901c  0800901c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c4  080090c4  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  080090c4  080090c4  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090c4  080090c4  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  080090cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019c84  20000134  08009200  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019db8  08009200  00029db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114df  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034bd  00000000  00000000  00031686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00034b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b52  00000000  00000000  00035a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bf6e  00000000  00000000  000365ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145f1  00000000  00000000  00062558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000faebd  00000000  00000000  00076b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c88  00000000  00000000  00171a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00175690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000134 	.word	0x20000134
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08009004 	.word	0x08009004

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000138 	.word	0x20000138
 80001f8:	08009004 	.word	0x08009004

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f987 	bl	8000512 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f830 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f87c 	bl	8000304 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800020c:	f008 f87c 	bl	8008308 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000216:	4812      	ldr	r0, [pc, #72]	; (8000260 <main+0x64>)
 8000218:	f000 fcb8 	bl	8000b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2180      	movs	r1, #128	; 0x80
 8000220:	4810      	ldr	r0, [pc, #64]	; (8000264 <main+0x68>)
 8000222:	f000 fcb3 	bl	8000b8c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000226:	2064      	movs	r0, #100	; 0x64
 8000228:	f000 f9e8 	bl	80005fc <HAL_Delay>
		HAL_GPIO_TogglePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin);
 800022c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <main+0x64>)
 8000232:	f000 fcc3 	bl	8000bbc <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin);
 8000236:	2180      	movs	r1, #128	; 0x80
 8000238:	480a      	ldr	r0, [pc, #40]	; (8000264 <main+0x68>)
 800023a:	f000 fcbf 	bl	8000bbc <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(BSP_BLUE_LED_GPIO_Port, BSP_BLUE_LED_Pin,
 800023e:	2201      	movs	r2, #1
 8000240:	2180      	movs	r1, #128	; 0x80
 8000242:	4807      	ldr	r0, [pc, #28]	; (8000260 <main+0x64>)
 8000244:	f000 fca2 	bl	8000b8c <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
		HAL_Delay(100);
 8000248:	2064      	movs	r0, #100	; 0x64
 800024a:	f000 f9d7 	bl	80005fc <HAL_Delay>
		HAL_GPIO_TogglePin(BSP_BLUE_LED_GPIO_Port, BSP_BLUE_LED_Pin);
 800024e:	2180      	movs	r1, #128	; 0x80
 8000250:	4803      	ldr	r0, [pc, #12]	; (8000260 <main+0x64>)
 8000252:	f000 fcb3 	bl	8000bbc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000256:	2064      	movs	r0, #100	; 0x64
 8000258:	f000 f9d0 	bl	80005fc <HAL_Delay>
		HAL_GPIO_WritePin(BSP_RED_LED_GPIO_Port, BSP_RED_LED_Pin, GPIO_PIN_SET);
 800025c:	e7d8      	b.n	8000210 <main+0x14>
 800025e:	bf00      	nop
 8000260:	48000400 	.word	0x48000400
 8000264:	48000800 	.word	0x48000800

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b096      	sub	sp, #88	; 0x58
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0314 	add.w	r3, r7, #20
 8000272:	2244      	movs	r2, #68	; 0x44
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f008 fe8a 	bl	8008f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	463b      	mov	r3, r7
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800028a:	2000      	movs	r0, #0
 800028c:	f001 fea4 	bl	8001fd8 <HAL_PWREx_ControlVoltageScaling>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000296:	f000 f8a3 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029a:	2301      	movs	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a4:	2302      	movs	r3, #2
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a8:	2303      	movs	r3, #3
 80002aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80002b0:	231e      	movs	r3, #30
 80002b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b4:	2302      	movs	r3, #2
 80002b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b8:	2302      	movs	r3, #2
 80002ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002bc:	2302      	movs	r3, #2
 80002be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 ff3b 	bl	8002140 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002d0:	f000 f886 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	2303      	movs	r3, #3
 80002da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002e8:	463b      	mov	r3, r7
 80002ea:	2105      	movs	r1, #5
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 fb41 	bl	8002974 <HAL_RCC_ClockConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80002f8:	f000 f872 	bl	80003e0 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3758      	adds	r7, #88	; 0x58
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08a      	sub	sp, #40	; 0x28
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0314 	add.w	r3, r7, #20
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031a:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <MX_GPIO_Init+0xd0>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	f003 0304 	and.w	r3, r3, #4
 800032e:	613b      	str	r3, [r7, #16]
 8000330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	4a27      	ldr	r2, [pc, #156]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800033c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034a:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <MX_GPIO_Init+0xd0>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	4a21      	ldr	r2, [pc, #132]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000350:	f043 0302 	orr.w	r3, r3, #2
 8000354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000356:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	f003 0302 	and.w	r3, r3, #2
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	4a1b      	ldr	r2, [pc, #108]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <MX_GPIO_Init+0xd0>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BSP_RED_LED_Pin|BSP_BLUE_LED_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000380:	4815      	ldr	r0, [pc, #84]	; (80003d8 <MX_GPIO_Init+0xd4>)
 8000382:	f000 fc03 	bl	8000b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_GREEN_LED_GPIO_Port, BSP_GREEN_LED_Pin, GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	4814      	ldr	r0, [pc, #80]	; (80003dc <MX_GPIO_Init+0xd8>)
 800038c:	f000 fbfe 	bl	8000b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSP_RED_LED_Pin BSP_BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BSP_RED_LED_Pin|BSP_BLUE_LED_Pin;
 8000390:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2300      	movs	r3, #0
 80003a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a2:	f107 0314 	add.w	r3, r7, #20
 80003a6:	4619      	mov	r1, r3
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <MX_GPIO_Init+0xd4>)
 80003aa:	f000 fa5d 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = BSP_GREEN_LED_Pin;
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2300      	movs	r3, #0
 80003bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BSP_GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	4619      	mov	r1, r3
 80003c4:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_GPIO_Init+0xd8>)
 80003c6:	f000 fa4f 	bl	8000868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ca:	bf00      	nop
 80003cc:	3728      	adds	r7, #40	; 0x28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	48000400 	.word	0x48000400
 80003dc:	48000800 	.word	0x48000800

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x44>)
 80003f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6613      	str	r3, [r2, #96]	; 0x60
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x44>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_MspInit+0x44>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	6593      	str	r3, [r2, #88]	; 0x58
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_MspInit+0x44>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <NMI_Handler+0x4>

0800043a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <HardFault_Handler+0x4>

08000440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <MemManage_Handler+0x4>

08000446 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <BusFault_Handler+0x4>

0800044c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <UsageFault_Handler+0x4>

08000452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000480:	f000 f89c 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <OTG_FS_IRQHandler+0x10>)
 800048e:	f000 fd02 	bl	8000e96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20019634 	.word	0x20019634

0800049c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <SystemInit+0x20>)
 80004a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <SystemInit+0x20>)
 80004a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000ed00 	.word	0xe000ed00

080004c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c4:	f7ff ffea 	bl	800049c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <LoopForever+0x6>)
  ldr r1, =_edata
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <LoopForever+0xe>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <LoopForever+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ee:	f008 fd57 	bl	8008fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004f2:	f7ff fe83 	bl	80001fc <main>

080004f6 <LoopForever>:

LoopForever:
    b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8000504:	080090cc 	.word	0x080090cc
  ldr r2, =_sbss
 8000508:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 800050c:	20019db8 	.word	0x20019db8

08000510 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_IRQHandler>

08000512 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000518:	2300      	movs	r3, #0
 800051a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f961 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000522:	200f      	movs	r0, #15
 8000524:	f000 f80e 	bl	8000544 <HAL_InitTick>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	e001      	b.n	8000538 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000534:	f7ff ff5a 	bl	80003ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000538:	79fb      	ldrb	r3, [r7, #7]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_InitTick+0x6c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d023      	beq.n	80005a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <HAL_InitTick+0x70>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_InitTick+0x6c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	fbb3 f3f1 	udiv	r3, r3, r1
 800056a:	fbb2 f3f3 	udiv	r3, r2, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f96d 	bl	800084e <HAL_SYSTICK_Config>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10f      	bne.n	800059a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d809      	bhi.n	8000594 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	f000 f937 	bl	80007fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <HAL_InitTick+0x74>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e007      	b.n	80005a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e004      	b.n	80005a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e001      	b.n	80005a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000150 	.word	0x20000150

080005e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000150 	.word	0x20000150

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000604:	f7ff ffee 	bl	80005e4 <HAL_GetTick>
 8000608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000614:	d005      	beq.n	8000622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_Delay+0x44>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000622:	bf00      	nop
 8000624:	f7ff ffde 	bl	80005e4 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	429a      	cmp	r2, r3
 8000632:	d8f7      	bhi.n	8000624 <HAL_Delay+0x28>
  {
  }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000008 	.word	0x20000008

08000644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db0b      	blt.n	80006d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 021f 	and.w	r2, r3, #31
 80006c0:	4907      	ldr	r1, [pc, #28]	; (80006e0 <__NVIC_EnableIRQ+0x38>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	095b      	lsrs	r3, r3, #5
 80006c8:	2001      	movs	r0, #1
 80006ca:	fa00 f202 	lsl.w	r2, r0, r2
 80006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db0a      	blt.n	800070e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	490c      	ldr	r1, [pc, #48]	; (8000730 <__NVIC_SetPriority+0x4c>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070c:	e00a      	b.n	8000724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <__NVIC_SetPriority+0x50>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	3b04      	subs	r3, #4
 800071c:	0112      	lsls	r2, r2, #4
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	440b      	add	r3, r1
 8000722:	761a      	strb	r2, [r3, #24]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000e100 	.word	0xe000e100
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	f1c3 0307 	rsb	r3, r3, #7
 8000752:	2b04      	cmp	r3, #4
 8000754:	bf28      	it	cs
 8000756:	2304      	movcs	r3, #4
 8000758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3304      	adds	r3, #4
 800075e:	2b06      	cmp	r3, #6
 8000760:	d902      	bls.n	8000768 <NVIC_EncodePriority+0x30>
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3b03      	subs	r3, #3
 8000766:	e000      	b.n	800076a <NVIC_EncodePriority+0x32>
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	f04f 32ff 	mov.w	r2, #4294967295
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	43da      	mvns	r2, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	401a      	ands	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000780:	f04f 31ff 	mov.w	r1, #4294967295
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43d9      	mvns	r1, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	4313      	orrs	r3, r2
         );
}
 8000792:	4618      	mov	r0, r3
 8000794:	3724      	adds	r7, #36	; 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b0:	d301      	bcc.n	80007b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00f      	b.n	80007d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <SysTick_Config+0x40>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007be:	210f      	movs	r1, #15
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f7ff ff8e 	bl	80006e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SysTick_Config+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <SysTick_Config+0x40>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff29 	bl	8000644 <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff3e 	bl	800068c <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff8e 	bl	8000738 <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5d 	bl	80006e4 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff31 	bl	80006a8 <__NVIC_EnableIRQ>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa2 	bl	80007a0 <SysTick_Config>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000876:	e166      	b.n	8000b46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	f000 8158 	beq.w	8000b40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b01      	cmp	r3, #1
 800089a:	d005      	beq.n	80008a8 <HAL_GPIO_Init+0x40>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f003 0303 	and.w	r3, r3, #3
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d130      	bne.n	800090a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68da      	ldr	r2, [r3, #12]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008de:	2201      	movs	r2, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	f003 0201 	and.w	r2, r3, #1
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	2b03      	cmp	r3, #3
 8000914:	d017      	beq.n	8000946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f003 0303 	and.w	r3, r3, #3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d123      	bne.n	800099a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	08da      	lsrs	r2, r3, #3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3208      	adds	r2, #8
 800095a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	220f      	movs	r2, #15
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	691a      	ldr	r2, [r3, #16]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f003 0307 	and.w	r3, r3, #7
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	08da      	lsrs	r2, r3, #3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3208      	adds	r2, #8
 8000994:	6939      	ldr	r1, [r7, #16]
 8000996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 0203 	and.w	r2, r3, #3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80b2 	beq.w	8000b40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009dc:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <HAL_GPIO_Init+0x2fc>)
 80009de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e0:	4a60      	ldr	r2, [pc, #384]	; (8000b64 <HAL_GPIO_Init+0x2fc>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6613      	str	r3, [r2, #96]	; 0x60
 80009e8:	4b5e      	ldr	r3, [pc, #376]	; (8000b64 <HAL_GPIO_Init+0x2fc>)
 80009ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f4:	4a5c      	ldr	r2, [pc, #368]	; (8000b68 <HAL_GPIO_Init+0x300>)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a1e:	d02b      	beq.n	8000a78 <HAL_GPIO_Init+0x210>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a52      	ldr	r2, [pc, #328]	; (8000b6c <HAL_GPIO_Init+0x304>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d025      	beq.n	8000a74 <HAL_GPIO_Init+0x20c>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a51      	ldr	r2, [pc, #324]	; (8000b70 <HAL_GPIO_Init+0x308>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d01f      	beq.n	8000a70 <HAL_GPIO_Init+0x208>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a50      	ldr	r2, [pc, #320]	; (8000b74 <HAL_GPIO_Init+0x30c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d019      	beq.n	8000a6c <HAL_GPIO_Init+0x204>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a4f      	ldr	r2, [pc, #316]	; (8000b78 <HAL_GPIO_Init+0x310>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d013      	beq.n	8000a68 <HAL_GPIO_Init+0x200>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a4e      	ldr	r2, [pc, #312]	; (8000b7c <HAL_GPIO_Init+0x314>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1fc>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a4d      	ldr	r2, [pc, #308]	; (8000b80 <HAL_GPIO_Init+0x318>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1f8>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <HAL_GPIO_Init+0x31c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1f4>
 8000a58:	2307      	movs	r3, #7
 8000a5a:	e00e      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	e00c      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a60:	2306      	movs	r3, #6
 8000a62:	e00a      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a64:	2305      	movs	r3, #5
 8000a66:	e008      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e004      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	f002 0203 	and.w	r2, r2, #3
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	4093      	lsls	r3, r2
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a8a:	4937      	ldr	r1, [pc, #220]	; (8000b68 <HAL_GPIO_Init+0x300>)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000abc:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ae6:	4a28      	ldr	r2, [pc, #160]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b3a:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f47f ae91 	bne.w	8000878 <HAL_GPIO_Init+0x10>
  }
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	48000800 	.word	0x48000800
 8000b74:	48000c00 	.word	0x48000c00
 8000b78:	48001000 	.word	0x48001000
 8000b7c:	48001400 	.word	0x48001400
 8000b80:	48001800 	.word	0x48001800
 8000b84:	48001c00 	.word	0x48001c00
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b9c:	787b      	ldrb	r3, [r7, #1]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ba8:	e002      	b.n	8000bb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	041a      	lsls	r2, r3, #16
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43d9      	mvns	r1, r3
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	400b      	ands	r3, r1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	619a      	str	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	b08f      	sub	sp, #60	; 0x3c
 8000bf4:	af0a      	add	r7, sp, #40	; 0x28
 8000bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e116      	b.n	8000e30 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d106      	bne.n	8000c22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f007 fd3d 	bl	800869c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 ff1a 	bl	8003a7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	687e      	ldr	r6, [r7, #4]
 8000c4e:	466d      	mov	r5, sp
 8000c50:	f106 0410 	add.w	r4, r6, #16
 8000c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c60:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c64:	1d33      	adds	r3, r6, #4
 8000c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f002 fe2d 	bl	80038c8 <USB_CoreInit>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d005      	beq.n	8000c80 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2202      	movs	r2, #2
 8000c78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e0d7      	b.n	8000e30 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 ff08 	bl	8003a9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e04a      	b.n	8000d28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	333d      	adds	r3, #61	; 0x3d
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	4613      	mov	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	333c      	adds	r3, #60	; 0x3c
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	b298      	uxth	r0, r3
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3356      	adds	r3, #86	; 0x56
 8000cce:	4602      	mov	r2, r0
 8000cd0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	3340      	adds	r3, #64	; 0x40
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	4413      	add	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	3344      	adds	r3, #68	; 0x44
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	440b      	add	r3, r1
 8000d08:	3348      	adds	r3, #72	; 0x48
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d0e:	7bfa      	ldrb	r2, [r7, #15]
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	334c      	adds	r3, #76	; 0x4c
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	3301      	adds	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3af      	bcc.n	8000c92 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e044      	b.n	8000dc2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	440b      	add	r3, r1
 8000d46:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d4e:	7bfa      	ldrb	r2, [r7, #15]
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4413      	add	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d64:	7bfa      	ldrb	r2, [r7, #15]
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4413      	add	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	440b      	add	r3, r1
 8000d88:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	4613      	mov	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000da6:	7bfa      	ldrb	r2, [r7, #15]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	440b      	add	r3, r1
 8000db4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d3b5      	bcc.n	8000d38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	687e      	ldr	r6, [r7, #4]
 8000dd4:	466d      	mov	r5, sp
 8000dd6:	f106 0410 	add.w	r4, r6, #16
 8000dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000de6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dea:	1d33      	adds	r3, r6, #4
 8000dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dee:	6838      	ldr	r0, [r7, #0]
 8000df0:	f002 fea0 	bl	8003b34 <USB_DevInit>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d005      	beq.n	8000e06 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e014      	b.n	8000e30 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d102      	bne.n	8000e24 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f001 f896 	bl	8001f50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fe4e 	bl	8004aca <USB_DevDisconnect>

  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d101      	bne.n	8000e54 <HAL_PCD_Start+0x1c>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e01c      	b.n	8000e8e <HAL_PCD_Start+0x56>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d105      	bne.n	8000e70 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fdef 	bl	8003a58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 fe02 	bl	8004a88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e96:	b590      	push	{r4, r7, lr}
 8000e98:	b08d      	sub	sp, #52	; 0x34
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 fec0 	bl	8004c32 <USB_GetMode>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f040 847e 	bne.w	80017b6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fe24 	bl	8004b0c <USB_ReadInterrupts>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8474 	beq.w	80017b4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fe11 	bl	8004b0c <USB_ReadInterrupts>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d107      	bne.n	8000f04 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f002 0202 	and.w	r2, r2, #2
 8000f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fdff 	bl	8004b0c <USB_ReadInterrupts>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	2b10      	cmp	r3, #16
 8000f16:	d161      	bne.n	8000fdc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0210 	bic.w	r2, r2, #16
 8000f26:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	f003 020f 	and.w	r2, r3, #15
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	3304      	adds	r3, #4
 8000f46:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	0c5b      	lsrs	r3, r3, #17
 8000f4c:	f003 030f 	and.w	r3, r3, #15
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d124      	bne.n	8000f9e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d035      	beq.n	8000fcc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	6a38      	ldr	r0, [r7, #32]
 8000f74:	f003 fc36 	bl	80047e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f84:	441a      	add	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f96:	441a      	add	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	e016      	b.n	8000fcc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	0c5b      	lsrs	r3, r3, #17
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d110      	bne.n	8000fcc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6a38      	ldr	r0, [r7, #32]
 8000fb6:	f003 fc15 	bl	80047e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fc6:	441a      	add	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699a      	ldr	r2, [r3, #24]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0210 	orr.w	r2, r2, #16
 8000fda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fd93 	bl	8004b0c <USB_ReadInterrupts>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000ff0:	f040 80a7 	bne.w	8001142 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fd98 	bl	8004b32 <USB_ReadDevAllOutEpInterrupt>
 8001002:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001004:	e099      	b.n	800113a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 808e 	beq.w	800112e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f003 fdbc 	bl	8004b9a <USB_ReadDevOutEPInterrupt>
 8001022:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00c      	beq.n	8001048 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	4413      	add	r3, r2
 8001036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800103a:	461a      	mov	r2, r3
 800103c:	2301      	movs	r3, #1
 800103e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 feaa 	bl	8001d9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00c      	beq.n	800106c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	015a      	lsls	r2, r3, #5
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	4413      	add	r3, r2
 800105a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800105e:	461a      	mov	r2, r3
 8001060:	2308      	movs	r3, #8
 8001062:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fee6 	bl	8001e38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b00      	cmp	r3, #0
 8001074:	d008      	beq.n	8001088 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	015a      	lsls	r2, r3, #5
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	4413      	add	r3, r2
 800107e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001082:	461a      	mov	r2, r3
 8001084:	2310      	movs	r3, #16
 8001086:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d030      	beq.n	80010f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	2b80      	cmp	r3, #128	; 0x80
 800109c:	d109      	bne.n	80010b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80010ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80010b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	3304      	adds	r3, #4
 80010c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	78db      	ldrb	r3, [r3, #3]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d108      	bne.n	80010e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2200      	movs	r2, #0
 80010d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f007 fc31 	bl	8008944 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	015a      	lsls	r2, r3, #5
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	4413      	add	r3, r2
 80010ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010ee:	461a      	mov	r2, r3
 80010f0:	2302      	movs	r3, #2
 80010f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	f003 0320 	and.w	r3, r3, #32
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d008      	beq.n	8001110 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	015a      	lsls	r2, r3, #5
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	4413      	add	r3, r2
 8001106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800110a:	461a      	mov	r2, r3
 800110c:	2320      	movs	r3, #32
 800110e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d009      	beq.n	800112e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	015a      	lsls	r2, r3, #5
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	4413      	add	r3, r2
 8001122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001126:	461a      	mov	r2, r3
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	3301      	adds	r3, #1
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800113a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113c:	2b00      	cmp	r3, #0
 800113e:	f47f af62 	bne.w	8001006 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fce0 	bl	8004b0c <USB_ReadInterrupts>
 800114c:	4603      	mov	r3, r0
 800114e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001156:	f040 80a4 	bne.w	80012a2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fd01 	bl	8004b66 <USB_ReadDevAllInEpInterrupt>
 8001164:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800116a:	e096      	b.n	800129a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 808b 	beq.w	800128e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fd27 	bl	8004bd6 <USB_ReadDevInEPInterrupt>
 8001188:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d020      	beq.n	80011d6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	2201      	movs	r2, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69f9      	ldr	r1, [r7, #28]
 80011b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80011b4:	4013      	ands	r3, r2
 80011b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	015a      	lsls	r2, r3, #5
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	4413      	add	r3, r2
 80011c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011c4:	461a      	mov	r2, r3
 80011c6:	2301      	movs	r3, #1
 80011c8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f007 fb22 	bl	800881a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	4413      	add	r3, r2
 80011e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011ec:	461a      	mov	r2, r3
 80011ee:	2308      	movs	r3, #8
 80011f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	015a      	lsls	r2, r3, #5
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	4413      	add	r3, r2
 8001204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001208:	461a      	mov	r2, r3
 800120a:	2310      	movs	r3, #16
 800120c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	015a      	lsls	r2, r3, #5
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	4413      	add	r3, r2
 8001220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001224:	461a      	mov	r2, r3
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d023      	beq.n	800127c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001236:	6a38      	ldr	r0, [r7, #32]
 8001238:	f002 fdbe 	bl	8003db8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800123c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	3338      	adds	r3, #56	; 0x38
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	3304      	adds	r3, #4
 800124e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	78db      	ldrb	r3, [r3, #3]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d108      	bne.n	800126a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2200      	movs	r2, #0
 800125c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f007 fb7f 	bl	8008968 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	015a      	lsls	r2, r3, #5
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	4413      	add	r3, r2
 8001272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001276:	461a      	mov	r2, r3
 8001278:	2302      	movs	r3, #2
 800127a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fcff 	bl	8001c8c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	3301      	adds	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	2b00      	cmp	r3, #0
 800129e:	f47f af65 	bne.w	800116c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fc30 	bl	8004b0c <USB_ReadInterrupts>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80012b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012b6:	d122      	bne.n	80012fe <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d108      	bne.n	80012e8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012de:	2100      	movs	r1, #0
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f007 fde9 	bl	8008eb8 <HAL_PCDEx_LPM_Callback>
 80012e6:	e002      	b.n	80012ee <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f007 fb03 	bl	80088f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80012fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fc02 	bl	8004b0c <USB_ReadInterrupts>
 8001308:	4603      	mov	r3, r0
 800130a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800130e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001312:	d112      	bne.n	800133a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d102      	bne.n	800132a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f007 fabf 	bl	80088a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001338:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fbe4 	bl	8004b0c <USB_ReadInterrupts>
 8001344:	4603      	mov	r3, r0
 8001346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800134a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800134e:	d121      	bne.n	8001394 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800135e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d111      	bne.n	800138e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	f003 020f 	and.w	r2, r3, #15
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001384:	2101      	movs	r1, #1
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f007 fd96 	bl	8008eb8 <HAL_PCDEx_LPM_Callback>
 800138c:	e002      	b.n	8001394 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f007 fa8a 	bl	80088a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fbb7 	bl	8004b0c <USB_ReadInterrupts>
 800139e:	4603      	mov	r3, r0
 80013a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a8:	f040 80b5 	bne.w	8001516 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2110      	movs	r1, #16
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fcf6 	bl	8003db8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	e046      	b.n	8001460 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013de:	461a      	mov	r2, r3
 80013e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80013e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013f6:	0151      	lsls	r1, r2, #5
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	440a      	add	r2, r1
 80013fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001400:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001404:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001412:	461a      	mov	r2, r3
 8001414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001418:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141c:	015a      	lsls	r2, r3, #5
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	4413      	add	r3, r2
 8001422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800142a:	0151      	lsls	r1, r2, #5
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	440a      	add	r2, r1
 8001430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001438:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800143a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	4413      	add	r3, r2
 8001442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800144a:	0151      	lsls	r1, r2, #5
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	440a      	add	r2, r1
 8001450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001458:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	3301      	adds	r3, #1
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001466:	429a      	cmp	r2, r3
 8001468:	d3b3      	bcc.n	80013d2 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001478:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800147c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	2b00      	cmp	r3, #0
 8001484:	d016      	beq.n	80014b4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800148c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001496:	f043 030b 	orr.w	r3, r3, #11
 800149a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014ac:	f043 030b 	orr.w	r3, r3, #11
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	e015      	b.n	80014e0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80014ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014da:	f043 030b 	orr.w	r3, r3, #11
 80014de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80014f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014fe:	4619      	mov	r1, r3
 8001500:	4610      	mov	r0, r2
 8001502:	f003 fbc7 	bl	8004c94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f003 faf6 	bl	8004b0c <USB_ReadInterrupts>
 8001520:	4603      	mov	r3, r0
 8001522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800152a:	d124      	bne.n	8001576 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fb8c 	bl	8004c4e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fcb9 	bl	8003eb2 <USB_GetDevSpeed>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681c      	ldr	r4, [r3, #0]
 800154c:	f001 fbd8 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8001550:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4620      	mov	r0, r4
 800155c:	f002 f9e0 	bl	8003920 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f007 f982 	bl	800886a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001574:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fac6 	bl	8004b0c <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b08      	cmp	r3, #8
 8001588:	d10a      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f007 f95f 	bl	800884e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f002 0208 	and.w	r2, r2, #8
 800159e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fab1 	bl	8004b0c <USB_ReadInterrupts>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b0:	2b80      	cmp	r3, #128	; 0x80
 80015b2:	d122      	bne.n	80015fa <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015c0:	2301      	movs	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
 80015c4:	e014      	b.n	80015f0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d105      	bne.n	80015ea <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 faf3 	bl	8001bd0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	3301      	adds	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3e5      	bcc.n	80015c6 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fa84 	bl	8004b0c <USB_ReadInterrupts>
 8001604:	4603      	mov	r3, r0
 8001606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800160e:	d13b      	bne.n	8001688 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001610:	2301      	movs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
 8001614:	e02b      	b.n	800166e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	015a      	lsls	r2, r3, #5
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	4413      	add	r3, r2
 800161e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3340      	adds	r3, #64	; 0x40
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d115      	bne.n	8001668 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800163c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800163e:	2b00      	cmp	r3, #0
 8001640:	da12      	bge.n	8001668 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	333f      	adds	r3, #63	; 0x3f
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fab4 	bl	8001bd0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	3301      	adds	r3, #1
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	429a      	cmp	r2, r3
 8001676:	d3ce      	bcc.n	8001616 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fa3d 	bl	8004b0c <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800169c:	d155      	bne.n	800174a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800169e:	2301      	movs	r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
 80016a2:	e045      	b.n	8001730 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d12e      	bne.n	800172a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80016cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da2b      	bge.n	800172a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80016de:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d121      	bne.n	800172a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10a      	bne.n	800172a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001726:	6053      	str	r3, [r2, #4]
            break;
 8001728:	e007      	b.n	800173a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	3301      	adds	r3, #1
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001736:	429a      	cmp	r2, r3
 8001738:	d3b4      	bcc.n	80016a4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f9dc 	bl	8004b0c <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800175a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800175e:	d10a      	bne.n	8001776 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f007 f913 	bl	800898c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f003 f9c6 	bl	8004b0c <USB_ReadInterrupts>
 8001780:	4603      	mov	r3, r0
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b04      	cmp	r3, #4
 8001788:	d115      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f007 f903 	bl	80089a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	e000      	b.n	80017b6 <HAL_PCD_IRQHandler+0x920>
      return;
 80017b4:	bf00      	nop
    }
  }
}
 80017b6:	3734      	adds	r7, #52	; 0x34
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}

080017bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_PCD_SetAddress+0x1a>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e013      	b.n	80017fe <HAL_PCD_SetAddress+0x42>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 f924 	bl	8004a3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	4608      	mov	r0, r1
 8001810:	4611      	mov	r1, r2
 8001812:	461a      	mov	r2, r3
 8001814:	4603      	mov	r3, r0
 8001816:	70fb      	strb	r3, [r7, #3]
 8001818:	460b      	mov	r3, r1
 800181a:	803b      	strh	r3, [r7, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001828:	2b00      	cmp	r3, #0
 800182a:	da0f      	bge.n	800184c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	f003 020f 	and.w	r2, r3, #15
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	3338      	adds	r3, #56	; 0x38
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	705a      	strb	r2, [r3, #1]
 800184a:	e00f      	b.n	800186c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	f003 020f 	and.w	r2, r3, #15
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	3304      	adds	r3, #4
 8001864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001878:	883a      	ldrh	r2, [r7, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	78ba      	ldrb	r2, [r7, #2]
 8001882:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001896:	78bb      	ldrb	r3, [r7, #2]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d102      	bne.n	80018a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_PCD_EP_Open+0xaa>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e00e      	b.n	80018ce <HAL_PCD_EP_Open+0xc8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68f9      	ldr	r1, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fb16 	bl	8003ef0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80018cc:	7afb      	ldrb	r3, [r7, #11]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da0f      	bge.n	800190a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	f003 020f 	and.w	r2, r3, #15
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	3338      	adds	r3, #56	; 0x38
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	3304      	adds	r3, #4
 8001900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	705a      	strb	r2, [r3, #1]
 8001908:	e00f      	b.n	800192a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	f003 020f 	and.w	r2, r3, #15
 8001910:	4613      	mov	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	3304      	adds	r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	b2da      	uxtb	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_PCD_EP_Close+0x6e>
 8001940:	2302      	movs	r3, #2
 8001942:	e00e      	b.n	8001962 <HAL_PCD_EP_Close+0x8c>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fb54 	bl	8004000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	460b      	mov	r3, r1
 8001978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	f003 020f 	and.w	r2, r3, #15
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	3304      	adds	r3, #4
 8001992:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2200      	movs	r2, #0
 80019aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6979      	ldr	r1, [r7, #20]
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 fbfa 	bl	80041b8 <USB_EPStartXfer>

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 020f 	and.w	r2, r3, #15
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80019f0:	681b      	ldr	r3, [r3, #0]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0e:	7afb      	ldrb	r3, [r7, #11]
 8001a10:	f003 020f 	and.w	r2, r3, #15
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	3338      	adds	r3, #56	; 0x38
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4413      	add	r3, r2
 8001a22:	3304      	adds	r3, #4
 8001a24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a3e:	7afb      	ldrb	r3, [r7, #11]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6979      	ldr	r1, [r7, #20]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fbb1 	bl	80041b8 <USB_EPStartXfer>

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	f003 020f 	and.w	r2, r3, #15
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d901      	bls.n	8001a7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e04e      	b.n	8001b1c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da0f      	bge.n	8001aa6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	f003 020f 	and.w	r2, r3, #15
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	3338      	adds	r3, #56	; 0x38
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	705a      	strb	r2, [r3, #1]
 8001aa4:	e00d      	b.n	8001ac2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3304      	adds	r3, #4
 8001aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_PCD_EP_SetStall+0x82>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e01c      	b.n	8001b1c <HAL_PCD_EP_SetStall+0xbc>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68f9      	ldr	r1, [r7, #12]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fecf 	bl	8004894 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d108      	bne.n	8001b12 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f003 f8c1 	bl	8004c94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 020f 	and.w	r2, r3, #15
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d901      	bls.n	8001b42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e042      	b.n	8001bc8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	da0f      	bge.n	8001b6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	f003 020f 	and.w	r2, r3, #15
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	3338      	adds	r3, #56	; 0x38
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3304      	adds	r3, #4
 8001b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	705a      	strb	r2, [r3, #1]
 8001b68:	e00f      	b.n	8001b8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 020f 	and.w	r2, r3, #15
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	3304      	adds	r3, #4
 8001b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_PCD_EP_ClrStall+0x86>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e00e      	b.n	8001bc8 <HAL_PCD_EP_ClrStall+0xa4>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fed9 	bl	8004970 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da0c      	bge.n	8001bfe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	3338      	adds	r3, #56	; 0x38
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e00c      	b.n	8001c18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 020f 	and.w	r2, r3, #15
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	3304      	adds	r3, #4
 8001c16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 fcfc 	bl	800461c <USB_EPStopXfer>
 8001c24:	4603      	mov	r3, r0
 8001c26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001c28:	7afb      	ldrb	r3, [r7, #11]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_PCD_EP_Flush+0x1a>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e01b      	b.n	8001c84 <HAL_PCD_EP_Flush+0x52>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da09      	bge.n	8001c70 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	4619      	mov	r1, r3
 8001c68:	4610      	mov	r0, r2
 8001c6a:	f002 f8a5 	bl	8003db8 <USB_FlushTxFifo>
 8001c6e:	e004      	b.n	8001c7a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 f8d3 	bl	8003e20 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	3338      	adds	r3, #56	; 0x38
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d901      	bls.n	8001cc4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e067      	b.n	8001d94 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d902      	bls.n	8001ce0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3303      	adds	r3, #3
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ce8:	e026      	b.n	8001d38 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d902      	bls.n	8001d06 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3303      	adds	r3, #3
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68d9      	ldr	r1, [r3, #12]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	6978      	ldr	r0, [r7, #20]
 8001d1c:	f002 fd28 	bl	8004770 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	441a      	add	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	441a      	add	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d809      	bhi.n	8001d62 <PCD_WriteEmptyTxFifo+0xd6>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d203      	bcs.n	8001d62 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1c3      	bne.n	8001cea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d811      	bhi.n	8001d92 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	2201      	movs	r2, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	6939      	ldr	r1, [r7, #16]
 8001d8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d8e:	4013      	ands	r3, r2
 8001d90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	333c      	adds	r3, #60	; 0x3c
 8001db4:	3304      	adds	r3, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <PCD_EP_OutXfrComplete_int+0x98>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d124      	bne.n	8001e1c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00a      	beq.n	8001df2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de8:	461a      	mov	r2, r3
 8001dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dee:	6093      	str	r3, [r2, #8]
 8001df0:	e01a      	b.n	8001e28 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f006 fce5 	bl	80087e4 <HAL_PCD_DataOutStageCallback>
 8001e1a:	e005      	b.n	8001e28 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	4619      	mov	r1, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f006 fcde 	bl	80087e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	4f54310a 	.word	0x4f54310a

08001e38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	333c      	adds	r3, #60	; 0x3c
 8001e50:	3304      	adds	r3, #4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <PCD_EP_OutSetupPacket_int+0x64>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d90e      	bls.n	8001e8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e84:	461a      	mov	r2, r3
 8001e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f006 fc97 	bl	80087c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	4f54300a 	.word	0x4f54300a

08001ea0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
 8001eac:	4613      	mov	r3, r2
 8001eae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001ebe:	883b      	ldrh	r3, [r7, #0]
 8001ec0:	0419      	lsls	r1, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
 8001ecc:	e028      	b.n	8001f20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e00d      	b.n	8001efe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	3340      	adds	r3, #64	; 0x40
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	0c1b      	lsrs	r3, r3, #16
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	3301      	adds	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d3ec      	bcc.n	8001ee2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f08:	883b      	ldrh	r3, [r7, #0]
 8001f0a:	0418      	lsls	r0, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	4302      	orrs	r2, r0
 8001f18:	3340      	adds	r3, #64	; 0x40
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	460b      	mov	r3, r1
 8001f38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	f043 0303 	orr.w	r3, r3, #3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa8:	d102      	bne.n	8001fb0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fae:	e00b      	b.n	8001fc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fbe:	d102      	bne.n	8001fc6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc4:	e000      	b.n	8001fc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001fc6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40007000 	.word	0x40007000

08001fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d141      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe6:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff2:	d131      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff4:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ffa:	4a46      	ldr	r2, [pc, #280]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800200c:	4a41      	ldr	r2, [pc, #260]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002014:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2232      	movs	r2, #50	; 0x32
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a3f      	ldr	r2, [pc, #252]	; (800211c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202a:	e002      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b01      	subs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002032:	4b38      	ldr	r3, [pc, #224]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203e:	d102      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f2      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002046:	4b33      	ldr	r3, [pc, #204]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d158      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e057      	b.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205e:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002068:	e04d      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002070:	d141      	bne.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207e:	d131      	bne.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002086:	4a23      	ldr	r2, [pc, #140]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002098:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2232      	movs	r2, #50	; 0x32
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	0c9b      	lsrs	r3, r3, #18
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b6:	e002      	b.n	80020be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ca:	d102      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f2      	bne.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020de:	d112      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e011      	b.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020f4:	e007      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002104:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40007000 	.word	0x40007000
 8002118:	20000000 	.word	0x20000000
 800211c:	431bde83 	.word	0x431bde83

08002120 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_PWREx_EnableVddUSB+0x1c>)
 800212a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212e:	6053      	str	r3, [r2, #4]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	f000 bc08 	b.w	8002964 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002154:	4b96      	ldr	r3, [pc, #600]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800215e:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80e4 	beq.w	800233e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_RCC_OscConfig+0x4c>
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	f040 808b 	bne.w	800229a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b01      	cmp	r3, #1
 8002188:	f040 8087 	bne.w	800229a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800218c:	4b88      	ldr	r3, [pc, #544]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_OscConfig+0x64>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e3df      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	4b81      	ldr	r3, [pc, #516]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <HAL_RCC_OscConfig+0x7e>
 80021b4:	4b7e      	ldr	r3, [pc, #504]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021bc:	e005      	b.n	80021ca <HAL_RCC_OscConfig+0x8a>
 80021be:	4b7c      	ldr	r3, [pc, #496]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d223      	bcs.n	8002216 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fda0 	bl	8002d18 <RCC_SetFlashLatencyFromMSIRange>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e3c0      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e2:	4b73      	ldr	r3, [pc, #460]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a72      	ldr	r2, [pc, #456]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b70      	ldr	r3, [pc, #448]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	496d      	ldr	r1, [pc, #436]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002200:	4b6b      	ldr	r3, [pc, #428]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	4968      	ldr	r1, [pc, #416]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
 8002214:	e025      	b.n	8002262 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002216:	4b66      	ldr	r3, [pc, #408]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a65      	ldr	r2, [pc, #404]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4960      	ldr	r1, [pc, #384]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002234:	4b5e      	ldr	r3, [pc, #376]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	495b      	ldr	r1, [pc, #364]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fd60 	bl	8002d18 <RCC_SetFlashLatencyFromMSIRange>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e380      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002262:	f000 fcc1 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002266:	4602      	mov	r2, r0
 8002268:	4b51      	ldr	r3, [pc, #324]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	4950      	ldr	r1, [pc, #320]	; (80023b4 <HAL_RCC_OscConfig+0x274>)
 8002274:	5ccb      	ldrb	r3, [r1, r3]
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a4e      	ldr	r2, [pc, #312]	; (80023b8 <HAL_RCC_OscConfig+0x278>)
 8002280:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002282:	4b4e      	ldr	r3, [pc, #312]	; (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f95c 	bl	8000544 <HAL_InitTick>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d052      	beq.n	800233c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	e364      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d032      	beq.n	8002308 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022a2:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a42      	ldr	r2, [pc, #264]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ae:	f7fe f999 	bl	80005e4 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b6:	f7fe f995 	bl	80005e4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e34d      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c8:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a35      	ldr	r2, [pc, #212]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4930      	ldr	r1, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f2:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	492b      	ldr	r1, [pc, #172]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
 8002306:	e01a      	b.n	800233e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a28      	ldr	r2, [pc, #160]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002314:	f7fe f966 	bl	80005e4 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800231c:	f7fe f962 	bl	80005e4 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e31a      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x1dc>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d073      	beq.n	8002432 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d005      	beq.n	800235c <HAL_RCC_OscConfig+0x21c>
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d10e      	bne.n	8002374 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d10b      	bne.n	8002374 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d063      	beq.n	8002430 <HAL_RCC_OscConfig+0x2f0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d15f      	bne.n	8002430 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e2f7      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237c:	d106      	bne.n	800238c <HAL_RCC_OscConfig+0x24c>
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e025      	b.n	80023d8 <HAL_RCC_OscConfig+0x298>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002394:	d114      	bne.n	80023c0 <HAL_RCC_OscConfig+0x280>
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a02      	ldr	r2, [pc, #8]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e013      	b.n	80023d8 <HAL_RCC_OscConfig+0x298>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08009060 	.word	0x08009060
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004
 80023c0:	4ba0      	ldr	r3, [pc, #640]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a9f      	ldr	r2, [pc, #636]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b9d      	ldr	r3, [pc, #628]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a9c      	ldr	r2, [pc, #624]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe f900 	bl	80005e4 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe f8fc 	bl	80005e4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e2b4      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fa:	4b92      	ldr	r3, [pc, #584]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2a8>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe f8ec 	bl	80005e4 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe f8e8 	bl	80005e4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e2a0      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002422:	4b88      	ldr	r3, [pc, #544]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x2d0>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d060      	beq.n	8002500 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d005      	beq.n	8002450 <HAL_RCC_OscConfig+0x310>
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d119      	bne.n	800247e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d116      	bne.n	800247e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	4b7c      	ldr	r3, [pc, #496]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_OscConfig+0x328>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e27d      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	4973      	ldr	r1, [pc, #460]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247c:	e040      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d023      	beq.n	80024ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002486:	4b6f      	ldr	r3, [pc, #444]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6e      	ldr	r2, [pc, #440]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe f8a7 	bl	80005e4 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7fe f8a3 	bl	80005e4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e25b      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ac:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b62      	ldr	r3, [pc, #392]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	495f      	ldr	r1, [pc, #380]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
 80024cc:	e018      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ce:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a5c      	ldr	r2, [pc, #368]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80024d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7fe f883 	bl	80005e4 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7fe f87f 	bl	80005e4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e237      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d03c      	beq.n	8002586 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01c      	beq.n	800254e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	4a4a      	ldr	r2, [pc, #296]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe f85e 	bl	80005e4 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe f85a 	bl	80005e4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e212      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253e:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ef      	beq.n	800252c <HAL_RCC_OscConfig+0x3ec>
 800254c:	e01b      	b.n	8002586 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002554:	4a3b      	ldr	r2, [pc, #236]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe f841 	bl	80005e4 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe f83d 	bl	80005e4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1f5      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 800257a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ef      	bne.n	8002566 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80a6 	beq.w	80026e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002598:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80025aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6593      	str	r3, [r2, #88]	; 0x58
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025bc:	2301      	movs	r3, #1
 80025be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <HAL_RCC_OscConfig+0x508>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d118      	bne.n	80025fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_OscConfig+0x508>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_RCC_OscConfig+0x508>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d8:	f7fe f804 	bl	80005e4 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7fe f800 	bl	80005e4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1b8      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_RCC_OscConfig+0x508>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d108      	bne.n	8002618 <HAL_RCC_OscConfig+0x4d8>
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002616:	e029      	b.n	800266c <HAL_RCC_OscConfig+0x52c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d115      	bne.n	800264c <HAL_RCC_OscConfig+0x50c>
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a03      	ldr	r2, [pc, #12]	; (8002644 <HAL_RCC_OscConfig+0x504>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x52c>
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
 800264c:	4b9d      	ldr	r3, [pc, #628]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	4a9c      	ldr	r2, [pc, #624]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800265c:	4b99      	ldr	r3, [pc, #612]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	4a98      	ldr	r2, [pc, #608]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002664:	f023 0304 	bic.w	r3, r3, #4
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d016      	beq.n	80026a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fd ffb6 	bl	80005e4 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fd ffb2 	bl	80005e4 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e168      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002692:	4b8c      	ldr	r3, [pc, #560]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ed      	beq.n	800267c <HAL_RCC_OscConfig+0x53c>
 80026a0:	e015      	b.n	80026ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a2:	f7fd ff9f 	bl	80005e4 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fd ff9b 	bl	80005e4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e151      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c0:	4b80      	ldr	r3, [pc, #512]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1ed      	bne.n	80026aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4a7a      	ldr	r2, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03c      	beq.n	8002766 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01c      	beq.n	800272e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026f4:	4b73      	ldr	r3, [pc, #460]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026fa:	4a72      	ldr	r2, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fd ff6e 	bl	80005e4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800270c:	f7fd ff6a 	bl	80005e4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e122      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800271e:	4b69      	ldr	r3, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCC_OscConfig+0x5cc>
 800272c:	e01b      	b.n	8002766 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002734:	4a63      	ldr	r2, [pc, #396]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fd ff51 	bl	80005e4 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002746:	f7fd ff4d 	bl	80005e4 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e105      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002758:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 800275a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ef      	bne.n	8002746 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80f9 	beq.w	8002962 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	2b02      	cmp	r3, #2
 8002776:	f040 80cf 	bne.w	8002918 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800277a:	4b52      	ldr	r3, [pc, #328]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0203 	and.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	429a      	cmp	r2, r3
 800278c:	d12c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	3b01      	subs	r3, #1
 800279a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d123      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d11b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d113      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	3b01      	subs	r3, #1
 80027ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d109      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	3b01      	subs	r3, #1
 80027e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d071      	beq.n	80028cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d068      	beq.n	80028c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027ee:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0ac      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800280a:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2d      	ldr	r2, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002814:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002816:	f7fd fee5 	bl	80005e4 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7fd fee1 	bl	80005e4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e099      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCC_OscConfig+0x788>)
 8002842:	4013      	ands	r3, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800284c:	3a01      	subs	r2, #1
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002856:	0212      	lsls	r2, r2, #8
 8002858:	4311      	orrs	r1, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800285e:	0852      	lsrs	r2, r2, #1
 8002860:	3a01      	subs	r2, #1
 8002862:	0552      	lsls	r2, r2, #21
 8002864:	4311      	orrs	r1, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800286a:	0852      	lsrs	r2, r2, #1
 800286c:	3a01      	subs	r2, #1
 800286e:	0652      	lsls	r2, r2, #25
 8002870:	4311      	orrs	r1, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002876:	06d2      	lsls	r2, r2, #27
 8002878:	430a      	orrs	r2, r1
 800287a:	4912      	ldr	r1, [pc, #72]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 800287c:	4313      	orrs	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002898:	f7fd fea4 	bl	80005e4 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fd fea0 	bl	80005e4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e058      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_RCC_OscConfig+0x784>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028be:	e050      	b.n	8002962 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e04f      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d144      	bne.n	8002962 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a20      	ldr	r2, [pc, #128]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f0:	f7fd fe78 	bl	80005e4 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fd fe74 	bl	80005e4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e02c      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x7b8>
 8002916:	e024      	b.n	8002962 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d01f      	beq.n	800295e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 8002924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fd fe5b 	bl	80005e4 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7fd fe57 	bl	80005e4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e00f      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4905      	ldr	r1, [pc, #20]	; (800296c <HAL_RCC_OscConfig+0x82c>)
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_OscConfig+0x830>)
 8002958:	4013      	ands	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
 800295c:	e001      	b.n	8002962 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	feeefffc 	.word	0xfeeefffc

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e11d      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b90      	ldr	r3, [pc, #576]	; (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d910      	bls.n	80029bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b8d      	ldr	r3, [pc, #564]	; (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 020f 	bic.w	r2, r3, #15
 80029a2:	498b      	ldr	r1, [pc, #556]	; (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b89      	ldr	r3, [pc, #548]	; (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e105      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d010      	beq.n	80029ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d908      	bls.n	80029ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b7e      	ldr	r3, [pc, #504]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	497b      	ldr	r1, [pc, #492]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d079      	beq.n	8002aea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d11e      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	4b75      	ldr	r3, [pc, #468]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0dc      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a0e:	f000 f9dd 	bl	8002dcc <RCC_GetSysClockFreqFromPLLSource>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a70      	ldr	r2, [pc, #448]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d946      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a1a:	4b6e      	ldr	r3, [pc, #440]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d140      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a26:	4b6b      	ldr	r3, [pc, #428]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a2e:	4a69      	ldr	r2, [pc, #420]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e035      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a44:	4b63      	ldr	r3, [pc, #396]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d115      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b9      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a5c:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0ad      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0a5      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a7c:	f000 f8b4 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a55      	ldr	r2, [pc, #340]	; (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d90f      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a88:	4b52      	ldr	r3, [pc, #328]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aa8:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 0203 	bic.w	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4947      	ldr	r1, [pc, #284]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aba:	f7fd fd93 	bl	80005e4 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac2:	f7fd fd8f 	bl	80005e4 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e077      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad8:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 020c 	and.w	r2, r3, #12
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d1eb      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002af0:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d010      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d208      	bcs.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	492b      	ldr	r1, [pc, #172]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d210      	bcs.n	8002b5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 020f 	bic.w	r2, r3, #15
 8002b40:	4923      	ldr	r1, [pc, #140]	; (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b48:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e036      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4918      	ldr	r1, [pc, #96]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4910      	ldr	r1, [pc, #64]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b98:	f000 f826 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x26c>)
 8002bb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_RCC_ClockConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fcc1 	bl	8000544 <HAL_InitTick>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	04c4b400 	.word	0x04c4b400
 8002bdc:	08009060 	.word	0x08009060
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004

08002be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf6:	4b3e      	ldr	r3, [pc, #248]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c00:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x34>
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d121      	bne.n	8002c5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d11e      	bne.n	8002c5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c1c:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c28:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e005      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c44:	4a2b      	ldr	r2, [pc, #172]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10d      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	e004      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c6c:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d134      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c76:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d003      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0xac>
 8002c8c:	e005      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c90:	617b      	str	r3, [r7, #20]
      break;
 8002c92:	e005      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c96:	617b      	str	r3, [r7, #20]
      break;
 8002c98:	e002      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	617b      	str	r3, [r7, #20]
      break;
 8002c9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3301      	adds	r3, #1
 8002cac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	fb03 f202 	mul.w	r2, r3, r2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	0e5b      	lsrs	r3, r3, #25
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	; 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08009070 	.word	0x08009070
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	007a1200 	.word	0x007a1200

08002d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000

08002d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d30:	f7ff f932 	bl	8001f98 <HAL_PWREx_GetVoltageRange>
 8002d34:	6178      	str	r0, [r7, #20]
 8002d36:	e014      	b.n	8002d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
 8002d44:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d50:	f7ff f922 	bl	8001f98 <HAL_PWREx_GetVoltageRange>
 8002d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d68:	d10b      	bne.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d913      	bls.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2ba0      	cmp	r3, #160	; 0xa0
 8002d74:	d902      	bls.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d76:	2302      	movs	r3, #2
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e00d      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	e00a      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b7f      	cmp	r3, #127	; 0x7f
 8002d86:	d902      	bls.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d88:	2302      	movs	r3, #2
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e004      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b70      	cmp	r3, #112	; 0x70
 8002d92:	d101      	bne.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 020f 	bic.w	r2, r3, #15
 8002da0:	4909      	ldr	r1, [pc, #36]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40022000 	.word	0x40022000

08002dcc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d00b      	beq.n	8002dfa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d825      	bhi.n	8002e34 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d008      	beq.n	8002e00 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d11f      	bne.n	8002e34 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002df6:	613b      	str	r3, [r7, #16]
    break;
 8002df8:	e01f      	b.n	8002e3a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002dfc:	613b      	str	r3, [r7, #16]
    break;
 8002dfe:	e01c      	b.n	8002e3a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e005      	b.n	8002e28 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e28:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e30:	613b      	str	r3, [r7, #16]
    break;
 8002e32:	e002      	b.n	8002e3a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
    break;
 8002e38:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	3301      	adds	r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	0a1b      	lsrs	r3, r3, #8
 8002e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	fb03 f202 	mul.w	r2, r3, r2
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0e5b      	lsrs	r3, r3, #25
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e7a:	683b      	ldr	r3, [r7, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	00f42400 	.word	0x00f42400
 8002e90:	007a1200 	.word	0x007a1200
 8002e94:	08009070 	.word	0x08009070

08002e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d040      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d02a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d825      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ec0:	2b60      	cmp	r3, #96	; 0x60
 8002ec2:	d026      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d821      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	d006      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d81d      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d010      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002ed8:	e018      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eda:	4b89      	ldr	r3, [pc, #548]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4a88      	ldr	r2, [pc, #544]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee6:	e015      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fb02 	bl	80034f8 <RCCEx_PLLSAI1_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef8:	e00c      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3320      	adds	r3, #32
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fbed 	bl	80036e0 <RCCEx_PLLSAI2_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f0a:	e003      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	74fb      	strb	r3, [r7, #19]
      break;
 8002f10:	e000      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10b      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1a:	4b79      	ldr	r3, [pc, #484]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f20:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f28:	4975      	ldr	r1, [pc, #468]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f30:	e001      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d047      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4a:	d030      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f50:	d82a      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f56:	d02a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f5c:	d824      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f68:	d81e      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f72:	d010      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f74:	e018      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f76:	4b62      	ldr	r3, [pc, #392]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4a61      	ldr	r2, [pc, #388]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f82:	e015      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fab4 	bl	80034f8 <RCCEx_PLLSAI1_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f94:	e00c      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3320      	adds	r3, #32
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fb9f 	bl	80036e0 <RCCEx_PLLSAI2_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa6:	e003      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	74fb      	strb	r3, [r7, #19]
      break;
 8002fac:	e000      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fb6:	4b52      	ldr	r3, [pc, #328]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	494e      	ldr	r1, [pc, #312]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fcc:	e001      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 809f 	beq.w	800311e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fe4:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	4a40      	ldr	r2, [pc, #256]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003012:	2301      	movs	r3, #1
 8003014:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003016:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3a      	ldr	r2, [pc, #232]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003022:	f7fd fadf 	bl	80005e4 <HAL_GetTick>
 8003026:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003028:	e009      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fd fadb 	bl	80005e4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	74fb      	strb	r3, [r7, #19]
        break;
 800303c:	e005      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800303e:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ef      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800304a:	7cfb      	ldrb	r3, [r7, #19]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d15b      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01f      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	429a      	cmp	r2, r3
 800306c:	d019      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	4a1f      	ldr	r2, [pc, #124]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d016      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fd fa9a 	bl	80005e4 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b2:	e00b      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fd fa96 	bl	80005e4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
            break;
 80030ca:	e006      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ec      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10c      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030f8:	e008      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	74bb      	strb	r3, [r7, #18]
 80030fe:	e005      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003100:	40021000 	.word	0x40021000
 8003104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310c:	7c7b      	ldrb	r3, [r7, #17]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d105      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003112:	4ba0      	ldr	r3, [pc, #640]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	4a9f      	ldr	r2, [pc, #636]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800312a:	4b9a      	ldr	r3, [pc, #616]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f023 0203 	bic.w	r2, r3, #3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	4996      	ldr	r1, [pc, #600]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800314c:	4b91      	ldr	r3, [pc, #580]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f023 020c 	bic.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	498e      	ldr	r1, [pc, #568]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003174:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	4985      	ldr	r1, [pc, #532]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003190:	4b80      	ldr	r3, [pc, #512]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319e:	497d      	ldr	r1, [pc, #500]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031b2:	4b78      	ldr	r3, [pc, #480]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	4974      	ldr	r1, [pc, #464]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e2:	496c      	ldr	r1, [pc, #432]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003204:	4963      	ldr	r1, [pc, #396]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003226:	495b      	ldr	r1, [pc, #364]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800323a:	4b56      	ldr	r3, [pc, #344]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	4952      	ldr	r1, [pc, #328]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800325c:	4b4d      	ldr	r3, [pc, #308]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	494a      	ldr	r1, [pc, #296]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800327e:	4b45      	ldr	r3, [pc, #276]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	4941      	ldr	r1, [pc, #260]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032a0:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ae:	4939      	ldr	r1, [pc, #228]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d028      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d0:	4930      	ldr	r1, [pc, #192]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e0:	d106      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e2:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ec:	60d3      	str	r3, [r2, #12]
 80032ee:	e011      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032f8:	d10c      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f8f9 	bl	80034f8 <RCCEx_PLLSAI1_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d04d      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003328:	d108      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003336:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800333a:	e012      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003348:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335a:	490e      	ldr	r1, [pc, #56]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800336a:	d106      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a08      	ldr	r2, [pc, #32]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003376:	60d3      	str	r3, [r2, #12]
 8003378:	e020      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003382:	d109      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a02      	ldr	r2, [pc, #8]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338e:	60d3      	str	r3, [r2, #12]
 8003390:	e014      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800339c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f8a5 	bl	80034f8 <RCCEx_PLLSAI1_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d028      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c8:	4b4a      	ldr	r3, [pc, #296]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033d6:	4947      	ldr	r1, [pc, #284]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e6:	d106      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a41      	ldr	r2, [pc, #260]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f2:	60d3      	str	r3, [r2, #12]
 80033f4:	e011      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033fe:	d10c      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f876 	bl	80034f8 <RCCEx_PLLSAI1_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01e      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003426:	4b33      	ldr	r3, [pc, #204]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	492f      	ldr	r1, [pc, #188]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003448:	d10c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	2102      	movs	r1, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f851 	bl	80034f8 <RCCEx_PLLSAI1_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00b      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003476:	f023 0204 	bic.w	r2, r3, #4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003480:	491c      	ldr	r1, [pc, #112]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00b      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003494:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800349a:	f023 0218 	bic.w	r2, r3, #24
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	4913      	ldr	r1, [pc, #76]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d017      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c8:	490a      	ldr	r1, [pc, #40]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034da:	d105      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000

080034f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003506:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003512:	4b6f      	ldr	r3, [pc, #444]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0203 	and.w	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d103      	bne.n	800352a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
       ||
 8003526:	2b00      	cmp	r3, #0
 8003528:	d142      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	e03f      	b.n	80035b0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d018      	beq.n	800356a <RCCEx_PLLSAI1_Config+0x72>
 8003538:	2b03      	cmp	r3, #3
 800353a:	d825      	bhi.n	8003588 <RCCEx_PLLSAI1_Config+0x90>
 800353c:	2b01      	cmp	r3, #1
 800353e:	d002      	beq.n	8003546 <RCCEx_PLLSAI1_Config+0x4e>
 8003540:	2b02      	cmp	r3, #2
 8003542:	d009      	beq.n	8003558 <RCCEx_PLLSAI1_Config+0x60>
 8003544:	e020      	b.n	8003588 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003546:	4b62      	ldr	r3, [pc, #392]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11d      	bne.n	800358e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003556:	e01a      	b.n	800358e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003558:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d116      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e013      	b.n	8003592 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800356a:	4b59      	ldr	r3, [pc, #356]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003576:	4b56      	ldr	r3, [pc, #344]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003586:	e006      	b.n	8003596 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e004      	b.n	8003598 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003596:	bf00      	nop
    }

    if(status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d108      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800359e:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4949      	ldr	r1, [pc, #292]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 8086 	bne.w	80036c4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035b8:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a44      	ldr	r2, [pc, #272]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c4:	f7fd f80e 	bl	80005e4 <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ca:	e009      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035cc:	f7fd f80a 	bl	80005e4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d902      	bls.n	80035e0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	73fb      	strb	r3, [r7, #15]
        break;
 80035de:	e005      	b.n	80035ec <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035e0:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ef      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d168      	bne.n	80036c4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d113      	bne.n	8003620 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035fe:	4013      	ands	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6892      	ldr	r2, [r2, #8]
 8003604:	0211      	lsls	r1, r2, #8
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	06d2      	lsls	r2, r2, #27
 800360c:	4311      	orrs	r1, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6852      	ldr	r2, [r2, #4]
 8003612:	3a01      	subs	r2, #1
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	430a      	orrs	r2, r1
 8003618:	492d      	ldr	r1, [pc, #180]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	610b      	str	r3, [r1, #16]
 800361e:	e02d      	b.n	800367c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d115      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003626:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	0211      	lsls	r1, r2, #8
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6912      	ldr	r2, [r2, #16]
 8003638:	0852      	lsrs	r2, r2, #1
 800363a:	3a01      	subs	r2, #1
 800363c:	0552      	lsls	r2, r2, #21
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6852      	ldr	r2, [r2, #4]
 8003644:	3a01      	subs	r2, #1
 8003646:	0112      	lsls	r2, r2, #4
 8003648:	430a      	orrs	r2, r1
 800364a:	4921      	ldr	r1, [pc, #132]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800364c:	4313      	orrs	r3, r2
 800364e:	610b      	str	r3, [r1, #16]
 8003650:	e014      	b.n	800367c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003652:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	0211      	lsls	r1, r2, #8
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6952      	ldr	r2, [r2, #20]
 8003664:	0852      	lsrs	r2, r2, #1
 8003666:	3a01      	subs	r2, #1
 8003668:	0652      	lsls	r2, r2, #25
 800366a:	4311      	orrs	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6852      	ldr	r2, [r2, #4]
 8003670:	3a01      	subs	r2, #1
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	430a      	orrs	r2, r1
 8003676:	4916      	ldr	r1, [pc, #88]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003686:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fc ffac 	bl	80005e4 <HAL_GetTick>
 800368c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800368e:	e009      	b.n	80036a4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003690:	f7fc ffa8 	bl	80005e4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d902      	bls.n	80036a4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	73fb      	strb	r3, [r7, #15]
          break;
 80036a2:	e005      	b.n	80036b0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ef      	beq.n	8003690 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	4904      	ldr	r1, [pc, #16]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	07ff800f 	.word	0x07ff800f
 80036d8:	ff9f800f 	.word	0xff9f800f
 80036dc:	f9ff800f 	.word	0xf9ff800f

080036e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ee:	4b72      	ldr	r3, [pc, #456]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00e      	beq.n	8003718 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036fa:	4b6f      	ldr	r3, [pc, #444]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0203 	and.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d103      	bne.n	8003712 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
       ||
 800370e:	2b00      	cmp	r3, #0
 8003710:	d142      	bne.n	8003798 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	e03f      	b.n	8003798 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d018      	beq.n	8003752 <RCCEx_PLLSAI2_Config+0x72>
 8003720:	2b03      	cmp	r3, #3
 8003722:	d825      	bhi.n	8003770 <RCCEx_PLLSAI2_Config+0x90>
 8003724:	2b01      	cmp	r3, #1
 8003726:	d002      	beq.n	800372e <RCCEx_PLLSAI2_Config+0x4e>
 8003728:	2b02      	cmp	r3, #2
 800372a:	d009      	beq.n	8003740 <RCCEx_PLLSAI2_Config+0x60>
 800372c:	e020      	b.n	8003770 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800372e:	4b62      	ldr	r3, [pc, #392]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d11d      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373e:	e01a      	b.n	8003776 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003740:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d116      	bne.n	800377a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e013      	b.n	800377a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003752:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800375e:	4b56      	ldr	r3, [pc, #344]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800376e:	e006      	b.n	800377e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      break;
 8003774:	e004      	b.n	8003780 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003776:	bf00      	nop
 8003778:	e002      	b.n	8003780 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800377a:	bf00      	nop
 800377c:	e000      	b.n	8003780 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800377e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003786:	4b4c      	ldr	r3, [pc, #304]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4949      	ldr	r1, [pc, #292]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003794:	4313      	orrs	r3, r2
 8003796:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 8086 	bne.w	80038ac <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037a0:	4b45      	ldr	r3, [pc, #276]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a44      	ldr	r2, [pc, #272]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ac:	f7fc ff1a 	bl	80005e4 <HAL_GetTick>
 80037b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037b2:	e009      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037b4:	f7fc ff16 	bl	80005e4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d902      	bls.n	80037c8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	73fb      	strb	r3, [r7, #15]
        break;
 80037c6:	e005      	b.n	80037d4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037c8:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ef      	bne.n	80037b4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d168      	bne.n	80038ac <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d113      	bne.n	8003808 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037e0:	4b35      	ldr	r3, [pc, #212]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	4b35      	ldr	r3, [pc, #212]	; (80038bc <RCCEx_PLLSAI2_Config+0x1dc>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6892      	ldr	r2, [r2, #8]
 80037ec:	0211      	lsls	r1, r2, #8
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68d2      	ldr	r2, [r2, #12]
 80037f2:	06d2      	lsls	r2, r2, #27
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6852      	ldr	r2, [r2, #4]
 80037fa:	3a01      	subs	r2, #1
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	430a      	orrs	r2, r1
 8003800:	492d      	ldr	r1, [pc, #180]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	614b      	str	r3, [r1, #20]
 8003806:	e02d      	b.n	8003864 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d115      	bne.n	800383a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800380e:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6892      	ldr	r2, [r2, #8]
 800381a:	0211      	lsls	r1, r2, #8
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6912      	ldr	r2, [r2, #16]
 8003820:	0852      	lsrs	r2, r2, #1
 8003822:	3a01      	subs	r2, #1
 8003824:	0552      	lsls	r2, r2, #21
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6852      	ldr	r2, [r2, #4]
 800382c:	3a01      	subs	r2, #1
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	430a      	orrs	r2, r1
 8003832:	4921      	ldr	r1, [pc, #132]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	614b      	str	r3, [r1, #20]
 8003838:	e014      	b.n	8003864 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800383a:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003840:	4013      	ands	r3, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6892      	ldr	r2, [r2, #8]
 8003846:	0211      	lsls	r1, r2, #8
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6952      	ldr	r2, [r2, #20]
 800384c:	0852      	lsrs	r2, r2, #1
 800384e:	3a01      	subs	r2, #1
 8003850:	0652      	lsls	r2, r2, #25
 8003852:	4311      	orrs	r1, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6852      	ldr	r2, [r2, #4]
 8003858:	3a01      	subs	r2, #1
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	430a      	orrs	r2, r1
 800385e:	4916      	ldr	r1, [pc, #88]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003860:	4313      	orrs	r3, r2
 8003862:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003864:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800386a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fc feb8 	bl	80005e4 <HAL_GetTick>
 8003874:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003876:	e009      	b.n	800388c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003878:	f7fc feb4 	bl	80005e4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d902      	bls.n	800388c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	73fb      	strb	r3, [r7, #15]
          break;
 800388a:	e005      	b.n	8003898 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ef      	beq.n	8003878 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	4904      	ldr	r1, [pc, #16]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	07ff800f 	.word	0x07ff800f
 80038c0:	ff9f800f 	.word	0xff9f800f
 80038c4:	f9ff800f 	.word	0xf9ff800f

080038c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c8:	b084      	sub	sp, #16
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	f107 001c 	add.w	r0, r7, #28
 80038d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f001 fa1c 	bl	8004d24 <USB_CoreReset>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80038f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
 8003902:	e005      	b.n	8003910 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800391c:	b004      	add	sp, #16
 800391e:	4770      	bx	lr

08003920 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d165      	bne.n	8003a00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4a3e      	ldr	r2, [pc, #248]	; (8003a30 <USB_SetTurnaroundTime+0x110>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d906      	bls.n	800394a <USB_SetTurnaroundTime+0x2a>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4a3d      	ldr	r2, [pc, #244]	; (8003a34 <USB_SetTurnaroundTime+0x114>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d202      	bcs.n	800394a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003944:	230f      	movs	r3, #15
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e05c      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4a39      	ldr	r2, [pc, #228]	; (8003a34 <USB_SetTurnaroundTime+0x114>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d306      	bcc.n	8003960 <USB_SetTurnaroundTime+0x40>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4a38      	ldr	r2, [pc, #224]	; (8003a38 <USB_SetTurnaroundTime+0x118>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d202      	bcs.n	8003960 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800395a:	230e      	movs	r3, #14
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e051      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4a35      	ldr	r2, [pc, #212]	; (8003a38 <USB_SetTurnaroundTime+0x118>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d306      	bcc.n	8003976 <USB_SetTurnaroundTime+0x56>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <USB_SetTurnaroundTime+0x11c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d202      	bcs.n	8003976 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003970:	230d      	movs	r3, #13
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e046      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4a30      	ldr	r2, [pc, #192]	; (8003a3c <USB_SetTurnaroundTime+0x11c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d306      	bcc.n	800398c <USB_SetTurnaroundTime+0x6c>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4a2f      	ldr	r2, [pc, #188]	; (8003a40 <USB_SetTurnaroundTime+0x120>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d802      	bhi.n	800398c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003986:	230c      	movs	r3, #12
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e03b      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4a2c      	ldr	r2, [pc, #176]	; (8003a40 <USB_SetTurnaroundTime+0x120>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d906      	bls.n	80039a2 <USB_SetTurnaroundTime+0x82>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4a2b      	ldr	r2, [pc, #172]	; (8003a44 <USB_SetTurnaroundTime+0x124>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d802      	bhi.n	80039a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800399c:	230b      	movs	r3, #11
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e030      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4a27      	ldr	r2, [pc, #156]	; (8003a44 <USB_SetTurnaroundTime+0x124>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d906      	bls.n	80039b8 <USB_SetTurnaroundTime+0x98>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <USB_SetTurnaroundTime+0x128>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d802      	bhi.n	80039b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039b2:	230a      	movs	r3, #10
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e025      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4a23      	ldr	r2, [pc, #140]	; (8003a48 <USB_SetTurnaroundTime+0x128>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d906      	bls.n	80039ce <USB_SetTurnaroundTime+0xae>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4a22      	ldr	r2, [pc, #136]	; (8003a4c <USB_SetTurnaroundTime+0x12c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d202      	bcs.n	80039ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039c8:	2309      	movs	r3, #9
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e01a      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <USB_SetTurnaroundTime+0x12c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d306      	bcc.n	80039e4 <USB_SetTurnaroundTime+0xc4>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <USB_SetTurnaroundTime+0x130>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d802      	bhi.n	80039e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039de:	2308      	movs	r3, #8
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e00f      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <USB_SetTurnaroundTime+0x130>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d906      	bls.n	80039fa <USB_SetTurnaroundTime+0xda>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <USB_SetTurnaroundTime+0x134>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d202      	bcs.n	80039fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80039f4:	2307      	movs	r3, #7
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e004      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80039fa:	2306      	movs	r3, #6
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e001      	b.n	8003a04 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a00:	2309      	movs	r3, #9
 8003a02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	029b      	lsls	r3, r3, #10
 8003a18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	00d8acbf 	.word	0x00d8acbf
 8003a34:	00e4e1c0 	.word	0x00e4e1c0
 8003a38:	00f42400 	.word	0x00f42400
 8003a3c:	01067380 	.word	0x01067380
 8003a40:	011a499f 	.word	0x011a499f
 8003a44:	01312cff 	.word	0x01312cff
 8003a48:	014ca43f 	.word	0x014ca43f
 8003a4c:	016e3600 	.word	0x016e3600
 8003a50:	01a6ab1f 	.word	0x01a6ab1f
 8003a54:	01e84800 	.word	0x01e84800

08003a58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 0201 	bic.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d115      	bne.n	8003aea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003aca:	2001      	movs	r0, #1
 8003acc:	f7fc fd96 	bl	80005fc <HAL_Delay>
      ms++;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f001 f8ab 	bl	8004c32 <USB_GetMode>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d01e      	beq.n	8003b20 <USB_SetCurrentMode+0x84>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b31      	cmp	r3, #49	; 0x31
 8003ae6:	d9f0      	bls.n	8003aca <USB_SetCurrentMode+0x2e>
 8003ae8:	e01a      	b.n	8003b20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d115      	bne.n	8003b1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003afc:	2001      	movs	r0, #1
 8003afe:	f7fc fd7d 	bl	80005fc <HAL_Delay>
      ms++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f001 f892 	bl	8004c32 <USB_GetMode>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <USB_SetCurrentMode+0x84>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b31      	cmp	r3, #49	; 0x31
 8003b18:	d9f0      	bls.n	8003afc <USB_SetCurrentMode+0x60>
 8003b1a:	e001      	b.n	8003b20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e005      	b.n	8003b2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b32      	cmp	r3, #50	; 0x32
 8003b24:	d101      	bne.n	8003b2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b34:	b084      	sub	sp, #16
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	e009      	b.n	8003b68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	3340      	adds	r3, #64	; 0x40
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3301      	adds	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b0e      	cmp	r3, #14
 8003b6c:	d9f2      	bls.n	8003b54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11c      	bne.n	8003bae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e005      	b.n	8003bba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003bc6:	2103      	movs	r1, #3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f959 	bl	8003e80 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bce:	2110      	movs	r1, #16
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f8f1 	bl	8003db8 <USB_FlushTxFifo>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f91d 	bl	8003e20 <USB_FlushRxFifo>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c02:	461a      	mov	r2, r3
 8003c04:	2300      	movs	r3, #0
 8003c06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2300      	movs	r3, #0
 8003c12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	e043      	b.n	8003ca2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c30:	d118      	bne.n	8003c64 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	461a      	mov	r2, r3
 8003c46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	e013      	b.n	8003c76 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e008      	b.n	8003c76 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	461a      	mov	r2, r3
 8003c72:	2300      	movs	r3, #0
 8003c74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c82:	461a      	mov	r2, r3
 8003c84:	2300      	movs	r3, #0
 8003c86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c94:	461a      	mov	r2, r3
 8003c96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d3b7      	bcc.n	8003c1a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	e043      	b.n	8003d38 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc6:	d118      	bne.n	8003cfa <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e013      	b.n	8003d0c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	e008      	b.n	8003d0c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	461a      	mov	r2, r3
 8003d08:	2300      	movs	r3, #0
 8003d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	3301      	adds	r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3b7      	bcc.n	8003cb0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f043 0210 	orr.w	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <USB_DevInit+0x280>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f043 0208 	orr.w	r2, r3, #8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d107      	bne.n	8003da2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dae:	b004      	add	sp, #16
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	803c3800 	.word	0x803c3800

08003db8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <USB_FlushTxFifo+0x64>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e01b      	b.n	8003e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	daf2      	bge.n	8003dc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	019b      	lsls	r3, r3, #6
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3301      	adds	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <USB_FlushTxFifo+0x64>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e006      	b.n	8003e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d0f0      	beq.n	8003df0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	00030d40 	.word	0x00030d40

08003e20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a11      	ldr	r2, [pc, #68]	; (8003e7c <USB_FlushRxFifo+0x5c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e018      	b.n	8003e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	daf2      	bge.n	8003e2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <USB_FlushRxFifo+0x5c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e006      	b.n	8003e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d0f0      	beq.n	8003e50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	00030d40 	.word	0x00030d40

08003e80 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b087      	sub	sp, #28
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0306 	and.w	r3, r3, #6
 8003eca:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d002      	beq.n	8003ed8 <USB_GetDevSpeed+0x26>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d102      	bne.n	8003ede <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	75fb      	strb	r3, [r7, #23]
 8003edc:	e001      	b.n	8003ee2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003ede:	230f      	movs	r3, #15
 8003ee0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d13a      	bne.n	8003f82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	68f9      	ldr	r1, [r7, #12]
 8003f26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d155      	bne.n	8003ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	791b      	ldrb	r3, [r3, #4]
 8003f5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	059b      	lsls	r3, r3, #22
 8003f66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	0151      	lsls	r1, r2, #5
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	440a      	add	r2, r1
 8003f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e036      	b.n	8003ff0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d11a      	bne.n	8003ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	791b      	ldrb	r3, [r3, #4]
 8003fd4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	0151      	lsls	r1, r2, #5
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	440a      	add	r2, r1
 8003fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d161      	bne.n	80040e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800402e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004032:	d11f      	bne.n	8004074 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	0151      	lsls	r1, r2, #5
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	440a      	add	r2, r1
 800404a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004052:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	0151      	lsls	r1, r2, #5
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	440a      	add	r2, r1
 800406a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004072:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	2101      	movs	r1, #1
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	b29b      	uxth	r3, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	68f9      	ldr	r1, [r7, #12]
 8004090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004094:	4013      	ands	r3, r2
 8004096:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040b8:	4013      	ands	r3, r2
 80040ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	0159      	lsls	r1, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	440b      	add	r3, r1
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	4619      	mov	r1, r3
 80040d8:	4b35      	ldr	r3, [pc, #212]	; (80041b0 <USB_DeactivateEndpoint+0x1b0>)
 80040da:	4013      	ands	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
 80040de:	e060      	b.n	80041a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f6:	d11f      	bne.n	8004138 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	440a      	add	r2, r1
 800410e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004116:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	440a      	add	r2, r1
 800412e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004136:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	43db      	mvns	r3, r3
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004158:	4013      	ands	r3, r2
 800415a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	041b      	lsls	r3, r3, #16
 8004174:	43db      	mvns	r3, r3
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800417c:	4013      	ands	r3, r2
 800417e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	0159      	lsls	r1, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	440b      	add	r3, r1
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	4619      	mov	r1, r3
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <USB_DeactivateEndpoint+0x1b4>)
 800419e:	4013      	ands	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	ec337800 	.word	0xec337800
 80041b4:	eff37800 	.word	0xeff37800

080041b8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	f040 8128 	bne.w	8004426 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d132      	bne.n	8004244 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	440a      	add	r2, r1
 8004218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004220:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423c:	0cdb      	lsrs	r3, r3, #19
 800423e:	04db      	lsls	r3, r3, #19
 8004240:	6113      	str	r3, [r2, #16]
 8004242:	e092      	b.n	800436a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425e:	0cdb      	lsrs	r3, r3, #19
 8004260:	04db      	lsls	r3, r3, #19
 8004262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	440a      	add	r2, r1
 800427a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004282:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004286:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11a      	bne.n	80042c4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	d903      	bls.n	80042a2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042c0:	6113      	str	r3, [r2, #16]
 80042c2:	e01b      	b.n	80042fc <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6919      	ldr	r1, [r3, #16]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	440b      	add	r3, r1
 80042dc:	1e59      	subs	r1, r3, #1
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042e8:	4b8d      	ldr	r3, [pc, #564]	; (8004520 <USB_EPStartXfer+0x368>)
 80042ea:	400b      	ands	r3, r1
 80042ec:	6939      	ldr	r1, [r7, #16]
 80042ee:	0148      	lsls	r0, r1, #5
 80042f0:	6979      	ldr	r1, [r7, #20]
 80042f2:	4401      	add	r1, r0
 80042f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004312:	6939      	ldr	r1, [r7, #16]
 8004314:	0148      	lsls	r0, r1, #5
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	4401      	add	r1, r0
 800431a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800431e:	4313      	orrs	r3, r2
 8004320:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	791b      	ldrb	r3, [r3, #4]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d11f      	bne.n	800436a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	440a      	add	r2, r1
 8004340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004344:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004348:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	0151      	lsls	r1, r2, #5
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	440a      	add	r2, r1
 8004360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004364:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004368:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	0151      	lsls	r1, r2, #5
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	440a      	add	r2, r1
 8004380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004384:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004388:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	791b      	ldrb	r3, [r3, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d015      	beq.n	80043be <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8139 	beq.w	800460e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	2101      	movs	r1, #1
 80043ae:	fa01 f303 	lsl.w	r3, r1, r3
 80043b2:	6979      	ldr	r1, [r7, #20]
 80043b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043b8:	4313      	orrs	r3, r2
 80043ba:	634b      	str	r3, [r1, #52]	; 0x34
 80043bc:	e127      	b.n	800460e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d110      	bne.n	80043f0 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	0151      	lsls	r1, r2, #5
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	440a      	add	r2, r1
 80043e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e00f      	b.n	8004410 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	0151      	lsls	r1, r2, #5
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	440a      	add	r2, r1
 8004406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68d9      	ldr	r1, [r3, #12]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781a      	ldrb	r2, [r3, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	b29b      	uxth	r3, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9a6 	bl	8004770 <USB_WritePacket>
 8004424:	e0f3      	b.n	800460e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004440:	0cdb      	lsrs	r3, r3, #19
 8004442:	04db      	lsls	r3, r3, #19
 8004444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	0151      	lsls	r1, r2, #5
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	440a      	add	r2, r1
 800445c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004468:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d12f      	bne.n	80044d0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449e:	6939      	ldr	r1, [r7, #16]
 80044a0:	0148      	lsls	r0, r1, #5
 80044a2:	6979      	ldr	r1, [r7, #20]
 80044a4:	4401      	add	r1, r0
 80044a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044aa:	4313      	orrs	r3, r2
 80044ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044cc:	6113      	str	r3, [r2, #16]
 80044ce:	e061      	b.n	8004594 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d125      	bne.n	8004524 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ee:	6939      	ldr	r1, [r7, #16]
 80044f0:	0148      	lsls	r0, r1, #5
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	4401      	add	r1, r0
 80044f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	0151      	lsls	r1, r2, #5
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	440a      	add	r2, r1
 8004514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800451c:	6113      	str	r3, [r2, #16]
 800451e:	e039      	b.n	8004594 <USB_EPStartXfer+0x3dc>
 8004520:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4413      	add	r3, r2
 800452e:	1e5a      	subs	r2, r3, #1
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	89fa      	ldrh	r2, [r7, #14]
 8004540:	fb03 f202 	mul.w	r2, r3, r2
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	89fb      	ldrh	r3, [r7, #14]
 8004558:	04d9      	lsls	r1, r3, #19
 800455a:	4b2f      	ldr	r3, [pc, #188]	; (8004618 <USB_EPStartXfer+0x460>)
 800455c:	400b      	ands	r3, r1
 800455e:	6939      	ldr	r1, [r7, #16]
 8004560:	0148      	lsls	r0, r1, #5
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	4401      	add	r1, r0
 8004566:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800456a:	4313      	orrs	r3, r2
 800456c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004584:	6939      	ldr	r1, [r7, #16]
 8004586:	0148      	lsls	r0, r1, #5
 8004588:	6979      	ldr	r1, [r7, #20]
 800458a:	4401      	add	r1, r0
 800458c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004590:	4313      	orrs	r3, r2
 8004592:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	791b      	ldrb	r3, [r3, #4]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d128      	bne.n	80045ee <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d110      	bne.n	80045ce <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	e00f      	b.n	80045ee <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ec:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004608:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800460c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	1ff80000 	.word	0x1ff80000

0800461c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d14a      	bne.n	80046d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004652:	f040 8086 	bne.w	8004762 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004678:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800469c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d902      	bls.n	80046b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
          break;
 80046b2:	e056      	b.n	8004762 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046cc:	d0e7      	beq.n	800469e <USB_EPStopXfer+0x82>
 80046ce:	e048      	b.n	8004762 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e8:	d13b      	bne.n	8004762 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	0151      	lsls	r1, r2, #5
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	440a      	add	r2, r1
 8004704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004708:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800470c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004730:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3301      	adds	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f242 7210 	movw	r2, #10000	; 0x2710
 800473e:	4293      	cmp	r3, r2
 8004740:	d902      	bls.n	8004748 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
          break;
 8004746:	e00c      	b.n	8004762 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004760:	d0e7      	beq.n	8004732 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004770:	b480      	push	{r7}
 8004772:	b089      	sub	sp, #36	; 0x24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4611      	mov	r1, r2
 800477c:	461a      	mov	r2, r3
 800477e:	460b      	mov	r3, r1
 8004780:	71fb      	strb	r3, [r7, #7]
 8004782:	4613      	mov	r3, r2
 8004784:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800478e:	88bb      	ldrh	r3, [r7, #4]
 8004790:	3303      	adds	r3, #3
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e018      	b.n	80047ce <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	031a      	lsls	r2, r3, #12
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a8:	461a      	mov	r2, r3
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6013      	str	r3, [r2, #0]
    pSrc++;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	3301      	adds	r3, #1
 80047b4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3301      	adds	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3301      	adds	r3, #1
 80047c6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	3301      	adds	r3, #1
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3e2      	bcc.n	800479c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3724      	adds	r7, #36	; 0x24
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b08b      	sub	sp, #44	; 0x2c
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	b29b      	uxth	r3, r3
 8004800:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800480a:	2300      	movs	r3, #0
 800480c:	623b      	str	r3, [r7, #32]
 800480e:	e014      	b.n	800483a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	601a      	str	r2, [r3, #0]
    pDest++;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	3301      	adds	r3, #1
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	3301      	adds	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	3301      	adds	r3, #1
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	3301      	adds	r3, #1
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	3301      	adds	r3, #1
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3e6      	bcc.n	8004810 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004842:	8bfb      	ldrh	r3, [r7, #30]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01e      	beq.n	8004886 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004852:	461a      	mov	r2, r3
 8004854:	f107 0310 	add.w	r3, r7, #16
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
 8004868:	b2da      	uxtb	r2, r3
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	701a      	strb	r2, [r3, #0]
      i++;
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	3301      	adds	r3, #1
 8004872:	623b      	str	r3, [r7, #32]
      pDest++;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	3301      	adds	r3, #1
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800487a:	8bfb      	ldrh	r3, [r7, #30]
 800487c:	3b01      	subs	r3, #1
 800487e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004880:	8bfb      	ldrh	r3, [r7, #30]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ea      	bne.n	800485c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004888:	4618      	mov	r0, r3
 800488a:	372c      	adds	r7, #44	; 0x2c
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d12c      	bne.n	800490a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db12      	blt.n	80048e8 <USB_EPSetStall+0x54>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00f      	beq.n	80048e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	0151      	lsls	r1, r2, #5
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	440a      	add	r2, r1
 80048fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	e02b      	b.n	8004962 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	db12      	blt.n	8004942 <USB_EPSetStall+0xae>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00f      	beq.n	8004942 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004940:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	0151      	lsls	r1, r2, #5
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	440a      	add	r2, r1
 8004958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800495c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004960:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d128      	bne.n	80049de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	791b      	ldrb	r3, [r3, #4]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d003      	beq.n	80049bc <USB_EPClearStall+0x4c>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	791b      	ldrb	r3, [r3, #4]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d138      	bne.n	8004a2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e027      	b.n	8004a2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	791b      	ldrb	r3, [r3, #4]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d003      	beq.n	8004a0e <USB_EPClearStall+0x9e>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	791b      	ldrb	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d10f      	bne.n	8004a2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a70:	68f9      	ldr	r1, [r7, #12]
 8004a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab6:	f023 0302 	bic.w	r3, r3, #2
 8004aba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ae4:	f023 0303 	bic.w	r3, r3, #3
 8004ae8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af8:	f043 0302 	orr.w	r3, r3, #2
 8004afc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4013      	ands	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b24:	68fb      	ldr	r3, [r7, #12]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	4013      	ands	r3, r2
 8004b54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	0c1b      	lsrs	r3, r3, #16
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	4013      	ands	r3, r2
 8004b88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	b29b      	uxth	r3, r3
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b087      	sub	sp, #28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	fa22 f303 	lsr.w	r3, r2, r3
 8004c06:	01db      	lsls	r3, r3, #7
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4013      	ands	r3, r2
 8004c22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c24:	68bb      	ldr	r3, [r7, #8]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c6c:	f023 0307 	bic.w	r3, r3, #7
 8004c70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	333c      	adds	r3, #60	; 0x3c
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <USB_EP0_OutStart+0x8c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d90a      	bls.n	8004cca <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cc4:	d101      	bne.n	8004cca <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e024      	b.n	8004d14 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ce8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf8:	f043 0318 	orr.w	r3, r3, #24
 8004cfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d10:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	4f54300a 	.word	0x4f54300a

08004d24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4a13      	ldr	r2, [pc, #76]	; (8004d88 <USB_CoreReset+0x64>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e01b      	b.n	8004d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	daf2      	bge.n	8004d30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f043 0201 	orr.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <USB_CoreReset+0x64>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d901      	bls.n	8004d6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e006      	b.n	8004d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d0f0      	beq.n	8004d5a <USB_CoreReset+0x36>

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	00030d40 	.word	0x00030d40

08004d8c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004d98:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004d9c:	f004 f8da 	bl	8008f54 <USBD_static_malloc>
 8004da0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	32b0      	adds	r2, #176	; 0xb0
 8004db2:	2100      	movs	r1, #0
 8004db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004db8:	2302      	movs	r3, #2
 8004dba:	e06e      	b.n	8004e9a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	32b0      	adds	r2, #176	; 0xb0
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	32b0      	adds	r2, #176	; 0xb0
 8004dd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	7c1b      	ldrb	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d12b      	bne.n	8004e40 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004de8:	4b2e      	ldr	r3, [pc, #184]	; (8004ea4 <USBD_MSC_Init+0x118>)
 8004dea:	7819      	ldrb	r1, [r3, #0]
 8004dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004df0:	2202      	movs	r2, #2
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f003 fe64 	bl	8008ac0 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004df8:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <USBD_MSC_Init+0x118>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f003 020f 	and.w	r2, r3, #15
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e10:	2201      	movs	r2, #1
 8004e12:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004e14:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <USBD_MSC_Init+0x11c>)
 8004e16:	7819      	ldrb	r1, [r3, #0]
 8004e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f003 fe4e 	bl	8008ac0 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004e24:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <USBD_MSC_Init+0x11c>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	f003 020f 	and.w	r2, r3, #15
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	3324      	adds	r3, #36	; 0x24
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	e028      	b.n	8004e92 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004e40:	4b18      	ldr	r3, [pc, #96]	; (8004ea4 <USBD_MSC_Init+0x118>)
 8004e42:	7819      	ldrb	r1, [r3, #0]
 8004e44:	2340      	movs	r3, #64	; 0x40
 8004e46:	2202      	movs	r2, #2
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f003 fe39 	bl	8008ac0 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <USBD_MSC_Init+0x118>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	f003 020f 	and.w	r2, r3, #15
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e66:	2201      	movs	r2, #1
 8004e68:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <USBD_MSC_Init+0x11c>)
 8004e6c:	7819      	ldrb	r1, [r3, #0]
 8004e6e:	2340      	movs	r3, #64	; 0x40
 8004e70:	2202      	movs	r2, #2
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f003 fe24 	bl	8008ac0 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <USBD_MSC_Init+0x11c>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	f003 020f 	and.w	r2, r3, #15
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3324      	adds	r3, #36	; 0x24
 8004e8e:	2201      	movs	r2, #1
 8004e90:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa2c 	bl	80052f0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	2000006f 	.word	0x2000006f
 8004ea8:	2000006e 	.word	0x2000006e

08004eac <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8004eb8:	4b26      	ldr	r3, [pc, #152]	; (8004f54 <USBD_MSC_DeInit+0xa8>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f003 fe3c 	bl	8008b3c <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8004ec4:	4b23      	ldr	r3, [pc, #140]	; (8004f54 <USBD_MSC_DeInit+0xa8>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	f003 020f 	and.w	r2, r3, #15
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004edc:	2200      	movs	r2, #0
 8004ede:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <USBD_MSC_DeInit+0xac>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f003 fe28 	bl	8008b3c <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <USBD_MSC_DeInit+0xac>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3324      	adds	r3, #36	; 0x24
 8004f02:	2200      	movs	r2, #0
 8004f04:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	32b0      	adds	r2, #176	; 0xb0
 8004f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d018      	beq.n	8004f4a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fa67 	bl	80053ec <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	32b0      	adds	r2, #176	; 0xb0
 8004f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f004 f81f 	bl	8008f70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	32b0      	adds	r2, #176	; 0xb0
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	2000006f 	.word	0x2000006f
 8004f58:	2000006e 	.word	0x2000006e

08004f5c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	32b0      	adds	r2, #176	; 0xb0
 8004f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f74:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0e1      	b.n	800514c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d053      	beq.n	800503c <USBD_MSC_Setup+0xe0>
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	f040 80d1 	bne.w	800513c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2bfe      	cmp	r3, #254	; 0xfe
 8004fa0:	d002      	beq.n	8004fa8 <USBD_MSC_Setup+0x4c>
 8004fa2:	2bff      	cmp	r3, #255	; 0xff
 8004fa4:	d02a      	beq.n	8004ffc <USBD_MSC_Setup+0xa0>
 8004fa6:	e041      	b.n	800502c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	885b      	ldrh	r3, [r3, #2]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d11e      	bne.n	8004fee <USBD_MSC_Setup+0x92>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	88db      	ldrh	r3, [r3, #6]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d11a      	bne.n	8004fee <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da15      	bge.n	8004fee <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	33b0      	adds	r3, #176	; 0xb0
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	4798      	blx	r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	461a      	mov	r2, r3
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f003 f92b 	bl	8008240 <USBD_CtlSendData>
 8004fea:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fec:	e025      	b.n	800503a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f003 f8b4 	bl	800815e <USBD_CtlError>
            ret = USBD_FAIL;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8004ffa:	e01e      	b.n	800503a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	885b      	ldrh	r3, [r3, #2]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10c      	bne.n	800501e <USBD_MSC_Setup+0xc2>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	88db      	ldrh	r3, [r3, #6]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d108      	bne.n	800501e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005012:	2b00      	cmp	r3, #0
 8005014:	db03      	blt.n	800501e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9b4 	bl	8005384 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800501c:	e00d      	b.n	800503a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f003 f89c 	bl	800815e <USBD_CtlError>
            ret = USBD_FAIL;
 8005026:	2303      	movs	r3, #3
 8005028:	75fb      	strb	r3, [r7, #23]
          break;
 800502a:	e006      	b.n	800503a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f003 f895 	bl	800815e <USBD_CtlError>
          ret = USBD_FAIL;
 8005034:	2303      	movs	r3, #3
 8005036:	75fb      	strb	r3, [r7, #23]
          break;
 8005038:	bf00      	nop
      }
      break;
 800503a:	e086      	b.n	800514a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	785b      	ldrb	r3, [r3, #1]
 8005040:	2b0b      	cmp	r3, #11
 8005042:	d872      	bhi.n	800512a <USBD_MSC_Setup+0x1ce>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <USBD_MSC_Setup+0xf0>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	0800507d 	.word	0x0800507d
 8005050:	080050f9 	.word	0x080050f9
 8005054:	0800512b 	.word	0x0800512b
 8005058:	0800512b 	.word	0x0800512b
 800505c:	0800512b 	.word	0x0800512b
 8005060:	0800512b 	.word	0x0800512b
 8005064:	0800512b 	.word	0x0800512b
 8005068:	0800512b 	.word	0x0800512b
 800506c:	0800512b 	.word	0x0800512b
 8005070:	0800512b 	.word	0x0800512b
 8005074:	080050a7 	.word	0x080050a7
 8005078:	080050d1 	.word	0x080050d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b03      	cmp	r3, #3
 8005086:	d107      	bne.n	8005098 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005088:	f107 030e 	add.w	r3, r7, #14
 800508c:	2202      	movs	r2, #2
 800508e:	4619      	mov	r1, r3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f003 f8d5 	bl	8008240 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005096:	e050      	b.n	800513a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005098:	6839      	ldr	r1, [r7, #0]
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f003 f85f 	bl	800815e <USBD_CtlError>
            ret = USBD_FAIL;
 80050a0:	2303      	movs	r3, #3
 80050a2:	75fb      	strb	r3, [r7, #23]
          break;
 80050a4:	e049      	b.n	800513a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d107      	bne.n	80050c2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3304      	adds	r3, #4
 80050b6:	2201      	movs	r2, #1
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f003 f8c0 	bl	8008240 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050c0:	e03b      	b.n	800513a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f003 f84a 	bl	800815e <USBD_CtlError>
            ret = USBD_FAIL;
 80050ca:	2303      	movs	r3, #3
 80050cc:	75fb      	strb	r3, [r7, #23]
          break;
 80050ce:	e034      	b.n	800513a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d106      	bne.n	80050ea <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	885b      	ldrh	r3, [r3, #2]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050e8:	e027      	b.n	800513a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f003 f836 	bl	800815e <USBD_CtlError>
            ret = USBD_FAIL;
 80050f2:	2303      	movs	r3, #3
 80050f4:	75fb      	strb	r3, [r7, #23]
          break;
 80050f6:	e020      	b.n	800513a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b03      	cmp	r3, #3
 8005102:	d119      	bne.n	8005138 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	885b      	ldrh	r3, [r3, #2]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d115      	bne.n	8005138 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	889b      	ldrh	r3, [r3, #4]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f003 fd47 	bl	8008ba8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	889b      	ldrh	r3, [r3, #4]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fb2e 	bl	8005784 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8005128:	e006      	b.n	8005138 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f003 f816 	bl	800815e <USBD_CtlError>
          ret = USBD_FAIL;
 8005132:	2303      	movs	r3, #3
 8005134:	75fb      	strb	r3, [r7, #23]
          break;
 8005136:	e000      	b.n	800513a <USBD_MSC_Setup+0x1de>
          break;
 8005138:	bf00      	nop
      }
      break;
 800513a:	e006      	b.n	800514a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f003 f80d 	bl	800815e <USBD_CtlError>
      ret = USBD_FAIL;
 8005144:	2303      	movs	r3, #3
 8005146:	75fb      	strb	r3, [r7, #23]
      break;
 8005148:	bf00      	nop
  }

  return (uint8_t)ret;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f959 	bl	800541c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f983 	bl	8005490 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800519c:	2181      	movs	r1, #129	; 0x81
 800519e:	4812      	ldr	r0, [pc, #72]	; (80051e8 <USBD_MSC_GetHSCfgDesc+0x54>)
 80051a0:	f002 f97a 	bl	8007498 <USBD_GetEpDesc>
 80051a4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80051a6:	2101      	movs	r1, #1
 80051a8:	480f      	ldr	r0, [pc, #60]	; (80051e8 <USBD_MSC_GetHSCfgDesc+0x54>)
 80051aa:	f002 f975 	bl	8007498 <USBD_GetEpDesc>
 80051ae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d006      	beq.n	80051c4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	711a      	strb	r2, [r3, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f042 0202 	orr.w	r2, r2, #2
 80051c2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d006      	beq.n	80051d8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2200      	movs	r2, #0
 80051ce:	711a      	strb	r2, [r3, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f042 0202 	orr.w	r2, r2, #2
 80051d6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80051de:	4b02      	ldr	r3, [pc, #8]	; (80051e8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000044 	.word	0x20000044

080051ec <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80051f4:	2181      	movs	r1, #129	; 0x81
 80051f6:	4812      	ldr	r0, [pc, #72]	; (8005240 <USBD_MSC_GetFSCfgDesc+0x54>)
 80051f8:	f002 f94e 	bl	8007498 <USBD_GetEpDesc>
 80051fc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80051fe:	2101      	movs	r1, #1
 8005200:	480f      	ldr	r0, [pc, #60]	; (8005240 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005202:	f002 f949 	bl	8007498 <USBD_GetEpDesc>
 8005206:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d006      	beq.n	800521c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005216:	711a      	strb	r2, [r3, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d006      	beq.n	8005230 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800522a:	711a      	strb	r2, [r3, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005236:	4b02      	ldr	r3, [pc, #8]	; (8005240 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000044 	.word	0x20000044

08005244 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800524c:	2181      	movs	r1, #129	; 0x81
 800524e:	4812      	ldr	r0, [pc, #72]	; (8005298 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8005250:	f002 f922 	bl	8007498 <USBD_GetEpDesc>
 8005254:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005256:	2101      	movs	r1, #1
 8005258:	480f      	ldr	r0, [pc, #60]	; (8005298 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800525a:	f002 f91d 	bl	8007498 <USBD_GetEpDesc>
 800525e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d006      	beq.n	8005274 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800526e:	711a      	strb	r2, [r3, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005282:	711a      	strb	r2, [r3, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800528e:	4b02      	ldr	r3, [pc, #8]	; (8005298 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000044 	.word	0x20000044

0800529c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	220a      	movs	r2, #10
 80052a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80052aa:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20000064 	.word	0x20000064

080052bc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e009      	b.n	80052e4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	33b0      	adds	r3, #176	; 0xb0
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	32b0      	adds	r2, #176	; 0xb0
 8005302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005306:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d032      	beq.n	8005374 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	33b0      	adds	r3, #176	; 0xb0
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2000      	movs	r0, #0
 8005346:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <MSC_BOT_Init+0x8c>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f003 fc2a 	bl	8008ba8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <MSC_BOT_Init+0x90>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f003 fc24 	bl	8008ba8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <MSC_BOT_Init+0x8c>)
 8005362:	7819      	ldrb	r1, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800536a:	231f      	movs	r3, #31
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f003 fd57 	bl	8008e20 <USBD_LL_PrepareReceive>
 8005372:	e000      	b.n	8005376 <MSC_BOT_Init+0x86>
    return;
 8005374:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	2000006f 	.word	0x2000006f
 8005380:	2000006e 	.word	0x2000006e

08005384 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	32b0      	adds	r2, #176	; 0xb0
 8005396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01b      	beq.n	80053da <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <MSC_BOT_Reset+0x60>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f003 fc63 	bl	8008c80 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80053ba:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <MSC_BOT_Reset+0x64>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f003 fc5d 	bl	8008c80 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <MSC_BOT_Reset+0x64>)
 80053c8:	7819      	ldrb	r1, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80053d0:	231f      	movs	r3, #31
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f003 fd24 	bl	8008e20 <USBD_LL_PrepareReceive>
 80053d8:	e000      	b.n	80053dc <MSC_BOT_Reset+0x58>
    return;
 80053da:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	2000006e 	.word	0x2000006e
 80053e8:	2000006f 	.word	0x2000006f

080053ec <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	32b0      	adds	r2, #176	; 0xb0
 80053fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005402:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	721a      	strb	r2, [r3, #8]
  }
}
 8005410:	bf00      	nop
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	32b0      	adds	r2, #176	; 0xb0
 8005432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005436:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d020      	beq.n	8005480 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	7a1b      	ldrb	r3, [r3, #8]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d005      	beq.n	8005452 <MSC_BOT_DataIn+0x36>
 8005446:	2b02      	cmp	r3, #2
 8005448:	db1c      	blt.n	8005484 <MSC_BOT_DataIn+0x68>
 800544a:	3b03      	subs	r3, #3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d819      	bhi.n	8005484 <MSC_BOT_DataIn+0x68>
 8005450:	e011      	b.n	8005476 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800545e:	461a      	mov	r2, r3
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9c9 	bl	80057f8 <SCSI_ProcessCmd>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	da0d      	bge.n	8005488 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800546c:	2101      	movs	r1, #1
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f90c 	bl	800568c <MSC_BOT_SendCSW>
      }
      break;
 8005474:	e008      	b.n	8005488 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005476:	2100      	movs	r1, #0
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f907 	bl	800568c <MSC_BOT_SendCSW>
      break;
 800547e:	e004      	b.n	800548a <MSC_BOT_DataIn+0x6e>
    return;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <MSC_BOT_DataIn+0x6e>
      break;
 8005488:	bf00      	nop
  }
}
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	32b0      	adds	r2, #176	; 0xb0
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01c      	beq.n	80054ec <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	7a1b      	ldrb	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <MSC_BOT_DataOut+0x30>
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d004      	beq.n	80054c8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80054be:	e018      	b.n	80054f2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f819 	bl	80054f8 <MSC_BOT_CBW_Decode>
      break;
 80054c6:	e014      	b.n	80054f2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80054d4:	461a      	mov	r2, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f98e 	bl	80057f8 <SCSI_ProcessCmd>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da06      	bge.n	80054f0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80054e2:	2101      	movs	r1, #1
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f8d1 	bl	800568c <MSC_BOT_SendCSW>
      break;
 80054ea:	e001      	b.n	80054f0 <MSC_BOT_DataOut+0x60>
    return;
 80054ec:	bf00      	nop
 80054ee:	e000      	b.n	80054f2 <MSC_BOT_DataOut+0x62>
      break;
 80054f0:	bf00      	nop
  }
}
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	32b0      	adds	r2, #176	; 0xb0
 800550a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d079      	beq.n	800560a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800552e:	4b3a      	ldr	r3, [pc, #232]	; (8005618 <MSC_BOT_CBW_Decode+0x120>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f003 fcab 	bl	8008e90 <USBD_LL_GetRxDataSize>
 800553a:	4603      	mov	r3, r0
 800553c:	2b1f      	cmp	r3, #31
 800553e:	d114      	bne.n	800556a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8005546:	4a35      	ldr	r2, [pc, #212]	; (800561c <MSC_BOT_CBW_Decode+0x124>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d10e      	bne.n	800556a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005552:	2b01      	cmp	r3, #1
 8005554:	d809      	bhi.n	800556a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800555c:	2b00      	cmp	r3, #0
 800555e:	d004      	beq.n	800556a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005566:	2b10      	cmp	r3, #16
 8005568:	d90e      	bls.n	8005588 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005570:	2320      	movs	r3, #32
 8005572:	2205      	movs	r2, #5
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fe2a 	bl	80061ce <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2202      	movs	r2, #2
 800557e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f8bd 	bl	8005700 <MSC_BOT_Abort>
 8005586:	e043      	b.n	8005610 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005594:	461a      	mov	r2, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f92e 	bl	80057f8 <SCSI_ProcessCmd>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	da0c      	bge.n	80055bc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	7a1b      	ldrb	r3, [r3, #8]
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d104      	bne.n	80055b4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80055aa:	2101      	movs	r1, #1
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f86d 	bl	800568c <MSC_BOT_SendCSW>
 80055b2:	e02d      	b.n	8005610 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f8a3 	bl	8005700 <MSC_BOT_Abort>
 80055ba:	e029      	b.n	8005610 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	7a1b      	ldrb	r3, [r3, #8]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d024      	beq.n	800560e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d020      	beq.n	800560e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d01c      	beq.n	800560e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f103 0110 	add.w	r1, r3, #16
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	461a      	mov	r2, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f819 	bl	8005620 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80055ee:	e00f      	b.n	8005610 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80055f8:	2100      	movs	r1, #0
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f846 	bl	800568c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005600:	e006      	b.n	8005610 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f87c 	bl	8005700 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005608:	e002      	b.n	8005610 <MSC_BOT_CBW_Decode+0x118>
    return;
 800560a:	bf00      	nop
 800560c:	e000      	b.n	8005610 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800560e:	bf00      	nop
    }
  }
}
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2000006f 	.word	0x2000006f
 800561c:	43425355 	.word	0x43425355

08005620 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	32b0      	adds	r2, #176	; 0xb0
 8005636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01e      	beq.n	8005680 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4293      	cmp	r3, r2
 800564c:	bf28      	it	cs
 800564e:	4613      	movcs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2204      	movs	r2, #4
 800566e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <MSC_BOT_SendData+0x68>)
 8005672:	7819      	ldrb	r1, [r3, #0]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f003 fb99 	bl	8008db0 <USBD_LL_Transmit>
 800567e:	e000      	b.n	8005682 <MSC_BOT_SendData+0x62>
    return;
 8005680:	bf00      	nop
}
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	2000006e 	.word	0x2000006e

0800568c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	32b0      	adds	r2, #176	; 0xb0
 80056a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01d      	beq.n	80056ea <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a10      	ldr	r2, [pc, #64]	; (80056f4 <MSC_BOT_SendCSW+0x68>)
 80056b2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <MSC_BOT_SendCSW+0x6c>)
 80056c6:	7819      	ldrb	r1, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80056ce:	230d      	movs	r3, #13
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f003 fb6d 	bl	8008db0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <MSC_BOT_SendCSW+0x70>)
 80056d8:	7819      	ldrb	r1, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80056e0:	231f      	movs	r3, #31
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f003 fb9c 	bl	8008e20 <USBD_LL_PrepareReceive>
 80056e8:	e000      	b.n	80056ec <MSC_BOT_SendCSW+0x60>
    return;
 80056ea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	53425355 	.word	0x53425355
 80056f8:	2000006e 	.word	0x2000006e
 80056fc:	2000006f 	.word	0x2000006f

08005700 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	32b0      	adds	r2, #176	; 0xb0
 8005712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005716:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d02a      	beq.n	8005774 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10e      	bne.n	8005746 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005736:	2b00      	cmp	r3, #0
 8005738:	d105      	bne.n	8005746 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <MSC_BOT_Abort+0x7c>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f003 fa67 	bl	8008c14 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005746:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <MSC_BOT_Abort+0x80>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f003 fa61 	bl	8008c14 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	7a5b      	ldrb	r3, [r3, #9]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d10d      	bne.n	8005776 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800575a:	4b09      	ldr	r3, [pc, #36]	; (8005780 <MSC_BOT_Abort+0x80>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f003 fa57 	bl	8008c14 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <MSC_BOT_Abort+0x7c>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f003 fa51 	bl	8008c14 <USBD_LL_StallEP>
 8005772:	e000      	b.n	8005776 <MSC_BOT_Abort+0x76>
    return;
 8005774:	bf00      	nop
  }
}
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	2000006f 	.word	0x2000006f
 8005780:	2000006e 	.word	0x2000006e

08005784 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	32b0      	adds	r2, #176	; 0xb0
 800579a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01d      	beq.n	80057e2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	7a5b      	ldrb	r3, [r3, #9]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d10c      	bne.n	80057c8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80057ae:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <MSC_BOT_CplClrFeature+0x6c>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f003 fa2d 	bl	8008c14 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80057ba:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <MSC_BOT_CplClrFeature+0x70>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f003 fa27 	bl	8008c14 <USBD_LL_StallEP>
 80057c6:	e00f      	b.n	80057e8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80057c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	da0a      	bge.n	80057e6 <MSC_BOT_CplClrFeature+0x62>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	7a5b      	ldrb	r3, [r3, #9]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d006      	beq.n	80057e6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80057d8:	2101      	movs	r1, #1
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff ff56 	bl	800568c <MSC_BOT_SendCSW>
 80057e0:	e002      	b.n	80057e8 <MSC_BOT_CplClrFeature+0x64>
    return;
 80057e2:	bf00      	nop
 80057e4:	e000      	b.n	80057e8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80057e6:	bf00      	nop
  }
}
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	2000006e 	.word	0x2000006e
 80057f4:	2000006f 	.word	0x2000006f

080057f8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	460b      	mov	r3, r1
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	32b0      	adds	r2, #176	; 0xb0
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d102      	bne.n	8005822 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800581c:	f04f 33ff 	mov.w	r3, #4294967295
 8005820:	e168      	b.n	8005af4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2baa      	cmp	r3, #170	; 0xaa
 8005828:	f000 8144 	beq.w	8005ab4 <SCSI_ProcessCmd+0x2bc>
 800582c:	2baa      	cmp	r3, #170	; 0xaa
 800582e:	f300 8153 	bgt.w	8005ad8 <SCSI_ProcessCmd+0x2e0>
 8005832:	2ba8      	cmp	r3, #168	; 0xa8
 8005834:	f000 812c 	beq.w	8005a90 <SCSI_ProcessCmd+0x298>
 8005838:	2ba8      	cmp	r3, #168	; 0xa8
 800583a:	f300 814d 	bgt.w	8005ad8 <SCSI_ProcessCmd+0x2e0>
 800583e:	2b5a      	cmp	r3, #90	; 0x5a
 8005840:	f300 80c0 	bgt.w	80059c4 <SCSI_ProcessCmd+0x1cc>
 8005844:	2b00      	cmp	r3, #0
 8005846:	f2c0 8147 	blt.w	8005ad8 <SCSI_ProcessCmd+0x2e0>
 800584a:	2b5a      	cmp	r3, #90	; 0x5a
 800584c:	f200 8144 	bhi.w	8005ad8 <SCSI_ProcessCmd+0x2e0>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <SCSI_ProcessCmd+0x60>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	080059cb 	.word	0x080059cb
 800585c:	08005ad9 	.word	0x08005ad9
 8005860:	08005ad9 	.word	0x08005ad9
 8005864:	080059dd 	.word	0x080059dd
 8005868:	08005ad9 	.word	0x08005ad9
 800586c:	08005ad9 	.word	0x08005ad9
 8005870:	08005ad9 	.word	0x08005ad9
 8005874:	08005ad9 	.word	0x08005ad9
 8005878:	08005ad9 	.word	0x08005ad9
 800587c:	08005ad9 	.word	0x08005ad9
 8005880:	08005ad9 	.word	0x08005ad9
 8005884:	08005ad9 	.word	0x08005ad9
 8005888:	08005ad9 	.word	0x08005ad9
 800588c:	08005ad9 	.word	0x08005ad9
 8005890:	08005ad9 	.word	0x08005ad9
 8005894:	08005ad9 	.word	0x08005ad9
 8005898:	08005ad9 	.word	0x08005ad9
 800589c:	08005ad9 	.word	0x08005ad9
 80058a0:	080059ef 	.word	0x080059ef
 80058a4:	08005ad9 	.word	0x08005ad9
 80058a8:	08005ad9 	.word	0x08005ad9
 80058ac:	08005ad9 	.word	0x08005ad9
 80058b0:	08005ad9 	.word	0x08005ad9
 80058b4:	08005ad9 	.word	0x08005ad9
 80058b8:	08005ad9 	.word	0x08005ad9
 80058bc:	08005ad9 	.word	0x08005ad9
 80058c0:	08005a25 	.word	0x08005a25
 80058c4:	08005a01 	.word	0x08005a01
 80058c8:	08005ad9 	.word	0x08005ad9
 80058cc:	08005ad9 	.word	0x08005ad9
 80058d0:	08005a13 	.word	0x08005a13
 80058d4:	08005ad9 	.word	0x08005ad9
 80058d8:	08005ad9 	.word	0x08005ad9
 80058dc:	08005ad9 	.word	0x08005ad9
 80058e0:	08005ad9 	.word	0x08005ad9
 80058e4:	08005a49 	.word	0x08005a49
 80058e8:	08005ad9 	.word	0x08005ad9
 80058ec:	08005a5b 	.word	0x08005a5b
 80058f0:	08005ad9 	.word	0x08005ad9
 80058f4:	08005ad9 	.word	0x08005ad9
 80058f8:	08005a7f 	.word	0x08005a7f
 80058fc:	08005ad9 	.word	0x08005ad9
 8005900:	08005aa3 	.word	0x08005aa3
 8005904:	08005ad9 	.word	0x08005ad9
 8005908:	08005ad9 	.word	0x08005ad9
 800590c:	08005ad9 	.word	0x08005ad9
 8005910:	08005ad9 	.word	0x08005ad9
 8005914:	08005ac7 	.word	0x08005ac7
 8005918:	08005ad9 	.word	0x08005ad9
 800591c:	08005ad9 	.word	0x08005ad9
 8005920:	08005ad9 	.word	0x08005ad9
 8005924:	08005ad9 	.word	0x08005ad9
 8005928:	08005ad9 	.word	0x08005ad9
 800592c:	08005ad9 	.word	0x08005ad9
 8005930:	08005ad9 	.word	0x08005ad9
 8005934:	08005ad9 	.word	0x08005ad9
 8005938:	08005ad9 	.word	0x08005ad9
 800593c:	08005ad9 	.word	0x08005ad9
 8005940:	08005ad9 	.word	0x08005ad9
 8005944:	08005ad9 	.word	0x08005ad9
 8005948:	08005ad9 	.word	0x08005ad9
 800594c:	08005ad9 	.word	0x08005ad9
 8005950:	08005ad9 	.word	0x08005ad9
 8005954:	08005ad9 	.word	0x08005ad9
 8005958:	08005ad9 	.word	0x08005ad9
 800595c:	08005ad9 	.word	0x08005ad9
 8005960:	08005ad9 	.word	0x08005ad9
 8005964:	08005ad9 	.word	0x08005ad9
 8005968:	08005ad9 	.word	0x08005ad9
 800596c:	08005ad9 	.word	0x08005ad9
 8005970:	08005ad9 	.word	0x08005ad9
 8005974:	08005ad9 	.word	0x08005ad9
 8005978:	08005ad9 	.word	0x08005ad9
 800597c:	08005ad9 	.word	0x08005ad9
 8005980:	08005ad9 	.word	0x08005ad9
 8005984:	08005ad9 	.word	0x08005ad9
 8005988:	08005ad9 	.word	0x08005ad9
 800598c:	08005ad9 	.word	0x08005ad9
 8005990:	08005ad9 	.word	0x08005ad9
 8005994:	08005ad9 	.word	0x08005ad9
 8005998:	08005ad9 	.word	0x08005ad9
 800599c:	08005ad9 	.word	0x08005ad9
 80059a0:	08005ad9 	.word	0x08005ad9
 80059a4:	08005ad9 	.word	0x08005ad9
 80059a8:	08005ad9 	.word	0x08005ad9
 80059ac:	08005ad9 	.word	0x08005ad9
 80059b0:	08005ad9 	.word	0x08005ad9
 80059b4:	08005ad9 	.word	0x08005ad9
 80059b8:	08005ad9 	.word	0x08005ad9
 80059bc:	08005ad9 	.word	0x08005ad9
 80059c0:	08005a37 	.word	0x08005a37
 80059c4:	2b9e      	cmp	r3, #158	; 0x9e
 80059c6:	d051      	beq.n	8005a6c <SCSI_ProcessCmd+0x274>
 80059c8:	e086      	b.n	8005ad8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4619      	mov	r1, r3
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f893 	bl	8005afc <SCSI_TestUnitReady>
 80059d6:	4603      	mov	r3, r0
 80059d8:	75fb      	strb	r3, [r7, #23]
      break;
 80059da:	e089      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	4619      	mov	r1, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fb70 	bl	80060c8 <SCSI_RequestSense>
 80059e8:	4603      	mov	r3, r0
 80059ea:	75fb      	strb	r3, [r7, #23]
      break;
 80059ec:	e080      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80059ee:	7afb      	ldrb	r3, [r7, #11]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4619      	mov	r1, r3
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f8db 	bl	8005bb0 <SCSI_Inquiry>
 80059fa:	4603      	mov	r3, r0
 80059fc:	75fb      	strb	r3, [r7, #23]
      break;
 80059fe:	e077      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005a00:	7afb      	ldrb	r3, [r7, #11]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4619      	mov	r1, r3
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fc2c 	bl	8006264 <SCSI_StartStopUnit>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a10:	e06e      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005a12:	7afb      	ldrb	r3, [r7, #11]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4619      	mov	r1, r3
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 fc78 	bl	800630e <SCSI_AllowPreventRemovable>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	75fb      	strb	r3, [r7, #23]
      break;
 8005a22:	e065      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005a24:	7afb      	ldrb	r3, [r7, #11]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 faec 	bl	8006008 <SCSI_ModeSense6>
 8005a30:	4603      	mov	r3, r0
 8005a32:	75fb      	strb	r3, [r7, #23]
      break;
 8005a34:	e05c      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8005a36:	7afb      	ldrb	r3, [r7, #11]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 fb13 	bl	8006068 <SCSI_ModeSense10>
 8005a42:	4603      	mov	r3, r0
 8005a44:	75fb      	strb	r3, [r7, #23]
      break;
 8005a46:	e053      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005a48:	7afb      	ldrb	r3, [r7, #11]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fa5e 	bl	8005f10 <SCSI_ReadFormatCapacity>
 8005a54:	4603      	mov	r3, r0
 8005a56:	75fb      	strb	r3, [r7, #23]
      break;
 8005a58:	e04a      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8005a5a:	7afb      	ldrb	r3, [r7, #11]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f923 	bl	8005cac <SCSI_ReadCapacity10>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6a:	e041      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8005a6c:	7afb      	ldrb	r3, [r7, #11]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	4619      	mov	r1, r3
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f998 	bl	8005da8 <SCSI_ReadCapacity16>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a7c:	e038      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	4619      	mov	r1, r3
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fc6f 	bl	8006368 <SCSI_Read10>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a8e:	e02f      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8005a90:	7afb      	ldrb	r3, [r7, #11]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4619      	mov	r1, r3
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fd10 	bl	80064bc <SCSI_Read12>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa0:	e026      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8005aa2:	7afb      	ldrb	r3, [r7, #11]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fdbb 	bl	8006624 <SCSI_Write10>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab2:	e01d      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8005ab4:	7afb      	ldrb	r3, [r7, #11]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fe88 	bl	80067d0 <SCSI_Write12>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac4:	e014      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	4619      	mov	r1, r3
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 ff65 	bl	800699c <SCSI_Verify10>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad6:	e00b      	b.n	8005af0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005ad8:	7af9      	ldrb	r1, [r7, #11]
 8005ada:	2320      	movs	r3, #32
 8005adc:	2205      	movs	r2, #5
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fb75 	bl	80061ce <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8005aea:	23ff      	movs	r3, #255	; 0xff
 8005aec:	75fb      	strb	r3, [r7, #23]
      break;
 8005aee:	bf00      	nop
  }

  return ret;
 8005af0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	460b      	mov	r3, r1
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	32b0      	adds	r2, #176	; 0xb0
 8005b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b18:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8005b20:	f04f 33ff 	mov.w	r3, #4294967295
 8005b24:	e03f      	b.n	8005ba6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005b36:	2320      	movs	r3, #32
 8005b38:	2205      	movs	r2, #5
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 fb47 	bl	80061ce <SCSI_SenseCode>

    return -1;
 8005b40:	f04f 33ff 	mov.w	r3, #4294967295
 8005b44:	e02f      	b.n	8005ba6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d10b      	bne.n	8005b68 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b50:	7af9      	ldrb	r1, [r7, #11]
 8005b52:	233a      	movs	r3, #58	; 0x3a
 8005b54:	2202      	movs	r2, #2
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fb39 	bl	80061ce <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2205      	movs	r2, #5
 8005b60:	721a      	strb	r2, [r3, #8]
    return -1;
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	e01e      	b.n	8005ba6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	33b0      	adds	r3, #176	; 0xb0
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	7afa      	ldrb	r2, [r7, #11]
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b86:	7af9      	ldrb	r1, [r7, #11]
 8005b88:	233a      	movs	r3, #58	; 0x3a
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fb1e 	bl	80061ce <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2205      	movs	r2, #5
 8005b96:	721a      	strb	r2, [r3, #8]

    return -1;
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9c:	e003      	b.n	8005ba6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	60da      	str	r2, [r3, #12]

  return 0;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	32b0      	adds	r2, #176	; 0xb0
 8005bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bcc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <SCSI_Inquiry+0x2a>
  {
    return -1;
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	e05f      	b.n	8005c9a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005bea:	2320      	movs	r3, #32
 8005bec:	2205      	movs	r2, #5
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 faed 	bl	80061ce <SCSI_SenseCode>
    return -1;
 8005bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf8:	e04f      	b.n	8005c9a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3302      	adds	r3, #2
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d105      	bne.n	8005c1e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005c12:	2206      	movs	r2, #6
 8005c14:	4923      	ldr	r1, [pc, #140]	; (8005ca4 <SCSI_Inquiry+0xf4>)
 8005c16:	69b8      	ldr	r0, [r7, #24]
 8005c18:	f001 f846 	bl	8006ca8 <SCSI_UpdateBotData>
 8005c1c:	e03c      	b.n	8005c98 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3302      	adds	r3, #2
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d105      	bne.n	8005c34 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005c28:	2208      	movs	r2, #8
 8005c2a:	491f      	ldr	r1, [pc, #124]	; (8005ca8 <SCSI_Inquiry+0xf8>)
 8005c2c:	69b8      	ldr	r0, [r7, #24]
 8005c2e:	f001 f83b 	bl	8006ca8 <SCSI_UpdateBotData>
 8005c32:	e031      	b.n	8005c98 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005c3a:	2324      	movs	r3, #36	; 0x24
 8005c3c:	2205      	movs	r2, #5
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fac5 	bl	80061ce <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295
 8005c48:	e027      	b.n	8005c9a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	33b0      	adds	r3, #176	; 0xb0
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005c5a:	69d9      	ldr	r1, [r3, #28]
 8005c5c:	7afa      	ldrb	r2, [r7, #11]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8005c66:	440b      	add	r3, r1
 8005c68:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3305      	adds	r3, #5
 8005c74:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8bfa      	ldrh	r2, [r7, #30]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d303      	bcc.n	8005c8c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005c8c:	8bfb      	ldrh	r3, [r7, #30]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6979      	ldr	r1, [r7, #20]
 8005c92:	69b8      	ldr	r0, [r7, #24]
 8005c94:	f001 f808 	bl	8006ca8 <SCSI_UpdateBotData>
  }

  return 0;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000070 	.word	0x20000070
 8005ca8:	20000078 	.word	0x20000078

08005cac <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	32b0      	adds	r2, #176	; 0xb0
 8005cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8005cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd4:	e064      	b.n	8005da0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	33b0      	adds	r3, #176	; 0xb0
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005cf4:	7af8      	ldrb	r0, [r7, #11]
 8005cf6:	4798      	blx	r3
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005cfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <SCSI_ReadCapacity10+0x62>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d108      	bne.n	8005d20 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005d0e:	7af9      	ldrb	r1, [r7, #11]
 8005d10:	233a      	movs	r3, #58	; 0x3a
 8005d12:	2202      	movs	r2, #2
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fa5a 	bl	80061ce <SCSI_SenseCode>
    return -1;
 8005d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1e:	e03f      	b.n	8005da0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d26:	3b01      	subs	r3, #1
 8005d28:	0e1b      	lsrs	r3, r3, #24
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d36:	3b01      	subs	r3, #1
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d46:	3b01      	subs	r3, #1
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d66:	161b      	asrs	r3, r3, #24
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d74:	141b      	asrs	r3, r3, #16
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d82:	0a1b      	lsrs	r3, r3, #8
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	60da      	str	r2, [r3, #12]

  return 0;
 8005d9e:	2300      	movs	r3, #0

}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	460b      	mov	r3, r1
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	32b0      	adds	r2, #176	; 0xb0
 8005dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8005dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd0:	e09a      	b.n	8005f08 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	33b0      	adds	r3, #176	; 0xb0
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005df0:	7af8      	ldrb	r0, [r7, #11]
 8005df2:	4798      	blx	r3
 8005df4:	4603      	mov	r3, r0
 8005df6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d104      	bne.n	8005e0a <SCSI_ReadCapacity16+0x62>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d108      	bne.n	8005e1c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e0a:	7af9      	ldrb	r1, [r7, #11]
 8005e0c:	233a      	movs	r3, #58	; 0x3a
 8005e0e:	2202      	movs	r2, #2
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f9dc 	bl	80061ce <SCSI_SenseCode>
    return -1;
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	e075      	b.n	8005f08 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	330a      	adds	r3, #10
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	330b      	adds	r3, #11
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e2c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	330c      	adds	r3, #12
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005e36:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	320d      	adds	r2, #13
 8005e3c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005e3e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	61fb      	str	r3, [r7, #28]
 8005e48:	e008      	b.n	8005e5c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	3310      	adds	r3, #16
 8005e52:	2200      	movs	r2, #0
 8005e54:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d3f1      	bcc.n	8005e4a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	0e1b      	lsrs	r3, r3, #24
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005eac:	161b      	asrs	r3, r3, #24
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005eba:	141b      	asrs	r3, r3, #16
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ec8:	0a1b      	lsrs	r3, r3, #8
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	330a      	adds	r3, #10
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	330b      	adds	r3, #11
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005eee:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	330c      	adds	r3, #12
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005ef8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	320d      	adds	r2, #13
 8005efe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005f00:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	60da      	str	r2, [r3, #12]

  return 0;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	32b0      	adds	r2, #176	; 0xb0
 8005f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8005f34:	f04f 33ff 	mov.w	r3, #4294967295
 8005f38:	e061      	b.n	8005ffe <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	33b0      	adds	r3, #176	; 0xb0
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f107 0214 	add.w	r2, r7, #20
 8005f50:	f107 0110 	add.w	r1, r7, #16
 8005f54:	7af8      	ldrb	r0, [r7, #11]
 8005f56:	4798      	blx	r3
 8005f58:	4603      	mov	r3, r0
 8005f5a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <SCSI_ReadFormatCapacity+0x5e>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d108      	bne.n	8005f80 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005f6e:	7af9      	ldrb	r1, [r7, #11]
 8005f70:	233a      	movs	r3, #58	; 0x3a
 8005f72:	2202      	movs	r2, #2
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f92a 	bl	80061ce <SCSI_SenseCode>
    return -1;
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7e:	e03e      	b.n	8005ffe <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8005f80:	2300      	movs	r3, #0
 8005f82:	83fb      	strh	r3, [r7, #30]
 8005f84:	e007      	b.n	8005f96 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8005f86:	8bfb      	ldrh	r3, [r7, #30]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005f90:	8bfb      	ldrh	r3, [r7, #30]
 8005f92:	3301      	adds	r3, #1
 8005f94:	83fb      	strh	r3, [r7, #30]
 8005f96:	8bfb      	ldrh	r3, [r7, #30]
 8005f98:	2b0b      	cmp	r3, #11
 8005f9a:	d9f4      	bls.n	8005f86 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2208      	movs	r2, #8
 8005fa0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	0e1b      	lsrs	r3, r3, #24
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	0c1b      	lsrs	r3, r3, #16
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005fd8:	8abb      	ldrh	r3, [r7, #20]
 8005fda:	141b      	asrs	r3, r3, #16
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005fe2:	8abb      	ldrh	r3, [r7, #20]
 8005fe4:	0a1b      	lsrs	r3, r3, #8
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005fee:	8abb      	ldrh	r3, [r7, #20]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	220c      	movs	r2, #12
 8005ffa:	60da      	str	r2, [r3, #12]

  return 0;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	32b0      	adds	r2, #176	; 0xb0
 8006020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006024:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8006026:	2317      	movs	r3, #23
 8006028:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8006030:	f04f 33ff 	mov.w	r3, #4294967295
 8006034:	e011      	b.n	800605a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3304      	adds	r3, #4
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	8afa      	ldrh	r2, [r7, #22]
 8006040:	429a      	cmp	r2, r3
 8006042:	d303      	bcc.n	800604c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800604c:	8afb      	ldrh	r3, [r7, #22]
 800604e:	461a      	mov	r2, r3
 8006050:	4904      	ldr	r1, [pc, #16]	; (8006064 <SCSI_ModeSense6+0x5c>)
 8006052:	6938      	ldr	r0, [r7, #16]
 8006054:	f000 fe28 	bl	8006ca8 <SCSI_UpdateBotData>

  return 0;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000080 	.word	0x20000080

08006068 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	460b      	mov	r3, r1
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	32b0      	adds	r2, #176	; 0xb0
 8006080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006084:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8006086:	231b      	movs	r3, #27
 8006088:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8006090:	f04f 33ff 	mov.w	r3, #4294967295
 8006094:	e011      	b.n	80060ba <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3308      	adds	r3, #8
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	8afa      	ldrh	r2, [r7, #22]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d303      	bcc.n	80060ac <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3308      	adds	r3, #8
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80060ac:	8afb      	ldrh	r3, [r7, #22]
 80060ae:	461a      	mov	r2, r3
 80060b0:	4904      	ldr	r1, [pc, #16]	; (80060c4 <SCSI_ModeSense10+0x5c>)
 80060b2:	6938      	ldr	r0, [r7, #16]
 80060b4:	f000 fdf8 	bl	8006ca8 <SCSI_UpdateBotData>

  return 0;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000098 	.word	0x20000098

080060c8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	460b      	mov	r3, r1
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	32b0      	adds	r2, #176	; 0xb0
 80060e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <SCSI_RequestSense+0x2a>
  {
    return -1;
 80060ec:	f04f 33ff 	mov.w	r3, #4294967295
 80060f0:	e069      	b.n	80061c6 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006102:	2320      	movs	r3, #32
 8006104:	2205      	movs	r2, #5
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f861 	bl	80061ce <SCSI_SenseCode>
    return -1;
 800610c:	f04f 33ff 	mov.w	r3, #4294967295
 8006110:	e059      	b.n	80061c6 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]
 8006116:	e007      	b.n	8006128 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8006118:	7dfb      	ldrb	r3, [r7, #23]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4413      	add	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	3301      	adds	r3, #1
 8006126:	75fb      	strb	r3, [r7, #23]
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b11      	cmp	r3, #17
 800612c:	d9f4      	bls.n	8006118 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2270      	movs	r2, #112	; 0x70
 8006132:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	220c      	movs	r2, #12
 8006138:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006146:	429a      	cmp	r2, r3
 8006148:	d02e      	beq.n	80061a8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006150:	461a      	mov	r2, r3
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3248      	adds	r2, #72	; 0x48
 8006156:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	3348      	adds	r3, #72	; 0x48
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	4413      	add	r3, r2
 800616c:	791a      	ldrb	r2, [r3, #4]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	3348      	adds	r3, #72	; 0x48
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4413      	add	r3, r2
 8006180:	795a      	ldrb	r2, [r3, #5]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800618c:	3301      	adds	r3, #1
 800618e:	b2da      	uxtb	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800619c:	2b04      	cmp	r3, #4
 800619e:	d103      	bne.n	80061a8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2212      	movs	r2, #18
 80061ac:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b12      	cmp	r3, #18
 80061b6:	d805      	bhi.n	80061c4 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	461a      	mov	r2, r3
 80061dc:	4603      	mov	r3, r0
 80061de:	70fb      	strb	r3, [r7, #3]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70bb      	strb	r3, [r7, #2]
 80061e4:	4613      	mov	r3, r2
 80061e6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	32b0      	adds	r2, #176	; 0xb0
 80061f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d02c      	beq.n	8006258 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006204:	461a      	mov	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3248      	adds	r2, #72	; 0x48
 800620a:	78b9      	ldrb	r1, [r7, #2]
 800620c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	3348      	adds	r3, #72	; 0x48
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	787a      	ldrb	r2, [r7, #1]
 8006220:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	3348      	adds	r3, #72	; 0x48
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4413      	add	r3, r2
 8006230:	2200      	movs	r2, #0
 8006232:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800623a:	3301      	adds	r3, #1
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800624a:	2b04      	cmp	r3, #4
 800624c:	d105      	bne.n	800625a <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8006256:	e000      	b.n	800625a <SCSI_SenseCode+0x8c>
    return;
 8006258:	bf00      	nop
  }
}
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	460b      	mov	r3, r1
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	32b0      	adds	r2, #176	; 0xb0
 800627c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006280:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d102      	bne.n	800628e <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8006288:	f04f 33ff 	mov.w	r3, #4294967295
 800628c:	e03b      	b.n	8006306 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006294:	2b01      	cmp	r3, #1
 8006296:	d10f      	bne.n	80062b8 <SCSI_StartStopUnit+0x54>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d108      	bne.n	80062b8 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80062a6:	7af9      	ldrb	r1, [r7, #11]
 80062a8:	2324      	movs	r3, #36	; 0x24
 80062aa:	2205      	movs	r2, #5
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff ff8e 	bl	80061ce <SCSI_SenseCode>

    return -1;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	e026      	b.n	8006306 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d104      	bne.n	80062d0 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80062ce:	e016      	b.n	80062fe <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d104      	bne.n	80062e8 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80062e6:	e00a      	b.n	80062fe <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d103      	bne.n	80062fe <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2200      	movs	r2, #0
 8006302:	60da      	str	r2, [r3, #12]

  return 0;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800630e:	b480      	push	{r7}
 8006310:	b087      	sub	sp, #28
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	460b      	mov	r3, r1
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	32b0      	adds	r2, #176	; 0xb0
 8006326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8006332:	f04f 33ff 	mov.w	r3, #4294967295
 8006336:	e011      	b.n	800635c <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d104      	bne.n	800634c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800634a:	e003      	b.n	8006354 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2200      	movs	r2, #0
 8006358:	60da      	str	r2, [r3, #12]

  return 0;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	460b      	mov	r3, r1
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	32b0      	adds	r2, #176	; 0xb0
 8006380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006384:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <SCSI_Read10+0x2a>
  {
    return -1;
 800638c:	f04f 33ff 	mov.w	r3, #4294967295
 8006390:	e090      	b.n	80064b4 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	7a1b      	ldrb	r3, [r3, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f040 8082 	bne.w	80064a0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80063a2:	b25b      	sxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	db0a      	blt.n	80063be <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80063ae:	2320      	movs	r3, #32
 80063b0:	2205      	movs	r2, #5
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f7ff ff0b 	bl	80061ce <SCSI_SenseCode>
      return -1;
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	e07a      	b.n	80064b4 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d108      	bne.n	80063da <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80063c8:	7af9      	ldrb	r1, [r7, #11]
 80063ca:	233a      	movs	r3, #58	; 0x3a
 80063cc:	2202      	movs	r2, #2
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff fefd 	bl	80061ce <SCSI_SenseCode>

      return -1;
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295
 80063d8:	e06c      	b.n	80064b4 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	33b0      	adds	r3, #176	; 0xb0
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	7afa      	ldrb	r2, [r7, #11]
 80063ee:	4610      	mov	r0, r2
 80063f0:	4798      	blx	r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80063f8:	7af9      	ldrb	r1, [r7, #11]
 80063fa:	233a      	movs	r3, #58	; 0x3a
 80063fc:	2202      	movs	r2, #2
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f7ff fee5 	bl	80061ce <SCSI_SenseCode>
      return -1;
 8006404:	f04f 33ff 	mov.w	r3, #4294967295
 8006408:	e054      	b.n	80064b4 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3302      	adds	r3, #2
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3303      	adds	r3, #3
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800641a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006424:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	3205      	adds	r2, #5
 800642a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800642c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3307      	adds	r3, #7
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	3208      	adds	r2, #8
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	431a      	orrs	r2, r3
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006456:	7af9      	ldrb	r1, [r7, #11]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 fadc 	bl	8006a16 <SCSI_CheckAddressRange>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	da02      	bge.n	800646a <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	e024      	b.n	80064b4 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006476:	6979      	ldr	r1, [r7, #20]
 8006478:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	429a      	cmp	r2, r3
 8006482:	d00a      	beq.n	800649a <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800648a:	2320      	movs	r3, #32
 800648c:	2205      	movs	r2, #5
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff fe9d 	bl	80061ce <SCSI_SenseCode>
      return -1;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
 8006498:	e00c      	b.n	80064b4 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2202      	movs	r2, #2
 800649e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	4619      	mov	r1, r3
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 fadf 	bl	8006a70 <SCSI_ProcessRead>
 80064b2:	4603      	mov	r3, r0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	460b      	mov	r3, r1
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	32b0      	adds	r2, #176	; 0xb0
 80064d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <SCSI_Read12+0x2a>
  {
    return -1;
 80064e0:	f04f 33ff 	mov.w	r3, #4294967295
 80064e4:	e09a      	b.n	800661c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	7a1b      	ldrb	r3, [r3, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 808c 	bne.w	8006608 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80064f6:	b25b      	sxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	db0a      	blt.n	8006512 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006502:	2320      	movs	r3, #32
 8006504:	2205      	movs	r2, #5
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f7ff fe61 	bl	80061ce <SCSI_SenseCode>
      return -1;
 800650c:	f04f 33ff 	mov.w	r3, #4294967295
 8006510:	e084      	b.n	800661c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006518:	2b02      	cmp	r3, #2
 800651a:	d108      	bne.n	800652e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800651c:	7af9      	ldrb	r1, [r7, #11]
 800651e:	233a      	movs	r3, #58	; 0x3a
 8006520:	2202      	movs	r2, #2
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff fe53 	bl	80061ce <SCSI_SenseCode>
      return -1;
 8006528:	f04f 33ff 	mov.w	r3, #4294967295
 800652c:	e076      	b.n	800661c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	33b0      	adds	r3, #176	; 0xb0
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	7afa      	ldrb	r2, [r7, #11]
 8006542:	4610      	mov	r0, r2
 8006544:	4798      	blx	r3
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800654c:	7af9      	ldrb	r1, [r7, #11]
 800654e:	233a      	movs	r3, #58	; 0x3a
 8006550:	2202      	movs	r2, #2
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff fe3b 	bl	80061ce <SCSI_SenseCode>
      return -1;
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	e05e      	b.n	800661c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3302      	adds	r3, #2
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3303      	adds	r3, #3
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800656e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3304      	adds	r3, #4
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006578:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	3205      	adds	r2, #5
 800657e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006580:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3306      	adds	r3, #6
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3307      	adds	r3, #7
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006598:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3308      	adds	r3, #8
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80065a2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	3209      	adds	r2, #9
 80065a8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80065aa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80065be:	7af9      	ldrb	r1, [r7, #11]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fa28 	bl	8006a16 <SCSI_CheckAddressRange>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	da02      	bge.n	80065d2 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	e024      	b.n	800661c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80065de:	6979      	ldr	r1, [r7, #20]
 80065e0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80065e4:	fb01 f303 	mul.w	r3, r1, r3
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d00a      	beq.n	8006602 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80065f2:	2320      	movs	r3, #32
 80065f4:	2205      	movs	r2, #5
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff fde9 	bl	80061ce <SCSI_SenseCode>
      return -1;
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006600:	e00c      	b.n	800661c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2202      	movs	r2, #2
 8006606:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800660e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006610:	7afb      	ldrb	r3, [r7, #11]
 8006612:	4619      	mov	r1, r3
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fa2b 	bl	8006a70 <SCSI_ProcessRead>
 800661a:	4603      	mov	r3, r0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	460b      	mov	r3, r1
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	32b0      	adds	r2, #176	; 0xb0
 800663c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006640:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <SCSI_Write10+0x2a>
  {
    return -1;
 8006648:	f04f 33ff 	mov.w	r3, #4294967295
 800664c:	e0ba      	b.n	80067c4 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	7a1b      	ldrb	r3, [r3, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	f040 80b0 	bne.w	80067b8 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006668:	2320      	movs	r3, #32
 800666a:	2205      	movs	r2, #5
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7ff fdae 	bl	80061ce <SCSI_SenseCode>
      return -1;
 8006672:	f04f 33ff 	mov.w	r3, #4294967295
 8006676:	e0a5      	b.n	80067c4 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800667e:	b25b      	sxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	da0a      	bge.n	800669a <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800668a:	2320      	movs	r3, #32
 800668c:	2205      	movs	r2, #5
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff fd9d 	bl	80061ce <SCSI_SenseCode>
      return -1;
 8006694:	f04f 33ff 	mov.w	r3, #4294967295
 8006698:	e094      	b.n	80067c4 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	33b0      	adds	r3, #176	; 0xb0
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	7afa      	ldrb	r2, [r7, #11]
 80066ae:	4610      	mov	r0, r2
 80066b0:	4798      	blx	r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d008      	beq.n	80066ca <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80066b8:	7af9      	ldrb	r1, [r7, #11]
 80066ba:	233a      	movs	r3, #58	; 0x3a
 80066bc:	2202      	movs	r2, #2
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f7ff fd85 	bl	80061ce <SCSI_SenseCode>
      return -1;
 80066c4:	f04f 33ff 	mov.w	r3, #4294967295
 80066c8:	e07c      	b.n	80067c4 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	33b0      	adds	r3, #176	; 0xb0
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	7afa      	ldrb	r2, [r7, #11]
 80066de:	4610      	mov	r0, r2
 80066e0:	4798      	blx	r3
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80066e8:	7af9      	ldrb	r1, [r7, #11]
 80066ea:	2327      	movs	r3, #39	; 0x27
 80066ec:	2202      	movs	r2, #2
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff fd6d 	bl	80061ce <SCSI_SenseCode>
      return -1;
 80066f4:	f04f 33ff 	mov.w	r3, #4294967295
 80066f8:	e064      	b.n	80067c4 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3302      	adds	r3, #2
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3303      	adds	r3, #3
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800670a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006714:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	3205      	adds	r2, #5
 800671a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800671c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3307      	adds	r3, #7
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	3208      	adds	r2, #8
 8006730:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006732:	431a      	orrs	r2, r3
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006746:	7af9      	ldrb	r1, [r7, #11]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f964 	bl	8006a16 <SCSI_CheckAddressRange>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	da02      	bge.n	800675a <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006754:	f04f 33ff 	mov.w	r3, #4294967295
 8006758:	e034      	b.n	80067c4 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	429a      	cmp	r2, r3
 8006776:	d00a      	beq.n	800678e <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800677e:	2320      	movs	r3, #32
 8006780:	2205      	movs	r2, #5
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff fd23 	bl	80061ce <SCSI_SenseCode>
      return -1;
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	e01a      	b.n	80067c4 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006794:	bf28      	it	cs
 8006796:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800679a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2201      	movs	r2, #1
 80067a0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80067a2:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <SCSI_Write10+0x1a8>)
 80067a4:	7819      	ldrb	r1, [r3, #0]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f103 0210 	add.w	r2, r3, #16
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f002 fb36 	bl	8008e20 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e005      	b.n	80067c4 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80067b8:	7afb      	ldrb	r3, [r7, #11]
 80067ba:	4619      	mov	r1, r3
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f9dd 	bl	8006b7c <SCSI_ProcessWrite>
 80067c2:	4603      	mov	r3, r0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	2000006f 	.word	0x2000006f

080067d0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	460b      	mov	r3, r1
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	32b0      	adds	r2, #176	; 0xb0
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d102      	bne.n	80067fa <SCSI_Write12+0x2a>
  {
    return -1;
 80067f4:	f04f 33ff 	mov.w	r3, #4294967295
 80067f8:	e0ca      	b.n	8006990 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	7a1b      	ldrb	r3, [r3, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f040 80c0 	bne.w	8006984 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006814:	2320      	movs	r3, #32
 8006816:	2205      	movs	r2, #5
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f7ff fcd8 	bl	80061ce <SCSI_SenseCode>
      return -1;
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
 8006822:	e0b5      	b.n	8006990 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800682a:	b25b      	sxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	da0a      	bge.n	8006846 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006836:	2320      	movs	r3, #32
 8006838:	2205      	movs	r2, #5
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff fcc7 	bl	80061ce <SCSI_SenseCode>
      return -1;
 8006840:	f04f 33ff 	mov.w	r3, #4294967295
 8006844:	e0a4      	b.n	8006990 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	33b0      	adds	r3, #176	; 0xb0
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	7afa      	ldrb	r2, [r7, #11]
 800685a:	4610      	mov	r0, r2
 800685c:	4798      	blx	r3
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006864:	7af9      	ldrb	r1, [r7, #11]
 8006866:	233a      	movs	r3, #58	; 0x3a
 8006868:	2202      	movs	r2, #2
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff fcaf 	bl	80061ce <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2205      	movs	r2, #5
 8006874:	721a      	strb	r2, [r3, #8]
      return -1;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
 800687a:	e089      	b.n	8006990 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	33b0      	adds	r3, #176	; 0xb0
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	7afa      	ldrb	r2, [r7, #11]
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00b      	beq.n	80068b2 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800689a:	7af9      	ldrb	r1, [r7, #11]
 800689c:	2327      	movs	r3, #39	; 0x27
 800689e:	2202      	movs	r2, #2
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff fc94 	bl	80061ce <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2205      	movs	r2, #5
 80068aa:	721a      	strb	r2, [r3, #8]
      return -1;
 80068ac:	f04f 33ff 	mov.w	r3, #4294967295
 80068b0:	e06e      	b.n	8006990 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3302      	adds	r3, #2
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3303      	adds	r3, #3
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80068c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3304      	adds	r3, #4
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80068cc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	3205      	adds	r2, #5
 80068d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80068d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3306      	adds	r3, #6
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3307      	adds	r3, #7
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80068ec:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3308      	adds	r3, #8
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80068f6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	3209      	adds	r2, #9
 80068fc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80068fe:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006912:	7af9      	ldrb	r1, [r7, #11]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f87e 	bl	8006a16 <SCSI_CheckAddressRange>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	da02      	bge.n	8006926 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006920:	f04f 33ff 	mov.w	r3, #4294967295
 8006924:	e034      	b.n	8006990 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006932:	fb02 f303 	mul.w	r3, r2, r3
 8006936:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	429a      	cmp	r2, r3
 8006942:	d00a      	beq.n	800695a <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800694a:	2320      	movs	r3, #32
 800694c:	2205      	movs	r2, #5
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff fc3d 	bl	80061ce <SCSI_SenseCode>
      return -1;
 8006954:	f04f 33ff 	mov.w	r3, #4294967295
 8006958:	e01a      	b.n	8006990 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006960:	bf28      	it	cs
 8006962:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006966:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2201      	movs	r2, #1
 800696c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800696e:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <SCSI_Write12+0x1c8>)
 8006970:	7819      	ldrb	r1, [r3, #0]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f103 0210 	add.w	r2, r3, #16
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f002 fa50 	bl	8008e20 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006980:	2300      	movs	r3, #0
 8006982:	e005      	b.n	8006990 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	4619      	mov	r1, r3
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f8f7 	bl	8006b7c <SCSI_ProcessWrite>
 800698e:	4603      	mov	r3, r0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	2000006f 	.word	0x2000006f

0800699c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	460b      	mov	r3, r1
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	32b0      	adds	r2, #176	; 0xb0
 80069b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <SCSI_Verify10+0x2a>
  {
    return -1;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	e023      	b.n	8006a0e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3301      	adds	r3, #1
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80069d4:	7af9      	ldrb	r1, [r7, #11]
 80069d6:	2324      	movs	r3, #36	; 0x24
 80069d8:	2205      	movs	r2, #5
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fbf7 	bl	80061ce <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80069e0:	f04f 33ff 	mov.w	r3, #4294967295
 80069e4:	e013      	b.n	8006a0e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80069f2:	7af9      	ldrb	r1, [r7, #11]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f80e 	bl	8006a16 <SCSI_CheckAddressRange>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da02      	bge.n	8006a06 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295
 8006a04:	e003      	b.n	8006a0e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	60da      	str	r2, [r3, #12]

  return 0;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	460b      	mov	r3, r1
 8006a24:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	32b0      	adds	r2, #176	; 0xb0
 8006a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8006a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a40:	e011      	b.n	8006a66 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	441a      	add	r2, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d908      	bls.n	8006a64 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006a52:	7af9      	ldrb	r1, [r7, #11]
 8006a54:	2321      	movs	r3, #33	; 0x21
 8006a56:	2205      	movs	r2, #5
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff fbb8 	bl	80061ce <SCSI_SenseCode>
    return -1;
 8006a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a62:	e000      	b.n	8006a66 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	32b0      	adds	r2, #176	; 0xb0
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8006a92:	f04f 33ff 	mov.w	r3, #4294967295
 8006a96:	e06a      	b.n	8006b6e <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab0:	bf28      	it	cs
 8006ab2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006ab6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	33b0      	adds	r3, #176	; 0xb0
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	691c      	ldr	r4, [r3, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f103 0110 	add.w	r1, r3, #16
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006adc:	4618      	mov	r0, r3
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	78f8      	ldrb	r0, [r7, #3]
 8006ae8:	47a0      	blx	r4
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da08      	bge.n	8006b02 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006af0:	78f9      	ldrb	r1, [r7, #3]
 8006af2:	2311      	movs	r3, #17
 8006af4:	2204      	movs	r2, #4
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff fb69 	bl	80061ce <SCSI_SenseCode>
    return -1;
 8006afc:	f04f 33ff 	mov.w	r3, #4294967295
 8006b00:	e035      	b.n	8006b6e <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8006b02:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <SCSI_ProcessRead+0x108>)
 8006b04:	7819      	ldrb	r1, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f103 0210 	add.w	r2, r3, #16
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f002 f94e 	bl	8008db0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006b20:	4619      	mov	r1, r3
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b28:	441a      	add	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	1ad2      	subs	r2, r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd90      	pop	{r4, r7, pc}
 8006b76:	bf00      	nop
 8006b78:	2000006e 	.word	0x2000006e

08006b7c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006b7c:	b590      	push	{r4, r7, lr}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	32b0      	adds	r2, #176	; 0xb0
 8006b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b96:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8006b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba2:	e07a      	b.n	8006c9a <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006bb0:	fb02 f303 	mul.w	r3, r2, r3
 8006bb4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bbc:	bf28      	it	cs
 8006bbe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006bc2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	33b0      	adds	r3, #176	; 0xb0
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	695c      	ldr	r4, [r3, #20]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f103 0110 	add.w	r1, r3, #16
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006be8:	4618      	mov	r0, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	78f8      	ldrb	r0, [r7, #3]
 8006bf4:	47a0      	blx	r4
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da08      	bge.n	8006c0e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006bfc:	78f9      	ldrb	r1, [r7, #3]
 8006bfe:	2303      	movs	r3, #3
 8006c00:	2204      	movs	r2, #4
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fae3 	bl	80061ce <SCSI_SenseCode>
    return -1;
 8006c08:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0c:	e045      	b.n	8006c9a <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c22:	441a      	add	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c36:	4619      	mov	r1, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c3e:	1ad2      	subs	r2, r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006c60:	2100      	movs	r1, #0
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fe fd12 	bl	800568c <MSC_BOT_SendCSW>
 8006c68:	e016      	b.n	8006c98 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c7e:	bf28      	it	cs
 8006c80:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006c84:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006c86:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <SCSI_ProcessWrite+0x128>)
 8006c88:	7819      	ldrb	r1, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f103 0210 	add.w	r2, r3, #16
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f002 f8c4 	bl	8008e20 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd90      	pop	{r4, r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	2000006f 	.word	0x2000006f

08006ca8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d102      	bne.n	8006cc6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8006cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc4:	e013      	b.n	8006cee <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8006cc6:	8afa      	ldrh	r2, [r7, #22]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8006ccc:	e00b      	b.n	8006ce6 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8006cce:	8afb      	ldrh	r3, [r7, #22]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8006cd4:	8afb      	ldrh	r3, [r7, #22]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	441a      	add	r2, r3
 8006cda:	8afb      	ldrh	r3, [r7, #22]
 8006cdc:	7811      	ldrb	r1, [r2, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	460a      	mov	r2, r1
 8006ce4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8006ce6:	8afb      	ldrh	r3, [r7, #22]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f0      	bne.n	8006cce <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b086      	sub	sp, #24
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	4613      	mov	r3, r2
 8006d06:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e01f      	b.n	8006d52 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	79fa      	ldrb	r2, [r7, #7]
 8006d44:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f001 fe3c 	bl	80089c4 <USBD_LL_Init>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e025      	b.n	8006dbe <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	32ae      	adds	r2, #174	; 0xae
 8006d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00f      	beq.n	8006dae <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	32ae      	adds	r2, #174	; 0xae
 8006d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	f107 020e 	add.w	r2, r7, #14
 8006da2:	4610      	mov	r0, r2
 8006da4:	4798      	blx	r3
 8006da6:	4602      	mov	r2, r0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fe44 	bl	8008a5c <USBD_LL_Start>
 8006dd4:	4603      	mov	r3, r0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	78fa      	ldrb	r2, [r7, #3]
 8006e46:	4611      	mov	r1, r2
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4798      	blx	r3
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e52:	2303      	movs	r3, #3
 8006e54:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f939 	bl	80080ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e86:	461a      	mov	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e94:	f003 031f 	and.w	r3, r3, #31
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d01a      	beq.n	8006ed2 <USBD_LL_SetupStage+0x72>
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d822      	bhi.n	8006ee6 <USBD_LL_SetupStage+0x86>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <USBD_LL_SetupStage+0x4a>
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d00a      	beq.n	8006ebe <USBD_LL_SetupStage+0x5e>
 8006ea8:	e01d      	b.n	8006ee6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fb66 	bl	8007584 <USBD_StdDevReq>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]
      break;
 8006ebc:	e020      	b.n	8006f00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fbce 	bl	8007668 <USBD_StdItfReq>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed0:	e016      	b.n	8006f00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fc30 	bl	8007740 <USBD_StdEPReq>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee4:	e00c      	b.n	8006f00 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fe8d 	bl	8008c14 <USBD_LL_StallEP>
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]
      break;
 8006efe:	bf00      	nop
  }

  return ret;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b086      	sub	sp, #24
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	460b      	mov	r3, r1
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d16e      	bne.n	8007000 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	f040 8098 	bne.w	8007066 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d913      	bls.n	8006f6a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	1ad2      	subs	r2, r2, r3
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	bf28      	it	cs
 8006f5c:	4613      	movcs	r3, r2
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f001 f998 	bl	8008298 <USBD_CtlContinueRx>
 8006f68:	e07d      	b.n	8007066 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f70:	f003 031f 	and.w	r3, r3, #31
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d014      	beq.n	8006fa2 <USBD_LL_DataOutStage+0x98>
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d81d      	bhi.n	8006fb8 <USBD_LL_DataOutStage+0xae>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <USBD_LL_DataOutStage+0x7c>
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d003      	beq.n	8006f8c <USBD_LL_DataOutStage+0x82>
 8006f84:	e018      	b.n	8006fb8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75bb      	strb	r3, [r7, #22]
            break;
 8006f8a:	e018      	b.n	8006fbe <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	4619      	mov	r1, r3
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 fa64 	bl	8007464 <USBD_CoreFindIF>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	75bb      	strb	r3, [r7, #22]
            break;
 8006fa0:	e00d      	b.n	8006fbe <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	4619      	mov	r1, r3
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 fa66 	bl	800747e <USBD_CoreFindEP>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75bb      	strb	r3, [r7, #22]
            break;
 8006fb6:	e002      	b.n	8006fbe <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75bb      	strb	r3, [r7, #22]
            break;
 8006fbc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006fbe:	7dbb      	ldrb	r3, [r7, #22]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d119      	bne.n	8006ff8 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d113      	bne.n	8006ff8 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006fd0:	7dba      	ldrb	r2, [r7, #22]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	32ae      	adds	r2, #174	; 0xae
 8006fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006fe0:	7dba      	ldrb	r2, [r7, #22]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006fe8:	7dba      	ldrb	r2, [r7, #22]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	32ae      	adds	r2, #174	; 0xae
 8006fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f001 f95e 	bl	80082ba <USBD_CtlSendStatus>
 8006ffe:	e032      	b.n	8007066 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007006:	b2db      	uxtb	r3, r3
 8007008:	4619      	mov	r1, r3
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fa37 	bl	800747e <USBD_CoreFindEP>
 8007010:	4603      	mov	r3, r0
 8007012:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007014:	7dbb      	ldrb	r3, [r7, #22]
 8007016:	2bff      	cmp	r3, #255	; 0xff
 8007018:	d025      	beq.n	8007066 <USBD_LL_DataOutStage+0x15c>
 800701a:	7dbb      	ldrb	r3, [r7, #22]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d122      	bne.n	8007066 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b03      	cmp	r3, #3
 800702a:	d117      	bne.n	800705c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800702c:	7dba      	ldrb	r2, [r7, #22]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	32ae      	adds	r2, #174	; 0xae
 8007032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00f      	beq.n	800705c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800703c:	7dba      	ldrb	r2, [r7, #22]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007044:	7dba      	ldrb	r2, [r7, #22]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	32ae      	adds	r2, #174	; 0xae
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	7afa      	ldrb	r2, [r7, #11]
 8007052:	4611      	mov	r1, r2
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	4798      	blx	r3
 8007058:	4603      	mov	r3, r0
 800705a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	e000      	b.n	8007068 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	460b      	mov	r3, r1
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d16f      	bne.n	8007164 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3314      	adds	r3, #20
 8007088:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007090:	2b02      	cmp	r3, #2
 8007092:	d15a      	bne.n	800714a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	429a      	cmp	r2, r3
 800709e:	d914      	bls.n	80070ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f001 f8dd 	bl	8008276 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070bc:	2300      	movs	r3, #0
 80070be:	2200      	movs	r2, #0
 80070c0:	2100      	movs	r1, #0
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f001 feac 	bl	8008e20 <USBD_LL_PrepareReceive>
 80070c8:	e03f      	b.n	800714a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d11c      	bne.n	8007110 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070de:	429a      	cmp	r2, r3
 80070e0:	d316      	bcc.n	8007110 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d20f      	bcs.n	8007110 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070f0:	2200      	movs	r2, #0
 80070f2:	2100      	movs	r1, #0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f001 f8be 	bl	8008276 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007102:	2300      	movs	r3, #0
 8007104:	2200      	movs	r2, #0
 8007106:	2100      	movs	r1, #0
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f001 fe89 	bl	8008e20 <USBD_LL_PrepareReceive>
 800710e:	e01c      	b.n	800714a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b03      	cmp	r3, #3
 800711a:	d10f      	bne.n	800713c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d009      	beq.n	800713c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800713c:	2180      	movs	r1, #128	; 0x80
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f001 fd68 	bl	8008c14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f001 f8cb 	bl	80082e0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d03a      	beq.n	80071ca <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff fe42 	bl	8006dde <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007162:	e032      	b.n	80071ca <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800716a:	b2db      	uxtb	r3, r3
 800716c:	4619      	mov	r1, r3
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f985 	bl	800747e <USBD_CoreFindEP>
 8007174:	4603      	mov	r3, r0
 8007176:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	2bff      	cmp	r3, #255	; 0xff
 800717c:	d025      	beq.n	80071ca <USBD_LL_DataInStage+0x15a>
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d122      	bne.n	80071ca <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b03      	cmp	r3, #3
 800718e:	d11c      	bne.n	80071ca <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007190:	7dfa      	ldrb	r2, [r7, #23]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	32ae      	adds	r2, #174	; 0xae
 8007196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d014      	beq.n	80071ca <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80071a0:	7dfa      	ldrb	r2, [r7, #23]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80071a8:	7dfa      	ldrb	r2, [r7, #23]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	32ae      	adds	r2, #174	; 0xae
 80071ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	7afa      	ldrb	r2, [r7, #11]
 80071b6:	4611      	mov	r1, r2
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	4798      	blx	r3
 80071bc:	4603      	mov	r3, r0
 80071be:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80071c0:	7dbb      	ldrb	r3, [r7, #22]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80071c6:	7dbb      	ldrb	r3, [r7, #22]
 80071c8:	e000      	b.n	80071cc <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d014      	beq.n	800723a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00e      	beq.n	800723a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6852      	ldr	r2, [r2, #4]
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	4611      	mov	r1, r2
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007236:	2303      	movs	r3, #3
 8007238:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800723a:	2340      	movs	r3, #64	; 0x40
 800723c:	2200      	movs	r2, #0
 800723e:	2100      	movs	r1, #0
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 fc3d 	bl	8008ac0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2240      	movs	r2, #64	; 0x40
 8007252:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007256:	2340      	movs	r3, #64	; 0x40
 8007258:	2200      	movs	r2, #0
 800725a:	2180      	movs	r1, #128	; 0x80
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fc2f 	bl	8008ac0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2240      	movs	r2, #64	; 0x40
 800726c:	621a      	str	r2, [r3, #32]

  return ret;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d006      	beq.n	80072ba <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2204      	movs	r2, #4
 80072be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d106      	bne.n	80072f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b03      	cmp	r3, #3
 8007312:	d110      	bne.n	8007336 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00b      	beq.n	8007336 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	32ae      	adds	r2, #174	; 0xae
 8007356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800735e:	2303      	movs	r3, #3
 8007360:	e01c      	b.n	800739c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b03      	cmp	r3, #3
 800736c:	d115      	bne.n	800739a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	32ae      	adds	r2, #174	; 0xae
 8007378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	32ae      	adds	r2, #174	; 0xae
 800738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	78fa      	ldrb	r2, [r7, #3]
 8007394:	4611      	mov	r1, r2
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	32ae      	adds	r2, #174	; 0xae
 80073ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e01c      	b.n	8007400 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d115      	bne.n	80073fe <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	32ae      	adds	r2, #174	; 0xae
 80073dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00b      	beq.n	80073fe <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	32ae      	adds	r2, #174	; 0xae
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	4611      	mov	r1, r2
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00e      	beq.n	800745a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6852      	ldr	r2, [r2, #4]
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	4611      	mov	r1, r2
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007456:	2303      	movs	r3, #3
 8007458:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800745a:	7bfb      	ldrb	r3, [r7, #15]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007470:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007472:	4618      	mov	r0, r3
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800748a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	885b      	ldrh	r3, [r3, #2]
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	429a      	cmp	r2, r3
 80074be:	d920      	bls.n	8007502 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80074c8:	e013      	b.n	80074f2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80074ca:	f107 030a 	add.w	r3, r7, #10
 80074ce:	4619      	mov	r1, r3
 80074d0:	6978      	ldr	r0, [r7, #20]
 80074d2:	f000 f81b 	bl	800750c <USBD_GetNextDesc>
 80074d6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d108      	bne.n	80074f2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	789b      	ldrb	r3, [r3, #2]
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d008      	beq.n	8007500 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	885b      	ldrh	r3, [r3, #2]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	897b      	ldrh	r3, [r7, #10]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d8e5      	bhi.n	80074ca <USBD_GetEpDesc+0x32>
 80074fe:	e000      	b.n	8007502 <USBD_GetEpDesc+0x6a>
          break;
 8007500:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007502:	693b      	ldr	r3, [r7, #16]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	881a      	ldrh	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	4413      	add	r3, r2
 8007526:	b29a      	uxth	r2, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4413      	add	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007538:	68fb      	ldr	r3, [r7, #12]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007546:	b480      	push	{r7}
 8007548:	b087      	sub	sp, #28
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	3301      	adds	r3, #1
 800755c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007564:	8a3b      	ldrh	r3, [r7, #16]
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	b21a      	sxth	r2, r3
 800756a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800756e:	4313      	orrs	r3, r2
 8007570:	b21b      	sxth	r3, r3
 8007572:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007574:	89fb      	ldrh	r3, [r7, #14]
}
 8007576:	4618      	mov	r0, r3
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800759a:	2b40      	cmp	r3, #64	; 0x40
 800759c:	d005      	beq.n	80075aa <USBD_StdDevReq+0x26>
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d857      	bhi.n	8007652 <USBD_StdDevReq+0xce>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00f      	beq.n	80075c6 <USBD_StdDevReq+0x42>
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d153      	bne.n	8007652 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	32ae      	adds	r2, #174	; 0xae
 80075b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
      break;
 80075c4:	e04a      	b.n	800765c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	2b09      	cmp	r3, #9
 80075cc:	d83b      	bhi.n	8007646 <USBD_StdDevReq+0xc2>
 80075ce:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <USBD_StdDevReq+0x50>)
 80075d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d4:	08007629 	.word	0x08007629
 80075d8:	0800763d 	.word	0x0800763d
 80075dc:	08007647 	.word	0x08007647
 80075e0:	08007633 	.word	0x08007633
 80075e4:	08007647 	.word	0x08007647
 80075e8:	08007607 	.word	0x08007607
 80075ec:	080075fd 	.word	0x080075fd
 80075f0:	08007647 	.word	0x08007647
 80075f4:	0800761f 	.word	0x0800761f
 80075f8:	08007611 	.word	0x08007611
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa3c 	bl	8007a7c <USBD_GetDescriptor>
          break;
 8007604:	e024      	b.n	8007650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fbcb 	bl	8007da4 <USBD_SetAddress>
          break;
 800760e:	e01f      	b.n	8007650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fc0a 	bl	8007e2c <USBD_SetConfig>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
          break;
 800761c:	e018      	b.n	8007650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fcad 	bl	8007f80 <USBD_GetConfig>
          break;
 8007626:	e013      	b.n	8007650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fcde 	bl	8007fec <USBD_GetStatus>
          break;
 8007630:	e00e      	b.n	8007650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fd0d 	bl	8008054 <USBD_SetFeature>
          break;
 800763a:	e009      	b.n	8007650 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fd31 	bl	80080a6 <USBD_ClrFeature>
          break;
 8007644:	e004      	b.n	8007650 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fd88 	bl	800815e <USBD_CtlError>
          break;
 800764e:	bf00      	nop
      }
      break;
 8007650:	e004      	b.n	800765c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fd82 	bl	800815e <USBD_CtlError>
      break;
 800765a:	bf00      	nop
  }

  return ret;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop

08007668 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d005      	beq.n	800768e <USBD_StdItfReq+0x26>
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d852      	bhi.n	800772c <USBD_StdItfReq+0xc4>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <USBD_StdItfReq+0x26>
 800768a:	2b20      	cmp	r3, #32
 800768c:	d14e      	bne.n	800772c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007694:	b2db      	uxtb	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	2b02      	cmp	r3, #2
 800769a:	d840      	bhi.n	800771e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	889b      	ldrh	r3, [r3, #4]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d836      	bhi.n	8007714 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	889b      	ldrh	r3, [r3, #4]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff fed8 	bl	8007464 <USBD_CoreFindIF>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2bff      	cmp	r3, #255	; 0xff
 80076bc:	d01d      	beq.n	80076fa <USBD_StdItfReq+0x92>
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11a      	bne.n	80076fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80076c4:	7bba      	ldrb	r2, [r7, #14]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	32ae      	adds	r2, #174	; 0xae
 80076ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00f      	beq.n	80076f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80076d4:	7bba      	ldrb	r2, [r7, #14]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076dc:	7bba      	ldrb	r2, [r7, #14]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32ae      	adds	r2, #174	; 0xae
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076f2:	e004      	b.n	80076fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80076f4:	2303      	movs	r3, #3
 80076f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076f8:	e001      	b.n	80076fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80076fa:	2303      	movs	r3, #3
 80076fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d110      	bne.n	8007728 <USBD_StdItfReq+0xc0>
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10d      	bne.n	8007728 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fdd4 	bl	80082ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007712:	e009      	b.n	8007728 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fd21 	bl	800815e <USBD_CtlError>
          break;
 800771c:	e004      	b.n	8007728 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fd1c 	bl	800815e <USBD_CtlError>
          break;
 8007726:	e000      	b.n	800772a <USBD_StdItfReq+0xc2>
          break;
 8007728:	bf00      	nop
      }
      break;
 800772a:	e004      	b.n	8007736 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fd15 	bl	800815e <USBD_CtlError>
      break;
 8007734:	bf00      	nop
  }

  return ret;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	889b      	ldrh	r3, [r3, #4]
 8007752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800775c:	2b40      	cmp	r3, #64	; 0x40
 800775e:	d007      	beq.n	8007770 <USBD_StdEPReq+0x30>
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	f200 817f 	bhi.w	8007a64 <USBD_StdEPReq+0x324>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d02a      	beq.n	80077c0 <USBD_StdEPReq+0x80>
 800776a:	2b20      	cmp	r3, #32
 800776c:	f040 817a 	bne.w	8007a64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff fe82 	bl	800747e <USBD_CoreFindEP>
 800777a:	4603      	mov	r3, r0
 800777c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800777e:	7b7b      	ldrb	r3, [r7, #13]
 8007780:	2bff      	cmp	r3, #255	; 0xff
 8007782:	f000 8174 	beq.w	8007a6e <USBD_StdEPReq+0x32e>
 8007786:	7b7b      	ldrb	r3, [r7, #13]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 8170 	bne.w	8007a6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800778e:	7b7a      	ldrb	r2, [r7, #13]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007796:	7b7a      	ldrb	r2, [r7, #13]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	32ae      	adds	r2, #174	; 0xae
 800779c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 8163 	beq.w	8007a6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80077a8:	7b7a      	ldrb	r2, [r7, #13]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	32ae      	adds	r2, #174	; 0xae
 80077ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	4798      	blx	r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077be:	e156      	b.n	8007a6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d008      	beq.n	80077da <USBD_StdEPReq+0x9a>
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	f300 8145 	bgt.w	8007a58 <USBD_StdEPReq+0x318>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 809b 	beq.w	800790a <USBD_StdEPReq+0x1ca>
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d03c      	beq.n	8007852 <USBD_StdEPReq+0x112>
 80077d8:	e13e      	b.n	8007a58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d002      	beq.n	80077ec <USBD_StdEPReq+0xac>
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d016      	beq.n	8007818 <USBD_StdEPReq+0xd8>
 80077ea:	e02c      	b.n	8007846 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00d      	beq.n	800780e <USBD_StdEPReq+0xce>
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b80      	cmp	r3, #128	; 0x80
 80077f6:	d00a      	beq.n	800780e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fa09 	bl	8008c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007802:	2180      	movs	r1, #128	; 0x80
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 fa05 	bl	8008c14 <USBD_LL_StallEP>
 800780a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800780c:	e020      	b.n	8007850 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fca4 	bl	800815e <USBD_CtlError>
              break;
 8007816:	e01b      	b.n	8007850 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	885b      	ldrh	r3, [r3, #2]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10e      	bne.n	800783e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <USBD_StdEPReq+0xfe>
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2b80      	cmp	r3, #128	; 0x80
 800782a:	d008      	beq.n	800783e <USBD_StdEPReq+0xfe>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	88db      	ldrh	r3, [r3, #6]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d104      	bne.n	800783e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 f9eb 	bl	8008c14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fd3b 	bl	80082ba <USBD_CtlSendStatus>

              break;
 8007844:	e004      	b.n	8007850 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fc88 	bl	800815e <USBD_CtlError>
              break;
 800784e:	bf00      	nop
          }
          break;
 8007850:	e107      	b.n	8007a62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d002      	beq.n	8007864 <USBD_StdEPReq+0x124>
 800785e:	2b03      	cmp	r3, #3
 8007860:	d016      	beq.n	8007890 <USBD_StdEPReq+0x150>
 8007862:	e04b      	b.n	80078fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00d      	beq.n	8007886 <USBD_StdEPReq+0x146>
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	2b80      	cmp	r3, #128	; 0x80
 800786e:	d00a      	beq.n	8007886 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 f9cd 	bl	8008c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800787a:	2180      	movs	r1, #128	; 0x80
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 f9c9 	bl	8008c14 <USBD_LL_StallEP>
 8007882:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007884:	e040      	b.n	8007908 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fc68 	bl	800815e <USBD_CtlError>
              break;
 800788e:	e03b      	b.n	8007908 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	885b      	ldrh	r3, [r3, #2]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d136      	bne.n	8007906 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d004      	beq.n	80078ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 f9ea 	bl	8008c80 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fd04 	bl	80082ba <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fde1 	bl	800747e <USBD_CoreFindEP>
 80078bc:	4603      	mov	r3, r0
 80078be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078c0:	7b7b      	ldrb	r3, [r7, #13]
 80078c2:	2bff      	cmp	r3, #255	; 0xff
 80078c4:	d01f      	beq.n	8007906 <USBD_StdEPReq+0x1c6>
 80078c6:	7b7b      	ldrb	r3, [r7, #13]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11c      	bne.n	8007906 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80078cc:	7b7a      	ldrb	r2, [r7, #13]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80078d4:	7b7a      	ldrb	r2, [r7, #13]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	32ae      	adds	r2, #174	; 0xae
 80078da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d010      	beq.n	8007906 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078e4:	7b7a      	ldrb	r2, [r7, #13]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32ae      	adds	r2, #174	; 0xae
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80078fa:	e004      	b.n	8007906 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fc2d 	bl	800815e <USBD_CtlError>
              break;
 8007904:	e000      	b.n	8007908 <USBD_StdEPReq+0x1c8>
              break;
 8007906:	bf00      	nop
          }
          break;
 8007908:	e0ab      	b.n	8007a62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b02      	cmp	r3, #2
 8007914:	d002      	beq.n	800791c <USBD_StdEPReq+0x1dc>
 8007916:	2b03      	cmp	r3, #3
 8007918:	d032      	beq.n	8007980 <USBD_StdEPReq+0x240>
 800791a:	e097      	b.n	8007a4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d007      	beq.n	8007932 <USBD_StdEPReq+0x1f2>
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b80      	cmp	r3, #128	; 0x80
 8007926:	d004      	beq.n	8007932 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fc17 	bl	800815e <USBD_CtlError>
                break;
 8007930:	e091      	b.n	8007a56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007936:	2b00      	cmp	r3, #0
 8007938:	da0b      	bge.n	8007952 <USBD_StdEPReq+0x212>
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	3310      	adds	r3, #16
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	3304      	adds	r3, #4
 8007950:	e00b      	b.n	800796a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	4413      	add	r3, r2
 8007968:	3304      	adds	r3, #4
 800796a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2202      	movs	r2, #2
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fc61 	bl	8008240 <USBD_CtlSendData>
              break;
 800797e:	e06a      	b.n	8007a56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007984:	2b00      	cmp	r3, #0
 8007986:	da11      	bge.n	80079ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	f003 020f 	and.w	r2, r3, #15
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	3324      	adds	r3, #36	; 0x24
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d117      	bne.n	80079d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fbda 	bl	800815e <USBD_CtlError>
                  break;
 80079aa:	e054      	b.n	8007a56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	f003 020f 	and.w	r2, r3, #15
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fbc7 	bl	800815e <USBD_CtlError>
                  break;
 80079d0:	e041      	b.n	8007a56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da0b      	bge.n	80079f2 <USBD_StdEPReq+0x2b2>
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	3310      	adds	r3, #16
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	3304      	adds	r3, #4
 80079f0:	e00b      	b.n	8007a0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f8:	4613      	mov	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	4413      	add	r3, r2
 8007a08:	3304      	adds	r3, #4
 8007a0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <USBD_StdEPReq+0x2d8>
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b80      	cmp	r3, #128	; 0x80
 8007a16:	d103      	bne.n	8007a20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	e00e      	b.n	8007a3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 f961 	bl	8008cec <USBD_LL_IsStallEP>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2201      	movs	r2, #1
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	e002      	b.n	8007a3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2202      	movs	r2, #2
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fbfb 	bl	8008240 <USBD_CtlSendData>
              break;
 8007a4a:	e004      	b.n	8007a56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fb85 	bl	800815e <USBD_CtlError>
              break;
 8007a54:	bf00      	nop
          }
          break;
 8007a56:	e004      	b.n	8007a62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fb7f 	bl	800815e <USBD_CtlError>
          break;
 8007a60:	bf00      	nop
      }
      break;
 8007a62:	e005      	b.n	8007a70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fb79 	bl	800815e <USBD_CtlError>
      break;
 8007a6c:	e000      	b.n	8007a70 <USBD_StdEPReq+0x330>
      break;
 8007a6e:	bf00      	nop
  }

  return ret;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	885b      	ldrh	r3, [r3, #2]
 8007a96:	0a1b      	lsrs	r3, r3, #8
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	2b0e      	cmp	r3, #14
 8007a9e:	f200 8152 	bhi.w	8007d46 <USBD_GetDescriptor+0x2ca>
 8007aa2:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <USBD_GetDescriptor+0x2c>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007b19 	.word	0x08007b19
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007b71 	.word	0x08007b71
 8007ab4:	08007d47 	.word	0x08007d47
 8007ab8:	08007d47 	.word	0x08007d47
 8007abc:	08007ce7 	.word	0x08007ce7
 8007ac0:	08007d13 	.word	0x08007d13
 8007ac4:	08007d47 	.word	0x08007d47
 8007ac8:	08007d47 	.word	0x08007d47
 8007acc:	08007d47 	.word	0x08007d47
 8007ad0:	08007d47 	.word	0x08007d47
 8007ad4:	08007d47 	.word	0x08007d47
 8007ad8:	08007d47 	.word	0x08007d47
 8007adc:	08007d47 	.word	0x08007d47
 8007ae0:	08007ae5 	.word	0x08007ae5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	7c12      	ldrb	r2, [r2, #16]
 8007afc:	f107 0108 	add.w	r1, r7, #8
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b06:	e126      	b.n	8007d56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fb27 	bl	800815e <USBD_CtlError>
        err++;
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	3301      	adds	r3, #1
 8007b14:	72fb      	strb	r3, [r7, #11]
      break;
 8007b16:	e11e      	b.n	8007d56 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	7c12      	ldrb	r2, [r2, #16]
 8007b24:	f107 0108 	add.w	r1, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
      break;
 8007b2e:	e112      	b.n	8007d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7c1b      	ldrb	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10d      	bne.n	8007b54 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	f107 0208 	add.w	r2, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	2202      	movs	r2, #2
 8007b50:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b52:	e100      	b.n	8007d56 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	f107 0208 	add.w	r2, r7, #8
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	701a      	strb	r2, [r3, #0]
      break;
 8007b6e:	e0f2      	b.n	8007d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	885b      	ldrh	r3, [r3, #2]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b05      	cmp	r3, #5
 8007b78:	f200 80ac 	bhi.w	8007cd4 <USBD_GetDescriptor+0x258>
 8007b7c:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <USBD_GetDescriptor+0x108>)
 8007b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b82:	bf00      	nop
 8007b84:	08007b9d 	.word	0x08007b9d
 8007b88:	08007bd1 	.word	0x08007bd1
 8007b8c:	08007c05 	.word	0x08007c05
 8007b90:	08007c39 	.word	0x08007c39
 8007b94:	08007c6d 	.word	0x08007c6d
 8007b98:	08007ca1 	.word	0x08007ca1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	7c12      	ldrb	r2, [r2, #16]
 8007bb4:	f107 0108 	add.w	r1, r7, #8
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bbe:	e091      	b.n	8007ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 facb 	bl	800815e <USBD_CtlError>
            err++;
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bce:	e089      	b.n	8007ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7c12      	ldrb	r2, [r2, #16]
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bf2:	e077      	b.n	8007ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fab1 	bl	800815e <USBD_CtlError>
            err++;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	72fb      	strb	r3, [r7, #11]
          break;
 8007c02:	e06f      	b.n	8007ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7c12      	ldrb	r2, [r2, #16]
 8007c1c:	f107 0108 	add.w	r1, r7, #8
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c26:	e05d      	b.n	8007ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa97 	bl	800815e <USBD_CtlError>
            err++;
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	3301      	adds	r3, #1
 8007c34:	72fb      	strb	r3, [r7, #11]
          break;
 8007c36:	e055      	b.n	8007ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	7c12      	ldrb	r2, [r2, #16]
 8007c50:	f107 0108 	add.w	r1, r7, #8
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c5a:	e043      	b.n	8007ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fa7d 	bl	800815e <USBD_CtlError>
            err++;
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	3301      	adds	r3, #1
 8007c68:	72fb      	strb	r3, [r7, #11]
          break;
 8007c6a:	e03b      	b.n	8007ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7c12      	ldrb	r2, [r2, #16]
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c8e:	e029      	b.n	8007ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa63 	bl	800815e <USBD_CtlError>
            err++;
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c9e:	e021      	b.n	8007ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c12      	ldrb	r2, [r2, #16]
 8007cb8:	f107 0108 	add.w	r1, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cc2:	e00f      	b.n	8007ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa49 	bl	800815e <USBD_CtlError>
            err++;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cd2:	e007      	b.n	8007ce4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa41 	bl	800815e <USBD_CtlError>
          err++;
 8007cdc:	7afb      	ldrb	r3, [r7, #11]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ce2:	bf00      	nop
      }
      break;
 8007ce4:	e037      	b.n	8007d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7c1b      	ldrb	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf6:	f107 0208 	add.w	r2, r7, #8
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4798      	blx	r3
 8007cfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d00:	e029      	b.n	8007d56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fa2a 	bl	800815e <USBD_CtlError>
        err++;
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d10:	e021      	b.n	8007d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7c1b      	ldrb	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10d      	bne.n	8007d36 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	f107 0208 	add.w	r2, r7, #8
 8007d26:	4610      	mov	r0, r2
 8007d28:	4798      	blx	r3
 8007d2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	2207      	movs	r2, #7
 8007d32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d34:	e00f      	b.n	8007d56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fa10 	bl	800815e <USBD_CtlError>
        err++;
 8007d3e:	7afb      	ldrb	r3, [r7, #11]
 8007d40:	3301      	adds	r3, #1
 8007d42:	72fb      	strb	r3, [r7, #11]
      break;
 8007d44:	e007      	b.n	8007d56 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fa08 	bl	800815e <USBD_CtlError>
      err++;
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	3301      	adds	r3, #1
 8007d52:	72fb      	strb	r3, [r7, #11]
      break;
 8007d54:	bf00      	nop
  }

  if (err != 0U)
 8007d56:	7afb      	ldrb	r3, [r7, #11]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d11e      	bne.n	8007d9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	88db      	ldrh	r3, [r3, #6]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d016      	beq.n	8007d92 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007d64:	893b      	ldrh	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00e      	beq.n	8007d88 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	88da      	ldrh	r2, [r3, #6]
 8007d6e:	893b      	ldrh	r3, [r7, #8]
 8007d70:	4293      	cmp	r3, r2
 8007d72:	bf28      	it	cs
 8007d74:	4613      	movcs	r3, r2
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d7a:	893b      	ldrh	r3, [r7, #8]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa5d 	bl	8008240 <USBD_CtlSendData>
 8007d86:	e009      	b.n	8007d9c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9e7 	bl	800815e <USBD_CtlError>
 8007d90:	e004      	b.n	8007d9c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fa91 	bl	80082ba <USBD_CtlSendStatus>
 8007d98:	e000      	b.n	8007d9c <USBD_GetDescriptor+0x320>
    return;
 8007d9a:	bf00      	nop
  }
}
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop

08007da4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	889b      	ldrh	r3, [r3, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d131      	bne.n	8007e1a <USBD_SetAddress+0x76>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	88db      	ldrh	r3, [r3, #6]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d12d      	bne.n	8007e1a <USBD_SetAddress+0x76>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc4:	d829      	bhi.n	8007e1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	885b      	ldrh	r3, [r3, #2]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d104      	bne.n	8007de8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f9bc 	bl	800815e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de6:	e01d      	b.n	8007e24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7bfa      	ldrb	r2, [r7, #15]
 8007dec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 ffa5 	bl	8008d44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa5d 	bl	80082ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d004      	beq.n	8007e10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0e:	e009      	b.n	8007e24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e18:	e004      	b.n	8007e24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f99e 	bl	800815e <USBD_CtlError>
  }
}
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	885b      	ldrh	r3, [r3, #2]
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	4b4e      	ldr	r3, [pc, #312]	; (8007f7c <USBD_SetConfig+0x150>)
 8007e42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e44:	4b4d      	ldr	r3, [pc, #308]	; (8007f7c <USBD_SetConfig+0x150>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d905      	bls.n	8007e58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f985 	bl	800815e <USBD_CtlError>
    return USBD_FAIL;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e08c      	b.n	8007f72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d002      	beq.n	8007e6a <USBD_SetConfig+0x3e>
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d029      	beq.n	8007ebc <USBD_SetConfig+0x90>
 8007e68:	e075      	b.n	8007f56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e6a:	4b44      	ldr	r3, [pc, #272]	; (8007f7c <USBD_SetConfig+0x150>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d020      	beq.n	8007eb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e72:	4b42      	ldr	r3, [pc, #264]	; (8007f7c <USBD_SetConfig+0x150>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e7c:	4b3f      	ldr	r3, [pc, #252]	; (8007f7c <USBD_SetConfig+0x150>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7fe ffb6 	bl	8006df4 <USBD_SetClassConfig>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d008      	beq.n	8007ea4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f962 	bl	800815e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ea2:	e065      	b.n	8007f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa08 	bl	80082ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2203      	movs	r2, #3
 8007eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007eb2:	e05d      	b.n	8007f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fa00 	bl	80082ba <USBD_CtlSendStatus>
      break;
 8007eba:	e059      	b.n	8007f70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ebc:	4b2f      	ldr	r3, [pc, #188]	; (8007f7c <USBD_SetConfig+0x150>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d112      	bne.n	8007eea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ecc:	4b2b      	ldr	r3, [pc, #172]	; (8007f7c <USBD_SetConfig+0x150>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ed6:	4b29      	ldr	r3, [pc, #164]	; (8007f7c <USBD_SetConfig+0x150>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7fe ffa5 	bl	8006e2c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f9e9 	bl	80082ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ee8:	e042      	b.n	8007f70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007eea:	4b24      	ldr	r3, [pc, #144]	; (8007f7c <USBD_SetConfig+0x150>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d02a      	beq.n	8007f4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7fe ff93 	bl	8006e2c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f06:	4b1d      	ldr	r3, [pc, #116]	; (8007f7c <USBD_SetConfig+0x150>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f10:	4b1a      	ldr	r3, [pc, #104]	; (8007f7c <USBD_SetConfig+0x150>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fe ff6c 	bl	8006df4 <USBD_SetClassConfig>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00f      	beq.n	8007f46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f918 	bl	800815e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7fe ff78 	bl	8006e2c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f44:	e014      	b.n	8007f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f9b7 	bl	80082ba <USBD_CtlSendStatus>
      break;
 8007f4c:	e010      	b.n	8007f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f9b3 	bl	80082ba <USBD_CtlSendStatus>
      break;
 8007f54:	e00c      	b.n	8007f70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f900 	bl	800815e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f5e:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <USBD_SetConfig+0x150>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7fe ff61 	bl	8006e2c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f6e:	bf00      	nop
  }

  return ret;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000154 	.word	0x20000154

08007f80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	88db      	ldrh	r3, [r3, #6]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d004      	beq.n	8007f9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f8e2 	bl	800815e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f9a:	e023      	b.n	8007fe4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	dc02      	bgt.n	8007fae <USBD_GetConfig+0x2e>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc03      	bgt.n	8007fb4 <USBD_GetConfig+0x34>
 8007fac:	e015      	b.n	8007fda <USBD_GetConfig+0x5a>
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d00b      	beq.n	8007fca <USBD_GetConfig+0x4a>
 8007fb2:	e012      	b.n	8007fda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f93c 	bl	8008240 <USBD_CtlSendData>
        break;
 8007fc8:	e00c      	b.n	8007fe4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f934 	bl	8008240 <USBD_CtlSendData>
        break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f8be 	bl	800815e <USBD_CtlError>
        break;
 8007fe2:	bf00      	nop
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	2b02      	cmp	r3, #2
 8008002:	d81e      	bhi.n	8008042 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	88db      	ldrh	r3, [r3, #6]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d004      	beq.n	8008016 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f8a5 	bl	800815e <USBD_CtlError>
        break;
 8008014:	e01a      	b.n	800804c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f043 0202 	orr.w	r2, r3, #2
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	330c      	adds	r3, #12
 8008036:	2202      	movs	r2, #2
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f900 	bl	8008240 <USBD_CtlSendData>
      break;
 8008040:	e004      	b.n	800804c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f88a 	bl	800815e <USBD_CtlError>
      break;
 800804a:	bf00      	nop
  }
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	885b      	ldrh	r3, [r3, #2]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d107      	bne.n	8008076 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f923 	bl	80082ba <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008074:	e013      	b.n	800809e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	885b      	ldrh	r3, [r3, #2]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d10b      	bne.n	8008096 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	889b      	ldrh	r3, [r3, #4]
 8008082:	0a1b      	lsrs	r3, r3, #8
 8008084:	b29b      	uxth	r3, r3
 8008086:	b2da      	uxtb	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f913 	bl	80082ba <USBD_CtlSendStatus>
}
 8008094:	e003      	b.n	800809e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f860 	bl	800815e <USBD_CtlError>
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	3b01      	subs	r3, #1
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d80b      	bhi.n	80080d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	885b      	ldrh	r3, [r3, #2]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d10c      	bne.n	80080e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8f3 	bl	80082ba <USBD_CtlSendStatus>
      }
      break;
 80080d4:	e004      	b.n	80080e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f840 	bl	800815e <USBD_CtlError>
      break;
 80080de:	e000      	b.n	80080e2 <USBD_ClrFeature+0x3c>
      break;
 80080e0:	bf00      	nop
  }
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3301      	adds	r3, #1
 8008104:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f7ff fa16 	bl	8007546 <SWAPBYTE>
 800811a:	4603      	mov	r3, r0
 800811c:	461a      	mov	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3301      	adds	r3, #1
 800812c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7ff fa09 	bl	8007546 <SWAPBYTE>
 8008134:	4603      	mov	r3, r0
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff f9fc 	bl	8007546 <SWAPBYTE>
 800814e:	4603      	mov	r3, r0
 8008150:	461a      	mov	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	80da      	strh	r2, [r3, #6]
}
 8008156:	bf00      	nop
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008168:	2180      	movs	r1, #128	; 0x80
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fd52 	bl	8008c14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008170:	2100      	movs	r1, #0
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fd4e 	bl	8008c14 <USBD_LL_StallEP>
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d036      	beq.n	8008204 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800819a:	6938      	ldr	r0, [r7, #16]
 800819c:	f000 f836 	bl	800820c <USBD_GetLen>
 80081a0:	4603      	mov	r3, r0
 80081a2:	3301      	adds	r3, #1
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	4413      	add	r3, r2
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	7812      	ldrb	r2, [r2, #0]
 80081b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	3301      	adds	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	4413      	add	r3, r2
 80081c6:	2203      	movs	r2, #3
 80081c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	3301      	adds	r3, #1
 80081ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081d0:	e013      	b.n	80081fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	4413      	add	r3, r2
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	7812      	ldrb	r2, [r2, #0]
 80081dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	3301      	adds	r3, #1
 80081e2:	613b      	str	r3, [r7, #16]
    idx++;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	3301      	adds	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4413      	add	r3, r2
 80081f0:	2200      	movs	r2, #0
 80081f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	3301      	adds	r3, #1
 80081f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e7      	bne.n	80081d2 <USBD_GetString+0x52>
 8008202:	e000      	b.n	8008206 <USBD_GetString+0x86>
    return;
 8008204:	bf00      	nop
  }
}
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800821c:	e005      	b.n	800822a <USBD_GetLen+0x1e>
  {
    len++;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	3301      	adds	r3, #1
 8008222:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	3301      	adds	r3, #1
 8008228:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1f5      	bne.n	800821e <USBD_GetLen+0x12>
  }

  return len;
 8008232:	7bfb      	ldrb	r3, [r7, #15]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2202      	movs	r2, #2
 8008250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	2100      	movs	r1, #0
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fda2 	bl	8008db0 <USBD_LL_Transmit>

  return USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	2100      	movs	r1, #0
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 fd91 	bl	8008db0 <USBD_LL_Transmit>

  return USBD_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	2100      	movs	r1, #0
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fdb8 	bl	8008e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2204      	movs	r2, #4
 80082c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082ca:	2300      	movs	r3, #0
 80082cc:	2200      	movs	r2, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fd6d 	bl	8008db0 <USBD_LL_Transmit>

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2205      	movs	r2, #5
 80082ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082f0:	2300      	movs	r3, #0
 80082f2:	2200      	movs	r2, #0
 80082f4:	2100      	movs	r1, #0
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fd92 	bl	8008e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800830c:	2200      	movs	r2, #0
 800830e:	4912      	ldr	r1, [pc, #72]	; (8008358 <MX_USB_DEVICE_Init+0x50>)
 8008310:	4812      	ldr	r0, [pc, #72]	; (800835c <MX_USB_DEVICE_Init+0x54>)
 8008312:	f7fe fcf2 	bl	8006cfa <USBD_Init>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800831c:	f7f8 f860 	bl	80003e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008320:	490f      	ldr	r1, [pc, #60]	; (8008360 <MX_USB_DEVICE_Init+0x58>)
 8008322:	480e      	ldr	r0, [pc, #56]	; (800835c <MX_USB_DEVICE_Init+0x54>)
 8008324:	f7fe fd19 	bl	8006d5a <USBD_RegisterClass>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800832e:	f7f8 f857 	bl	80003e0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008332:	490c      	ldr	r1, [pc, #48]	; (8008364 <MX_USB_DEVICE_Init+0x5c>)
 8008334:	4809      	ldr	r0, [pc, #36]	; (800835c <MX_USB_DEVICE_Init+0x54>)
 8008336:	f7fc ffc1 	bl	80052bc <USBD_MSC_RegisterStorage>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008340:	f7f8 f84e 	bl	80003e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008344:	4805      	ldr	r0, [pc, #20]	; (800835c <MX_USB_DEVICE_Init+0x54>)
 8008346:	f7fe fd3e 	bl	8006dc6 <USBD_Start>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008350:	f7f8 f846 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008354:	bf00      	nop
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200000b4 	.word	0x200000b4
 800835c:	20000158 	.word	0x20000158
 8008360:	2000000c 	.word	0x2000000c
 8008364:	20000114 	.word	0x20000114

08008368 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	6039      	str	r1, [r7, #0]
 8008372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2212      	movs	r2, #18
 8008378:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800837a:	4b03      	ldr	r3, [pc, #12]	; (8008388 <USBD_FS_DeviceDescriptor+0x20>)
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	200000d4 	.word	0x200000d4

0800838c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	6039      	str	r1, [r7, #0]
 8008396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2204      	movs	r2, #4
 800839c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800839e:	4b03      	ldr	r3, [pc, #12]	; (80083ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	200000f4 	.word	0x200000f4

080083b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	6039      	str	r1, [r7, #0]
 80083ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d105      	bne.n	80083ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	4907      	ldr	r1, [pc, #28]	; (80083e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80083c6:	4808      	ldr	r0, [pc, #32]	; (80083e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80083c8:	f7ff feda 	bl	8008180 <USBD_GetString>
 80083cc:	e004      	b.n	80083d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	4904      	ldr	r1, [pc, #16]	; (80083e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80083d2:	4805      	ldr	r0, [pc, #20]	; (80083e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80083d4:	f7ff fed4 	bl	8008180 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083d8:	4b02      	ldr	r3, [pc, #8]	; (80083e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20000434 	.word	0x20000434
 80083e8:	0800901c 	.word	0x0800901c

080083ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	6039      	str	r1, [r7, #0]
 80083f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	4904      	ldr	r1, [pc, #16]	; (800840c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083fc:	4804      	ldr	r0, [pc, #16]	; (8008410 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083fe:	f7ff febf 	bl	8008180 <USBD_GetString>
  return USBD_StrDesc;
 8008402:	4b02      	ldr	r3, [pc, #8]	; (800840c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20000434 	.word	0x20000434
 8008410:	08009030 	.word	0x08009030

08008414 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	6039      	str	r1, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	221a      	movs	r2, #26
 8008424:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008426:	f000 f855 	bl	80084d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800842a:	4b02      	ldr	r3, [pc, #8]	; (8008434 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	200000f8 	.word	0x200000f8

08008438 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d105      	bne.n	8008456 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	4907      	ldr	r1, [pc, #28]	; (800846c <USBD_FS_ConfigStrDescriptor+0x34>)
 800844e:	4808      	ldr	r0, [pc, #32]	; (8008470 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008450:	f7ff fe96 	bl	8008180 <USBD_GetString>
 8008454:	e004      	b.n	8008460 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4904      	ldr	r1, [pc, #16]	; (800846c <USBD_FS_ConfigStrDescriptor+0x34>)
 800845a:	4805      	ldr	r0, [pc, #20]	; (8008470 <USBD_FS_ConfigStrDescriptor+0x38>)
 800845c:	f7ff fe90 	bl	8008180 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000434 	.word	0x20000434
 8008470:	08009044 	.word	0x08009044

08008474 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	6039      	str	r1, [r7, #0]
 800847e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d105      	bne.n	8008492 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	4907      	ldr	r1, [pc, #28]	; (80084a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800848a:	4808      	ldr	r0, [pc, #32]	; (80084ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800848c:	f7ff fe78 	bl	8008180 <USBD_GetString>
 8008490:	e004      	b.n	800849c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4904      	ldr	r1, [pc, #16]	; (80084a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008496:	4805      	ldr	r0, [pc, #20]	; (80084ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008498:	f7ff fe72 	bl	8008180 <USBD_GetString>
  }
  return USBD_StrDesc;
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000434 	.word	0x20000434
 80084ac:	08009050 	.word	0x08009050

080084b0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	220c      	movs	r2, #12
 80084c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80084c2:	4b03      	ldr	r3, [pc, #12]	; (80084d0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	200000e8 	.word	0x200000e8

080084d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <Get_SerialNum+0x44>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084e0:	4b0e      	ldr	r3, [pc, #56]	; (800851c <Get_SerialNum+0x48>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084e6:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <Get_SerialNum+0x4c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d009      	beq.n	800850e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084fa:	2208      	movs	r2, #8
 80084fc:	4909      	ldr	r1, [pc, #36]	; (8008524 <Get_SerialNum+0x50>)
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 f814 	bl	800852c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008504:	2204      	movs	r2, #4
 8008506:	4908      	ldr	r1, [pc, #32]	; (8008528 <Get_SerialNum+0x54>)
 8008508:	68b8      	ldr	r0, [r7, #8]
 800850a:	f000 f80f 	bl	800852c <IntToUnicode>
  }
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	1fff7590 	.word	0x1fff7590
 800851c:	1fff7594 	.word	0x1fff7594
 8008520:	1fff7598 	.word	0x1fff7598
 8008524:	200000fa 	.word	0x200000fa
 8008528:	2000010a 	.word	0x2000010a

0800852c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	4613      	mov	r3, r2
 8008538:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800853e:	2300      	movs	r3, #0
 8008540:	75fb      	strb	r3, [r7, #23]
 8008542:	e027      	b.n	8008594 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	0f1b      	lsrs	r3, r3, #28
 8008548:	2b09      	cmp	r3, #9
 800854a:	d80b      	bhi.n	8008564 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	0f1b      	lsrs	r3, r3, #28
 8008550:	b2da      	uxtb	r2, r3
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	4619      	mov	r1, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	440b      	add	r3, r1
 800855c:	3230      	adds	r2, #48	; 0x30
 800855e:	b2d2      	uxtb	r2, r2
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e00a      	b.n	800857a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	0f1b      	lsrs	r3, r3, #28
 8008568:	b2da      	uxtb	r2, r3
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	4619      	mov	r1, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	440b      	add	r3, r1
 8008574:	3237      	adds	r2, #55	; 0x37
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	3301      	adds	r3, #1
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	4413      	add	r3, r2
 800858a:	2200      	movs	r2, #0
 800858c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	3301      	adds	r3, #1
 8008592:	75fb      	strb	r3, [r7, #23]
 8008594:	7dfa      	ldrb	r2, [r7, #23]
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	429a      	cmp	r2, r3
 800859a:	d3d3      	bcc.n	8008544 <IntToUnicode+0x18>
  }
}
 800859c:	bf00      	nop
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	4603      	mov	r3, r0
 80085b2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80085b4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	4603      	mov	r3, r0
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	22c8      	movs	r2, #200	; 0xc8
 80085d4:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085dc:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80085de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085f6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800860e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	461a      	mov	r2, r3
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]
 800862c:	4613      	mov	r3, r2
 800862e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	025b      	lsls	r3, r3, #9
 8008634:	4a06      	ldr	r2, [pc, #24]	; (8008650 <STORAGE_Read_FS+0x34>)
 8008636:	1899      	adds	r1, r3, r2
 8008638:	89bb      	ldrh	r3, [r7, #12]
 800863a:	025b      	lsls	r3, r3, #9
 800863c:	461a      	mov	r2, r3
 800863e:	68b8      	ldr	r0, [r7, #8]
 8008640:	f000 fcd2 	bl	8008fe8 <memcpy>
  return (USBD_OK);
 8008644:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000634 	.word	0x20000634

08008654 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	461a      	mov	r2, r3
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]
 8008664:	4613      	mov	r3, r2
 8008666:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	025b      	lsls	r3, r3, #9
 800866c:	4a06      	ldr	r2, [pc, #24]	; (8008688 <STORAGE_Write_FS+0x34>)
 800866e:	1898      	adds	r0, r3, r2
 8008670:	89bb      	ldrh	r3, [r7, #12]
 8008672:	025b      	lsls	r3, r3, #9
 8008674:	461a      	mov	r2, r3
 8008676:	68b9      	ldr	r1, [r7, #8]
 8008678:	f000 fcb6 	bl	8008fe8 <memcpy>
  return (USBD_OK);
 800867c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20000634 	.word	0x20000634

0800868c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008690:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008692:	4618      	mov	r0, r3
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b0b0      	sub	sp, #192	; 0xc0
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	605a      	str	r2, [r3, #4]
 80086ae:	609a      	str	r2, [r3, #8]
 80086b0:	60da      	str	r2, [r3, #12]
 80086b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80086b4:	f107 0318 	add.w	r3, r7, #24
 80086b8:	2294      	movs	r2, #148	; 0x94
 80086ba:	2100      	movs	r1, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fc67 	bl	8008f90 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086ca:	d173      	bne.n	80087b4 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80086cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80086d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80086d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80086da:	2303      	movs	r3, #3
 80086dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80086de:	2301      	movs	r3, #1
 80086e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80086e2:	230c      	movs	r3, #12
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80086e6:	2302      	movs	r3, #2
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80086ea:	2302      	movs	r3, #2
 80086ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80086ee:	2302      	movs	r3, #2
 80086f0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80086f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80086f8:	f107 0318 	add.w	r3, r7, #24
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fa fbcb 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008708:	f7f7 fe6a 	bl	80003e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800870c:	4b2b      	ldr	r3, [pc, #172]	; (80087bc <HAL_PCD_MspInit+0x120>)
 800870e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008710:	4a2a      	ldr	r2, [pc, #168]	; (80087bc <HAL_PCD_MspInit+0x120>)
 8008712:	f043 0301 	orr.w	r3, r3, #1
 8008716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008718:	4b28      	ldr	r3, [pc, #160]	; (80087bc <HAL_PCD_MspInit+0x120>)
 800871a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	617b      	str	r3, [r7, #20]
 8008722:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008724:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800872c:	2302      	movs	r3, #2
 800872e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008732:	2300      	movs	r3, #0
 8008734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008738:	2303      	movs	r3, #3
 800873a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800873e:	230a      	movs	r3, #10
 8008740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008744:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008748:	4619      	mov	r1, r3
 800874a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800874e:	f7f8 f88b 	bl	8000868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008752:	4b1a      	ldr	r3, [pc, #104]	; (80087bc <HAL_PCD_MspInit+0x120>)
 8008754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008756:	4a19      	ldr	r2, [pc, #100]	; (80087bc <HAL_PCD_MspInit+0x120>)
 8008758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800875c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800875e:	4b17      	ldr	r3, [pc, #92]	; (80087bc <HAL_PCD_MspInit+0x120>)
 8008760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008766:	613b      	str	r3, [r7, #16]
 8008768:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800876a:	4b14      	ldr	r3, [pc, #80]	; (80087bc <HAL_PCD_MspInit+0x120>)
 800876c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800876e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d114      	bne.n	80087a0 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008776:	4b11      	ldr	r3, [pc, #68]	; (80087bc <HAL_PCD_MspInit+0x120>)
 8008778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877a:	4a10      	ldr	r2, [pc, #64]	; (80087bc <HAL_PCD_MspInit+0x120>)
 800877c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008780:	6593      	str	r3, [r2, #88]	; 0x58
 8008782:	4b0e      	ldr	r3, [pc, #56]	; (80087bc <HAL_PCD_MspInit+0x120>)
 8008784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800878e:	f7f9 fcc7 	bl	8002120 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008792:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <HAL_PCD_MspInit+0x120>)
 8008794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008796:	4a09      	ldr	r2, [pc, #36]	; (80087bc <HAL_PCD_MspInit+0x120>)
 8008798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800879c:	6593      	str	r3, [r2, #88]	; 0x58
 800879e:	e001      	b.n	80087a4 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80087a0:	f7f9 fcbe 	bl	8002120 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087a4:	2200      	movs	r2, #0
 80087a6:	2100      	movs	r1, #0
 80087a8:	2043      	movs	r0, #67	; 0x43
 80087aa:	f7f8 f826 	bl	80007fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087ae:	2043      	movs	r0, #67	; 0x43
 80087b0:	f7f8 f83f 	bl	8000832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087b4:	bf00      	nop
 80087b6:	37c0      	adds	r7, #192	; 0xc0
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	40021000 	.word	0x40021000

080087c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f7fe fb42 	bl	8006e60 <USBD_LL_SetupStage>
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80087f6:	78fa      	ldrb	r2, [r7, #3]
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	00db      	lsls	r3, r3, #3
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	78fb      	ldrb	r3, [r7, #3]
 800880c:	4619      	mov	r1, r3
 800880e:	f7fe fb7c 	bl	8006f0a <USBD_LL_DataOutStage>
}
 8008812:	bf00      	nop
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	4613      	mov	r3, r2
 8008832:	00db      	lsls	r3, r3, #3
 8008834:	4413      	add	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	440b      	add	r3, r1
 800883a:	3348      	adds	r3, #72	; 0x48
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	4619      	mov	r1, r3
 8008842:	f7fe fc15 	bl	8007070 <USBD_LL_DataInStage>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe fd4f 	bl	8007300 <USBD_LL_SOF>
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008872:	2301      	movs	r3, #1
 8008874:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b02      	cmp	r3, #2
 800887c:	d001      	beq.n	8008882 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800887e:	f7f7 fdaf 	bl	80003e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008888:	7bfa      	ldrb	r2, [r7, #15]
 800888a:	4611      	mov	r1, r2
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fcf3 	bl	8007278 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fc9b 	bl	80071d4 <USBD_LL_Reset>
}
 800889e:	bf00      	nop
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6812      	ldr	r2, [r2, #0]
 80088be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088c2:	f043 0301 	orr.w	r3, r3, #1
 80088c6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fce2 	bl	8007298 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <HAL_PCD_SuspendCallback+0x48>)
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	4a03      	ldr	r2, [pc, #12]	; (80088f0 <HAL_PCD_SuspendCallback+0x48>)
 80088e2:	f043 0306 	orr.w	r3, r3, #6
 80088e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	e000ed00 	.word	0xe000ed00

080088f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	6812      	ldr	r2, [r2, #0]
 800890a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800890e:	f023 0301 	bic.w	r3, r3, #1
 8008912:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d007      	beq.n	800892c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800891c:	4b08      	ldr	r3, [pc, #32]	; (8008940 <HAL_PCD_ResumeCallback+0x4c>)
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	4a07      	ldr	r2, [pc, #28]	; (8008940 <HAL_PCD_ResumeCallback+0x4c>)
 8008922:	f023 0306 	bic.w	r3, r3, #6
 8008926:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008928:	f000 fb2c 	bl	8008f84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fccc 	bl	80072d0 <USBD_LL_Resume>
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	e000ed00 	.word	0xe000ed00

08008944 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008956:	78fa      	ldrb	r2, [r7, #3]
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fd22 	bl	80073a4 <USBD_LL_IsoOUTIncomplete>
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	4611      	mov	r1, r2
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fcde 	bl	8007340 <USBD_LL_IsoINIncomplete>
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fd34 	bl	8007408 <USBD_LL_DevConnected>
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fd31 	bl	800741e <USBD_LL_DevDisconnected>
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d13c      	bne.n	8008a4e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089d4:	4a20      	ldr	r2, [pc, #128]	; (8008a58 <USBD_LL_Init+0x94>)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <USBD_LL_Init+0x94>)
 80089e0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089e4:	4b1c      	ldr	r3, [pc, #112]	; (8008a58 <USBD_LL_Init+0x94>)
 80089e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80089ec:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <USBD_LL_Init+0x94>)
 80089ee:	2206      	movs	r2, #6
 80089f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089f2:	4b19      	ldr	r3, [pc, #100]	; (8008a58 <USBD_LL_Init+0x94>)
 80089f4:	2202      	movs	r2, #2
 80089f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089f8:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <USBD_LL_Init+0x94>)
 80089fa:	2202      	movs	r2, #2
 80089fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089fe:	4b16      	ldr	r3, [pc, #88]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a04:	4b14      	ldr	r3, [pc, #80]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a0a:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008a10:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a16:	4b10      	ldr	r3, [pc, #64]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a1c:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a22:	480d      	ldr	r0, [pc, #52]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a24:	f7f8 f8e4 	bl	8000bf0 <HAL_PCD_Init>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a2e:	f7f7 fcd7 	bl	80003e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a32:	2180      	movs	r1, #128	; 0x80
 8008a34:	4808      	ldr	r0, [pc, #32]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a36:	f7f9 fa7a 	bl	8001f2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a3a:	2240      	movs	r2, #64	; 0x40
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4806      	ldr	r0, [pc, #24]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a40:	f7f9 fa2e 	bl	8001ea0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a44:	2280      	movs	r2, #128	; 0x80
 8008a46:	2101      	movs	r1, #1
 8008a48:	4803      	ldr	r0, [pc, #12]	; (8008a58 <USBD_LL_Init+0x94>)
 8008a4a:	f7f9 fa29 	bl	8001ea0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20019634 	.word	0x20019634

08008a5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f8 f9e0 	bl	8000e38 <HAL_PCD_Start>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d816      	bhi.n	8008ab0 <USBD_LL_Start+0x54>
 8008a82:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <USBD_LL_Start+0x2c>)
 8008a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a88:	08008a99 	.word	0x08008a99
 8008a8c:	08008a9f 	.word	0x08008a9f
 8008a90:	08008aa5 	.word	0x08008aa5
 8008a94:	08008aab 	.word	0x08008aab
    case HAL_OK :
      usb_status = USBD_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9c:	e00b      	b.n	8008ab6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa2:	e008      	b.n	8008ab6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa8:	e005      	b.n	8008ab6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	73fb      	strb	r3, [r7, #15]
    break;
 8008aae:	e002      	b.n	8008ab6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab4:	bf00      	nop
  }
  return usb_status;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	4608      	mov	r0, r1
 8008aca:	4611      	mov	r1, r2
 8008acc:	461a      	mov	r2, r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	70fb      	strb	r3, [r7, #3]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70bb      	strb	r3, [r7, #2]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ae8:	78bb      	ldrb	r3, [r7, #2]
 8008aea:	883a      	ldrh	r2, [r7, #0]
 8008aec:	78f9      	ldrb	r1, [r7, #3]
 8008aee:	f7f8 fe8a 	bl	8001806 <HAL_PCD_EP_Open>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d817      	bhi.n	8008b2c <USBD_LL_OpenEP+0x6c>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <USBD_LL_OpenEP+0x44>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b15 	.word	0x08008b15
 8008b08:	08008b1b 	.word	0x08008b1b
 8008b0c:	08008b21 	.word	0x08008b21
 8008b10:	08008b27 	.word	0x08008b27
    case HAL_OK :
      usb_status = USBD_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
    break;
 8008b18:	e00b      	b.n	8008b32 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1e:	e008      	b.n	8008b32 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b20:	2301      	movs	r3, #1
 8008b22:	73fb      	strb	r3, [r7, #15]
    break;
 8008b24:	e005      	b.n	8008b32 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b26:	2303      	movs	r3, #3
 8008b28:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2a:	e002      	b.n	8008b32 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b30:	bf00      	nop
  }
  return usb_status;
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7f8 febb 	bl	80018d6 <HAL_PCD_EP_Close>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d816      	bhi.n	8008b98 <USBD_LL_CloseEP+0x5c>
 8008b6a:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <USBD_LL_CloseEP+0x34>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008b81 	.word	0x08008b81
 8008b74:	08008b87 	.word	0x08008b87
 8008b78:	08008b8d 	.word	0x08008b8d
 8008b7c:	08008b93 	.word	0x08008b93
    case HAL_OK :
      usb_status = USBD_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]
    break;
 8008b84:	e00b      	b.n	8008b9e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b86:	2303      	movs	r3, #3
 8008b88:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8a:	e008      	b.n	8008b9e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b90:	e005      	b.n	8008b9e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b92:	2303      	movs	r3, #3
 8008b94:	73fb      	strb	r3, [r7, #15]
    break;
 8008b96:	e002      	b.n	8008b9e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9c:	bf00      	nop
  }
  return usb_status;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7f9 f833 	bl	8001c32 <HAL_PCD_EP_Flush>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d816      	bhi.n	8008c04 <USBD_LL_FlushEP+0x5c>
 8008bd6:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <USBD_LL_FlushEP+0x34>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008bed 	.word	0x08008bed
 8008be0:	08008bf3 	.word	0x08008bf3
 8008be4:	08008bf9 	.word	0x08008bf9
 8008be8:	08008bff 	.word	0x08008bff
    case HAL_OK :
      usb_status = USBD_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf0:	e00b      	b.n	8008c0a <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf6:	e008      	b.n	8008c0a <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfc:	e005      	b.n	8008c0a <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	73fb      	strb	r3, [r7, #15]
    break;
 8008c02:	e002      	b.n	8008c0a <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c04:	2303      	movs	r3, #3
 8008c06:	73fb      	strb	r3, [r7, #15]
    break;
 8008c08:	bf00      	nop
  }
  return usb_status;
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c2e:	78fa      	ldrb	r2, [r7, #3]
 8008c30:	4611      	mov	r1, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7f8 ff14 	bl	8001a60 <HAL_PCD_EP_SetStall>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d816      	bhi.n	8008c70 <USBD_LL_StallEP+0x5c>
 8008c42:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <USBD_LL_StallEP+0x34>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c59 	.word	0x08008c59
 8008c4c:	08008c5f 	.word	0x08008c5f
 8008c50:	08008c65 	.word	0x08008c65
 8008c54:	08008c6b 	.word	0x08008c6b
    case HAL_OK :
      usb_status = USBD_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5c:	e00b      	b.n	8008c76 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	73fb      	strb	r3, [r7, #15]
    break;
 8008c62:	e008      	b.n	8008c76 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c64:	2301      	movs	r3, #1
 8008c66:	73fb      	strb	r3, [r7, #15]
    break;
 8008c68:	e005      	b.n	8008c76 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6e:	e002      	b.n	8008c76 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c70:	2303      	movs	r3, #3
 8008c72:	73fb      	strb	r3, [r7, #15]
    break;
 8008c74:	bf00      	nop
  }
  return usb_status;
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c9a:	78fa      	ldrb	r2, [r7, #3]
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7f8 ff40 	bl	8001b24 <HAL_PCD_EP_ClrStall>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d816      	bhi.n	8008cdc <USBD_LL_ClearStallEP+0x5c>
 8008cae:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <USBD_LL_ClearStallEP+0x34>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008cc5 	.word	0x08008cc5
 8008cb8:	08008ccb 	.word	0x08008ccb
 8008cbc:	08008cd1 	.word	0x08008cd1
 8008cc0:	08008cd7 	.word	0x08008cd7
    case HAL_OK :
      usb_status = USBD_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc8:	e00b      	b.n	8008ce2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cce:	e008      	b.n	8008ce2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd4:	e005      	b.n	8008ce2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cda:	e002      	b.n	8008ce2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce0:	bf00      	nop
  }
  return usb_status;
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	da0b      	bge.n	8008d20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d0e:	68f9      	ldr	r1, [r7, #12]
 8008d10:	4613      	mov	r3, r2
 8008d12:	00db      	lsls	r3, r3, #3
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	440b      	add	r3, r1
 8008d1a:	333e      	adds	r3, #62	; 0x3e
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	e00b      	b.n	8008d38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	440b      	add	r3, r1
 8008d32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008d36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7f8 fd2a 	bl	80017bc <HAL_PCD_SetAddress>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d816      	bhi.n	8008da0 <USBD_LL_SetUSBAddress+0x5c>
 8008d72:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <USBD_LL_SetUSBAddress+0x34>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008d89 	.word	0x08008d89
 8008d7c:	08008d8f 	.word	0x08008d8f
 8008d80:	08008d95 	.word	0x08008d95
 8008d84:	08008d9b 	.word	0x08008d9b
    case HAL_OK :
      usb_status = USBD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8c:	e00b      	b.n	8008da6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	73fb      	strb	r3, [r7, #15]
    break;
 8008d92:	e008      	b.n	8008da6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e005      	b.n	8008da6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e002      	b.n	8008da6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	bf00      	nop
  }
  return usb_status;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	607a      	str	r2, [r7, #4]
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008dce:	7af9      	ldrb	r1, [r7, #11]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	f7f8 fe13 	bl	80019fe <HAL_PCD_EP_Transmit>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008ddc:	7dbb      	ldrb	r3, [r7, #22]
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d816      	bhi.n	8008e10 <USBD_LL_Transmit+0x60>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <USBD_LL_Transmit+0x38>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008dff 	.word	0x08008dff
 8008df0:	08008e05 	.word	0x08008e05
 8008df4:	08008e0b 	.word	0x08008e0b
    case HAL_OK :
      usb_status = USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	75fb      	strb	r3, [r7, #23]
    break;
 8008dfc:	e00b      	b.n	8008e16 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	75fb      	strb	r3, [r7, #23]
    break;
 8008e02:	e008      	b.n	8008e16 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e04:	2301      	movs	r3, #1
 8008e06:	75fb      	strb	r3, [r7, #23]
    break;
 8008e08:	e005      	b.n	8008e16 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	75fb      	strb	r3, [r7, #23]
    break;
 8008e0e:	e002      	b.n	8008e16 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	75fb      	strb	r3, [r7, #23]
    break;
 8008e14:	bf00      	nop
  }
  return usb_status;
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e3e:	7af9      	ldrb	r1, [r7, #11]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	f7f8 fd91 	bl	800196a <HAL_PCD_EP_Receive>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008e4c:	7dbb      	ldrb	r3, [r7, #22]
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d816      	bhi.n	8008e80 <USBD_LL_PrepareReceive+0x60>
 8008e52:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <USBD_LL_PrepareReceive+0x38>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008e69 	.word	0x08008e69
 8008e5c:	08008e6f 	.word	0x08008e6f
 8008e60:	08008e75 	.word	0x08008e75
 8008e64:	08008e7b 	.word	0x08008e7b
    case HAL_OK :
      usb_status = USBD_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	75fb      	strb	r3, [r7, #23]
    break;
 8008e6c:	e00b      	b.n	8008e86 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	75fb      	strb	r3, [r7, #23]
    break;
 8008e72:	e008      	b.n	8008e86 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e74:	2301      	movs	r3, #1
 8008e76:	75fb      	strb	r3, [r7, #23]
    break;
 8008e78:	e005      	b.n	8008e86 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	75fb      	strb	r3, [r7, #23]
    break;
 8008e7e:	e002      	b.n	8008e86 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008e80:	2303      	movs	r3, #3
 8008e82:	75fb      	strb	r3, [r7, #23]
    break;
 8008e84:	bf00      	nop
  }
  return usb_status;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7f8 fd91 	bl	80019ce <HAL_PCD_EP_GetRxCount>
 8008eac:	4603      	mov	r3, r0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <HAL_PCDEx_LPM_Callback+0x18>
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d01f      	beq.n	8008f0e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008ece:	e03b      	b.n	8008f48 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008ed8:	f000 f854 	bl	8008f84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008edc:	4b1c      	ldr	r3, [pc, #112]	; (8008f50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	4a1b      	ldr	r2, [pc, #108]	; (8008f50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ee2:	f023 0306 	bic.w	r3, r3, #6
 8008ee6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	6812      	ldr	r2, [r2, #0]
 8008ef6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008efa:	f023 0301 	bic.w	r3, r3, #1
 8008efe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe f9e2 	bl	80072d0 <USBD_LL_Resume>
    break;
 8008f0c:	e01c      	b.n	8008f48 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	6812      	ldr	r2, [r2, #0]
 8008f1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f20:	f043 0301 	orr.w	r3, r3, #1
 8008f24:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe f9b3 	bl	8007298 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f3a:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	4a04      	ldr	r2, [pc, #16]	; (8008f50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f40:	f043 0306 	orr.w	r3, r3, #6
 8008f44:	6113      	str	r3, [r2, #16]
    break;
 8008f46:	bf00      	nop
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	e000ed00 	.word	0xe000ed00

08008f54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f5c:	4b03      	ldr	r3, [pc, #12]	; (8008f6c <USBD_static_malloc+0x18>)
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	20019b40 	.word	0x20019b40

08008f70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]

}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008f88:	f7f7 f96e 	bl	8000268 <SystemClock_Config>
}
 8008f8c:	bf00      	nop
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <memset>:
 8008f90:	4402      	add	r2, r0
 8008f92:	4603      	mov	r3, r0
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d100      	bne.n	8008f9a <memset+0xa>
 8008f98:	4770      	bx	lr
 8008f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f9e:	e7f9      	b.n	8008f94 <memset+0x4>

08008fa0 <__libc_init_array>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	4d0d      	ldr	r5, [pc, #52]	; (8008fd8 <__libc_init_array+0x38>)
 8008fa4:	4c0d      	ldr	r4, [pc, #52]	; (8008fdc <__libc_init_array+0x3c>)
 8008fa6:	1b64      	subs	r4, r4, r5
 8008fa8:	10a4      	asrs	r4, r4, #2
 8008faa:	2600      	movs	r6, #0
 8008fac:	42a6      	cmp	r6, r4
 8008fae:	d109      	bne.n	8008fc4 <__libc_init_array+0x24>
 8008fb0:	4d0b      	ldr	r5, [pc, #44]	; (8008fe0 <__libc_init_array+0x40>)
 8008fb2:	4c0c      	ldr	r4, [pc, #48]	; (8008fe4 <__libc_init_array+0x44>)
 8008fb4:	f000 f826 	bl	8009004 <_init>
 8008fb8:	1b64      	subs	r4, r4, r5
 8008fba:	10a4      	asrs	r4, r4, #2
 8008fbc:	2600      	movs	r6, #0
 8008fbe:	42a6      	cmp	r6, r4
 8008fc0:	d105      	bne.n	8008fce <__libc_init_array+0x2e>
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc8:	4798      	blx	r3
 8008fca:	3601      	adds	r6, #1
 8008fcc:	e7ee      	b.n	8008fac <__libc_init_array+0xc>
 8008fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd2:	4798      	blx	r3
 8008fd4:	3601      	adds	r6, #1
 8008fd6:	e7f2      	b.n	8008fbe <__libc_init_array+0x1e>
 8008fd8:	080090c4 	.word	0x080090c4
 8008fdc:	080090c4 	.word	0x080090c4
 8008fe0:	080090c4 	.word	0x080090c4
 8008fe4:	080090c8 	.word	0x080090c8

08008fe8 <memcpy>:
 8008fe8:	440a      	add	r2, r1
 8008fea:	4291      	cmp	r1, r2
 8008fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ff0:	d100      	bne.n	8008ff4 <memcpy+0xc>
 8008ff2:	4770      	bx	lr
 8008ff4:	b510      	push	{r4, lr}
 8008ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ffe:	4291      	cmp	r1, r2
 8009000:	d1f9      	bne.n	8008ff6 <memcpy+0xe>
 8009002:	bd10      	pop	{r4, pc}

08009004 <_init>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	bf00      	nop
 8009008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900a:	bc08      	pop	{r3}
 800900c:	469e      	mov	lr, r3
 800900e:	4770      	bx	lr

08009010 <_fini>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr


TIM_COUNTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800311c  0800311c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003124  08003124  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800312c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08003138  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003138  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000baa4  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e8  00000000  00000000  0002bb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085b  00000000  00000000  0002dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136f3  00000000  00000000  0002e81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6cf  00000000  00000000  00041f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007affb  00000000  00000000  0004e5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002698  00000000  00000000  000c95d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000cbc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003098 	.word	0x08003098

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003098 	.word	0x08003098

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ac:	f000 fa82 	bl	80009b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b0:	f000 f826 	bl	8000500 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004b4:	f000 f922 	bl	80006fc <MX_GPIO_Init>
	MX_TIM2_Init();
 80004b8:	f000 f894 	bl	80005e4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80004bc:	f000 f8ee 	bl	800069c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <main+0x50>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fd4c 	bl	8001f60 <HAL_TIM_Base_Start_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fae1 	bl	8000a94 <HAL_Delay>
		HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <main+0x54>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	2110      	movs	r1, #16
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fd53 	bl	8000f84 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fad6 	bl	8000a94 <HAL_Delay>
		HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_SET);
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <main+0x54>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	2110      	movs	r1, #16
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fd48 	bl	8000f84 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80004f4:	e7e8      	b.n	80004c8 <main+0x20>
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	20000028 	.word	0x20000028
 80004fc:	50000400 	.word	0x50000400

08000500 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b09d      	sub	sp, #116	; 0x74
 8000504:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000506:	2438      	movs	r4, #56	; 0x38
 8000508:	193b      	adds	r3, r7, r4
 800050a:	0018      	movs	r0, r3
 800050c:	2338      	movs	r3, #56	; 0x38
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f002 fd95 	bl	8003040 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000516:	2324      	movs	r3, #36	; 0x24
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	0018      	movs	r0, r3
 800051c:	2314      	movs	r3, #20
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f002 fd8d 	bl	8003040 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000526:	003b      	movs	r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	2324      	movs	r3, #36	; 0x24
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f002 fd86 	bl	8003040 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <SystemClock_Config+0xdc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a29      	ldr	r2, [pc, #164]	; (80005e0 <SystemClock_Config+0xe0>)
 800053a:	401a      	ands	r2, r3
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <SystemClock_Config+0xdc>)
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0109      	lsls	r1, r1, #4
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000546:	0021      	movs	r1, r4
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2201      	movs	r2, #1
 800054c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	0252      	lsls	r2, r2, #9
 8000554:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0252      	lsls	r2, r2, #9
 8000562:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	0352      	lsls	r2, r2, #13
 800056a:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	0412      	lsls	r2, r2, #16
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000574:	187b      	adds	r3, r7, r1
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fd3c 	bl	8000ff4 <HAL_RCC_OscConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x84>
		Error_Handler();
 8000580:	f000 f91c 	bl	80007bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000584:	2124      	movs	r1, #36	; 0x24
 8000586:	187b      	adds	r3, r7, r1
 8000588:	220f      	movs	r2, #15
 800058a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2203      	movs	r2, #3
 8000590:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2101      	movs	r1, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 f8e7 	bl	800177c <HAL_RCC_ClockConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xb6>
		Error_Handler();
 80005b2:	f000 f903 	bl	80007bc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fafd 	bl	8001bc4 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xd2>
		Error_Handler();
 80005ce:	f000 f8f5 	bl	80007bc <Error_Handler>
	}
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b01d      	add	sp, #116	; 0x74
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40007000 	.word	0x40007000
 80005e0:	ffffe7ff 	.word	0xffffe7ff

080005e4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80005ea:	2308      	movs	r3, #8
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	0018      	movs	r0, r3
 80005f0:	2310      	movs	r3, #16
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f002 fd23 	bl	8003040 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005fa:	003b      	movs	r3, r7
 80005fc:	0018      	movs	r0, r3
 80005fe:	2308      	movs	r3, #8
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f002 fd1c 	bl	8003040 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_TIM2_Init+0xb4>)
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	05d2      	lsls	r2, r2, #23
 800060e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_TIM2_Init+0xb4>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_TIM2_Init+0xb4>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 5;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_TIM2_Init+0xb4>)
 800061e:	2205      	movs	r2, #5
 8000620:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_TIM2_Init+0xb4>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_TIM2_Init+0xb4>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_TIM2_Init+0xb4>)
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fc55 	bl	8001ee0 <HAL_TIM_Base_Init>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM2_Init+0x5a>
		Error_Handler();
 800063a:	f000 f8bf 	bl	80007bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800063e:	2108      	movs	r1, #8
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	0192      	lsls	r2, r2, #6
 8000646:	601a      	str	r2, [r3, #0]
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
	sClockSourceConfig.ClockFilter = 0;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800065a:	187a      	adds	r2, r7, r1
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_TIM2_Init+0xb4>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fdb1 	bl	80021c8 <HAL_TIM_ConfigClockSource>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_TIM2_Init+0x8a>
		Error_Handler();
 800066a:	f000 f8a7 	bl	80007bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066e:	003b      	movs	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000674:	003b      	movs	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800067a:	003a      	movs	r2, r7
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_TIM2_Init+0xb4>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f001 ff83 	bl	800258c <HAL_TIMEx_MasterConfigSynchronization>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_TIM2_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 800068a:	f000 f897 	bl	80007bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b006      	add	sp, #24
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	20000028 	.word	0x20000028

0800069c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_USART1_UART_Init+0x5c>)
 80006a4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006a8:	22e1      	movs	r2, #225	; 0xe1
 80006aa:	0252      	lsls	r2, r2, #9
 80006ac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 ffab 	bl	800263c <HAL_UART_Init>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80006ea:	f000 f867 	bl	80007bc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000068 	.word	0x20000068
 80006f8:	40013800 	.word	0x40013800

080006fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000702:	240c      	movs	r4, #12
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	2314      	movs	r3, #20
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f002 fc97 	bl	8003040 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_GPIO_Init+0x98>)
 8000714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_GPIO_Init+0x98>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	430a      	orrs	r2, r1
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_GPIO_Init+0x98>)
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_GPIO_Init+0x98>)
 800072c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_GPIO_Init+0x98>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_GPIO_Init+0x98>)
 8000738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_GPIO_Init+0x98>)
 8000744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_GPIO_Init+0x98>)
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_GPIO_Init+0x98>)
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	2202      	movs	r2, #2
 8000754:	4013      	ands	r3, r2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_GPIO_Init+0x9c>)
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	0018      	movs	r0, r3
 8000762:	f000 fc0f 	bl	8000f84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BSP_LED_Pin */
	GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000766:	0021      	movs	r1, r4
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2210      	movs	r2, #16
 800076c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000780:	187b      	adds	r3, r7, r1
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <MX_GPIO_Init+0x9c>)
 8000784:	0019      	movs	r1, r3
 8000786:	0010      	movs	r0, r2
 8000788:	f000 fa86 	bl	8000c98 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b009      	add	sp, #36	; 0x24
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	50000400 	.word	0x50000400

0800079c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(BSP_LED_GPIO_Port, BSP_LED_Pin);
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80007a6:	2110      	movs	r1, #16
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 fc08 	bl	8000fbe <HAL_GPIO_TogglePin>
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	50000400 	.word	0x50000400

080007bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <HAL_MspInit+0x24>)
 80007ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x24>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	430a      	orrs	r2, r1
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <HAL_MspInit+0x24>)
 80007da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_MspInit+0x24>)
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0549      	lsls	r1, r1, #21
 80007e2:	430a      	orrs	r2, r1
 80007e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	240c      	movs	r4, #12
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	0018      	movs	r0, r3
 80007fe:	2314      	movs	r3, #20
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f002 fc1c 	bl	8003040 <memset>
  if(htim_base->Instance==TIM2)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	429a      	cmp	r2, r3
 8000812:	d130      	bne.n	8000876 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <HAL_TIM_Base_MspInit+0x90>)
 8000816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_TIM_Base_MspInit+0x90>)
 800081a:	2101      	movs	r1, #1
 800081c:	430a      	orrs	r2, r1
 800081e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_TIM_Base_MspInit+0x90>)
 8000822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_TIM_Base_MspInit+0x90>)
 8000826:	2101      	movs	r1, #1
 8000828:	430a      	orrs	r2, r1
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_TIM_Base_MspInit+0x90>)
 800082e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000830:	2201      	movs	r2, #1
 8000832:	4013      	ands	r3, r2
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000838:	0021      	movs	r1, r4
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2202      	movs	r2, #2
 8000844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2205      	movs	r2, #5
 8000856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	187a      	adds	r2, r7, r1
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fa19 	bl	8000c98 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	200f      	movs	r0, #15
 800086c:	f000 f9e2 	bl	8000c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000870:	200f      	movs	r0, #15
 8000872:	f000 f9f4 	bl	8000c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b009      	add	sp, #36	; 0x24
 800087c:	bd90      	pop	{r4, r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	240c      	movs	r4, #12
 800088e:	193b      	adds	r3, r7, r4
 8000890:	0018      	movs	r0, r3
 8000892:	2314      	movs	r3, #20
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	f002 fbd2 	bl	8003040 <memset>
  if(huart->Instance==USART1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a18      	ldr	r2, [pc, #96]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d12a      	bne.n	80008fc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	01c9      	lsls	r1, r1, #7
 80008b0:	430a      	orrs	r2, r1
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	430a      	orrs	r2, r1
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	2201      	movs	r2, #1
 80008c6:	4013      	ands	r3, r2
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	22c0      	movs	r2, #192	; 0xc0
 80008d0:	00d2      	lsls	r2, r2, #3
 80008d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	0021      	movs	r1, r4
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2202      	movs	r2, #2
 80008da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2203      	movs	r2, #3
 80008e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2204      	movs	r2, #4
 80008ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	187a      	adds	r2, r7, r1
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 f9ce 	bl	8000c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b009      	add	sp, #36	; 0x24
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	40013800 	.word	0x40013800
 8000908:	40021000 	.word	0x40021000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f894 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <TIM2_IRQHandler+0x14>)
 8000942:	0018      	movs	r0, r3
 8000944:	f001 fb58 	bl	8001ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	20000028 	.word	0x20000028

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000964:	f7ff fff6 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098e:	f002 fb5f 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000992:	f7ff fd89 	bl	80004a8 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   r0, =_estack
 8000998:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a4:	0800312c 	.word	0x0800312c
  ldr r2, =_sbss
 80009a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ac:	200000f4 	.word	0x200000f4

080009b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_COMP_IRQHandler>
	...

080009b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_Init+0x3c>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_Init+0x3c>)
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	430a      	orrs	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 f811 	bl	80009f4 <HAL_InitTick>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d003      	beq.n	80009de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	e001      	b.n	80009e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009de:	f7ff fef3 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	40022000 	.word	0x40022000

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_InitTick+0x5c>)
 80009fe:	681c      	ldr	r4, [r3, #0]
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_InitTick+0x60>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	0019      	movs	r1, r3
 8000a06:	23fa      	movs	r3, #250	; 0xfa
 8000a08:	0098      	lsls	r0, r3, #2
 8000a0a:	f7ff fb7d 	bl	8000108 <__udivsi3>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	0019      	movs	r1, r3
 8000a12:	0020      	movs	r0, r4
 8000a14:	f7ff fb78 	bl	8000108 <__udivsi3>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 f92f 	bl	8000c7e <HAL_SYSTICK_Config>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e00f      	b.n	8000a48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d80b      	bhi.n	8000a46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 f8fc 	bl	8000c34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_InitTick+0x64>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b003      	add	sp, #12
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x1c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	001a      	movs	r2, r3
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x20>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	18d2      	adds	r2, r2, r3
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_IncTick+0x20>)
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	200000f0 	.word	0x200000f0

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <HAL_GetTick+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	200000f0 	.word	0x200000f0

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff fff0 	bl	8000a80 <HAL_GetTick>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	f7ff ffe0 	bl	8000a80 <HAL_GetTick>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000008 	.word	0x20000008

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b7f      	cmp	r3, #127	; 0x7f
 8000aee:	d809      	bhi.n	8000b04 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	001a      	movs	r2, r3
 8000af6:	231f      	movs	r3, #31
 8000af8:	401a      	ands	r2, r3
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_EnableIRQ+0x30>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	4091      	lsls	r1, r2
 8000b00:	000a      	movs	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
  }
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	0002      	movs	r2, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b7f      	cmp	r3, #127	; 0x7f
 8000b24:	d828      	bhi.n	8000b78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b26:	4a2f      	ldr	r2, [pc, #188]	; (8000be4 <__NVIC_SetPriority+0xd4>)
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	33c0      	adds	r3, #192	; 0xc0
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	589b      	ldr	r3, [r3, r2]
 8000b36:	1dfa      	adds	r2, r7, #7
 8000b38:	7812      	ldrb	r2, [r2, #0]
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	400a      	ands	r2, r1
 8000b40:	00d2      	lsls	r2, r2, #3
 8000b42:	21ff      	movs	r1, #255	; 0xff
 8000b44:	4091      	lsls	r1, r2
 8000b46:	000a      	movs	r2, r1
 8000b48:	43d2      	mvns	r2, r2
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	019b      	lsls	r3, r3, #6
 8000b52:	22ff      	movs	r2, #255	; 0xff
 8000b54:	401a      	ands	r2, r3
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	4003      	ands	r3, r0
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b64:	481f      	ldr	r0, [pc, #124]	; (8000be4 <__NVIC_SetPriority+0xd4>)
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	33c0      	adds	r3, #192	; 0xc0
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b76:	e031      	b.n	8000bdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <__NVIC_SetPriority+0xd8>)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0019      	movs	r1, r3
 8000b80:	230f      	movs	r3, #15
 8000b82:	400b      	ands	r3, r1
 8000b84:	3b08      	subs	r3, #8
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3306      	adds	r3, #6
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	3304      	adds	r3, #4
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1dfa      	adds	r2, r7, #7
 8000b94:	7812      	ldrb	r2, [r2, #0]
 8000b96:	0011      	movs	r1, r2
 8000b98:	2203      	movs	r2, #3
 8000b9a:	400a      	ands	r2, r1
 8000b9c:	00d2      	lsls	r2, r2, #3
 8000b9e:	21ff      	movs	r1, #255	; 0xff
 8000ba0:	4091      	lsls	r1, r2
 8000ba2:	000a      	movs	r2, r1
 8000ba4:	43d2      	mvns	r2, r2
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	019b      	lsls	r3, r3, #6
 8000bae:	22ff      	movs	r2, #255	; 0xff
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	2303      	movs	r3, #3
 8000bba:	4003      	ands	r3, r0
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <__NVIC_SetPriority+0xd8>)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	001c      	movs	r4, r3
 8000bc8:	230f      	movs	r3, #15
 8000bca:	4023      	ands	r3, r4
 8000bcc:	3b08      	subs	r3, #8
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	3306      	adds	r3, #6
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	18c3      	adds	r3, r0, r3
 8000bd8:	3304      	adds	r3, #4
 8000bda:	601a      	str	r2, [r3, #0]
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b003      	add	sp, #12
 8000be2:	bd90      	pop	{r4, r7, pc}
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	1e5a      	subs	r2, r3, #1
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	045b      	lsls	r3, r3, #17
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d301      	bcc.n	8000c04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c00:	2301      	movs	r3, #1
 8000c02:	e010      	b.n	8000c26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <SysTick_Config+0x44>)
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	425b      	negs	r3, r3
 8000c10:	2103      	movs	r1, #3
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff ff7c 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x44>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x44>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	210f      	movs	r1, #15
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	1c02      	adds	r2, r0, #0
 8000c44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b004      	add	sp, #16
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	0002      	movs	r2, r0
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff ff33 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff ffaf 	bl	8000bec <SysTick_Config>
 8000c8e:	0003      	movs	r3, r0
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cae:	e14f      	b.n	8000f50 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <HAL_GPIO_Init+0x30>
 8000cc6:	e140      	b.n	8000f4a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2203      	movs	r2, #3
 8000cce:	4013      	ands	r3, r2
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d005      	beq.n	8000ce0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2203      	movs	r2, #3
 8000cda:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d130      	bne.n	8000d42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	409a      	lsls	r2, r3
 8000cee:	0013      	movs	r3, r2
 8000cf0:	43da      	mvns	r2, r3
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	409a      	lsls	r2, r3
 8000d02:	0013      	movs	r3, r2
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2203      	movs	r2, #3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d017      	beq.n	8000d7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2203      	movs	r2, #3
 8000d84:	4013      	ands	r3, r2
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d123      	bne.n	8000dd2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	58d3      	ldr	r3, [r2, r3]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2207      	movs	r2, #7
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	43da      	mvns	r2, r3
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2107      	movs	r1, #7
 8000db6:	400b      	ands	r3, r1
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	6939      	ldr	r1, [r7, #16]
 8000dd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	43da      	mvns	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2203      	movs	r2, #3
 8000df0:	401a      	ands	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	23c0      	movs	r3, #192	; 0xc0
 8000e0c:	029b      	lsls	r3, r3, #10
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d100      	bne.n	8000e14 <HAL_GPIO_Init+0x17c>
 8000e12:	e09a      	b.n	8000f4a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b54      	ldr	r3, [pc, #336]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e18:	4b53      	ldr	r3, [pc, #332]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e20:	4a52      	ldr	r2, [pc, #328]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	589b      	ldr	r3, [r3, r2]
 8000e2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2203      	movs	r2, #3
 8000e32:	4013      	ands	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	43da      	mvns	r2, r3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	23a0      	movs	r3, #160	; 0xa0
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x1ea>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <HAL_GPIO_Init+0x2d8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x1e6>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a46      	ldr	r2, [pc, #280]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a45      	ldr	r2, [pc, #276]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x1de>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a44      	ldr	r2, [pc, #272]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x1da>
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e008      	b.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e72:	2306      	movs	r3, #6
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e82:	2300      	movs	r3, #0
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	2103      	movs	r1, #3
 8000e88:	400a      	ands	r2, r1
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e94:	4935      	ldr	r1, [pc, #212]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	035b      	lsls	r3, r3, #13
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	039b      	lsls	r3, r3, #14
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ef0:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	029b      	lsls	r3, r3, #10
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43da      	mvns	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	025b      	lsls	r3, r3, #9
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	40da      	lsrs	r2, r3
 8000f58:	1e13      	subs	r3, r2, #0
 8000f5a:	d000      	beq.n	8000f5e <HAL_GPIO_Init+0x2c6>
 8000f5c:	e6a8      	b.n	8000cb0 <HAL_GPIO_Init+0x18>
  }
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b006      	add	sp, #24
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	50000400 	.word	0x50000400
 8000f74:	50000800 	.word	0x50000800
 8000f78:	50000c00 	.word	0x50000c00
 8000f7c:	50001c00 	.word	0x50001c00
 8000f80:	40010400 	.word	0x40010400

08000f84 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	0008      	movs	r0, r1
 8000f8e:	0011      	movs	r1, r2
 8000f90:	1cbb      	adds	r3, r7, #2
 8000f92:	1c02      	adds	r2, r0, #0
 8000f94:	801a      	strh	r2, [r3, #0]
 8000f96:	1c7b      	adds	r3, r7, #1
 8000f98:	1c0a      	adds	r2, r1, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f9c:	1c7b      	adds	r3, r7, #1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa4:	1cbb      	adds	r3, r7, #2
 8000fa6:	881a      	ldrh	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000fae:	1cbb      	adds	r3, r7, #2
 8000fb0:	881a      	ldrh	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	1cbb      	adds	r3, r7, #2
 8000fca:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fd2:	1cbb      	adds	r3, r7, #2
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	041a      	lsls	r2, r3, #16
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	1cb9      	adds	r1, r7, #2
 8000fe2:	8809      	ldrh	r1, [r1, #0]
 8000fe4:	400b      	ands	r3, r1
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	f000 fbaf 	bl	8001766 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001008:	4bcf      	ldr	r3, [pc, #828]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	220c      	movs	r2, #12
 800100e:	4013      	ands	r3, r2
 8001010:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001012:	4bcd      	ldr	r3, [pc, #820]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	025b      	lsls	r3, r3, #9
 800101a:	4013      	ands	r3, r2
 800101c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2201      	movs	r2, #1
 8001024:	4013      	ands	r3, r2
 8001026:	d100      	bne.n	800102a <HAL_RCC_OscConfig+0x36>
 8001028:	e07e      	b.n	8001128 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	2b08      	cmp	r3, #8
 800102e:	d007      	beq.n	8001040 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	2b0c      	cmp	r3, #12
 8001034:	d112      	bne.n	800105c <HAL_RCC_OscConfig+0x68>
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	025b      	lsls	r3, r3, #9
 800103c:	429a      	cmp	r2, r3
 800103e:	d10d      	bne.n	800105c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	4bc1      	ldr	r3, [pc, #772]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	029b      	lsls	r3, r3, #10
 8001048:	4013      	ands	r3, r2
 800104a:	d100      	bne.n	800104e <HAL_RCC_OscConfig+0x5a>
 800104c:	e06b      	b.n	8001126 <HAL_RCC_OscConfig+0x132>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d167      	bne.n	8001126 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	f000 fb85 	bl	8001766 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	025b      	lsls	r3, r3, #9
 8001064:	429a      	cmp	r2, r3
 8001066:	d107      	bne.n	8001078 <HAL_RCC_OscConfig+0x84>
 8001068:	4bb7      	ldr	r3, [pc, #732]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4bb6      	ldr	r3, [pc, #728]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	0249      	lsls	r1, r1, #9
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e027      	b.n	80010c8 <HAL_RCC_OscConfig+0xd4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	23a0      	movs	r3, #160	; 0xa0
 800107e:	02db      	lsls	r3, r3, #11
 8001080:	429a      	cmp	r2, r3
 8001082:	d10e      	bne.n	80010a2 <HAL_RCC_OscConfig+0xae>
 8001084:	4bb0      	ldr	r3, [pc, #704]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4baf      	ldr	r3, [pc, #700]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	02c9      	lsls	r1, r1, #11
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	4bad      	ldr	r3, [pc, #692]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4bac      	ldr	r3, [pc, #688]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0249      	lsls	r1, r1, #9
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e012      	b.n	80010c8 <HAL_RCC_OscConfig+0xd4>
 80010a2:	4ba9      	ldr	r3, [pc, #676]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4ba8      	ldr	r3, [pc, #672]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80010a8:	49a8      	ldr	r1, [pc, #672]	; (800134c <HAL_RCC_OscConfig+0x358>)
 80010aa:	400a      	ands	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	4ba6      	ldr	r3, [pc, #664]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	025b      	lsls	r3, r3, #9
 80010b6:	4013      	ands	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4ba2      	ldr	r3, [pc, #648]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4ba1      	ldr	r3, [pc, #644]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80010c2:	49a3      	ldr	r1, [pc, #652]	; (8001350 <HAL_RCC_OscConfig+0x35c>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d015      	beq.n	80010fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcd6 	bl	8000a80 <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010d8:	e009      	b.n	80010ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010da:	f7ff fcd1 	bl	8000a80 <HAL_GetTick>
 80010de:	0002      	movs	r2, r0
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b64      	cmp	r3, #100	; 0x64
 80010e6:	d902      	bls.n	80010ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	f000 fb3c 	bl	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ee:	4b96      	ldr	r3, [pc, #600]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	029b      	lsls	r3, r3, #10
 80010f6:	4013      	ands	r3, r2
 80010f8:	d0ef      	beq.n	80010da <HAL_RCC_OscConfig+0xe6>
 80010fa:	e015      	b.n	8001128 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fcc0 	bl	8000a80 <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fcbb 	bl	8000a80 <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b64      	cmp	r3, #100	; 0x64
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e326      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001118:	4b8b      	ldr	r3, [pc, #556]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	029b      	lsls	r3, r3, #10
 8001120:	4013      	ands	r3, r2
 8001122:	d1f0      	bne.n	8001106 <HAL_RCC_OscConfig+0x112>
 8001124:	e000      	b.n	8001128 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2202      	movs	r2, #2
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_RCC_OscConfig+0x140>
 8001132:	e08b      	b.n	800124c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d005      	beq.n	800114c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	2b0c      	cmp	r3, #12
 8001144:	d13e      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1d0>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d13b      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800114c:	4b7e      	ldr	r3, [pc, #504]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2204      	movs	r2, #4
 8001152:	4013      	ands	r3, r2
 8001154:	d004      	beq.n	8001160 <HAL_RCC_OscConfig+0x16c>
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e302      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b79      	ldr	r3, [pc, #484]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a7b      	ldr	r2, [pc, #492]	; (8001354 <HAL_RCC_OscConfig+0x360>)
 8001166:	4013      	ands	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	021a      	lsls	r2, r3, #8
 8001170:	4b75      	ldr	r3, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001172:	430a      	orrs	r2, r1
 8001174:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001176:	4b74      	ldr	r3, [pc, #464]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2209      	movs	r2, #9
 800117c:	4393      	bics	r3, r2
 800117e:	0019      	movs	r1, r3
 8001180:	4b71      	ldr	r3, [pc, #452]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001188:	f000 fc40 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 800118c:	0001      	movs	r1, r0
 800118e:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	220f      	movs	r2, #15
 8001196:	4013      	ands	r3, r2
 8001198:	4a6f      	ldr	r2, [pc, #444]	; (8001358 <HAL_RCC_OscConfig+0x364>)
 800119a:	5cd3      	ldrb	r3, [r2, r3]
 800119c:	000a      	movs	r2, r1
 800119e:	40da      	lsrs	r2, r3
 80011a0:	4b6e      	ldr	r3, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x368>)
 80011a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80011a4:	4b6e      	ldr	r3, [pc, #440]	; (8001360 <HAL_RCC_OscConfig+0x36c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2513      	movs	r5, #19
 80011aa:	197c      	adds	r4, r7, r5
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff fc21 	bl	80009f4 <HAL_InitTick>
 80011b2:	0003      	movs	r3, r0
 80011b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80011b6:	197b      	adds	r3, r7, r5
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d046      	beq.n	800124c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80011be:	197b      	adds	r3, r7, r5
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	e2d0      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d027      	beq.n	800121a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2209      	movs	r2, #9
 80011d0:	4393      	bics	r3, r2
 80011d2:	0019      	movs	r1, r3
 80011d4:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc50 	bl	8000a80 <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc4b 	bl	8000a80 <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e2b6      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f8:	4b53      	ldr	r3, [pc, #332]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2204      	movs	r2, #4
 80011fe:	4013      	ands	r3, r2
 8001200:	d0f1      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b51      	ldr	r3, [pc, #324]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4a53      	ldr	r2, [pc, #332]	; (8001354 <HAL_RCC_OscConfig+0x360>)
 8001208:	4013      	ands	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	021a      	lsls	r2, r3, #8
 8001212:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001214:	430a      	orrs	r2, r1
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	e018      	b.n	800124c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121a:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001220:	2101      	movs	r1, #1
 8001222:	438a      	bics	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001226:	f7ff fc2b 	bl	8000a80 <HAL_GetTick>
 800122a:	0003      	movs	r3, r0
 800122c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fc26 	bl	8000a80 <HAL_GetTick>
 8001234:	0002      	movs	r2, r0
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e291      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2204      	movs	r2, #4
 8001248:	4013      	ands	r3, r2
 800124a:	d1f1      	bne.n	8001230 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2210      	movs	r2, #16
 8001252:	4013      	ands	r3, r2
 8001254:	d100      	bne.n	8001258 <HAL_RCC_OscConfig+0x264>
 8001256:	e0a1      	b.n	800139c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d140      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4013      	ands	r3, r2
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x282>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e277      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a3a      	ldr	r2, [pc, #232]	; (8001364 <HAL_RCC_OscConfig+0x370>)
 800127c:	4013      	ands	r3, r2
 800127e:	0019      	movs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001286:	430a      	orrs	r2, r1
 8001288:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	0a19      	lsrs	r1, r3, #8
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	061a      	lsls	r2, r3, #24
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800129a:	430a      	orrs	r2, r1
 800129c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	0b5b      	lsrs	r3, r3, #13
 80012a4:	3301      	adds	r3, #1
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	0212      	lsls	r2, r2, #8
 80012aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	210f      	movs	r1, #15
 80012b4:	400b      	ands	r3, r1
 80012b6:	4928      	ldr	r1, [pc, #160]	; (8001358 <HAL_RCC_OscConfig+0x364>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x368>)
 80012be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_RCC_OscConfig+0x36c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2513      	movs	r5, #19
 80012c6:	197c      	adds	r4, r7, r5
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff fb93 	bl	80009f4 <HAL_InitTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80012d2:	197b      	adds	r3, r7, r5
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d060      	beq.n	800139c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80012da:	197b      	adds	r3, r7, r5
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	e242      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d03f      	beq.n	8001368 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	0049      	lsls	r1, r1, #1
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fbc3 	bl	8000a80 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001300:	f7ff fbbe 	bl	8000a80 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e229      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4013      	ands	r3, r2
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <HAL_RCC_OscConfig+0x370>)
 8001324:	4013      	ands	r3, r2
 8001326:	0019      	movs	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 800132e:	430a      	orrs	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	0a19      	lsrs	r1, r3, #8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	061a      	lsls	r2, r3, #24
 8001340:	4b01      	ldr	r3, [pc, #4]	; (8001348 <HAL_RCC_OscConfig+0x354>)
 8001342:	430a      	orrs	r2, r1
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	e029      	b.n	800139c <HAL_RCC_OscConfig+0x3a8>
 8001348:	40021000 	.word	0x40021000
 800134c:	fffeffff 	.word	0xfffeffff
 8001350:	fffbffff 	.word	0xfffbffff
 8001354:	ffffe0ff 	.word	0xffffe0ff
 8001358:	080030b0 	.word	0x080030b0
 800135c:	20000000 	.word	0x20000000
 8001360:	20000004 	.word	0x20000004
 8001364:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001368:	4bbd      	ldr	r3, [pc, #756]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4bbc      	ldr	r3, [pc, #752]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 800136e:	49bd      	ldr	r1, [pc, #756]	; (8001664 <HAL_RCC_OscConfig+0x670>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fb84 	bl	8000a80 <HAL_GetTick>
 8001378:	0003      	movs	r3, r0
 800137a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137e:	f7ff fb7f 	bl	8000a80 <HAL_GetTick>
 8001382:	0002      	movs	r2, r0
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1ea      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001390:	4bb3      	ldr	r3, [pc, #716]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4013      	ands	r3, r2
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2208      	movs	r2, #8
 80013a2:	4013      	ands	r3, r2
 80013a4:	d036      	beq.n	8001414 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d019      	beq.n	80013e2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ae:	4bac      	ldr	r3, [pc, #688]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80013b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013b2:	4bab      	ldr	r3, [pc, #684]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fb61 	bl	8000a80 <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c4:	f7ff fb5c 	bl	8000a80 <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1c7      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013d6:	4ba2      	ldr	r3, [pc, #648]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80013d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	d0f1      	beq.n	80013c4 <HAL_RCC_OscConfig+0x3d0>
 80013e0:	e018      	b.n	8001414 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e2:	4b9f      	ldr	r3, [pc, #636]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80013e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e6:	4b9e      	ldr	r3, [pc, #632]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	438a      	bics	r2, r1
 80013ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fb47 	bl	8000a80 <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f8:	f7ff fb42 	bl	8000a80 <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1ad      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800140a:	4b95      	ldr	r3, [pc, #596]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 800140c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d1f1      	bne.n	80013f8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2204      	movs	r2, #4
 800141a:	4013      	ands	r3, r2
 800141c:	d100      	bne.n	8001420 <HAL_RCC_OscConfig+0x42c>
 800141e:	e0ae      	b.n	800157e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001420:	2027      	movs	r0, #39	; 0x27
 8001422:	183b      	adds	r3, r7, r0
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001428:	4b8d      	ldr	r3, [pc, #564]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 800142a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	4013      	ands	r3, r2
 8001432:	d109      	bne.n	8001448 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	4b8a      	ldr	r3, [pc, #552]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001438:	4b89      	ldr	r3, [pc, #548]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	0549      	lsls	r1, r1, #21
 800143e:	430a      	orrs	r2, r1
 8001440:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001442:	183b      	adds	r3, r7, r0
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	4b87      	ldr	r3, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x674>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4013      	ands	r3, r2
 8001452:	d11a      	bne.n	800148a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <HAL_RCC_OscConfig+0x674>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b83      	ldr	r3, [pc, #524]	; (8001668 <HAL_RCC_OscConfig+0x674>)
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	0049      	lsls	r1, r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff fb0d 	bl	8000a80 <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146c:	f7ff fb08 	bl	8000a80 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e173      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147e:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <HAL_RCC_OscConfig+0x674>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4013      	ands	r3, r2
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	429a      	cmp	r2, r3
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_OscConfig+0x4b2>
 8001496:	4b72      	ldr	r3, [pc, #456]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800149a:	4b71      	ldr	r3, [pc, #452]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0049      	lsls	r1, r1, #1
 80014a0:	430a      	orrs	r2, r1
 80014a2:	651a      	str	r2, [r3, #80]	; 0x50
 80014a4:	e031      	b.n	800150a <HAL_RCC_OscConfig+0x516>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4d4>
 80014ae:	4b6c      	ldr	r3, [pc, #432]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014b2:	4b6b      	ldr	r3, [pc, #428]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014b4:	496b      	ldr	r1, [pc, #428]	; (8001664 <HAL_RCC_OscConfig+0x670>)
 80014b6:	400a      	ands	r2, r1
 80014b8:	651a      	str	r2, [r3, #80]	; 0x50
 80014ba:	4b69      	ldr	r3, [pc, #420]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014be:	4b68      	ldr	r3, [pc, #416]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014c0:	496a      	ldr	r1, [pc, #424]	; (800166c <HAL_RCC_OscConfig+0x678>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	651a      	str	r2, [r3, #80]	; 0x50
 80014c6:	e020      	b.n	800150a <HAL_RCC_OscConfig+0x516>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	23a0      	movs	r3, #160	; 0xa0
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10e      	bne.n	80014f2 <HAL_RCC_OscConfig+0x4fe>
 80014d4:	4b62      	ldr	r3, [pc, #392]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014d8:	4b61      	ldr	r3, [pc, #388]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	00c9      	lsls	r1, r1, #3
 80014de:	430a      	orrs	r2, r1
 80014e0:	651a      	str	r2, [r3, #80]	; 0x50
 80014e2:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e6:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	0049      	lsls	r1, r1, #1
 80014ec:	430a      	orrs	r2, r1
 80014ee:	651a      	str	r2, [r3, #80]	; 0x50
 80014f0:	e00b      	b.n	800150a <HAL_RCC_OscConfig+0x516>
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f6:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80014f8:	495a      	ldr	r1, [pc, #360]	; (8001664 <HAL_RCC_OscConfig+0x670>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	651a      	str	r2, [r3, #80]	; 0x50
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001502:	4b57      	ldr	r3, [pc, #348]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001504:	4959      	ldr	r1, [pc, #356]	; (800166c <HAL_RCC_OscConfig+0x678>)
 8001506:	400a      	ands	r2, r1
 8001508:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d015      	beq.n	800153e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fab5 	bl	8000a80 <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800151a:	e009      	b.n	8001530 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151c:	f7ff fab0 	bl	8000a80 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	4a52      	ldr	r2, [pc, #328]	; (8001670 <HAL_RCC_OscConfig+0x67c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e11a      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d0ef      	beq.n	800151c <HAL_RCC_OscConfig+0x528>
 800153c:	e014      	b.n	8001568 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fa9f 	bl	8000a80 <HAL_GetTick>
 8001542:	0003      	movs	r3, r0
 8001544:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001546:	e009      	b.n	800155c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001548:	f7ff fa9a 	bl	8000a80 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	4a47      	ldr	r2, [pc, #284]	; (8001670 <HAL_RCC_OscConfig+0x67c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e104      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 800155e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4013      	ands	r3, r2
 8001566:	d1ef      	bne.n	8001548 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001568:	2327      	movs	r3, #39	; 0x27
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d105      	bne.n	800157e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001578:	493e      	ldr	r1, [pc, #248]	; (8001674 <HAL_RCC_OscConfig+0x680>)
 800157a:	400a      	ands	r2, r1
 800157c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2220      	movs	r2, #32
 8001584:	4013      	ands	r3, r2
 8001586:	d049      	beq.n	800161c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d026      	beq.n	80015de <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001590:	4b33      	ldr	r3, [pc, #204]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001596:	2101      	movs	r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 800159e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a0:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	430a      	orrs	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_RCC_OscConfig+0x684>)
 80015aa:	6a1a      	ldr	r2, [r3, #32]
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_RCC_OscConfig+0x684>)
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	0189      	lsls	r1, r1, #6
 80015b2:	430a      	orrs	r2, r1
 80015b4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fa63 	bl	8000a80 <HAL_GetTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c0:	f7ff fa5e 	bl	8000a80 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0c9      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d0f1      	beq.n	80015c0 <HAL_RCC_OscConfig+0x5cc>
 80015dc:	e01e      	b.n	800161c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	438a      	bics	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_RCC_OscConfig+0x684>)
 80015ec:	6a1a      	ldr	r2, [r3, #32]
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_RCC_OscConfig+0x684>)
 80015f0:	4922      	ldr	r1, [pc, #136]	; (800167c <HAL_RCC_OscConfig+0x688>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fa43 	bl	8000a80 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001600:	f7ff fa3e 	bl	8000a80 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0a9      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	d1f1      	bne.n	8001600 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	2b00      	cmp	r3, #0
 8001622:	d100      	bne.n	8001626 <HAL_RCC_OscConfig+0x632>
 8001624:	e09e      	b.n	8001764 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	2b0c      	cmp	r3, #12
 800162a:	d100      	bne.n	800162e <HAL_RCC_OscConfig+0x63a>
 800162c:	e077      	b.n	800171e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	2b02      	cmp	r3, #2
 8001634:	d158      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_OscConfig+0x66c>)
 800163c:	4910      	ldr	r1, [pc, #64]	; (8001680 <HAL_RCC_OscConfig+0x68c>)
 800163e:	400a      	ands	r2, r1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fa1d 	bl	8000a80 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800164a:	e01b      	b.n	8001684 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fa18 	bl	8000a80 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d914      	bls.n	8001684 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e083      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	40021000 	.word	0x40021000
 8001664:	fffffeff 	.word	0xfffffeff
 8001668:	40007000 	.word	0x40007000
 800166c:	fffffbff 	.word	0xfffffbff
 8001670:	00001388 	.word	0x00001388
 8001674:	efffffff 	.word	0xefffffff
 8001678:	40010000 	.word	0x40010000
 800167c:	ffffdfff 	.word	0xffffdfff
 8001680:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	049b      	lsls	r3, r3, #18
 800168c:	4013      	ands	r3, r2
 800168e:	d1dd      	bne.n	800164c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4a37      	ldr	r2, [pc, #220]	; (8001774 <HAL_RCC_OscConfig+0x780>)
 8001696:	4013      	ands	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a8:	431a      	orrs	r2, r3
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b0:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	0449      	lsls	r1, r1, #17
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff f9df 	bl	8000a80 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff f9da 	bl	8000a80 <HAL_GetTick>
 80016cc:	0002      	movs	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e045      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	049b      	lsls	r3, r3, #18
 80016e2:	4013      	ands	r3, r2
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x6d4>
 80016e6:	e03d      	b.n	8001764 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 80016ee:	4922      	ldr	r1, [pc, #136]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff f9c4 	bl	8000a80 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff f9bf 	bl	8000a80 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e02a      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	049b      	lsls	r3, r3, #18
 8001718:	4013      	ands	r3, r2
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x70a>
 800171c:	e022      	b.n	8001764 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e01d      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_RCC_OscConfig+0x77c>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	025b      	lsls	r3, r3, #9
 8001736:	401a      	ands	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	429a      	cmp	r2, r3
 800173e:	d10f      	bne.n	8001760 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	23f0      	movs	r3, #240	; 0xf0
 8001744:	039b      	lsls	r3, r3, #14
 8001746:	401a      	ands	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	23c0      	movs	r3, #192	; 0xc0
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b00a      	add	sp, #40	; 0x28
 800176c:	bdb0      	pop	{r4, r5, r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	40021000 	.word	0x40021000
 8001774:	ff02ffff 	.word	0xff02ffff
 8001778:	feffffff 	.word	0xfeffffff

0800177c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800177c:	b5b0      	push	{r4, r5, r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e128      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001790:	4b96      	ldr	r3, [pc, #600]	; (80019ec <HAL_RCC_ClockConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	4013      	ands	r3, r2
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d91e      	bls.n	80017dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b93      	ldr	r3, [pc, #588]	; (80019ec <HAL_RCC_ClockConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2201      	movs	r2, #1
 80017a4:	4393      	bics	r3, r2
 80017a6:	0019      	movs	r1, r3
 80017a8:	4b90      	ldr	r3, [pc, #576]	; (80019ec <HAL_RCC_ClockConfig+0x270>)
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017b0:	f7ff f966 	bl	8000a80 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b8:	e009      	b.n	80017ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ba:	f7ff f961 	bl	8000a80 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a8a      	ldr	r2, [pc, #552]	; (80019f0 <HAL_RCC_ClockConfig+0x274>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e109      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b87      	ldr	r3, [pc, #540]	; (80019ec <HAL_RCC_ClockConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1ee      	bne.n	80017ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d009      	beq.n	80017fa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e6:	4b83      	ldr	r3, [pc, #524]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	22f0      	movs	r2, #240	; 0xf0
 80017ec:	4393      	bics	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	4b7f      	ldr	r3, [pc, #508]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	4013      	ands	r3, r2
 8001802:	d100      	bne.n	8001806 <HAL_RCC_ClockConfig+0x8a>
 8001804:	e089      	b.n	800191a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800180e:	4b79      	ldr	r3, [pc, #484]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	029b      	lsls	r3, r3, #10
 8001816:	4013      	ands	r3, r2
 8001818:	d120      	bne.n	800185c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e0e1      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	049b      	lsls	r3, r3, #18
 800182e:	4013      	ands	r3, r2
 8001830:	d114      	bne.n	800185c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0d5      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d106      	bne.n	800184c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800183e:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2204      	movs	r2, #4
 8001844:	4013      	ands	r3, r2
 8001846:	d109      	bne.n	800185c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0ca      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800184c:	4b69      	ldr	r3, [pc, #420]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0c2      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185c:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2203      	movs	r2, #3
 8001862:	4393      	bics	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 800186c:	430a      	orrs	r2, r1
 800186e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001870:	f7ff f906 	bl	8000a80 <HAL_GetTick>
 8001874:	0003      	movs	r3, r0
 8001876:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d111      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001880:	e009      	b.n	8001896 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001882:	f7ff f8fd 	bl	8000a80 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_RCC_ClockConfig+0x274>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0a5      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001896:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	220c      	movs	r2, #12
 800189c:	4013      	ands	r3, r2
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d1ef      	bne.n	8001882 <HAL_RCC_ClockConfig+0x106>
 80018a2:	e03a      	b.n	800191a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d111      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ac:	e009      	b.n	80018c2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ae:	f7ff f8e7 	bl	8000a80 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	4a4d      	ldr	r2, [pc, #308]	; (80019f0 <HAL_RCC_ClockConfig+0x274>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e08f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c2:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	220c      	movs	r2, #12
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d1ef      	bne.n	80018ae <HAL_RCC_ClockConfig+0x132>
 80018ce:	e024      	b.n	800191a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d11b      	bne.n	8001910 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d8:	e009      	b.n	80018ee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018da:	f7ff f8d1 	bl	8000a80 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	4a42      	ldr	r2, [pc, #264]	; (80019f0 <HAL_RCC_ClockConfig+0x274>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e079      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ee:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	220c      	movs	r2, #12
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d1ef      	bne.n	80018da <HAL_RCC_ClockConfig+0x15e>
 80018fa:	e00e      	b.n	800191a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7ff f8c0 	bl	8000a80 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	4a3a      	ldr	r2, [pc, #232]	; (80019f0 <HAL_RCC_ClockConfig+0x274>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e068      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	220c      	movs	r2, #12
 8001916:	4013      	ands	r3, r2
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_RCC_ClockConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2201      	movs	r2, #1
 8001920:	4013      	ands	r3, r2
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d21e      	bcs.n	8001966 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001928:	4b30      	ldr	r3, [pc, #192]	; (80019ec <HAL_RCC_ClockConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	4393      	bics	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <HAL_RCC_ClockConfig+0x270>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800193a:	f7ff f8a1 	bl	8000a80 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	e009      	b.n	8001958 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7ff f89c 	bl	8000a80 <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <HAL_RCC_ClockConfig+0x274>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e044      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_ClockConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d1ee      	bne.n	8001944 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2204      	movs	r2, #4
 800196c:	4013      	ands	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <HAL_RCC_ClockConfig+0x27c>)
 8001976:	4013      	ands	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 8001980:	430a      	orrs	r2, r1
 8001982:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2208      	movs	r2, #8
 800198a:	4013      	ands	r3, r2
 800198c:	d00a      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_RCC_ClockConfig+0x280>)
 8001994:	4013      	ands	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	00da      	lsls	r2, r3, #3
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a4:	f000 f832 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019a8:	0001      	movs	r1, r0
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_ClockConfig+0x278>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	220f      	movs	r2, #15
 80019b2:	4013      	ands	r3, r2
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <HAL_RCC_ClockConfig+0x284>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	000a      	movs	r2, r1
 80019ba:	40da      	lsrs	r2, r3
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_ClockConfig+0x288>)
 80019be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_RCC_ClockConfig+0x28c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	250b      	movs	r5, #11
 80019c6:	197c      	adds	r4, r7, r5
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff f813 	bl	80009f4 <HAL_InitTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019d2:	197b      	adds	r3, r7, r5
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019da:	197b      	adds	r3, r7, r5
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	e000      	b.n	80019e2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b004      	add	sp, #16
 80019e8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	40022000 	.word	0x40022000
 80019f0:	00001388 	.word	0x00001388
 80019f4:	40021000 	.word	0x40021000
 80019f8:	fffff8ff 	.word	0xfffff8ff
 80019fc:	ffffc7ff 	.word	0xffffc7ff
 8001a00:	080030b0 	.word	0x080030b0
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a12:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d014      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x40>
 8001a22:	d900      	bls.n	8001a26 <HAL_RCC_GetSysClockFreq+0x1a>
 8001a24:	e07b      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x112>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d002      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x24>
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d00b      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2e:	e076      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a30:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2210      	movs	r2, #16
 8001a36:	4013      	ands	r3, r2
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a3e:	e07c      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a40:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x140>)
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a44:	e079      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a46:	4b42      	ldr	r3, [pc, #264]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a4a:	e076      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	0c9a      	lsrs	r2, r3, #18
 8001a50:	230f      	movs	r3, #15
 8001a52:	401a      	ands	r2, r3
 8001a54:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a56:	5c9b      	ldrb	r3, [r3, r2]
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5c:	0d9a      	lsrs	r2, r3, #22
 8001a5e:	2303      	movs	r3, #3
 8001a60:	4013      	ands	r3, r2
 8001a62:	3301      	adds	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a66:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	025b      	lsls	r3, r3, #9
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d01a      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	69b8      	ldr	r0, [r7, #24]
 8001a80:	69f9      	ldr	r1, [r7, #28]
 8001a82:	f7fe fbed 	bl	8000260 <__aeabi_lmul>
 8001a86:	0002      	movs	r2, r0
 8001a88:	000b      	movs	r3, r1
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f7fe fbc1 	bl	8000220 <__aeabi_uldivmod>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	000b      	movs	r3, r1
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa6:	e037      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2210      	movs	r2, #16
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d01a      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001abc:	2300      	movs	r3, #0
 8001abe:	68b8      	ldr	r0, [r7, #8]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	f7fe fbcd 	bl	8000260 <__aeabi_lmul>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	000b      	movs	r3, r1
 8001aca:	0010      	movs	r0, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f7fe fba1 	bl	8000220 <__aeabi_uldivmod>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae6:	e017      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aea:	0018      	movs	r0, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	0019      	movs	r1, r3
 8001af0:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x140>)
 8001af2:	2300      	movs	r3, #0
 8001af4:	f7fe fbb4 	bl	8000260 <__aeabi_lmul>
 8001af8:	0002      	movs	r2, r0
 8001afa:	000b      	movs	r3, r1
 8001afc:	0010      	movs	r0, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	001c      	movs	r4, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	001d      	movs	r5, r3
 8001b08:	0022      	movs	r2, r4
 8001b0a:	002b      	movs	r3, r5
 8001b0c:	f7fe fb88 	bl	8000220 <__aeabi_uldivmod>
 8001b10:	0002      	movs	r2, r0
 8001b12:	000b      	movs	r3, r1
 8001b14:	0013      	movs	r3, r2
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b1c:	e00d      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0b5b      	lsrs	r3, r3, #13
 8001b24:	2207      	movs	r2, #7
 8001b26:	4013      	ands	r3, r2
 8001b28:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	0212      	lsls	r2, r2, #8
 8001b32:	409a      	lsls	r2, r3
 8001b34:	0013      	movs	r3, r2
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b38:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b00e      	add	sp, #56	; 0x38
 8001b42:	bdb0      	pop	{r4, r5, r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	003d0900 	.word	0x003d0900
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	007a1200 	.word	0x007a1200
 8001b54:	080030c8 	.word	0x080030c8

08001b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	20000000 	.word	0x20000000

08001b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b70:	f7ff fff2 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b74:	0001      	movs	r1, r0
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4013      	ands	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	40d9      	lsrs	r1, r3
 8001b86:	000b      	movs	r3, r1
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	40021000 	.word	0x40021000
 8001b94:	080030c0 	.word	0x080030c0

08001b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b9c:	f7ff ffdc 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001ba0:	0001      	movs	r1, r0
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	0adb      	lsrs	r3, r3, #11
 8001ba8:	2207      	movs	r2, #7
 8001baa:	4013      	ands	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	40d9      	lsrs	r1, r3
 8001bb2:	000b      	movs	r3, r1
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	080030c0 	.word	0x080030c0

08001bc4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001bcc:	2317      	movs	r3, #23
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d106      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	4013      	ands	r3, r2
 8001be8:	d100      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001bea:	e104      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bec:	4bb1      	ldr	r3, [pc, #708]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	055b      	lsls	r3, r3, #21
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d10a      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4bae      	ldr	r3, [pc, #696]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bfc:	4bad      	ldr	r3, [pc, #692]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	0549      	lsls	r1, r1, #21
 8001c02:	430a      	orrs	r2, r1
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c06:	2317      	movs	r3, #23
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4baa      	ldr	r3, [pc, #680]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	d11a      	bne.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	4ba7      	ldr	r3, [pc, #668]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4ba6      	ldr	r3, [pc, #664]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0049      	lsls	r1, r1, #1
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c28:	f7fe ff2a 	bl	8000a80 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	e008      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c32:	f7fe ff25 	bl	8000a80 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b64      	cmp	r3, #100	; 0x64
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e133      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b9c      	ldr	r3, [pc, #624]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c50:	4b98      	ldr	r3, [pc, #608]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	23c0      	movs	r3, #192	; 0xc0
 8001c56:	039b      	lsls	r3, r3, #14
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	23c0      	movs	r3, #192	; 0xc0
 8001c62:	039b      	lsls	r3, r3, #14
 8001c64:	4013      	ands	r3, r2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	23c0      	movs	r3, #192	; 0xc0
 8001c72:	039b      	lsls	r3, r3, #14
 8001c74:	4013      	ands	r3, r2
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d013      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	23c0      	movs	r3, #192	; 0xc0
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	401a      	ands	r2, r3
 8001c86:	23c0      	movs	r3, #192	; 0xc0
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d10a      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c8e:	4b89      	ldr	r3, [pc, #548]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	029b      	lsls	r3, r3, #10
 8001c96:	401a      	ands	r2, r3
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	029b      	lsls	r3, r3, #10
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e103      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ca4:	4b83      	ldr	r3, [pc, #524]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca8:	23c0      	movs	r3, #192	; 0xc0
 8001caa:	029b      	lsls	r3, r3, #10
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d049      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	23c0      	movs	r3, #192	; 0xc0
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d004      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d10d      	bne.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	23c0      	movs	r3, #192	; 0xc0
 8001cd6:	029b      	lsls	r3, r3, #10
 8001cd8:	4013      	ands	r3, r2
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d034      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d02e      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cec:	4b71      	ldr	r3, [pc, #452]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf0:	4a72      	ldr	r2, [pc, #456]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cfa:	4b6e      	ldr	r3, [pc, #440]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0309      	lsls	r1, r1, #12
 8001d00:	430a      	orrs	r2, r1
 8001d02:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d04:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d0a:	496d      	ldr	r1, [pc, #436]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001d10:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d014      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7fe feae 	bl	8000a80 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d28:	e009      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fea9 	bl	8000a80 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	4a63      	ldr	r2, [pc, #396]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e0b6      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d0ef      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	4013      	ands	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	23c0      	movs	r3, #192	; 0xc0
 8001d5c:	029b      	lsls	r3, r3, #10
 8001d5e:	401a      	ands	r2, r3
 8001d60:	23c0      	movs	r3, #192	; 0xc0
 8001d62:	029b      	lsls	r3, r3, #10
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d10c      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001d68:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a56      	ldr	r2, [pc, #344]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	23c0      	movs	r3, #192	; 0xc0
 8001d78:	039b      	lsls	r3, r3, #14
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	23c0      	movs	r3, #192	; 0xc0
 8001d8c:	029b      	lsls	r3, r3, #10
 8001d8e:	401a      	ands	r2, r3
 8001d90:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d01f      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	23c0      	movs	r3, #192	; 0xc0
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	401a      	ands	r2, r3
 8001daa:	23c0      	movs	r3, #192	; 0xc0
 8001dac:	029b      	lsls	r3, r3, #10
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a44      	ldr	r2, [pc, #272]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
 8001dc2:	039b      	lsls	r3, r3, #14
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dce:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	401a      	ands	r2, r3
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001de0:	2317      	movs	r3, #23
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df0:	4936      	ldr	r1, [pc, #216]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e04:	2203      	movs	r2, #3
 8001e06:	4393      	bics	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e1e:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	220c      	movs	r2, #12
 8001e24:	4393      	bics	r3, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2204      	movs	r2, #4
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2208      	movs	r2, #8
 8001e56:	4013      	ands	r3, r2
 8001e58:	d009      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	4013      	ands	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1a      	ldr	r2, [r3, #32]
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	4013      	ands	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69da      	ldr	r2, [r3, #28]
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b006      	add	sp, #24
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	fffcffff 	.word	0xfffcffff
 8001ec0:	fff7ffff 	.word	0xfff7ffff
 8001ec4:	00001388 	.word	0x00001388
 8001ec8:	ffcfffff 	.word	0xffcfffff
 8001ecc:	efffffff 	.word	0xefffffff
 8001ed0:	fffff3ff 	.word	0xfffff3ff
 8001ed4:	ffffcfff 	.word	0xffffcfff
 8001ed8:	fbffffff 	.word	0xfbffffff
 8001edc:	fff3ffff 	.word	0xfff3ffff

08001ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e032      	b.n	8001f58 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2239      	movs	r2, #57	; 0x39
 8001ef6:	5c9b      	ldrb	r3, [r3, r2]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2238      	movs	r2, #56	; 0x38
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7fe fc71 	bl	80007f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2239      	movs	r2, #57	; 0x39
 8001f12:	2102      	movs	r1, #2
 8001f14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	0019      	movs	r1, r3
 8001f20:	0010      	movs	r0, r2
 8001f22:	f000 fa45 	bl	80023b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	223e      	movs	r2, #62	; 0x3e
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	223a      	movs	r2, #58	; 0x3a
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	223b      	movs	r2, #59	; 0x3b
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	223c      	movs	r2, #60	; 0x3c
 8001f42:	2101      	movs	r1, #1
 8001f44:	5499      	strb	r1, [r3, r2]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	223d      	movs	r2, #61	; 0x3d
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2239      	movs	r2, #57	; 0x39
 8001f52:	2101      	movs	r1, #1
 8001f54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2239      	movs	r2, #57	; 0x39
 8001f6c:	5c9b      	ldrb	r3, [r3, r2]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d001      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e036      	b.n	8001fe6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2239      	movs	r2, #57	; 0x39
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	05db      	lsls	r3, r3, #23
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d009      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x50>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <HAL_TIM_Base_Start_IT+0x90>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x50>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <HAL_TIM_Base_Start_IT+0x94>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d111      	bne.n	8001fd4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d010      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd2:	e007      	b.n	8001fe4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	40010800 	.word	0x40010800
 8001ff4:	40011400 	.word	0x40011400

08001ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2202      	movs	r2, #2
 8002008:	4013      	ands	r3, r2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d124      	bne.n	8002058 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	2b02      	cmp	r3, #2
 800201a:	d11d      	bne.n	8002058 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2203      	movs	r2, #3
 8002022:	4252      	negs	r2, r2
 8002024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2203      	movs	r2, #3
 8002034:	4013      	ands	r3, r2
 8002036:	d004      	beq.n	8002042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	0018      	movs	r0, r3
 800203c:	f000 f9a0 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002040:	e007      	b.n	8002052 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f993 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	0018      	movs	r0, r3
 800204e:	f000 f99f 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2204      	movs	r2, #4
 8002060:	4013      	ands	r3, r2
 8002062:	2b04      	cmp	r3, #4
 8002064:	d125      	bne.n	80020b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2204      	movs	r2, #4
 800206e:	4013      	ands	r3, r2
 8002070:	2b04      	cmp	r3, #4
 8002072:	d11e      	bne.n	80020b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2205      	movs	r2, #5
 800207a:	4252      	negs	r2, r2
 800207c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	23c0      	movs	r3, #192	; 0xc0
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d004      	beq.n	800209c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f973 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 800209a:	e007      	b.n	80020ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 f966 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 f972 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2208      	movs	r2, #8
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d124      	bne.n	800210a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2208      	movs	r2, #8
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d11d      	bne.n	800210a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2209      	movs	r2, #9
 80020d4:	4252      	negs	r2, r2
 80020d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2204      	movs	r2, #4
 80020dc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2203      	movs	r2, #3
 80020e6:	4013      	ands	r3, r2
 80020e8:	d004      	beq.n	80020f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f947 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 80020f2:	e007      	b.n	8002104 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 f93a 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 f946 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2210      	movs	r2, #16
 8002112:	4013      	ands	r3, r2
 8002114:	2b10      	cmp	r3, #16
 8002116:	d125      	bne.n	8002164 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2210      	movs	r2, #16
 8002120:	4013      	ands	r3, r2
 8002122:	2b10      	cmp	r3, #16
 8002124:	d11e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2211      	movs	r2, #17
 800212c:	4252      	negs	r2, r2
 800212e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2208      	movs	r2, #8
 8002134:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	23c0      	movs	r3, #192	; 0xc0
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f91a 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 800214c:	e007      	b.n	800215e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f000 f90d 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f919 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2201      	movs	r2, #1
 800216c:	4013      	ands	r3, r2
 800216e:	2b01      	cmp	r3, #1
 8002170:	d10f      	bne.n	8002192 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	4013      	ands	r3, r2
 800217c:	2b01      	cmp	r3, #1
 800217e:	d108      	bne.n	8002192 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2202      	movs	r2, #2
 8002186:	4252      	negs	r2, r2
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f7fe fb05 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	4013      	ands	r3, r2
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	d10f      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b40      	cmp	r3, #64	; 0x40
 80021ac:	d108      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2241      	movs	r2, #65	; 0x41
 80021b4:	4252      	negs	r2, r2
 80021b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 f8f0 	bl	80023a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d2:	230f      	movs	r3, #15
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2238      	movs	r2, #56	; 0x38
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_TIM_ConfigClockSource+0x20>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e0bc      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x19a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	2101      	movs	r1, #1
 80021ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2239      	movs	r2, #57	; 0x39
 80021f4:	2102      	movs	r1, #2
 80021f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2277      	movs	r2, #119	; 0x77
 8002204:	4393      	bics	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4a58      	ldr	r2, [pc, #352]	; (800236c <HAL_TIM_ConfigClockSource+0x1a4>)
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0192      	lsls	r2, r2, #6
 8002220:	4293      	cmp	r3, r2
 8002222:	d040      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0xde>
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	0192      	lsls	r2, r2, #6
 8002228:	4293      	cmp	r3, r2
 800222a:	d900      	bls.n	800222e <HAL_TIM_ConfigClockSource+0x66>
 800222c:	e088      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	0152      	lsls	r2, r2, #5
 8002232:	4293      	cmp	r3, r2
 8002234:	d100      	bne.n	8002238 <HAL_TIM_ConfigClockSource+0x70>
 8002236:	e088      	b.n	800234a <HAL_TIM_ConfigClockSource+0x182>
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	0152      	lsls	r2, r2, #5
 800223c:	4293      	cmp	r3, r2
 800223e:	d900      	bls.n	8002242 <HAL_TIM_ConfigClockSource+0x7a>
 8002240:	e07e      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 8002242:	2b70      	cmp	r3, #112	; 0x70
 8002244:	d018      	beq.n	8002278 <HAL_TIM_ConfigClockSource+0xb0>
 8002246:	d900      	bls.n	800224a <HAL_TIM_ConfigClockSource+0x82>
 8002248:	e07a      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 800224a:	2b60      	cmp	r3, #96	; 0x60
 800224c:	d04f      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x126>
 800224e:	d900      	bls.n	8002252 <HAL_TIM_ConfigClockSource+0x8a>
 8002250:	e076      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 8002252:	2b50      	cmp	r3, #80	; 0x50
 8002254:	d03b      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x106>
 8002256:	d900      	bls.n	800225a <HAL_TIM_ConfigClockSource+0x92>
 8002258:	e072      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d057      	beq.n	800230e <HAL_TIM_ConfigClockSource+0x146>
 800225e:	d900      	bls.n	8002262 <HAL_TIM_ConfigClockSource+0x9a>
 8002260:	e06e      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 8002262:	2b30      	cmp	r3, #48	; 0x30
 8002264:	d063      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x166>
 8002266:	d86b      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 8002268:	2b20      	cmp	r3, #32
 800226a:	d060      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x166>
 800226c:	d868      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d05d      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x166>
 8002272:	2b10      	cmp	r3, #16
 8002274:	d05b      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x166>
 8002276:	e063      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002288:	f000 f960 	bl	800254c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2277      	movs	r2, #119	; 0x77
 8002298:	4313      	orrs	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]
      break;
 80022a4:	e052      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022b6:	f000 f949 	bl	800254c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	01c9      	lsls	r1, r1, #7
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
      break;
 80022cc:	e03e      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022da:	001a      	movs	r2, r3
 80022dc:	f000 f8bc 	bl	8002458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2150      	movs	r1, #80	; 0x50
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 f916 	bl	8002518 <TIM_ITRx_SetConfig>
      break;
 80022ec:	e02e      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022fa:	001a      	movs	r2, r3
 80022fc:	f000 f8da 	bl	80024b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2160      	movs	r1, #96	; 0x60
 8002306:	0018      	movs	r0, r3
 8002308:	f000 f906 	bl	8002518 <TIM_ITRx_SetConfig>
      break;
 800230c:	e01e      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231a:	001a      	movs	r2, r3
 800231c:	f000 f89c 	bl	8002458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2140      	movs	r1, #64	; 0x40
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f8f6 	bl	8002518 <TIM_ITRx_SetConfig>
      break;
 800232c:	e00e      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0019      	movs	r1, r3
 8002338:	0010      	movs	r0, r2
 800233a:	f000 f8ed 	bl	8002518 <TIM_ITRx_SetConfig>
      break;
 800233e:	e005      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002340:	230f      	movs	r3, #15
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
      break;
 8002348:	e000      	b.n	800234c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800234a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2239      	movs	r2, #57	; 0x39
 8002350:	2101      	movs	r1, #1
 8002352:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2238      	movs	r2, #56	; 0x38
 8002358:	2100      	movs	r1, #0
 800235a:	5499      	strb	r1, [r3, r2]

  return status;
 800235c:	230f      	movs	r3, #15
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	781b      	ldrb	r3, [r3, #0]
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b004      	add	sp, #16
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	ffff00ff 	.word	0xffff00ff

08002370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	05db      	lsls	r3, r3, #23
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d007      	beq.n	80023da <TIM_Base_SetConfig+0x2a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1f      	ldr	r2, [pc, #124]	; (800244c <TIM_Base_SetConfig+0x9c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0x2a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <TIM_Base_SetConfig+0xa0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d108      	bne.n	80023ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2270      	movs	r2, #112	; 0x70
 80023de:	4393      	bics	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	05db      	lsls	r3, r3, #23
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d007      	beq.n	8002406 <TIM_Base_SetConfig+0x56>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <TIM_Base_SetConfig+0x9c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d003      	beq.n	8002406 <TIM_Base_SetConfig+0x56>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <TIM_Base_SetConfig+0xa0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d108      	bne.n	8002418 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <TIM_Base_SetConfig+0xa4>)
 800240a:	4013      	ands	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	4393      	bics	r3, r2
 800241e:	001a      	movs	r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	615a      	str	r2, [r3, #20]
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b004      	add	sp, #16
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40010800 	.word	0x40010800
 8002450:	40011400 	.word	0x40011400
 8002454:	fffffcff 	.word	0xfffffcff

08002458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	2201      	movs	r2, #1
 8002470:	4393      	bics	r3, r2
 8002472:	001a      	movs	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	22f0      	movs	r2, #240	; 0xf0
 8002482:	4393      	bics	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	220a      	movs	r2, #10
 8002494:	4393      	bics	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	621a      	str	r2, [r3, #32]
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b006      	add	sp, #24
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	2210      	movs	r2, #16
 80024c6:	4393      	bics	r3, r2
 80024c8:	001a      	movs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <TIM_TI2_ConfigInputStage+0x60>)
 80024de:	4013      	ands	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	031b      	lsls	r3, r3, #12
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	22a0      	movs	r2, #160	; 0xa0
 80024f0:	4393      	bics	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	621a      	str	r2, [r3, #32]
}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b006      	add	sp, #24
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	ffff0fff 	.word	0xffff0fff

08002518 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2270      	movs	r2, #112	; 0x70
 800252c:	4393      	bics	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	2207      	movs	r2, #7
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	609a      	str	r2, [r3, #8]
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b004      	add	sp, #16
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <TIM_ETR_SetConfig+0x3c>)
 8002564:	4013      	ands	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	021a      	lsls	r2, r3, #8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	431a      	orrs	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	609a      	str	r2, [r3, #8]
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b006      	add	sp, #24
 8002586:	bd80      	pop	{r7, pc}
 8002588:	ffff00ff 	.word	0xffff00ff

0800258c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2238      	movs	r2, #56	; 0x38
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e042      	b.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2238      	movs	r2, #56	; 0x38
 80025a8:	2101      	movs	r1, #1
 80025aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2239      	movs	r2, #57	; 0x39
 80025b0:	2102      	movs	r1, #2
 80025b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2270      	movs	r2, #112	; 0x70
 80025c8:	4393      	bics	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	05db      	lsls	r3, r3, #23
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d009      	beq.n	80025fe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d004      	beq.n	80025fe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d10c      	bne.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2280      	movs	r2, #128	; 0x80
 8002602:	4393      	bics	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4313      	orrs	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2239      	movs	r2, #57	; 0x39
 800261c:	2101      	movs	r1, #1
 800261e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2238      	movs	r2, #56	; 0x38
 8002624:	2100      	movs	r1, #0
 8002626:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40010800 	.word	0x40010800
 8002638:	40011400 	.word	0x40011400

0800263c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e044      	b.n	80026d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d107      	bne.n	8002666 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2278      	movs	r2, #120	; 0x78
 800265a:	2100      	movs	r1, #0
 800265c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f7fe f90f 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2224      	movs	r2, #36	; 0x24
 800266a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2101      	movs	r1, #1
 8002678:	438a      	bics	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f830 	bl	80026e4 <UART_SetConfig>
 8002684:	0003      	movs	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e024      	b.n	80026d8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 faa7 	bl	8002bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	490d      	ldr	r1, [pc, #52]	; (80026e0 <HAL_UART_Init+0xa4>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	212a      	movs	r1, #42	; 0x2a
 80026ba:	438a      	bics	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 fb3f 	bl	8002d54 <UART_CheckIdleState>
 80026d6:	0003      	movs	r3, r0
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	ffffb7ff 	.word	0xffffb7ff

080026e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e4:	b5b0      	push	{r4, r5, r7, lr}
 80026e6:	b08e      	sub	sp, #56	; 0x38
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026ec:	231a      	movs	r3, #26
 80026ee:	2218      	movs	r2, #24
 80026f0:	189b      	adds	r3, r3, r2
 80026f2:	19db      	adds	r3, r3, r7
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	431a      	orrs	r2, r3
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	431a      	orrs	r2, r3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	4313      	orrs	r3, r2
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4ac6      	ldr	r2, [pc, #792]	; (8002a30 <UART_SetConfig+0x34c>)
 8002718:	4013      	ands	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4ac1      	ldr	r2, [pc, #772]	; (8002a34 <UART_SetConfig+0x350>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4abb      	ldr	r2, [pc, #748]	; (8002a38 <UART_SetConfig+0x354>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002754:	4313      	orrs	r3, r2
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	4ab7      	ldr	r2, [pc, #732]	; (8002a3c <UART_SetConfig+0x358>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4ab3      	ldr	r2, [pc, #716]	; (8002a40 <UART_SetConfig+0x35c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d131      	bne.n	80027dc <UART_SetConfig+0xf8>
 8002778:	4bb2      	ldr	r3, [pc, #712]	; (8002a44 <UART_SetConfig+0x360>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	2203      	movs	r2, #3
 800277e:	4013      	ands	r3, r2
 8002780:	2b03      	cmp	r3, #3
 8002782:	d01d      	beq.n	80027c0 <UART_SetConfig+0xdc>
 8002784:	d823      	bhi.n	80027ce <UART_SetConfig+0xea>
 8002786:	2b02      	cmp	r3, #2
 8002788:	d00c      	beq.n	80027a4 <UART_SetConfig+0xc0>
 800278a:	d820      	bhi.n	80027ce <UART_SetConfig+0xea>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <UART_SetConfig+0xb2>
 8002790:	2b01      	cmp	r3, #1
 8002792:	d00e      	beq.n	80027b2 <UART_SetConfig+0xce>
 8002794:	e01b      	b.n	80027ce <UART_SetConfig+0xea>
 8002796:	231b      	movs	r3, #27
 8002798:	2218      	movs	r2, #24
 800279a:	189b      	adds	r3, r3, r2
 800279c:	19db      	adds	r3, r3, r7
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e09c      	b.n	80028de <UART_SetConfig+0x1fa>
 80027a4:	231b      	movs	r3, #27
 80027a6:	2218      	movs	r2, #24
 80027a8:	189b      	adds	r3, r3, r2
 80027aa:	19db      	adds	r3, r3, r7
 80027ac:	2202      	movs	r2, #2
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e095      	b.n	80028de <UART_SetConfig+0x1fa>
 80027b2:	231b      	movs	r3, #27
 80027b4:	2218      	movs	r2, #24
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	19db      	adds	r3, r3, r7
 80027ba:	2204      	movs	r2, #4
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	e08e      	b.n	80028de <UART_SetConfig+0x1fa>
 80027c0:	231b      	movs	r3, #27
 80027c2:	2218      	movs	r2, #24
 80027c4:	189b      	adds	r3, r3, r2
 80027c6:	19db      	adds	r3, r3, r7
 80027c8:	2208      	movs	r2, #8
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e087      	b.n	80028de <UART_SetConfig+0x1fa>
 80027ce:	231b      	movs	r3, #27
 80027d0:	2218      	movs	r2, #24
 80027d2:	189b      	adds	r3, r3, r2
 80027d4:	19db      	adds	r3, r3, r7
 80027d6:	2210      	movs	r2, #16
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e080      	b.n	80028de <UART_SetConfig+0x1fa>
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a99      	ldr	r2, [pc, #612]	; (8002a48 <UART_SetConfig+0x364>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d131      	bne.n	800284a <UART_SetConfig+0x166>
 80027e6:	4b97      	ldr	r3, [pc, #604]	; (8002a44 <UART_SetConfig+0x360>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	220c      	movs	r2, #12
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d01d      	beq.n	800282e <UART_SetConfig+0x14a>
 80027f2:	d823      	bhi.n	800283c <UART_SetConfig+0x158>
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d00c      	beq.n	8002812 <UART_SetConfig+0x12e>
 80027f8:	d820      	bhi.n	800283c <UART_SetConfig+0x158>
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <UART_SetConfig+0x120>
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d00e      	beq.n	8002820 <UART_SetConfig+0x13c>
 8002802:	e01b      	b.n	800283c <UART_SetConfig+0x158>
 8002804:	231b      	movs	r3, #27
 8002806:	2218      	movs	r2, #24
 8002808:	189b      	adds	r3, r3, r2
 800280a:	19db      	adds	r3, r3, r7
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e065      	b.n	80028de <UART_SetConfig+0x1fa>
 8002812:	231b      	movs	r3, #27
 8002814:	2218      	movs	r2, #24
 8002816:	189b      	adds	r3, r3, r2
 8002818:	19db      	adds	r3, r3, r7
 800281a:	2202      	movs	r2, #2
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e05e      	b.n	80028de <UART_SetConfig+0x1fa>
 8002820:	231b      	movs	r3, #27
 8002822:	2218      	movs	r2, #24
 8002824:	189b      	adds	r3, r3, r2
 8002826:	19db      	adds	r3, r3, r7
 8002828:	2204      	movs	r2, #4
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e057      	b.n	80028de <UART_SetConfig+0x1fa>
 800282e:	231b      	movs	r3, #27
 8002830:	2218      	movs	r2, #24
 8002832:	189b      	adds	r3, r3, r2
 8002834:	19db      	adds	r3, r3, r7
 8002836:	2208      	movs	r2, #8
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e050      	b.n	80028de <UART_SetConfig+0x1fa>
 800283c:	231b      	movs	r3, #27
 800283e:	2218      	movs	r2, #24
 8002840:	189b      	adds	r3, r3, r2
 8002842:	19db      	adds	r3, r3, r7
 8002844:	2210      	movs	r2, #16
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e049      	b.n	80028de <UART_SetConfig+0x1fa>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7a      	ldr	r2, [pc, #488]	; (8002a38 <UART_SetConfig+0x354>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d13e      	bne.n	80028d2 <UART_SetConfig+0x1ee>
 8002854:	4b7b      	ldr	r3, [pc, #492]	; (8002a44 <UART_SetConfig+0x360>)
 8002856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002858:	23c0      	movs	r3, #192	; 0xc0
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	4013      	ands	r3, r2
 800285e:	22c0      	movs	r2, #192	; 0xc0
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	4293      	cmp	r3, r2
 8002864:	d027      	beq.n	80028b6 <UART_SetConfig+0x1d2>
 8002866:	22c0      	movs	r2, #192	; 0xc0
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	4293      	cmp	r3, r2
 800286c:	d82a      	bhi.n	80028c4 <UART_SetConfig+0x1e0>
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	4293      	cmp	r3, r2
 8002874:	d011      	beq.n	800289a <UART_SetConfig+0x1b6>
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	4293      	cmp	r3, r2
 800287c:	d822      	bhi.n	80028c4 <UART_SetConfig+0x1e0>
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <UART_SetConfig+0x1a8>
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	00d2      	lsls	r2, r2, #3
 8002886:	4293      	cmp	r3, r2
 8002888:	d00e      	beq.n	80028a8 <UART_SetConfig+0x1c4>
 800288a:	e01b      	b.n	80028c4 <UART_SetConfig+0x1e0>
 800288c:	231b      	movs	r3, #27
 800288e:	2218      	movs	r2, #24
 8002890:	189b      	adds	r3, r3, r2
 8002892:	19db      	adds	r3, r3, r7
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e021      	b.n	80028de <UART_SetConfig+0x1fa>
 800289a:	231b      	movs	r3, #27
 800289c:	2218      	movs	r2, #24
 800289e:	189b      	adds	r3, r3, r2
 80028a0:	19db      	adds	r3, r3, r7
 80028a2:	2202      	movs	r2, #2
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	e01a      	b.n	80028de <UART_SetConfig+0x1fa>
 80028a8:	231b      	movs	r3, #27
 80028aa:	2218      	movs	r2, #24
 80028ac:	189b      	adds	r3, r3, r2
 80028ae:	19db      	adds	r3, r3, r7
 80028b0:	2204      	movs	r2, #4
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e013      	b.n	80028de <UART_SetConfig+0x1fa>
 80028b6:	231b      	movs	r3, #27
 80028b8:	2218      	movs	r2, #24
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	19db      	adds	r3, r3, r7
 80028be:	2208      	movs	r2, #8
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e00c      	b.n	80028de <UART_SetConfig+0x1fa>
 80028c4:	231b      	movs	r3, #27
 80028c6:	2218      	movs	r2, #24
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	19db      	adds	r3, r3, r7
 80028cc:	2210      	movs	r2, #16
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e005      	b.n	80028de <UART_SetConfig+0x1fa>
 80028d2:	231b      	movs	r3, #27
 80028d4:	2218      	movs	r2, #24
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	19db      	adds	r3, r3, r7
 80028da:	2210      	movs	r2, #16
 80028dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a55      	ldr	r2, [pc, #340]	; (8002a38 <UART_SetConfig+0x354>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d000      	beq.n	80028ea <UART_SetConfig+0x206>
 80028e8:	e084      	b.n	80029f4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028ea:	231b      	movs	r3, #27
 80028ec:	2218      	movs	r2, #24
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	19db      	adds	r3, r3, r7
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d01d      	beq.n	8002934 <UART_SetConfig+0x250>
 80028f8:	dc20      	bgt.n	800293c <UART_SetConfig+0x258>
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d015      	beq.n	800292a <UART_SetConfig+0x246>
 80028fe:	dc1d      	bgt.n	800293c <UART_SetConfig+0x258>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <UART_SetConfig+0x226>
 8002904:	2b02      	cmp	r3, #2
 8002906:	d005      	beq.n	8002914 <UART_SetConfig+0x230>
 8002908:	e018      	b.n	800293c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800290a:	f7ff f92f 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 800290e:	0003      	movs	r3, r0
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002912:	e01c      	b.n	800294e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <UART_SetConfig+0x360>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	4013      	ands	r3, r2
 800291c:	d002      	beq.n	8002924 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800291e:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <UART_SetConfig+0x368>)
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002922:	e014      	b.n	800294e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002924:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <UART_SetConfig+0x36c>)
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002928:	e011      	b.n	800294e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800292a:	f7ff f86f 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 800292e:	0003      	movs	r3, r0
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002932:	e00c      	b.n	800294e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800293a:	e008      	b.n	800294e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002940:	231a      	movs	r3, #26
 8002942:	2218      	movs	r2, #24
 8002944:	189b      	adds	r3, r3, r2
 8002946:	19db      	adds	r3, r3, r7
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
        break;
 800294c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d100      	bne.n	8002956 <UART_SetConfig+0x272>
 8002954:	e132      	b.n	8002bbc <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	0013      	movs	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	189b      	adds	r3, r3, r2
 8002960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002962:	429a      	cmp	r2, r3
 8002964:	d305      	bcc.n	8002972 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800296c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296e:	429a      	cmp	r2, r3
 8002970:	d906      	bls.n	8002980 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002972:	231a      	movs	r3, #26
 8002974:	2218      	movs	r2, #24
 8002976:	189b      	adds	r3, r3, r2
 8002978:	19db      	adds	r3, r3, r7
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e11d      	b.n	8002bbc <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	6939      	ldr	r1, [r7, #16]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	000b      	movs	r3, r1
 800298e:	0e1b      	lsrs	r3, r3, #24
 8002990:	0010      	movs	r0, r2
 8002992:	0205      	lsls	r5, r0, #8
 8002994:	431d      	orrs	r5, r3
 8002996:	000b      	movs	r3, r1
 8002998:	021c      	lsls	r4, r3, #8
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68b8      	ldr	r0, [r7, #8]
 80029a8:	68f9      	ldr	r1, [r7, #12]
 80029aa:	1900      	adds	r0, r0, r4
 80029ac:	4169      	adcs	r1, r5
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f7fd fc30 	bl	8000220 <__aeabi_uldivmod>
 80029c0:	0002      	movs	r2, r0
 80029c2:	000b      	movs	r3, r1
 80029c4:	0013      	movs	r3, r2
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ca:	23c0      	movs	r3, #192	; 0xc0
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d309      	bcc.n	80029e6 <UART_SetConfig+0x302>
 80029d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	035b      	lsls	r3, r3, #13
 80029d8:	429a      	cmp	r2, r3
 80029da:	d204      	bcs.n	80029e6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	e0ea      	b.n	8002bbc <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80029e6:	231a      	movs	r3, #26
 80029e8:	2218      	movs	r2, #24
 80029ea:	189b      	adds	r3, r3, r2
 80029ec:	19db      	adds	r3, r3, r7
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e0e3      	b.n	8002bbc <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d000      	beq.n	8002a02 <UART_SetConfig+0x31e>
 8002a00:	e085      	b.n	8002b0e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002a02:	231b      	movs	r3, #27
 8002a04:	2218      	movs	r2, #24
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	19db      	adds	r3, r3, r7
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d837      	bhi.n	8002a80 <UART_SetConfig+0x39c>
 8002a10:	009a      	lsls	r2, r3, #2
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <UART_SetConfig+0x370>)
 8002a14:	18d3      	adds	r3, r2, r3
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a1a:	f7ff f8a7 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a22:	e036      	b.n	8002a92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a24:	f7ff f8b8 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a2c:	e031      	b.n	8002a92 <UART_SetConfig+0x3ae>
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	efff69f3 	.word	0xefff69f3
 8002a34:	ffffcfff 	.word	0xffffcfff
 8002a38:	40004800 	.word	0x40004800
 8002a3c:	fffff4ff 	.word	0xfffff4ff
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40004400 	.word	0x40004400
 8002a4c:	003d0900 	.word	0x003d0900
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	080030d4 	.word	0x080030d4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a58:	4b60      	ldr	r3, [pc, #384]	; (8002bdc <UART_SetConfig+0x4f8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d002      	beq.n	8002a68 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a62:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <UART_SetConfig+0x4fc>)
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a66:	e014      	b.n	8002a92 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002a68:	4b5e      	ldr	r3, [pc, #376]	; (8002be4 <UART_SetConfig+0x500>)
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a6c:	e011      	b.n	8002a92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a6e:	f7fe ffcd 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8002a72:	0003      	movs	r3, r0
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a76:	e00c      	b.n	8002a92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a7e:	e008      	b.n	8002a92 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a84:	231a      	movs	r3, #26
 8002a86:	2218      	movs	r2, #24
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	19db      	adds	r3, r3, r7
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
        break;
 8002a90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d100      	bne.n	8002a9a <UART_SetConfig+0x3b6>
 8002a98:	e090      	b.n	8002bbc <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	005a      	lsls	r2, r3, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	18d2      	adds	r2, r2, r3
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	0019      	movs	r1, r3
 8002aac:	0010      	movs	r0, r2
 8002aae:	f7fd fb2b 	bl	8000108 <__udivsi3>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	2b0f      	cmp	r3, #15
 8002aba:	d921      	bls.n	8002b00 <UART_SetConfig+0x41c>
 8002abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	025b      	lsls	r3, r3, #9
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d21c      	bcs.n	8002b00 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	200e      	movs	r0, #14
 8002acc:	2418      	movs	r4, #24
 8002ace:	1903      	adds	r3, r0, r4
 8002ad0:	19db      	adds	r3, r3, r7
 8002ad2:	210f      	movs	r1, #15
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2207      	movs	r2, #7
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b299      	uxth	r1, r3
 8002ae4:	1903      	adds	r3, r0, r4
 8002ae6:	19db      	adds	r3, r3, r7
 8002ae8:	1902      	adds	r2, r0, r4
 8002aea:	19d2      	adds	r2, r2, r7
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	1902      	adds	r2, r0, r4
 8002af8:	19d2      	adds	r2, r2, r7
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	e05d      	b.n	8002bbc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002b00:	231a      	movs	r3, #26
 8002b02:	2218      	movs	r2, #24
 8002b04:	189b      	adds	r3, r3, r2
 8002b06:	19db      	adds	r3, r3, r7
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e056      	b.n	8002bbc <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b0e:	231b      	movs	r3, #27
 8002b10:	2218      	movs	r2, #24
 8002b12:	189b      	adds	r3, r3, r2
 8002b14:	19db      	adds	r3, r3, r7
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d822      	bhi.n	8002b62 <UART_SetConfig+0x47e>
 8002b1c:	009a      	lsls	r2, r3, #2
 8002b1e:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <UART_SetConfig+0x504>)
 8002b20:	18d3      	adds	r3, r2, r3
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b26:	f7ff f821 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b2e:	e021      	b.n	8002b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b30:	f7ff f832 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 8002b34:	0003      	movs	r3, r0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b38:	e01c      	b.n	8002b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b3a:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <UART_SetConfig+0x4f8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2210      	movs	r2, #16
 8002b40:	4013      	ands	r3, r2
 8002b42:	d002      	beq.n	8002b4a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <UART_SetConfig+0x4fc>)
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b48:	e014      	b.n	8002b74 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002b4a:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <UART_SetConfig+0x500>)
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b4e:	e011      	b.n	8002b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b50:	f7fe ff5c 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8002b54:	0003      	movs	r3, r0
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b58:	e00c      	b.n	8002b74 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b60:	e008      	b.n	8002b74 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b66:	231a      	movs	r3, #26
 8002b68:	2218      	movs	r2, #24
 8002b6a:	189b      	adds	r3, r3, r2
 8002b6c:	19db      	adds	r3, r3, r7
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
        break;
 8002b72:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d020      	beq.n	8002bbc <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	085a      	lsrs	r2, r3, #1
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	18d2      	adds	r2, r2, r3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	0019      	movs	r1, r3
 8002b8a:	0010      	movs	r0, r2
 8002b8c:	f7fd fabc 	bl	8000108 <__udivsi3>
 8002b90:	0003      	movs	r3, r0
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	d90a      	bls.n	8002bb0 <UART_SetConfig+0x4cc>
 8002b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	025b      	lsls	r3, r3, #9
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d205      	bcs.n	8002bb0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	e005      	b.n	8002bbc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002bb0:	231a      	movs	r3, #26
 8002bb2:	2218      	movs	r2, #24
 8002bb4:	189b      	adds	r3, r3, r2
 8002bb6:	19db      	adds	r3, r3, r7
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002bc8:	231a      	movs	r3, #26
 8002bca:	2218      	movs	r2, #24
 8002bcc:	189b      	adds	r3, r3, r2
 8002bce:	19db      	adds	r3, r3, r7
 8002bd0:	781b      	ldrb	r3, [r3, #0]
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b00e      	add	sp, #56	; 0x38
 8002bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	003d0900 	.word	0x003d0900
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	080030f8 	.word	0x080030f8

08002bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d00b      	beq.n	8002c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a4a      	ldr	r2, [pc, #296]	; (8002d30 <UART_AdvFeatureConfig+0x144>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d00b      	beq.n	8002c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a43      	ldr	r2, [pc, #268]	; (8002d34 <UART_AdvFeatureConfig+0x148>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a3b      	ldr	r2, [pc, #236]	; (8002d38 <UART_AdvFeatureConfig+0x14c>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2208      	movs	r2, #8
 8002c60:	4013      	ands	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4a34      	ldr	r2, [pc, #208]	; (8002d3c <UART_AdvFeatureConfig+0x150>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2210      	movs	r2, #16
 8002c82:	4013      	ands	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <UART_AdvFeatureConfig+0x154>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <UART_AdvFeatureConfig+0x158>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d01d      	beq.n	8002d06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <UART_AdvFeatureConfig+0x15c>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	035b      	lsls	r3, r3, #13
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d10b      	bne.n	8002d06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <UART_AdvFeatureConfig+0x160>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <UART_AdvFeatureConfig+0x164>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	fffdffff 	.word	0xfffdffff
 8002d34:	fffeffff 	.word	0xfffeffff
 8002d38:	fffbffff 	.word	0xfffbffff
 8002d3c:	ffff7fff 	.word	0xffff7fff
 8002d40:	ffffefff 	.word	0xffffefff
 8002d44:	ffffdfff 	.word	0xffffdfff
 8002d48:	ffefffff 	.word	0xffefffff
 8002d4c:	ff9fffff 	.word	0xff9fffff
 8002d50:	fff7ffff 	.word	0xfff7ffff

08002d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b092      	sub	sp, #72	; 0x48
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2284      	movs	r2, #132	; 0x84
 8002d60:	2100      	movs	r1, #0
 8002d62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d64:	f7fd fe8c 	bl	8000a80 <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2208      	movs	r2, #8
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d12c      	bne.n	8002dd4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	0391      	lsls	r1, r2, #14
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4a46      	ldr	r2, [pc, #280]	; (8002e9c <UART_CheckIdleState+0x148>)
 8002d84:	9200      	str	r2, [sp, #0]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f000 f88c 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d021      	beq.n	8002dd4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d90:	f3ef 8310 	mrs	r3, PRIMASK
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	f383 8810 	msr	PRIMASK, r3
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	438a      	bics	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	f383 8810 	msr	PRIMASK, r3
}
 8002dc0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2278      	movs	r2, #120	; 0x78
 8002dcc:	2100      	movs	r1, #0
 8002dce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e05f      	b.n	8002e94 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d146      	bne.n	8002e70 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	03d1      	lsls	r1, r2, #15
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4a2c      	ldr	r2, [pc, #176]	; (8002e9c <UART_CheckIdleState+0x148>)
 8002dec:	9200      	str	r2, [sp, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f000 f858 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d03b      	beq.n	8002e70 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
 8002e02:	2301      	movs	r3, #1
 8002e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f383 8810 	msr	PRIMASK, r3
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4921      	ldr	r1, [pc, #132]	; (8002ea0 <UART_CheckIdleState+0x14c>)
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f383 8810 	msr	PRIMASK, r3
}
 8002e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e30:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
 8002e34:	2301      	movs	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f383 8810 	msr	PRIMASK, r3
}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f383 8810 	msr	PRIMASK, r3
}
 8002e5a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	2120      	movs	r1, #32
 8002e62:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2278      	movs	r2, #120	; 0x78
 8002e68:	2100      	movs	r1, #0
 8002e6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e011      	b.n	8002e94 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	2120      	movs	r1, #32
 8002e7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2278      	movs	r2, #120	; 0x78
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b010      	add	sp, #64	; 0x40
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	01ffffff 	.word	0x01ffffff
 8002ea0:	fffffedf 	.word	0xfffffedf

08002ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	1dfb      	adds	r3, r7, #7
 8002eb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb4:	e04b      	b.n	8002f4e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	d048      	beq.n	8002f4e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebc:	f7fd fde0 	bl	8000a80 <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e04b      	b.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2204      	movs	r2, #4
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d035      	beq.n	8002f4e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2208      	movs	r2, #8
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d111      	bne.n	8002f14 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 f83c 	bl	8002f78 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2284      	movs	r2, #132	; 0x84
 8002f04:	2108      	movs	r1, #8
 8002f06:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2278      	movs	r2, #120	; 0x78
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e02c      	b.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	401a      	ands	r2, r3
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d112      	bne.n	8002f4e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 f81f 	bl	8002f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2284      	movs	r2, #132	; 0x84
 8002f3e:	2120      	movs	r1, #32
 8002f40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2278      	movs	r2, #120	; 0x78
 8002f46:	2100      	movs	r1, #0
 8002f48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e00f      	b.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	425a      	negs	r2, r3
 8002f5e:	4153      	adcs	r3, r2
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	001a      	movs	r2, r3
 8002f64:	1dfb      	adds	r3, r7, #7
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d0a4      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b004      	add	sp, #16
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08e      	sub	sp, #56	; 0x38
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f80:	f3ef 8310 	mrs	r3, PRIMASK
 8002f84:	617b      	str	r3, [r7, #20]
  return(result);
 8002f86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f383 8810 	msr	PRIMASK, r3
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4926      	ldr	r1, [pc, #152]	; (800303c <UART_EndRxTransfer+0xc4>)
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f383 8810 	msr	PRIMASK, r3
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb6:	623b      	str	r3, [r7, #32]
  return(result);
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fba:	633b      	str	r3, [r7, #48]	; 0x30
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	f383 8810 	msr	PRIMASK, r3
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d118      	bne.n	800301e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fec:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f383 8810 	msr	PRIMASK, r3
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2110      	movs	r1, #16
 800300e:	438a      	bics	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f383 8810 	msr	PRIMASK, r3
}
 800301c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	2120      	movs	r1, #32
 8003024:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b00e      	add	sp, #56	; 0x38
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	fffffedf 	.word	0xfffffedf

08003040 <memset>:
 8003040:	0003      	movs	r3, r0
 8003042:	1882      	adds	r2, r0, r2
 8003044:	4293      	cmp	r3, r2
 8003046:	d100      	bne.n	800304a <memset+0xa>
 8003048:	4770      	bx	lr
 800304a:	7019      	strb	r1, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	e7f9      	b.n	8003044 <memset+0x4>

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	2600      	movs	r6, #0
 8003054:	4c0c      	ldr	r4, [pc, #48]	; (8003088 <__libc_init_array+0x38>)
 8003056:	4d0d      	ldr	r5, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003058:	1b64      	subs	r4, r4, r5
 800305a:	10a4      	asrs	r4, r4, #2
 800305c:	42a6      	cmp	r6, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	2600      	movs	r6, #0
 8003062:	f000 f819 	bl	8003098 <_init>
 8003066:	4c0a      	ldr	r4, [pc, #40]	; (8003090 <__libc_init_array+0x40>)
 8003068:	4d0a      	ldr	r5, [pc, #40]	; (8003094 <__libc_init_array+0x44>)
 800306a:	1b64      	subs	r4, r4, r5
 800306c:	10a4      	asrs	r4, r4, #2
 800306e:	42a6      	cmp	r6, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	00b3      	lsls	r3, r6, #2
 8003076:	58eb      	ldr	r3, [r5, r3]
 8003078:	4798      	blx	r3
 800307a:	3601      	adds	r6, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	00b3      	lsls	r3, r6, #2
 8003080:	58eb      	ldr	r3, [r5, r3]
 8003082:	4798      	blx	r3
 8003084:	3601      	adds	r6, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	08003124 	.word	0x08003124
 800308c:	08003124 	.word	0x08003124
 8003090:	08003128 	.word	0x08003128
 8003094:	08003124 	.word	0x08003124

08003098 <_init>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr

080030a4 <_fini>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr

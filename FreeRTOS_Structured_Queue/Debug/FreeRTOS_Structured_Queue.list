
FreeRTOS_Structured_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b8  080053b8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c0  080053c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080053c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011dc  20000060  08005428  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08005428  0002123c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eedb  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026e2  00000000  00000000  0002efa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00031688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b56  00000000  00000000  00032530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015c4e  00000000  00000000  00033086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011820  00000000  00000000  00048cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000861e4  00000000  00000000  0005a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038a8  00000000  00000000  000e06d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e3f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005178 	.word	0x08005178

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005178 	.word	0x08005178

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <vApplicationGetIdleTaskMemory+0x28>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b004      	add	sp, #16
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	2000007c 	.word	0x2000007c
 80004f8:	200000d0 	.word	0x200000d0

080004fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000502:	f000 fb31 	bl	8000b68 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000506:	f000 f859 	bl	80005bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800050a:	f000 f8f9 	bl	8000700 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800050e:	f000 f8c7 	bl	80006a0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/********************** Create Queue ***********************/
	St_Queue_Handler = xQueueCreate(2, sizeof(my_struct));
 8000512:	2200      	movs	r2, #0
 8000514:	210c      	movs	r1, #12
 8000516:	2002      	movs	r0, #2
 8000518:	f002 fdbd 	bl	8003096 <xQueueGenericCreate>
 800051c:	0002      	movs	r2, r0
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <main+0x98>)
 8000520:	601a      	str	r2, [r3, #0]

	if (St_Queue_Handler == 0) //if there is some error in creating Queue
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <main+0x98>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10e      	bne.n	8000548 <main+0x4c>
			{
		char *str = "Unable to create Structured Queue.\r\n";
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <main+0x9c>)
 800052c:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	0018      	movs	r0, r3
 8000532:	f7ff fde9 	bl	8000108 <strlen>
 8000536:	0003      	movs	r3, r0
 8000538:	b29a      	uxth	r2, r3
 800053a:	2301      	movs	r3, #1
 800053c:	425b      	negs	r3, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	4816      	ldr	r0, [pc, #88]	; (800059c <main+0xa0>)
 8000542:	f001 ff5d 	bl	8002400 <HAL_UART_Transmit>
 8000546:	e00d      	b.n	8000564 <main+0x68>
	} else {
		char *str = "Successfully created Structured Queue.\r\n";
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <main+0xa4>)
 800054a:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff fdda 	bl	8000108 <strlen>
 8000554:	0003      	movs	r3, r0
 8000556:	b29a      	uxth	r2, r3
 8000558:	2301      	movs	r3, #1
 800055a:	425b      	negs	r3, r3
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <main+0xa0>)
 8000560:	f001 ff4e 	bl	8002400 <HAL_UART_Transmit>
	}

	/********************** Create Task ***********************/

	xTaskCreate(Sender1_Task, "SENDER1", 128, NULL, 2, &Sender1_Task_Handler);
 8000564:	490f      	ldr	r1, [pc, #60]	; (80005a4 <main+0xa8>)
 8000566:	4810      	ldr	r0, [pc, #64]	; (80005a8 <main+0xac>)
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <main+0xb0>)
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2302      	movs	r3, #2
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2300      	movs	r3, #0
 8000572:	2280      	movs	r2, #128	; 0x80
 8000574:	f003 f8c3 	bl	80036fe <xTaskCreate>
	xTaskCreate(Receiver_Task, "RECEIVER", 128, NULL, 1,
 8000578:	490d      	ldr	r1, [pc, #52]	; (80005b0 <main+0xb4>)
 800057a:	480e      	ldr	r0, [pc, #56]	; (80005b4 <main+0xb8>)
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <main+0xbc>)
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2301      	movs	r3, #1
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	f003 f8b9 	bl	80036fe <xTaskCreate>
			&Receiver_Task_Handler);

	/********************** Start the scheduler ***********************/
	vTaskStartScheduler();
 800058c:	f003 fa10 	bl	80039b0 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000590:	e7fe      	b.n	8000590 <main+0x94>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	20000358 	.word	0x20000358
 8000598:	08005190 	.word	0x08005190
 800059c:	200002d0 	.word	0x200002d0
 80005a0:	080051b8 	.word	0x080051b8
 80005a4:	080051e4 	.word	0x080051e4
 80005a8:	0800072d 	.word	0x0800072d
 80005ac:	2000035c 	.word	0x2000035c
 80005b0:	080051ec 	.word	0x080051ec
 80005b4:	080007e1 	.word	0x080007e1
 80005b8:	20000360 	.word	0x20000360

080005bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b09d      	sub	sp, #116	; 0x74
 80005c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005c2:	2438      	movs	r4, #56	; 0x38
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	0018      	movs	r0, r3
 80005c8:	2338      	movs	r3, #56	; 0x38
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f004 f94d 	bl	800486c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005d2:	2324      	movs	r3, #36	; 0x24
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	0018      	movs	r0, r3
 80005d8:	2314      	movs	r3, #20
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f004 f945 	bl	800486c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005e2:	003b      	movs	r3, r7
 80005e4:	0018      	movs	r0, r3
 80005e6:	2324      	movs	r3, #36	; 0x24
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f004 f93e 	bl	800486c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <SystemClock_Config+0xdc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a29      	ldr	r2, [pc, #164]	; (800069c <SystemClock_Config+0xe0>)
 80005f6:	401a      	ands	r2, r3
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <SystemClock_Config+0xdc>)
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	0109      	lsls	r1, r1, #4
 80005fe:	430a      	orrs	r2, r1
 8000600:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000602:	0021      	movs	r1, r4
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2202      	movs	r2, #2
 8000608:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2201      	movs	r2, #1
 800060e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2210      	movs	r2, #16
 8000614:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2202      	movs	r2, #2
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	02d2      	lsls	r2, r2, #11
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	03d2      	lsls	r2, r2, #15
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000632:	187b      	adds	r3, r7, r1
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fcf7 	bl	8001028 <HAL_RCC_OscConfig>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x86>
		Error_Handler();
 800063e:	f000 f937 	bl	80008b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000642:	2124      	movs	r1, #36	; 0x24
 8000644:	187b      	adds	r3, r7, r1
 8000646:	220f      	movs	r2, #15
 8000648:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2203      	movs	r2, #3
 800064e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2101      	movs	r1, #1
 8000666:	0018      	movs	r0, r3
 8000668:	f001 f8a2 	bl	80017b0 <HAL_RCC_ClockConfig>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xb8>
		Error_Handler();
 8000670:	f000 f91e 	bl	80008b0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000674:	003b      	movs	r3, r7
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800067a:	003b      	movs	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000680:	003b      	movs	r3, r7
 8000682:	0018      	movs	r0, r3
 8000684:	f001 faea 	bl	8001c5c <HAL_RCCEx_PeriphCLKConfig>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xd4>
		Error_Handler();
 800068c:	f000 f910 	bl	80008b0 <Error_Handler>
	}
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b01d      	add	sp, #116	; 0x74
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	40007000 	.word	0x40007000
 800069c:	ffffe7ff 	.word	0xffffe7ff

080006a0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART1_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ac:	22e1      	movs	r2, #225	; 0xe1
 80006ae:	0252      	lsls	r2, r2, #9
 80006b0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fe37 	bl	8002358 <HAL_UART_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80006ee:	f000 f8df 	bl	80008b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200002d0 	.word	0x200002d0
 80006fc:	40013800 	.word	0x40013800

08000700 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_GPIO_Init+0x28>)
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_GPIO_Init+0x28>)
 800070c:	2101      	movs	r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <MX_GPIO_Init+0x28>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	2201      	movs	r2, #1
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000

0800072c <Sender1_Task>:

/* USER CODE BEGIN 4 */

void Sender1_Task(void *argument) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	my_struct *ptrToStruct;
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 8000734:	23fa      	movs	r3, #250	; 0xfa
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	617b      	str	r3, [r7, #20]

	while (1) {

		char *str =
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <Sender1_Task+0x9c>)
 800073c:	613b      	str	r3, [r7, #16]
				"Entered Sender task1.\r\nAbout to send data to queue.\r\n\r\n";
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff fce1 	bl	8000108 <strlen>
 8000746:	0003      	movs	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	6939      	ldr	r1, [r7, #16]
 8000750:	481e      	ldr	r0, [pc, #120]	; (80007cc <Sender1_Task+0xa0>)
 8000752:	f001 fe55 	bl	8002400 <HAL_UART_Transmit>

		/********************* Allocate Memory to PTR ***************************/
		ptrToStruct = pvPortMalloc(sizeof(my_struct));
 8000756:	200c      	movs	r0, #12
 8000758:	f003 fec2 	bl	80044e0 <pvPortMalloc>
 800075c:	0003      	movs	r3, r0
 800075e:	60bb      	str	r3, [r7, #8]

		/********************* Load the data ***************************/
		ptrToStruct->counter = 1 + indx;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <Sender1_Task+0xa4>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3201      	adds	r2, #1
 8000768:	605a      	str	r2, [r3, #4]
		ptrToStruct->large_value = 1000 + indx * 100;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <Sender1_Task+0xa4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	b29b      	uxth	r3, r3
 8000770:	2264      	movs	r2, #100	; 0x64
 8000772:	4353      	muls	r3, r2
 8000774:	b29b      	uxth	r3, r3
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	21fa      	movs	r1, #250	; 0xfa
 800077a:	0089      	lsls	r1, r1, #2
 800077c:	468c      	mov	ip, r1
 800077e:	4463      	add	r3, ip
 8000780:	b29b      	uxth	r3, r3
 8000782:	8113      	strh	r3, [r2, #8]
		ptrToStruct->str = "Hello from the SENDER1";
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <Sender1_Task+0xa8>)
 8000788:	601a      	str	r2, [r3, #0]

		/********************* Send the data to Queue ***************************/

		if (xQueueSend(St_Queue_Handler, &ptrToStruct, portMAX_DELAY) == pdPASS) {
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <Sender1_Task+0xac>)
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	2301      	movs	r3, #1
 8000790:	425a      	negs	r2, r3
 8000792:	2308      	movs	r3, #8
 8000794:	18f9      	adds	r1, r7, r3
 8000796:	2300      	movs	r3, #0
 8000798:	f002 fcd7 	bl	800314a <xQueueGenericSend>
 800079c:	0003      	movs	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d108      	bne.n	80007b4 <Sender1_Task+0x88>
			char *str2 =
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <Sender1_Task+0xb0>)
 80007a4:	60fb      	str	r3, [r7, #12]
					"Successfully send the to the Queue\r\nLeaving the SENDER1_TASK\r\n\r\n";
			HAL_UART_Transmit(&huart1, (uint8_t*) str2, sizeof(str2),
 80007a6:	2301      	movs	r3, #1
 80007a8:	425b      	negs	r3, r3
 80007aa:	68f9      	ldr	r1, [r7, #12]
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <Sender1_Task+0xa0>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	f001 fe26 	bl	8002400 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}

		indx = indx + 1;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <Sender1_Task+0xa4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <Sender1_Task+0xa4>)
 80007bc:	601a      	str	r2, [r3, #0]
		vTaskDelay(TickDelay);
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	0018      	movs	r0, r3
 80007c2:	f003 f8cf 	bl	8003964 <vTaskDelay>
	while (1) {
 80007c6:	e7b8      	b.n	800073a <Sender1_Task+0xe>
 80007c8:	080051f8 	.word	0x080051f8
 80007cc:	200002d0 	.word	0x200002d0
 80007d0:	20000364 	.word	0x20000364
 80007d4:	08005230 	.word	0x08005230
 80007d8:	20000358 	.word	0x20000358
 80007dc:	08005248 	.word	0x08005248

080007e0 <Receiver_Task>:
	}
}

void Receiver_Task(void *argument) {
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
	my_struct *Rptrtostruct;
	uint32_t TickDelay = pdMS_TO_TICKS(3000);
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <Receiver_Task+0x98>)
 80007ea:	617b      	str	r3, [r7, #20]
	char *ptr;

	while (1) {
		char *str =
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <Receiver_Task+0x9c>)
 80007ee:	613b      	str	r3, [r7, #16]
				"Entered RECEIVER Task\r\nabout to RECEIVE FROM the queue\r\n\r\n";
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff fc88 	bl	8000108 <strlen>
 80007f8:	0003      	movs	r3, r0
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	2301      	movs	r3, #1
 80007fe:	425b      	negs	r3, r3
 8000800:	6939      	ldr	r1, [r7, #16]
 8000802:	481f      	ldr	r0, [pc, #124]	; (8000880 <Receiver_Task+0xa0>)
 8000804:	f001 fdfc 	bl	8002400 <HAL_UART_Transmit>

		/**** RECEIVE FROM QUEUE *****/
		if (xQueueReceive(St_Queue_Handler, &Rptrtostruct,
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <Receiver_Task+0xa4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2201      	movs	r2, #1
 800080e:	4252      	negs	r2, r2
 8000810:	2108      	movs	r1, #8
 8000812:	1879      	adds	r1, r7, r1
 8000814:	0018      	movs	r0, r3
 8000816:	f002 fd5c 	bl	80032d2 <xQueueReceive>
 800081a:	0003      	movs	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d121      	bne.n	8000864 <Receiver_Task+0x84>
				portMAX_DELAY) == pdPASS) {
			ptr = pvPortMalloc(100 * sizeof(char)); // allocate memory for the string
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f003 fe5d 	bl	80044e0 <pvPortMalloc>
 8000826:	0003      	movs	r3, r0
 8000828:	60fb      	str	r3, [r7, #12]

			sprintf(ptr,
					"Received from QUEUE:\r\nCOUNTER = %d\r\nLARGE VALUE = %u\r\nSTRING = %s\r\n\r\n\r\n",
					Rptrtostruct->counter, Rptrtostruct->large_value,
 800082a:	68bb      	ldr	r3, [r7, #8]
			sprintf(ptr,
 800082c:	685a      	ldr	r2, [r3, #4]
					Rptrtostruct->counter, Rptrtostruct->large_value,
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	891b      	ldrh	r3, [r3, #8]
			sprintf(ptr,
 8000832:	001c      	movs	r4, r3
					Rptrtostruct->str);
 8000834:	68bb      	ldr	r3, [r7, #8]
			sprintf(ptr,
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4913      	ldr	r1, [pc, #76]	; (8000888 <Receiver_Task+0xa8>)
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	0023      	movs	r3, r4
 8000840:	f003 fff4 	bl	800482c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) ptr, strlen(ptr),
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff fc5e 	bl	8000108 <strlen>
 800084c:	0003      	movs	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	2301      	movs	r3, #1
 8000852:	425b      	negs	r3, r3
 8000854:	68f9      	ldr	r1, [r7, #12]
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <Receiver_Task+0xa0>)
 8000858:	f001 fdd2 	bl	8002400 <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			vPortFree(ptr);  // free the string memory
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	0018      	movs	r0, r3
 8000860:	f003 fee4 	bl	800462c <vPortFree>
		}

		vPortFree(Rptrtostruct);  // free the structure memory
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	0018      	movs	r0, r3
 8000868:	f003 fee0 	bl	800462c <vPortFree>

		vTaskDelay(TickDelay);
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	0018      	movs	r0, r3
 8000870:	f003 f878 	bl	8003964 <vTaskDelay>
	while (1) {
 8000874:	e7ba      	b.n	80007ec <Receiver_Task+0xc>
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	00000bb8 	.word	0x00000bb8
 800087c:	0800528c 	.word	0x0800528c
 8000880:	200002d0 	.word	0x200002d0
 8000884:	20000358 	.word	0x20000358
 8000888:	080052c8 	.word	0x080052c8

0800088c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800089e:	f000 f983 	bl	8000ba8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	40001000 	.word	0x40001000

080008b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_MspInit+0x34>)
 80008c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_MspInit+0x34>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	430a      	orrs	r2, r1
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_MspInit+0x34>)
 80008ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_MspInit+0x34>)
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	0549      	lsls	r1, r1, #21
 80008d6:	430a      	orrs	r2, r1
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80008da:	2302      	movs	r3, #2
 80008dc:	425b      	negs	r3, r3
 80008de:	2200      	movs	r2, #0
 80008e0:	2103      	movs	r1, #3
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 fa04 	bl	8000cf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	240c      	movs	r4, #12
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	0018      	movs	r0, r3
 8000902:	2314      	movs	r3, #20
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f003 ffb0 	bl	800486c <memset>
  if(huart->Instance==USART1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a18      	ldr	r2, [pc, #96]	; (8000974 <HAL_UART_MspInit+0x80>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12a      	bne.n	800096c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_UART_MspInit+0x84>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x84>)
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	01c9      	lsls	r1, r1, #7
 8000920:	430a      	orrs	r2, r1
 8000922:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UART_MspInit+0x84>)
 8000926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_UART_MspInit+0x84>)
 800092a:	2101      	movs	r1, #1
 800092c:	430a      	orrs	r2, r1
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0x84>)
 8000932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000934:	2201      	movs	r2, #1
 8000936:	4013      	ands	r3, r2
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	22c0      	movs	r2, #192	; 0xc0
 8000940:	00d2      	lsls	r2, r2, #3
 8000942:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	0021      	movs	r1, r4
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2202      	movs	r2, #2
 800094a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2203      	movs	r2, #3
 8000956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2204      	movs	r2, #4
 800095c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	187a      	adds	r2, r7, r1
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f000 f9e8 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	; 0x24
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	40013800 	.word	0x40013800
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	0019      	movs	r1, r3
 800098a:	2011      	movs	r0, #17
 800098c:	f000 f9b0 	bl	8000cf0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000990:	2011      	movs	r0, #17
 8000992:	f000 f9c2 	bl	8000d1a <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000996:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <HAL_InitTick+0xe4>)
 8000998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <HAL_InitTick+0xe4>)
 800099c:	2110      	movs	r1, #16
 800099e:	430a      	orrs	r2, r1
 80009a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a2:	2308      	movs	r3, #8
 80009a4:	18fa      	adds	r2, r7, r3
 80009a6:	240c      	movs	r4, #12
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 f923 	bl	8001bf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d104      	bne.n	80009c8 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009be:	f001 f8ef 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 80009c2:	0003      	movs	r3, r0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009c6:	e004      	b.n	80009d2 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009c8:	f001 f8ea 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 80009cc:	0003      	movs	r3, r0
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d4:	4923      	ldr	r1, [pc, #140]	; (8000a64 <HAL_InitTick+0xe8>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff fba8 	bl	800012c <__udivsi3>
 80009dc:	0003      	movs	r3, r0
 80009de:	3b01      	subs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <HAL_InitTick+0xec>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <HAL_InitTick+0xf0>)
 80009e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <HAL_InitTick+0xec>)
 80009ea:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <HAL_InitTick+0xf4>)
 80009ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <HAL_InitTick+0xec>)
 80009f0:	6a3a      	ldr	r2, [r7, #32]
 80009f2:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_InitTick+0xec>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <HAL_InitTick+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000a00:	252b      	movs	r5, #43	; 0x2b
 8000a02:	197c      	adds	r4, r7, r5
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_InitTick+0xec>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 fab6 	bl	8001f78 <HAL_TIM_Base_Init>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000a10:	197b      	adds	r3, r7, r5
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d11b      	bne.n	8000a50 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a18:	197c      	adds	r4, r7, r5
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_InitTick+0xec>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 faf3 	bl	8002008 <HAL_TIM_Base_Start_IT>
 8000a22:	0003      	movs	r3, r0
 8000a24:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000a26:	197b      	adds	r3, r7, r5
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d110      	bne.n	8000a50 <HAL_InitTick+0xd4>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d809      	bhi.n	8000a48 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	0019      	movs	r1, r3
 8000a3a:	2011      	movs	r0, #17
 8000a3c:	f000 f958 	bl	8000cf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_InitTick+0xf8>)
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e003      	b.n	8000a50 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000a48:	232b      	movs	r3, #43	; 0x2b
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000a50:	232b      	movs	r3, #43	; 0x2b
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b00c      	add	sp, #48	; 0x30
 8000a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40021000 	.word	0x40021000
 8000a64:	000f4240 	.word	0x000f4240
 8000a68:	20000368 	.word	0x20000368
 8000a6c:	40001000 	.word	0x40001000
 8000a70:	000003e7 	.word	0x000003e7
 8000a74:	20000004 	.word	0x20000004

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <TIM6_DAC_IRQHandler+0x14>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fb08 	bl	80020a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000368 	.word	0x20000368

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	18d3      	adds	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f003 fed6 	bl	800487c <__errno>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	425b      	negs	r3, r3
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	18d2      	adds	r2, r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b006      	add	sp, #24
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20002000 	.word	0x20002000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	200003a8 	.word	0x200003a8
 8000b04:	20001240 	.word	0x20001240

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b16:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b18:	f7ff fff6 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <LoopForever+0xe>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	; (8000b60 <LoopForever+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f003 fea1 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fcd9 	bl	80004fc <main>

08000b4a <LoopForever>:

LoopForever:
    b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   r0, =_estack
 8000b4c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b58:	080053c8 	.word	0x080053c8
  ldr r2, =_sbss
 8000b5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b60:	2000123c 	.word	0x2000123c

08000b64 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_COMP_IRQHandler>
	...

08000b68 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_Init+0x3c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Init+0x3c>)
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b80:	2003      	movs	r0, #3
 8000b82:	f7ff fefb 	bl	800097c <HAL_InitTick>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e001      	b.n	8000b96 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b92:	f7ff fe93 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	40022000 	.word	0x40022000

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x1c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	18d2      	adds	r2, r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bba:	601a      	str	r2, [r3, #0]
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	200003ac 	.word	0x200003ac

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <HAL_GetTick+0x10>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	200003ac 	.word	0x200003ac

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	0002      	movs	r2, r0
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf2:	d809      	bhi.n	8000c08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	231f      	movs	r3, #31
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_EnableIRQ+0x30>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	4091      	lsls	r1, r2
 8000c04:	000a      	movs	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]
  }
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b7f      	cmp	r3, #127	; 0x7f
 8000c28:	d828      	bhi.n	8000c7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <__NVIC_SetPriority+0xd4>)
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	33c0      	adds	r3, #192	; 0xc0
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	589b      	ldr	r3, [r3, r2]
 8000c3a:	1dfa      	adds	r2, r7, #7
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	0011      	movs	r1, r2
 8000c40:	2203      	movs	r2, #3
 8000c42:	400a      	ands	r2, r1
 8000c44:	00d2      	lsls	r2, r2, #3
 8000c46:	21ff      	movs	r1, #255	; 0xff
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	43d2      	mvns	r2, r2
 8000c4e:	401a      	ands	r2, r3
 8000c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	22ff      	movs	r2, #255	; 0xff
 8000c58:	401a      	ands	r2, r3
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2303      	movs	r3, #3
 8000c62:	4003      	ands	r3, r0
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c68:	481f      	ldr	r0, [pc, #124]	; (8000ce8 <__NVIC_SetPriority+0xd4>)
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	430a      	orrs	r2, r1
 8000c74:	33c0      	adds	r3, #192	; 0xc0
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c7a:	e031      	b.n	8000ce0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <__NVIC_SetPriority+0xd8>)
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	0019      	movs	r1, r3
 8000c84:	230f      	movs	r3, #15
 8000c86:	400b      	ands	r3, r1
 8000c88:	3b08      	subs	r3, #8
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3306      	adds	r3, #6
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	3304      	adds	r3, #4
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1dfa      	adds	r2, r7, #7
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	00d2      	lsls	r2, r2, #3
 8000ca2:	21ff      	movs	r1, #255	; 0xff
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	401a      	ands	r2, r3
 8000cac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	019b      	lsls	r3, r3, #6
 8000cb2:	22ff      	movs	r2, #255	; 0xff
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	4003      	ands	r3, r0
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <__NVIC_SetPriority+0xd8>)
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	001c      	movs	r4, r3
 8000ccc:	230f      	movs	r3, #15
 8000cce:	4023      	ands	r3, r4
 8000cd0:	3b08      	subs	r3, #8
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	3306      	adds	r3, #6
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	18c3      	adds	r3, r0, r3
 8000cdc:	3304      	adds	r3, #4
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b003      	add	sp, #12
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	1c02      	adds	r2, r0, #0
 8000d00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ff81 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	0002      	movs	r2, r0
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ff57 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d52:	e14f      	b.n	8000ff4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	000a      	movs	r2, r1
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d100      	bne.n	8000d6c <HAL_GPIO_Init+0x30>
 8000d6a:	e140      	b.n	8000fee <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2203      	movs	r2, #3
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2203      	movs	r2, #3
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d017      	beq.n	8000e22 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d123      	bne.n	8000e76 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	58d3      	ldr	r3, [r2, r3]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2207      	movs	r2, #7
 8000e40:	4013      	ands	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2107      	movs	r1, #7
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	6939      	ldr	r1, [r7, #16]
 8000e74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	401a      	ands	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	23c0      	movs	r3, #192	; 0xc0
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d100      	bne.n	8000eb8 <HAL_GPIO_Init+0x17c>
 8000eb6:	e09a      	b.n	8000fee <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	4b54      	ldr	r3, [pc, #336]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ebc:	4b53      	ldr	r3, [pc, #332]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec4:	4a52      	ldr	r2, [pc, #328]	; (8001010 <HAL_GPIO_Init+0x2d4>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	589b      	ldr	r3, [r3, r2]
 8000ed0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	409a      	lsls	r2, r3
 8000ede:	0013      	movs	r3, r2
 8000ee0:	43da      	mvns	r2, r3
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d019      	beq.n	8000f26 <HAL_GPIO_Init+0x1ea>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a47      	ldr	r2, [pc, #284]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0x1e6>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a46      	ldr	r2, [pc, #280]	; (8001018 <HAL_GPIO_Init+0x2dc>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d00d      	beq.n	8000f1e <HAL_GPIO_Init+0x1e2>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a45      	ldr	r2, [pc, #276]	; (800101c <HAL_GPIO_Init+0x2e0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0x1de>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a44      	ldr	r2, [pc, #272]	; (8001020 <HAL_GPIO_Init+0x2e4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_GPIO_Init+0x1da>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x1ec>
 8000f16:	2306      	movs	r3, #6
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x1ec>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x1ec>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x1ec>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x1ec>
 8000f26:	2300      	movs	r3, #0
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <HAL_GPIO_Init+0x2d4>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b37      	ldr	r3, [pc, #220]	; (8001024 <HAL_GPIO_Init+0x2e8>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	035b      	lsls	r3, r3, #13
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <HAL_GPIO_Init+0x2e8>)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <HAL_GPIO_Init+0x2e8>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	039b      	lsls	r3, r3, #14
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f94:	4b23      	ldr	r3, [pc, #140]	; (8001024 <HAL_GPIO_Init+0x2e8>)
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_GPIO_Init+0x2e8>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	029b      	lsls	r3, r3, #10
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_GPIO_Init+0x2e8>)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_GPIO_Init+0x2e8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	025b      	lsls	r3, r3, #9
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_GPIO_Init+0x2e8>)
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	1e13      	subs	r3, r2, #0
 8000ffe:	d000      	beq.n	8001002 <HAL_GPIO_Init+0x2c6>
 8001000:	e6a8      	b.n	8000d54 <HAL_GPIO_Init+0x18>
  }
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b006      	add	sp, #24
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000
 8001014:	50000400 	.word	0x50000400
 8001018:	50000800 	.word	0x50000800
 800101c:	50000c00 	.word	0x50000c00
 8001020:	50001c00 	.word	0x50001c00
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	f000 fbaf 	bl	800179a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103c:	4bcf      	ldr	r3, [pc, #828]	; (800137c <HAL_RCC_OscConfig+0x354>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	220c      	movs	r2, #12
 8001042:	4013      	ands	r3, r2
 8001044:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001046:	4bcd      	ldr	r3, [pc, #820]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	4013      	ands	r3, r2
 8001050:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	4013      	ands	r3, r2
 800105a:	d100      	bne.n	800105e <HAL_RCC_OscConfig+0x36>
 800105c:	e07e      	b.n	800115c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	2b08      	cmp	r3, #8
 8001062:	d007      	beq.n	8001074 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	2b0c      	cmp	r3, #12
 8001068:	d112      	bne.n	8001090 <HAL_RCC_OscConfig+0x68>
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	429a      	cmp	r2, r3
 8001072:	d10d      	bne.n	8001090 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	4bc1      	ldr	r3, [pc, #772]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	029b      	lsls	r3, r3, #10
 800107c:	4013      	ands	r3, r2
 800107e:	d100      	bne.n	8001082 <HAL_RCC_OscConfig+0x5a>
 8001080:	e06b      	b.n	800115a <HAL_RCC_OscConfig+0x132>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d167      	bne.n	800115a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	f000 fb85 	bl	800179a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	025b      	lsls	r3, r3, #9
 8001098:	429a      	cmp	r2, r3
 800109a:	d107      	bne.n	80010ac <HAL_RCC_OscConfig+0x84>
 800109c:	4bb7      	ldr	r3, [pc, #732]	; (800137c <HAL_RCC_OscConfig+0x354>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4bb6      	ldr	r3, [pc, #728]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0249      	lsls	r1, r1, #9
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e027      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	23a0      	movs	r3, #160	; 0xa0
 80010b2:	02db      	lsls	r3, r3, #11
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d10e      	bne.n	80010d6 <HAL_RCC_OscConfig+0xae>
 80010b8:	4bb0      	ldr	r3, [pc, #704]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4baf      	ldr	r3, [pc, #700]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	02c9      	lsls	r1, r1, #11
 80010c2:	430a      	orrs	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	4bad      	ldr	r3, [pc, #692]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4bac      	ldr	r3, [pc, #688]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	0249      	lsls	r1, r1, #9
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e012      	b.n	80010fc <HAL_RCC_OscConfig+0xd4>
 80010d6:	4ba9      	ldr	r3, [pc, #676]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4ba8      	ldr	r3, [pc, #672]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010dc:	49a8      	ldr	r1, [pc, #672]	; (8001380 <HAL_RCC_OscConfig+0x358>)
 80010de:	400a      	ands	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	4ba6      	ldr	r3, [pc, #664]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	025b      	lsls	r3, r3, #9
 80010ea:	4013      	ands	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4ba2      	ldr	r3, [pc, #648]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4ba1      	ldr	r3, [pc, #644]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80010f6:	49a3      	ldr	r1, [pc, #652]	; (8001384 <HAL_RCC_OscConfig+0x35c>)
 80010f8:	400a      	ands	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d015      	beq.n	8001130 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fd62 	bl	8000bcc <HAL_GetTick>
 8001108:	0003      	movs	r3, r0
 800110a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800110c:	e009      	b.n	8001122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110e:	f7ff fd5d 	bl	8000bcc <HAL_GetTick>
 8001112:	0002      	movs	r2, r0
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	d902      	bls.n	8001122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	f000 fb3c 	bl	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001122:	4b96      	ldr	r3, [pc, #600]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	029b      	lsls	r3, r3, #10
 800112a:	4013      	ands	r3, r2
 800112c:	d0ef      	beq.n	800110e <HAL_RCC_OscConfig+0xe6>
 800112e:	e015      	b.n	800115c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fd4c 	bl	8000bcc <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113a:	f7ff fd47 	bl	8000bcc <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b64      	cmp	r3, #100	; 0x64
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e326      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800114c:	4b8b      	ldr	r3, [pc, #556]	; (800137c <HAL_RCC_OscConfig+0x354>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	029b      	lsls	r3, r3, #10
 8001154:	4013      	ands	r3, r2
 8001156:	d1f0      	bne.n	800113a <HAL_RCC_OscConfig+0x112>
 8001158:	e000      	b.n	800115c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2202      	movs	r2, #2
 8001162:	4013      	ands	r3, r2
 8001164:	d100      	bne.n	8001168 <HAL_RCC_OscConfig+0x140>
 8001166:	e08b      	b.n	8001280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	2b04      	cmp	r3, #4
 8001172:	d005      	beq.n	8001180 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	2b0c      	cmp	r3, #12
 8001178:	d13e      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1d0>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d13b      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001180:	4b7e      	ldr	r3, [pc, #504]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2204      	movs	r2, #4
 8001186:	4013      	ands	r3, r2
 8001188:	d004      	beq.n	8001194 <HAL_RCC_OscConfig+0x16c>
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e302      	b.n	800179a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001194:	4b79      	ldr	r3, [pc, #484]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a7b      	ldr	r2, [pc, #492]	; (8001388 <HAL_RCC_OscConfig+0x360>)
 800119a:	4013      	ands	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	021a      	lsls	r2, r3, #8
 80011a4:	4b75      	ldr	r3, [pc, #468]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80011a6:	430a      	orrs	r2, r1
 80011a8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011aa:	4b74      	ldr	r3, [pc, #464]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2209      	movs	r2, #9
 80011b0:	4393      	bics	r3, r2
 80011b2:	0019      	movs	r1, r3
 80011b4:	4b71      	ldr	r3, [pc, #452]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011bc:	f000 fc40 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80011c0:	0001      	movs	r1, r0
 80011c2:	4b6e      	ldr	r3, [pc, #440]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	220f      	movs	r2, #15
 80011ca:	4013      	ands	r3, r2
 80011cc:	4a6f      	ldr	r2, [pc, #444]	; (800138c <HAL_RCC_OscConfig+0x364>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	000a      	movs	r2, r1
 80011d2:	40da      	lsrs	r2, r3
 80011d4:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <HAL_RCC_OscConfig+0x368>)
 80011d6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80011d8:	4b6e      	ldr	r3, [pc, #440]	; (8001394 <HAL_RCC_OscConfig+0x36c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2513      	movs	r5, #19
 80011de:	197c      	adds	r4, r7, r5
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff fbcb 	bl	800097c <HAL_InitTick>
 80011e6:	0003      	movs	r3, r0
 80011e8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80011ea:	197b      	adds	r3, r7, r5
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d046      	beq.n	8001280 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80011f2:	197b      	adds	r3, r7, r5
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	e2d0      	b.n	800179a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d027      	beq.n	800124e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2209      	movs	r2, #9
 8001204:	4393      	bics	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	4b5c      	ldr	r3, [pc, #368]	; (800137c <HAL_RCC_OscConfig+0x354>)
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	430a      	orrs	r2, r1
 800120e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fcdc 	bl	8000bcc <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fcd7 	bl	8000bcc <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e2b6      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_RCC_OscConfig+0x354>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2204      	movs	r2, #4
 8001232:	4013      	ands	r3, r2
 8001234:	d0f1      	beq.n	800121a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001236:	4b51      	ldr	r3, [pc, #324]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a53      	ldr	r2, [pc, #332]	; (8001388 <HAL_RCC_OscConfig+0x360>)
 800123c:	4013      	ands	r3, r2
 800123e:	0019      	movs	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	021a      	lsls	r2, r3, #8
 8001246:	4b4d      	ldr	r3, [pc, #308]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001248:	430a      	orrs	r2, r1
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	e018      	b.n	8001280 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124e:	4b4b      	ldr	r3, [pc, #300]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b4a      	ldr	r3, [pc, #296]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001254:	2101      	movs	r1, #1
 8001256:	438a      	bics	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125a:	f7ff fcb7 	bl	8000bcc <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fcb2 	bl	8000bcc <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e291      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2204      	movs	r2, #4
 800127c:	4013      	ands	r3, r2
 800127e:	d1f1      	bne.n	8001264 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2210      	movs	r2, #16
 8001286:	4013      	ands	r3, r2
 8001288:	d100      	bne.n	800128c <HAL_RCC_OscConfig+0x264>
 800128a:	e0a1      	b.n	80013d0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d140      	bne.n	8001314 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4013      	ands	r3, r2
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x282>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e277      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012aa:	4b34      	ldr	r3, [pc, #208]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <HAL_RCC_OscConfig+0x370>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	0a19      	lsrs	r1, r3, #8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	061a      	lsls	r2, r3, #24
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80012ce:	430a      	orrs	r2, r1
 80012d0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	0b5b      	lsrs	r3, r3, #13
 80012d8:	3301      	adds	r3, #1
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	0212      	lsls	r2, r2, #8
 80012de:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_RCC_OscConfig+0x354>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	210f      	movs	r1, #15
 80012e8:	400b      	ands	r3, r1
 80012ea:	4928      	ldr	r1, [pc, #160]	; (800138c <HAL_RCC_OscConfig+0x364>)
 80012ec:	5ccb      	ldrb	r3, [r1, r3]
 80012ee:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_RCC_OscConfig+0x368>)
 80012f2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_RCC_OscConfig+0x36c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2513      	movs	r5, #19
 80012fa:	197c      	adds	r4, r7, r5
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff fb3d 	bl	800097c <HAL_InitTick>
 8001302:	0003      	movs	r3, r0
 8001304:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001306:	197b      	adds	r3, r7, r5
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d060      	beq.n	80013d0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800130e:	197b      	adds	r3, r7, r5
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	e242      	b.n	800179a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d03f      	beq.n	800139c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_RCC_OscConfig+0x354>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	0049      	lsls	r1, r1, #1
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fc4f 	bl	8000bcc <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001334:	f7ff fc4a 	bl	8000bcc <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e229      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4013      	ands	r3, r2
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_RCC_OscConfig+0x370>)
 8001358:	4013      	ands	r3, r2
 800135a:	0019      	movs	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001362:	430a      	orrs	r2, r1
 8001364:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	0a19      	lsrs	r1, r3, #8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	061a      	lsls	r2, r3, #24
 8001374:	4b01      	ldr	r3, [pc, #4]	; (800137c <HAL_RCC_OscConfig+0x354>)
 8001376:	430a      	orrs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	e029      	b.n	80013d0 <HAL_RCC_OscConfig+0x3a8>
 800137c:	40021000 	.word	0x40021000
 8001380:	fffeffff 	.word	0xfffeffff
 8001384:	fffbffff 	.word	0xfffbffff
 8001388:	ffffe0ff 	.word	0xffffe0ff
 800138c:	08005318 	.word	0x08005318
 8001390:	20000000 	.word	0x20000000
 8001394:	20000004 	.word	0x20000004
 8001398:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800139c:	4bbd      	ldr	r3, [pc, #756]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4bbc      	ldr	r3, [pc, #752]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80013a2:	49bd      	ldr	r1, [pc, #756]	; (8001698 <HAL_RCC_OscConfig+0x670>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc10 	bl	8000bcc <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc0b 	bl	8000bcc <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1ea      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013c4:	4bb3      	ldr	r3, [pc, #716]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4013      	ands	r3, r2
 80013ce:	d1f0      	bne.n	80013b2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2208      	movs	r2, #8
 80013d6:	4013      	ands	r3, r2
 80013d8:	d036      	beq.n	8001448 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d019      	beq.n	8001416 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4bac      	ldr	r3, [pc, #688]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80013e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e6:	4bab      	ldr	r3, [pc, #684]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	430a      	orrs	r2, r1
 80013ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fbed 	bl	8000bcc <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f8:	f7ff fbe8 	bl	8000bcc <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1c7      	b.n	800179a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800140a:	4ba2      	ldr	r3, [pc, #648]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800140c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d0f1      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3d0>
 8001414:	e018      	b.n	8001448 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001416:	4b9f      	ldr	r3, [pc, #636]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800141a:	4b9e      	ldr	r3, [pc, #632]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800141c:	2101      	movs	r1, #1
 800141e:	438a      	bics	r2, r1
 8001420:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fbd3 	bl	8000bcc <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fbce 	bl	8000bcc <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1ad      	b.n	800179a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800143e:	4b95      	ldr	r3, [pc, #596]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001442:	2202      	movs	r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	d1f1      	bne.n	800142c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2204      	movs	r2, #4
 800144e:	4013      	ands	r3, r2
 8001450:	d100      	bne.n	8001454 <HAL_RCC_OscConfig+0x42c>
 8001452:	e0ae      	b.n	80015b2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001454:	2027      	movs	r0, #39	; 0x27
 8001456:	183b      	adds	r3, r7, r0
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145c:	4b8d      	ldr	r3, [pc, #564]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800145e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	055b      	lsls	r3, r3, #21
 8001464:	4013      	ands	r3, r2
 8001466:	d109      	bne.n	800147c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	4b8a      	ldr	r3, [pc, #552]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800146a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800146c:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	0549      	lsls	r1, r1, #21
 8001472:	430a      	orrs	r2, r1
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001476:	183b      	adds	r3, r7, r0
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	4b87      	ldr	r3, [pc, #540]	; (800169c <HAL_RCC_OscConfig+0x674>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4013      	ands	r3, r2
 8001486:	d11a      	bne.n	80014be <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001488:	4b84      	ldr	r3, [pc, #528]	; (800169c <HAL_RCC_OscConfig+0x674>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b83      	ldr	r3, [pc, #524]	; (800169c <HAL_RCC_OscConfig+0x674>)
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	0049      	lsls	r1, r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001496:	f7ff fb99 	bl	8000bcc <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a0:	f7ff fb94 	bl	8000bcc <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e173      	b.n	800179a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b7a      	ldr	r3, [pc, #488]	; (800169c <HAL_RCC_OscConfig+0x674>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4013      	ands	r3, r2
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d107      	bne.n	80014da <HAL_RCC_OscConfig+0x4b2>
 80014ca:	4b72      	ldr	r3, [pc, #456]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80014cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ce:	4b71      	ldr	r3, [pc, #452]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	0049      	lsls	r1, r1, #1
 80014d4:	430a      	orrs	r2, r1
 80014d6:	651a      	str	r2, [r3, #80]	; 0x50
 80014d8:	e031      	b.n	800153e <HAL_RCC_OscConfig+0x516>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x4d4>
 80014e2:	4b6c      	ldr	r3, [pc, #432]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80014e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e6:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80014e8:	496b      	ldr	r1, [pc, #428]	; (8001698 <HAL_RCC_OscConfig+0x670>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	651a      	str	r2, [r3, #80]	; 0x50
 80014ee:	4b69      	ldr	r3, [pc, #420]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80014f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f2:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80014f4:	496a      	ldr	r1, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x678>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	651a      	str	r2, [r3, #80]	; 0x50
 80014fa:	e020      	b.n	800153e <HAL_RCC_OscConfig+0x516>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	23a0      	movs	r3, #160	; 0xa0
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	429a      	cmp	r2, r3
 8001506:	d10e      	bne.n	8001526 <HAL_RCC_OscConfig+0x4fe>
 8001508:	4b62      	ldr	r3, [pc, #392]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800150a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800150c:	4b61      	ldr	r3, [pc, #388]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	00c9      	lsls	r1, r1, #3
 8001512:	430a      	orrs	r2, r1
 8001514:	651a      	str	r2, [r3, #80]	; 0x50
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001518:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800151a:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	0049      	lsls	r1, r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	651a      	str	r2, [r3, #80]	; 0x50
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x516>
 8001526:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800152a:	4b5a      	ldr	r3, [pc, #360]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800152c:	495a      	ldr	r1, [pc, #360]	; (8001698 <HAL_RCC_OscConfig+0x670>)
 800152e:	400a      	ands	r2, r1
 8001530:	651a      	str	r2, [r3, #80]	; 0x50
 8001532:	4b58      	ldr	r3, [pc, #352]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001536:	4b57      	ldr	r3, [pc, #348]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001538:	4959      	ldr	r1, [pc, #356]	; (80016a0 <HAL_RCC_OscConfig+0x678>)
 800153a:	400a      	ands	r2, r1
 800153c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d015      	beq.n	8001572 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff fb41 	bl	8000bcc <HAL_GetTick>
 800154a:	0003      	movs	r3, r0
 800154c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800154e:	e009      	b.n	8001564 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fb3c 	bl	8000bcc <HAL_GetTick>
 8001554:	0002      	movs	r2, r0
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_RCC_OscConfig+0x67c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e11a      	b.n	800179a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001564:	4b4b      	ldr	r3, [pc, #300]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d0ef      	beq.n	8001550 <HAL_RCC_OscConfig+0x528>
 8001570:	e014      	b.n	800159c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fb2b 	bl	8000bcc <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800157a:	e009      	b.n	8001590 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fb26 	bl	8000bcc <HAL_GetTick>
 8001580:	0002      	movs	r2, r0
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	4a47      	ldr	r2, [pc, #284]	; (80016a4 <HAL_RCC_OscConfig+0x67c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e104      	b.n	800179a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001590:	4b40      	ldr	r3, [pc, #256]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d1ef      	bne.n	800157c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800159c:	2327      	movs	r3, #39	; 0x27
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d105      	bne.n	80015b2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80015a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80015ac:	493e      	ldr	r1, [pc, #248]	; (80016a8 <HAL_RCC_OscConfig+0x680>)
 80015ae:	400a      	ands	r2, r1
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2220      	movs	r2, #32
 80015b8:	4013      	ands	r3, r2
 80015ba:	d049      	beq.n	8001650 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d026      	beq.n	8001612 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80015d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d4:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
 80015dc:	4b33      	ldr	r3, [pc, #204]	; (80016ac <HAL_RCC_OscConfig+0x684>)
 80015de:	6a1a      	ldr	r2, [r3, #32]
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_RCC_OscConfig+0x684>)
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	0189      	lsls	r1, r1, #6
 80015e6:	430a      	orrs	r2, r1
 80015e8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff faef 	bl	8000bcc <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f4:	f7ff faea 	bl	8000bcc <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0c9      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d0f1      	beq.n	80015f4 <HAL_RCC_OscConfig+0x5cc>
 8001610:	e01e      	b.n	8001650 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001618:	2101      	movs	r1, #1
 800161a:	438a      	bics	r2, r1
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <HAL_RCC_OscConfig+0x684>)
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_RCC_OscConfig+0x684>)
 8001624:	4922      	ldr	r1, [pc, #136]	; (80016b0 <HAL_RCC_OscConfig+0x688>)
 8001626:	400a      	ands	r2, r1
 8001628:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff facf 	bl	8000bcc <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001634:	f7ff faca 	bl	8000bcc <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0a9      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d1f1      	bne.n	8001634 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	d100      	bne.n	800165a <HAL_RCC_OscConfig+0x632>
 8001658:	e09e      	b.n	8001798 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	2b0c      	cmp	r3, #12
 800165e:	d100      	bne.n	8001662 <HAL_RCC_OscConfig+0x63a>
 8001660:	e077      	b.n	8001752 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	2b02      	cmp	r3, #2
 8001668:	d158      	bne.n	800171c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_RCC_OscConfig+0x66c>)
 8001670:	4910      	ldr	r1, [pc, #64]	; (80016b4 <HAL_RCC_OscConfig+0x68c>)
 8001672:	400a      	ands	r2, r1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff faa9 	bl	8000bcc <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800167e:	e01b      	b.n	80016b8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff faa4 	bl	8000bcc <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d914      	bls.n	80016b8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e083      	b.n	800179a <HAL_RCC_OscConfig+0x772>
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	40021000 	.word	0x40021000
 8001698:	fffffeff 	.word	0xfffffeff
 800169c:	40007000 	.word	0x40007000
 80016a0:	fffffbff 	.word	0xfffffbff
 80016a4:	00001388 	.word	0x00001388
 80016a8:	efffffff 	.word	0xefffffff
 80016ac:	40010000 	.word	0x40010000
 80016b0:	ffffdfff 	.word	0xffffdfff
 80016b4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016b8:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	049b      	lsls	r3, r3, #18
 80016c0:	4013      	ands	r3, r2
 80016c2:	d1dd      	bne.n	8001680 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c4:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4a37      	ldr	r2, [pc, #220]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	0019      	movs	r1, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016dc:	431a      	orrs	r2, r3
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0449      	lsls	r1, r1, #17
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fa6b 	bl	8000bcc <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fa66 	bl	8000bcc <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e045      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	049b      	lsls	r3, r3, #18
 8001716:	4013      	ands	r3, r2
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x6d4>
 800171a:	e03d      	b.n	8001798 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 8001722:	4922      	ldr	r1, [pc, #136]	; (80017ac <HAL_RCC_OscConfig+0x784>)
 8001724:	400a      	ands	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fa50 	bl	8000bcc <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff fa4b 	bl	8000bcc <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e02a      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	049b      	lsls	r3, r3, #18
 800174c:	4013      	ands	r3, r2
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x70a>
 8001750:	e022      	b.n	8001798 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e01d      	b.n	800179a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_RCC_OscConfig+0x77c>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	025b      	lsls	r3, r3, #9
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	429a      	cmp	r2, r3
 8001772:	d10f      	bne.n	8001794 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	23f0      	movs	r3, #240	; 0xf0
 8001778:	039b      	lsls	r3, r3, #14
 800177a:	401a      	ands	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	23c0      	movs	r3, #192	; 0xc0
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	401a      	ands	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b00a      	add	sp, #40	; 0x28
 80017a0:	bdb0      	pop	{r4, r5, r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40021000 	.word	0x40021000
 80017a8:	ff02ffff 	.word	0xff02ffff
 80017ac:	feffffff 	.word	0xfeffffff

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e128      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b96      	ldr	r3, [pc, #600]	; (8001a20 <HAL_RCC_ClockConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d91e      	bls.n	8001810 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b93      	ldr	r3, [pc, #588]	; (8001a20 <HAL_RCC_ClockConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	4b90      	ldr	r3, [pc, #576]	; (8001a20 <HAL_RCC_ClockConfig+0x270>)
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e4:	f7ff f9f2 	bl	8000bcc <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ec:	e009      	b.n	8001802 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7ff f9ed 	bl	8000bcc <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a8a      	ldr	r2, [pc, #552]	; (8001a24 <HAL_RCC_ClockConfig+0x274>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e109      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b87      	ldr	r3, [pc, #540]	; (8001a20 <HAL_RCC_ClockConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	4013      	ands	r3, r2
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2202      	movs	r2, #2
 8001816:	4013      	ands	r3, r2
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181a:	4b83      	ldr	r3, [pc, #524]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	22f0      	movs	r2, #240	; 0xf0
 8001820:	4393      	bics	r3, r2
 8001822:	0019      	movs	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 800182a:	430a      	orrs	r2, r1
 800182c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	d100      	bne.n	800183a <HAL_RCC_ClockConfig+0x8a>
 8001838:	e089      	b.n	800194e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001842:	4b79      	ldr	r3, [pc, #484]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	029b      	lsls	r3, r3, #10
 800184a:	4013      	ands	r3, r2
 800184c:	d120      	bne.n	8001890 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0e1      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800185a:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	049b      	lsls	r3, r3, #18
 8001862:	4013      	ands	r3, r2
 8001864:	d114      	bne.n	8001890 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0d5      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d106      	bne.n	8001880 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001872:	4b6d      	ldr	r3, [pc, #436]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2204      	movs	r2, #4
 8001878:	4013      	ands	r3, r2
 800187a:	d109      	bne.n	8001890 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0ca      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001880:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0c2      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001890:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2203      	movs	r2, #3
 8001896:	4393      	bics	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff f992 	bl	8000bcc <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d111      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b4:	e009      	b.n	80018ca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b6:	f7ff f989 	bl	8000bcc <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <HAL_RCC_ClockConfig+0x274>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e0a5      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ca:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	220c      	movs	r2, #12
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d1ef      	bne.n	80018b6 <HAL_RCC_ClockConfig+0x106>
 80018d6:	e03a      	b.n	800194e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d111      	bne.n	8001904 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e2:	f7ff f973 	bl	8000bcc <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4a4d      	ldr	r2, [pc, #308]	; (8001a24 <HAL_RCC_ClockConfig+0x274>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e08f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	220c      	movs	r2, #12
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d1ef      	bne.n	80018e2 <HAL_RCC_ClockConfig+0x132>
 8001902:	e024      	b.n	800194e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d11b      	bne.n	8001944 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800190c:	e009      	b.n	8001922 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7ff f95d 	bl	8000bcc <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a42      	ldr	r2, [pc, #264]	; (8001a24 <HAL_RCC_ClockConfig+0x274>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e079      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	220c      	movs	r2, #12
 8001928:	4013      	ands	r3, r2
 800192a:	2b04      	cmp	r3, #4
 800192c:	d1ef      	bne.n	800190e <HAL_RCC_ClockConfig+0x15e>
 800192e:	e00e      	b.n	800194e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001930:	f7ff f94c 	bl	8000bcc <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <HAL_RCC_ClockConfig+0x274>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e068      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001944:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	220c      	movs	r2, #12
 800194a:	4013      	ands	r3, r2
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_ClockConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d21e      	bcs.n	800199a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_RCC_ClockConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	4393      	bics	r3, r2
 8001964:	0019      	movs	r1, r3
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_RCC_ClockConfig+0x270>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800196e:	f7ff f92d 	bl	8000bcc <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	e009      	b.n	800198c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7ff f928 	bl	8000bcc <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <HAL_RCC_ClockConfig+0x274>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e044      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_ClockConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d1ee      	bne.n	8001978 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	4013      	ands	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <HAL_RCC_ClockConfig+0x27c>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2208      	movs	r2, #8
 80019be:	4013      	ands	r3, r2
 80019c0:	d00a      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <HAL_RCC_ClockConfig+0x280>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	00da      	lsls	r2, r3, #3
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019d4:	430a      	orrs	r2, r1
 80019d6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d8:	f000 f832 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019dc:	0001      	movs	r1, r0
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	220f      	movs	r2, #15
 80019e6:	4013      	ands	r3, r2
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <HAL_RCC_ClockConfig+0x284>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	000a      	movs	r2, r1
 80019ee:	40da      	lsrs	r2, r3
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_ClockConfig+0x288>)
 80019f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_RCC_ClockConfig+0x28c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	250b      	movs	r5, #11
 80019fa:	197c      	adds	r4, r7, r5
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7fe ffbd 	bl	800097c <HAL_InitTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a06:	197b      	adds	r3, r7, r5
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a0e:	197b      	adds	r3, r7, r5
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	e000      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	40022000 	.word	0x40022000
 8001a24:	00001388 	.word	0x00001388
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	fffff8ff 	.word	0xfffff8ff
 8001a30:	ffffc7ff 	.word	0xffffc7ff
 8001a34:	08005318 	.word	0x08005318
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4e:	230c      	movs	r3, #12
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d014      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x40>
 8001a56:	d900      	bls.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1a>
 8001a58:	e07b      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x112>
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x24>
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d00b      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a62:	e076      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a64:	4b44      	ldr	r3, [pc, #272]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d002      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a72:	e07c      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a78:	e079      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a7a:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a7e:	e076      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	0c9a      	lsrs	r2, r3, #18
 8001a84:	230f      	movs	r3, #15
 8001a86:	401a      	ands	r2, r3
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	0d9a      	lsrs	r2, r3, #22
 8001a92:	2303      	movs	r3, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	3301      	adds	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d01a      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	4a35      	ldr	r2, [pc, #212]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	69b8      	ldr	r0, [r7, #24]
 8001ab4:	69f9      	ldr	r1, [r7, #28]
 8001ab6:	f7fe fbe5 	bl	8000284 <__aeabi_lmul>
 8001aba:	0002      	movs	r2, r0
 8001abc:	000b      	movs	r3, r1
 8001abe:	0010      	movs	r0, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f7fe fbb9 	bl	8000244 <__aeabi_uldivmod>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	000b      	movs	r3, r1
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8001ada:	e037      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d01a      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001af0:	2300      	movs	r3, #0
 8001af2:	68b8      	ldr	r0, [r7, #8]
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	f7fe fbc5 	bl	8000284 <__aeabi_lmul>
 8001afa:	0002      	movs	r2, r0
 8001afc:	000b      	movs	r3, r1
 8001afe:	0010      	movs	r0, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f7fe fb99 	bl	8000244 <__aeabi_uldivmod>
 8001b12:	0002      	movs	r2, r0
 8001b14:	000b      	movs	r3, r1
 8001b16:	0013      	movs	r3, r2
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1a:	e017      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	0018      	movs	r0, r3
 8001b20:	2300      	movs	r3, #0
 8001b22:	0019      	movs	r1, r3
 8001b24:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b26:	2300      	movs	r3, #0
 8001b28:	f7fe fbac 	bl	8000284 <__aeabi_lmul>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	000b      	movs	r3, r1
 8001b30:	0010      	movs	r0, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	001c      	movs	r4, r3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	001d      	movs	r5, r3
 8001b3c:	0022      	movs	r2, r4
 8001b3e:	002b      	movs	r3, r5
 8001b40:	f7fe fb80 	bl	8000244 <__aeabi_uldivmod>
 8001b44:	0002      	movs	r2, r0
 8001b46:	000b      	movs	r3, r1
 8001b48:	0013      	movs	r3, r2
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b50:	e00d      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	0b5b      	lsrs	r3, r3, #13
 8001b58:	2207      	movs	r2, #7
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	3301      	adds	r3, #1
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	0212      	lsls	r2, r2, #8
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b6c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b00e      	add	sp, #56	; 0x38
 8001b76:	bdb0      	pop	{r4, r5, r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	003d0900 	.word	0x003d0900
 8001b80:	00f42400 	.word	0x00f42400
 8001b84:	007a1200 	.word	0x007a1200
 8001b88:	08005330 	.word	0x08005330

08001b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba4:	f7ff fff2 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001ba8:	0001      	movs	r1, r0
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	40d9      	lsrs	r1, r3
 8001bba:	000b      	movs	r3, r1
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08005328 	.word	0x08005328

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bd0:	f7ff ffdc 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bd4:	0001      	movs	r1, r0
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	0adb      	lsrs	r3, r3, #11
 8001bdc:	2207      	movs	r2, #7
 8001bde:	4013      	ands	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	40d9      	lsrs	r1, r3
 8001be6:	000b      	movs	r3, r1
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08005328 	.word	0x08005328

08001bf8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	220f      	movs	r2, #15
 8001c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	401a      	ands	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	22f0      	movs	r2, #240	; 0xf0
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	23e0      	movs	r3, #224	; 0xe0
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	401a      	ands	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	23e0      	movs	r3, #224	; 0xe0
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	401a      	ands	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_GetClockConfig+0x60>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	401a      	ands	r2, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	601a      	str	r2, [r3, #0]
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40022000 	.word	0x40022000

08001c5c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001c64:	2317      	movs	r3, #23
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2220      	movs	r2, #32
 8001c72:	4013      	ands	r3, r2
 8001c74:	d106      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d100      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001c82:	e104      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c84:	4bb1      	ldr	r3, [pc, #708]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	055b      	lsls	r3, r3, #21
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	4bae      	ldr	r3, [pc, #696]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c94:	4bad      	ldr	r3, [pc, #692]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	0549      	lsls	r1, r1, #21
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c9e:	2317      	movs	r3, #23
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4baa      	ldr	r3, [pc, #680]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d11a      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4ba7      	ldr	r3, [pc, #668]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4ba6      	ldr	r3, [pc, #664]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0049      	lsls	r1, r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc0:	f7fe ff84 	bl	8000bcc <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	e008      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7fe ff7f 	bl	8000bcc <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e133      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	4b9c      	ldr	r3, [pc, #624]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ce8:	4b98      	ldr	r3, [pc, #608]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	039b      	lsls	r3, r3, #14
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	23c0      	movs	r3, #192	; 0xc0
 8001cfa:	039b      	lsls	r3, r3, #14
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	23c0      	movs	r3, #192	; 0xc0
 8001d0a:	039b      	lsls	r3, r3, #14
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d013      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	23c0      	movs	r3, #192	; 0xc0
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d10a      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d26:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	029b      	lsls	r3, r3, #10
 8001d2e:	401a      	ands	r2, r3
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d101      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e103      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d3c:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d40:	23c0      	movs	r3, #192	; 0xc0
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d049      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	23c0      	movs	r3, #192	; 0xc0
 8001d54:	029b      	lsls	r3, r3, #10
 8001d56:	4013      	ands	r3, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d004      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2220      	movs	r2, #32
 8001d64:	4013      	ands	r3, r2
 8001d66:	d10d      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d034      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	d02e      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d84:	4b71      	ldr	r3, [pc, #452]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d88:	4a72      	ldr	r2, [pc, #456]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d92:	4b6e      	ldr	r3, [pc, #440]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0309      	lsls	r1, r1, #12
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001da2:	496d      	ldr	r1, [pc, #436]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001da8:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d014      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe ff08 	bl	8000bcc <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe ff03 	bl	8000bcc <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0b6      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	d0ef      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	4013      	ands	r3, r2
 8001dec:	d01f      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	23c0      	movs	r3, #192	; 0xc0
 8001df4:	029b      	lsls	r3, r3, #10
 8001df6:	401a      	ands	r2, r3
 8001df8:	23c0      	movs	r3, #192	; 0xc0
 8001dfa:	029b      	lsls	r3, r3, #10
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001e00:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a56      	ldr	r2, [pc, #344]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	23c0      	movs	r3, #192	; 0xc0
 8001e10:	039b      	lsls	r3, r3, #14
 8001e12:	401a      	ands	r2, r3
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	23c0      	movs	r3, #192	; 0xc0
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	401a      	ands	r2, r3
 8001e28:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2220      	movs	r2, #32
 8001e34:	4013      	ands	r3, r2
 8001e36:	d01f      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	23c0      	movs	r3, #192	; 0xc0
 8001e3e:	029b      	lsls	r3, r3, #10
 8001e40:	401a      	ands	r2, r3
 8001e42:	23c0      	movs	r3, #192	; 0xc0
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a44      	ldr	r2, [pc, #272]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	23c0      	movs	r3, #192	; 0xc0
 8001e5a:	039b      	lsls	r3, r3, #14
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e66:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	23c0      	movs	r3, #192	; 0xc0
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	401a      	ands	r2, r3
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e78:	2317      	movs	r3, #23
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e88:	4936      	ldr	r1, [pc, #216]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb6:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2208      	movs	r2, #8
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b006      	add	sp, #24
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	fffcffff 	.word	0xfffcffff
 8001f58:	fff7ffff 	.word	0xfff7ffff
 8001f5c:	00001388 	.word	0x00001388
 8001f60:	ffcfffff 	.word	0xffcfffff
 8001f64:	efffffff 	.word	0xefffffff
 8001f68:	fffff3ff 	.word	0xfffff3ff
 8001f6c:	ffffcfff 	.word	0xffffcfff
 8001f70:	fbffffff 	.word	0xfbffffff
 8001f74:	fff3ffff 	.word	0xfff3ffff

08001f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e032      	b.n	8001ff0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2239      	movs	r2, #57	; 0x39
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d107      	bne.n	8001fa6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2238      	movs	r2, #56	; 0x38
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f829 	bl	8001ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2239      	movs	r2, #57	; 0x39
 8001faa:	2102      	movs	r1, #2
 8001fac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	0010      	movs	r0, r2
 8001fba:	f000 f979 	bl	80022b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	223e      	movs	r2, #62	; 0x3e
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	223a      	movs	r2, #58	; 0x3a
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	223b      	movs	r2, #59	; 0x3b
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	223c      	movs	r2, #60	; 0x3c
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	223d      	movs	r2, #61	; 0x3d
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2239      	movs	r2, #57	; 0x39
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2239      	movs	r2, #57	; 0x39
 8002014:	5c9b      	ldrb	r3, [r3, r2]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d001      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e036      	b.n	800208e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2239      	movs	r2, #57	; 0x39
 8002024:	2102      	movs	r1, #2
 8002026:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2101      	movs	r1, #1
 8002034:	430a      	orrs	r2, r1
 8002036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	05db      	lsls	r3, r3, #23
 8002040:	429a      	cmp	r2, r3
 8002042:	d009      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x50>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <HAL_TIM_Base_Start_IT+0x90>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x50>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <HAL_TIM_Base_Start_IT+0x94>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2207      	movs	r2, #7
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b06      	cmp	r3, #6
 8002068:	d010      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	e007      	b.n	800208c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2101      	movs	r1, #1
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	40010800 	.word	0x40010800
 800209c:	40011400 	.word	0x40011400

080020a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d124      	bne.n	8002100 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d11d      	bne.n	8002100 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2203      	movs	r2, #3
 80020ca:	4252      	negs	r2, r2
 80020cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2203      	movs	r2, #3
 80020dc:	4013      	ands	r3, r2
 80020de:	d004      	beq.n	80020ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 f8cc 	bl	8002280 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e007      	b.n	80020fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f8bf 	bl	8002270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 f8cb 	bl	8002290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2204      	movs	r2, #4
 8002108:	4013      	ands	r3, r2
 800210a:	2b04      	cmp	r3, #4
 800210c:	d125      	bne.n	800215a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2204      	movs	r2, #4
 8002116:	4013      	ands	r3, r2
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11e      	bne.n	800215a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2205      	movs	r2, #5
 8002122:	4252      	negs	r2, r2
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	23c0      	movs	r3, #192	; 0xc0
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4013      	ands	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f89f 	bl	8002280 <HAL_TIM_IC_CaptureCallback>
 8002142:	e007      	b.n	8002154 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f892 	bl	8002270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 f89e 	bl	8002290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2208      	movs	r2, #8
 8002162:	4013      	ands	r3, r2
 8002164:	2b08      	cmp	r3, #8
 8002166:	d124      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2208      	movs	r2, #8
 8002170:	4013      	ands	r3, r2
 8002172:	2b08      	cmp	r3, #8
 8002174:	d11d      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2209      	movs	r2, #9
 800217c:	4252      	negs	r2, r2
 800217e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2204      	movs	r2, #4
 8002184:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2203      	movs	r2, #3
 800218e:	4013      	ands	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f000 f873 	bl	8002280 <HAL_TIM_IC_CaptureCallback>
 800219a:	e007      	b.n	80021ac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 f866 	bl	8002270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 f872 	bl	8002290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2210      	movs	r2, #16
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d125      	bne.n	800220c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2210      	movs	r2, #16
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	d11e      	bne.n	800220c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2211      	movs	r2, #17
 80021d4:	4252      	negs	r2, r2
 80021d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2208      	movs	r2, #8
 80021dc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	23c0      	movs	r3, #192	; 0xc0
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4013      	ands	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 f846 	bl	8002280 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e007      	b.n	8002206 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f839 	bl	8002270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f845 	bl	8002290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2201      	movs	r2, #1
 8002214:	4013      	ands	r3, r2
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10f      	bne.n	800223a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	4013      	ands	r3, r2
 8002224:	2b01      	cmp	r3, #1
 8002226:	d108      	bne.n	800223a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2202      	movs	r2, #2
 800222e:	4252      	negs	r2, r2
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0018      	movs	r0, r3
 8002236:	f7fe fb29 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	4013      	ands	r3, r2
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	d10f      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	4013      	ands	r3, r2
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	d108      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2241      	movs	r2, #65	; 0x41
 800225c:	4252      	negs	r2, r2
 800225e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	0018      	movs	r0, r3
 8002264:	f000 f81c 	bl	80022a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b002      	add	sp, #8
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	05db      	lsls	r3, r3, #23
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d007      	beq.n	80022da <TIM_Base_SetConfig+0x2a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <TIM_Base_SetConfig+0x9c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <TIM_Base_SetConfig+0x2a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <TIM_Base_SetConfig+0xa0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d108      	bne.n	80022ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2270      	movs	r2, #112	; 0x70
 80022de:	4393      	bics	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	05db      	lsls	r3, r3, #23
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d007      	beq.n	8002306 <TIM_Base_SetConfig+0x56>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <TIM_Base_SetConfig+0x9c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d003      	beq.n	8002306 <TIM_Base_SetConfig+0x56>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <TIM_Base_SetConfig+0xa0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d108      	bne.n	8002318 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <TIM_Base_SetConfig+0xa4>)
 800230a:	4013      	ands	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	4393      	bics	r3, r2
 800231e:	001a      	movs	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	615a      	str	r2, [r3, #20]
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b004      	add	sp, #16
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40010800 	.word	0x40010800
 8002350:	40011400 	.word	0x40011400
 8002354:	fffffcff 	.word	0xfffffcff

08002358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e044      	b.n	80023f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d107      	bne.n	8002382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2278      	movs	r2, #120	; 0x78
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0018      	movs	r0, r3
 800237e:	f7fe fab9 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2224      	movs	r2, #36	; 0x24
 8002386:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2101      	movs	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f8d0 	bl	8002540 <UART_SetConfig>
 80023a0:	0003      	movs	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e024      	b.n	80023f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 fb47 	bl	8002a48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	490d      	ldr	r1, [pc, #52]	; (80023fc <HAL_UART_Init+0xa4>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	212a      	movs	r1, #42	; 0x2a
 80023d6:	438a      	bics	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 fbdf 	bl	8002bb0 <UART_CheckIdleState>
 80023f2:	0003      	movs	r3, r0
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	ffffb7ff 	.word	0xffffb7ff

08002400 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	1dbb      	adds	r3, r7, #6
 800240e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002414:	2b20      	cmp	r3, #32
 8002416:	d000      	beq.n	800241a <HAL_UART_Transmit+0x1a>
 8002418:	e08c      	b.n	8002534 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_UART_Transmit+0x28>
 8002420:	1dbb      	adds	r3, r7, #6
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e084      	b.n	8002536 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	015b      	lsls	r3, r3, #5
 8002434:	429a      	cmp	r2, r3
 8002436:	d109      	bne.n	800244c <HAL_UART_Transmit+0x4c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2201      	movs	r2, #1
 8002444:	4013      	ands	r3, r2
 8002446:	d001      	beq.n	800244c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e074      	b.n	8002536 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2284      	movs	r2, #132	; 0x84
 8002450:	2100      	movs	r1, #0
 8002452:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2221      	movs	r2, #33	; 0x21
 8002458:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800245a:	f7fe fbb7 	bl	8000bcc <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1dba      	adds	r2, r7, #6
 8002466:	2150      	movs	r1, #80	; 0x50
 8002468:	8812      	ldrh	r2, [r2, #0]
 800246a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1dba      	adds	r2, r7, #6
 8002470:	2152      	movs	r1, #82	; 0x52
 8002472:	8812      	ldrh	r2, [r2, #0]
 8002474:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	015b      	lsls	r3, r3, #5
 800247e:	429a      	cmp	r2, r3
 8002480:	d108      	bne.n	8002494 <HAL_UART_Transmit+0x94>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d104      	bne.n	8002494 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	e003      	b.n	800249c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800249c:	e02f      	b.n	80024fe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	0013      	movs	r3, r2
 80024a8:	2200      	movs	r2, #0
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	f000 fc28 	bl	8002d00 <UART_WaitOnFlagUntilTimeout>
 80024b0:	1e03      	subs	r3, r0, #0
 80024b2:	d004      	beq.n	80024be <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e03b      	b.n	8002536 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	001a      	movs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	05d2      	lsls	r2, r2, #23
 80024d0:	0dd2      	lsrs	r2, r2, #23
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	3302      	adds	r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e007      	b.n	80024ec <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2252      	movs	r2, #82	; 0x52
 80024f0:	5a9b      	ldrh	r3, [r3, r2]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b299      	uxth	r1, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2252      	movs	r2, #82	; 0x52
 80024fc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2252      	movs	r2, #82	; 0x52
 8002502:	5a9b      	ldrh	r3, [r3, r2]
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1c9      	bne.n	800249e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	0013      	movs	r3, r2
 8002514:	2200      	movs	r2, #0
 8002516:	2140      	movs	r1, #64	; 0x40
 8002518:	f000 fbf2 	bl	8002d00 <UART_WaitOnFlagUntilTimeout>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d004      	beq.n	800252a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e005      	b.n	8002536 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
  }
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b008      	add	sp, #32
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	b08e      	sub	sp, #56	; 0x38
 8002544:	af00      	add	r7, sp, #0
 8002546:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002548:	231a      	movs	r3, #26
 800254a:	2218      	movs	r2, #24
 800254c:	189b      	adds	r3, r3, r2
 800254e:	19db      	adds	r3, r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	431a      	orrs	r2, r3
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	431a      	orrs	r2, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	4313      	orrs	r3, r2
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4ac6      	ldr	r2, [pc, #792]	; (800288c <UART_SetConfig+0x34c>)
 8002574:	4013      	ands	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4ac1      	ldr	r2, [pc, #772]	; (8002890 <UART_SetConfig+0x350>)
 800258a:	4013      	ands	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4abb      	ldr	r2, [pc, #748]	; (8002894 <UART_SetConfig+0x354>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025b0:	4313      	orrs	r3, r2
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4ab7      	ldr	r2, [pc, #732]	; (8002898 <UART_SetConfig+0x358>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4ab3      	ldr	r2, [pc, #716]	; (800289c <UART_SetConfig+0x35c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d131      	bne.n	8002638 <UART_SetConfig+0xf8>
 80025d4:	4bb2      	ldr	r3, [pc, #712]	; (80028a0 <UART_SetConfig+0x360>)
 80025d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d8:	2203      	movs	r2, #3
 80025da:	4013      	ands	r3, r2
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d01d      	beq.n	800261c <UART_SetConfig+0xdc>
 80025e0:	d823      	bhi.n	800262a <UART_SetConfig+0xea>
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d00c      	beq.n	8002600 <UART_SetConfig+0xc0>
 80025e6:	d820      	bhi.n	800262a <UART_SetConfig+0xea>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <UART_SetConfig+0xb2>
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d00e      	beq.n	800260e <UART_SetConfig+0xce>
 80025f0:	e01b      	b.n	800262a <UART_SetConfig+0xea>
 80025f2:	231b      	movs	r3, #27
 80025f4:	2218      	movs	r2, #24
 80025f6:	189b      	adds	r3, r3, r2
 80025f8:	19db      	adds	r3, r3, r7
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e09c      	b.n	800273a <UART_SetConfig+0x1fa>
 8002600:	231b      	movs	r3, #27
 8002602:	2218      	movs	r2, #24
 8002604:	189b      	adds	r3, r3, r2
 8002606:	19db      	adds	r3, r3, r7
 8002608:	2202      	movs	r2, #2
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e095      	b.n	800273a <UART_SetConfig+0x1fa>
 800260e:	231b      	movs	r3, #27
 8002610:	2218      	movs	r2, #24
 8002612:	189b      	adds	r3, r3, r2
 8002614:	19db      	adds	r3, r3, r7
 8002616:	2204      	movs	r2, #4
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e08e      	b.n	800273a <UART_SetConfig+0x1fa>
 800261c:	231b      	movs	r3, #27
 800261e:	2218      	movs	r2, #24
 8002620:	189b      	adds	r3, r3, r2
 8002622:	19db      	adds	r3, r3, r7
 8002624:	2208      	movs	r2, #8
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e087      	b.n	800273a <UART_SetConfig+0x1fa>
 800262a:	231b      	movs	r3, #27
 800262c:	2218      	movs	r2, #24
 800262e:	189b      	adds	r3, r3, r2
 8002630:	19db      	adds	r3, r3, r7
 8002632:	2210      	movs	r2, #16
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e080      	b.n	800273a <UART_SetConfig+0x1fa>
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a99      	ldr	r2, [pc, #612]	; (80028a4 <UART_SetConfig+0x364>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d131      	bne.n	80026a6 <UART_SetConfig+0x166>
 8002642:	4b97      	ldr	r3, [pc, #604]	; (80028a0 <UART_SetConfig+0x360>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	220c      	movs	r2, #12
 8002648:	4013      	ands	r3, r2
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d01d      	beq.n	800268a <UART_SetConfig+0x14a>
 800264e:	d823      	bhi.n	8002698 <UART_SetConfig+0x158>
 8002650:	2b08      	cmp	r3, #8
 8002652:	d00c      	beq.n	800266e <UART_SetConfig+0x12e>
 8002654:	d820      	bhi.n	8002698 <UART_SetConfig+0x158>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <UART_SetConfig+0x120>
 800265a:	2b04      	cmp	r3, #4
 800265c:	d00e      	beq.n	800267c <UART_SetConfig+0x13c>
 800265e:	e01b      	b.n	8002698 <UART_SetConfig+0x158>
 8002660:	231b      	movs	r3, #27
 8002662:	2218      	movs	r2, #24
 8002664:	189b      	adds	r3, r3, r2
 8002666:	19db      	adds	r3, r3, r7
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e065      	b.n	800273a <UART_SetConfig+0x1fa>
 800266e:	231b      	movs	r3, #27
 8002670:	2218      	movs	r2, #24
 8002672:	189b      	adds	r3, r3, r2
 8002674:	19db      	adds	r3, r3, r7
 8002676:	2202      	movs	r2, #2
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e05e      	b.n	800273a <UART_SetConfig+0x1fa>
 800267c:	231b      	movs	r3, #27
 800267e:	2218      	movs	r2, #24
 8002680:	189b      	adds	r3, r3, r2
 8002682:	19db      	adds	r3, r3, r7
 8002684:	2204      	movs	r2, #4
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e057      	b.n	800273a <UART_SetConfig+0x1fa>
 800268a:	231b      	movs	r3, #27
 800268c:	2218      	movs	r2, #24
 800268e:	189b      	adds	r3, r3, r2
 8002690:	19db      	adds	r3, r3, r7
 8002692:	2208      	movs	r2, #8
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e050      	b.n	800273a <UART_SetConfig+0x1fa>
 8002698:	231b      	movs	r3, #27
 800269a:	2218      	movs	r2, #24
 800269c:	189b      	adds	r3, r3, r2
 800269e:	19db      	adds	r3, r3, r7
 80026a0:	2210      	movs	r2, #16
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e049      	b.n	800273a <UART_SetConfig+0x1fa>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a7a      	ldr	r2, [pc, #488]	; (8002894 <UART_SetConfig+0x354>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d13e      	bne.n	800272e <UART_SetConfig+0x1ee>
 80026b0:	4b7b      	ldr	r3, [pc, #492]	; (80028a0 <UART_SetConfig+0x360>)
 80026b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b4:	23c0      	movs	r3, #192	; 0xc0
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	4013      	ands	r3, r2
 80026ba:	22c0      	movs	r2, #192	; 0xc0
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	4293      	cmp	r3, r2
 80026c0:	d027      	beq.n	8002712 <UART_SetConfig+0x1d2>
 80026c2:	22c0      	movs	r2, #192	; 0xc0
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d82a      	bhi.n	8002720 <UART_SetConfig+0x1e0>
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d011      	beq.n	80026f6 <UART_SetConfig+0x1b6>
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d822      	bhi.n	8002720 <UART_SetConfig+0x1e0>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <UART_SetConfig+0x1a8>
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	00d2      	lsls	r2, r2, #3
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00e      	beq.n	8002704 <UART_SetConfig+0x1c4>
 80026e6:	e01b      	b.n	8002720 <UART_SetConfig+0x1e0>
 80026e8:	231b      	movs	r3, #27
 80026ea:	2218      	movs	r2, #24
 80026ec:	189b      	adds	r3, r3, r2
 80026ee:	19db      	adds	r3, r3, r7
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e021      	b.n	800273a <UART_SetConfig+0x1fa>
 80026f6:	231b      	movs	r3, #27
 80026f8:	2218      	movs	r2, #24
 80026fa:	189b      	adds	r3, r3, r2
 80026fc:	19db      	adds	r3, r3, r7
 80026fe:	2202      	movs	r2, #2
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e01a      	b.n	800273a <UART_SetConfig+0x1fa>
 8002704:	231b      	movs	r3, #27
 8002706:	2218      	movs	r2, #24
 8002708:	189b      	adds	r3, r3, r2
 800270a:	19db      	adds	r3, r3, r7
 800270c:	2204      	movs	r2, #4
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e013      	b.n	800273a <UART_SetConfig+0x1fa>
 8002712:	231b      	movs	r3, #27
 8002714:	2218      	movs	r2, #24
 8002716:	189b      	adds	r3, r3, r2
 8002718:	19db      	adds	r3, r3, r7
 800271a:	2208      	movs	r2, #8
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e00c      	b.n	800273a <UART_SetConfig+0x1fa>
 8002720:	231b      	movs	r3, #27
 8002722:	2218      	movs	r2, #24
 8002724:	189b      	adds	r3, r3, r2
 8002726:	19db      	adds	r3, r3, r7
 8002728:	2210      	movs	r2, #16
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e005      	b.n	800273a <UART_SetConfig+0x1fa>
 800272e:	231b      	movs	r3, #27
 8002730:	2218      	movs	r2, #24
 8002732:	189b      	adds	r3, r3, r2
 8002734:	19db      	adds	r3, r3, r7
 8002736:	2210      	movs	r2, #16
 8002738:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a55      	ldr	r2, [pc, #340]	; (8002894 <UART_SetConfig+0x354>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d000      	beq.n	8002746 <UART_SetConfig+0x206>
 8002744:	e084      	b.n	8002850 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002746:	231b      	movs	r3, #27
 8002748:	2218      	movs	r2, #24
 800274a:	189b      	adds	r3, r3, r2
 800274c:	19db      	adds	r3, r3, r7
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d01d      	beq.n	8002790 <UART_SetConfig+0x250>
 8002754:	dc20      	bgt.n	8002798 <UART_SetConfig+0x258>
 8002756:	2b04      	cmp	r3, #4
 8002758:	d015      	beq.n	8002786 <UART_SetConfig+0x246>
 800275a:	dc1d      	bgt.n	8002798 <UART_SetConfig+0x258>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <UART_SetConfig+0x226>
 8002760:	2b02      	cmp	r3, #2
 8002762:	d005      	beq.n	8002770 <UART_SetConfig+0x230>
 8002764:	e018      	b.n	8002798 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002766:	f7ff fa1b 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 800276a:	0003      	movs	r3, r0
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800276e:	e01c      	b.n	80027aa <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002770:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <UART_SetConfig+0x360>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	4013      	ands	r3, r2
 8002778:	d002      	beq.n	8002780 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800277a:	4b4b      	ldr	r3, [pc, #300]	; (80028a8 <UART_SetConfig+0x368>)
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800277e:	e014      	b.n	80027aa <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002780:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <UART_SetConfig+0x36c>)
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002784:	e011      	b.n	80027aa <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002786:	f7ff f95b 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 800278a:	0003      	movs	r3, r0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800278e:	e00c      	b.n	80027aa <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002796:	e008      	b.n	80027aa <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800279c:	231a      	movs	r3, #26
 800279e:	2218      	movs	r2, #24
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	19db      	adds	r3, r3, r7
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
        break;
 80027a8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d100      	bne.n	80027b2 <UART_SetConfig+0x272>
 80027b0:	e132      	b.n	8002a18 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	0013      	movs	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	189b      	adds	r3, r3, r2
 80027bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027be:	429a      	cmp	r2, r3
 80027c0:	d305      	bcc.n	80027ce <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d906      	bls.n	80027dc <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80027ce:	231a      	movs	r3, #26
 80027d0:	2218      	movs	r2, #24
 80027d2:	189b      	adds	r3, r3, r2
 80027d4:	19db      	adds	r3, r3, r7
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e11d      	b.n	8002a18 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	6939      	ldr	r1, [r7, #16]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	000b      	movs	r3, r1
 80027ea:	0e1b      	lsrs	r3, r3, #24
 80027ec:	0010      	movs	r0, r2
 80027ee:	0205      	lsls	r5, r0, #8
 80027f0:	431d      	orrs	r5, r3
 80027f2:	000b      	movs	r3, r1
 80027f4:	021c      	lsls	r4, r3, #8
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68b8      	ldr	r0, [r7, #8]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	1900      	adds	r0, r0, r4
 8002808:	4169      	adcs	r1, r5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f7fd fd14 	bl	8000244 <__aeabi_uldivmod>
 800281c:	0002      	movs	r2, r0
 800281e:	000b      	movs	r3, r1
 8002820:	0013      	movs	r3, r2
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002826:	23c0      	movs	r3, #192	; 0xc0
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	429a      	cmp	r2, r3
 800282c:	d309      	bcc.n	8002842 <UART_SetConfig+0x302>
 800282e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	035b      	lsls	r3, r3, #13
 8002834:	429a      	cmp	r2, r3
 8002836:	d204      	bcs.n	8002842 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	e0ea      	b.n	8002a18 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002842:	231a      	movs	r3, #26
 8002844:	2218      	movs	r2, #24
 8002846:	189b      	adds	r3, r3, r2
 8002848:	19db      	adds	r3, r3, r7
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e0e3      	b.n	8002a18 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	429a      	cmp	r2, r3
 800285a:	d000      	beq.n	800285e <UART_SetConfig+0x31e>
 800285c:	e085      	b.n	800296a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800285e:	231b      	movs	r3, #27
 8002860:	2218      	movs	r2, #24
 8002862:	189b      	adds	r3, r3, r2
 8002864:	19db      	adds	r3, r3, r7
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d837      	bhi.n	80028dc <UART_SetConfig+0x39c>
 800286c:	009a      	lsls	r2, r3, #2
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <UART_SetConfig+0x370>)
 8002870:	18d3      	adds	r3, r2, r3
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002876:	f7ff f993 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 800287a:	0003      	movs	r3, r0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800287e:	e036      	b.n	80028ee <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002880:	f7ff f9a4 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8002884:	0003      	movs	r3, r0
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002888:	e031      	b.n	80028ee <UART_SetConfig+0x3ae>
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	efff69f3 	.word	0xefff69f3
 8002890:	ffffcfff 	.word	0xffffcfff
 8002894:	40004800 	.word	0x40004800
 8002898:	fffff4ff 	.word	0xfffff4ff
 800289c:	40013800 	.word	0x40013800
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40004400 	.word	0x40004400
 80028a8:	003d0900 	.word	0x003d0900
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	0800533c 	.word	0x0800533c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028b4:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <UART_SetConfig+0x4f8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2210      	movs	r2, #16
 80028ba:	4013      	ands	r3, r2
 80028bc:	d002      	beq.n	80028c4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028be:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <UART_SetConfig+0x4fc>)
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028c2:	e014      	b.n	80028ee <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80028c4:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <UART_SetConfig+0x500>)
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028c8:	e011      	b.n	80028ee <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ca:	f7ff f8b9 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80028ce:	0003      	movs	r3, r0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028d2:	e00c      	b.n	80028ee <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028da:	e008      	b.n	80028ee <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028e0:	231a      	movs	r3, #26
 80028e2:	2218      	movs	r2, #24
 80028e4:	189b      	adds	r3, r3, r2
 80028e6:	19db      	adds	r3, r3, r7
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
        break;
 80028ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d100      	bne.n	80028f6 <UART_SetConfig+0x3b6>
 80028f4:	e090      	b.n	8002a18 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	005a      	lsls	r2, r3, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	18d2      	adds	r2, r2, r3
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0019      	movs	r1, r3
 8002908:	0010      	movs	r0, r2
 800290a:	f7fd fc0f 	bl	800012c <__udivsi3>
 800290e:	0003      	movs	r3, r0
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d921      	bls.n	800295c <UART_SetConfig+0x41c>
 8002918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	025b      	lsls	r3, r3, #9
 800291e:	429a      	cmp	r2, r3
 8002920:	d21c      	bcs.n	800295c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	b29a      	uxth	r2, r3
 8002926:	200e      	movs	r0, #14
 8002928:	2418      	movs	r4, #24
 800292a:	1903      	adds	r3, r0, r4
 800292c:	19db      	adds	r3, r3, r7
 800292e:	210f      	movs	r1, #15
 8002930:	438a      	bics	r2, r1
 8002932:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	2207      	movs	r2, #7
 800293c:	4013      	ands	r3, r2
 800293e:	b299      	uxth	r1, r3
 8002940:	1903      	adds	r3, r0, r4
 8002942:	19db      	adds	r3, r3, r7
 8002944:	1902      	adds	r2, r0, r4
 8002946:	19d2      	adds	r2, r2, r7
 8002948:	8812      	ldrh	r2, [r2, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	1902      	adds	r2, r0, r4
 8002954:	19d2      	adds	r2, r2, r7
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	e05d      	b.n	8002a18 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800295c:	231a      	movs	r3, #26
 800295e:	2218      	movs	r2, #24
 8002960:	189b      	adds	r3, r3, r2
 8002962:	19db      	adds	r3, r3, r7
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e056      	b.n	8002a18 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800296a:	231b      	movs	r3, #27
 800296c:	2218      	movs	r2, #24
 800296e:	189b      	adds	r3, r3, r2
 8002970:	19db      	adds	r3, r3, r7
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d822      	bhi.n	80029be <UART_SetConfig+0x47e>
 8002978:	009a      	lsls	r2, r3, #2
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <UART_SetConfig+0x504>)
 800297c:	18d3      	adds	r3, r2, r3
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002982:	f7ff f90d 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 8002986:	0003      	movs	r3, r0
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800298a:	e021      	b.n	80029d0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800298c:	f7ff f91e 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8002990:	0003      	movs	r3, r0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002994:	e01c      	b.n	80029d0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002996:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <UART_SetConfig+0x4f8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2210      	movs	r2, #16
 800299c:	4013      	ands	r3, r2
 800299e:	d002      	beq.n	80029a6 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029a0:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <UART_SetConfig+0x4fc>)
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029a4:	e014      	b.n	80029d0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <UART_SetConfig+0x500>)
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029aa:	e011      	b.n	80029d0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ac:	f7ff f848 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80029b0:	0003      	movs	r3, r0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b4:	e00c      	b.n	80029d0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029bc:	e008      	b.n	80029d0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029c2:	231a      	movs	r3, #26
 80029c4:	2218      	movs	r2, #24
 80029c6:	189b      	adds	r3, r3, r2
 80029c8:	19db      	adds	r3, r3, r7
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
        break;
 80029ce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d020      	beq.n	8002a18 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	085a      	lsrs	r2, r3, #1
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	18d2      	adds	r2, r2, r3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	0019      	movs	r1, r3
 80029e6:	0010      	movs	r0, r2
 80029e8:	f7fd fba0 	bl	800012c <__udivsi3>
 80029ec:	0003      	movs	r3, r0
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	d90a      	bls.n	8002a0c <UART_SetConfig+0x4cc>
 80029f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	025b      	lsls	r3, r3, #9
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d205      	bcs.n	8002a0c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	e005      	b.n	8002a18 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a0c:	231a      	movs	r3, #26
 8002a0e:	2218      	movs	r2, #24
 8002a10:	189b      	adds	r3, r3, r2
 8002a12:	19db      	adds	r3, r3, r7
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2200      	movs	r2, #0
 8002a22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002a24:	231a      	movs	r3, #26
 8002a26:	2218      	movs	r2, #24
 8002a28:	189b      	adds	r3, r3, r2
 8002a2a:	19db      	adds	r3, r3, r7
 8002a2c:	781b      	ldrb	r3, [r3, #0]
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b00e      	add	sp, #56	; 0x38
 8002a34:	bdb0      	pop	{r4, r5, r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	003d0900 	.word	0x003d0900
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	08005360 	.word	0x08005360

08002a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2201      	movs	r2, #1
 8002a56:	4013      	ands	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a4a      	ldr	r2, [pc, #296]	; (8002b8c <UART_AdvFeatureConfig+0x144>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d00b      	beq.n	8002a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a43      	ldr	r2, [pc, #268]	; (8002b90 <UART_AdvFeatureConfig+0x148>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2204      	movs	r2, #4
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a3b      	ldr	r2, [pc, #236]	; (8002b94 <UART_AdvFeatureConfig+0x14c>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2208      	movs	r2, #8
 8002abc:	4013      	ands	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <UART_AdvFeatureConfig+0x150>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	2210      	movs	r2, #16
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a2c      	ldr	r2, [pc, #176]	; (8002b9c <UART_AdvFeatureConfig+0x154>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2220      	movs	r2, #32
 8002b00:	4013      	ands	r3, r2
 8002b02:	d00b      	beq.n	8002b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <UART_AdvFeatureConfig+0x158>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2240      	movs	r2, #64	; 0x40
 8002b22:	4013      	ands	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <UART_AdvFeatureConfig+0x15c>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	035b      	lsls	r3, r3, #13
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d10b      	bne.n	8002b62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <UART_AdvFeatureConfig+0x160>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d00b      	beq.n	8002b84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <UART_AdvFeatureConfig+0x164>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  }
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	fffdffff 	.word	0xfffdffff
 8002b90:	fffeffff 	.word	0xfffeffff
 8002b94:	fffbffff 	.word	0xfffbffff
 8002b98:	ffff7fff 	.word	0xffff7fff
 8002b9c:	ffffefff 	.word	0xffffefff
 8002ba0:	ffffdfff 	.word	0xffffdfff
 8002ba4:	ffefffff 	.word	0xffefffff
 8002ba8:	ff9fffff 	.word	0xff9fffff
 8002bac:	fff7ffff 	.word	0xfff7ffff

08002bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b092      	sub	sp, #72	; 0x48
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2284      	movs	r2, #132	; 0x84
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bc0:	f7fe f804 	bl	8000bcc <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d12c      	bne.n	8002c30 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	0391      	lsls	r1, r2, #14
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4a46      	ldr	r2, [pc, #280]	; (8002cf8 <UART_CheckIdleState+0x148>)
 8002be0:	9200      	str	r2, [sp, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f000 f88c 	bl	8002d00 <UART_WaitOnFlagUntilTimeout>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d021      	beq.n	8002c30 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bec:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	f383 8810 	msr	PRIMASK, r3
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	438a      	bics	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	f383 8810 	msr	PRIMASK, r3
}
 8002c1c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2278      	movs	r2, #120	; 0x78
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e05f      	b.n	8002cf0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2204      	movs	r2, #4
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d146      	bne.n	8002ccc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	03d1      	lsls	r1, r2, #15
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <UART_CheckIdleState+0x148>)
 8002c48:	9200      	str	r2, [sp, #0]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f000 f858 	bl	8002d00 <UART_WaitOnFlagUntilTimeout>
 8002c50:	1e03      	subs	r3, r0, #0
 8002c52:	d03b      	beq.n	8002ccc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c54:	f3ef 8310 	mrs	r3, PRIMASK
 8002c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5e:	2301      	movs	r3, #1
 8002c60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f383 8810 	msr	PRIMASK, r3
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4921      	ldr	r1, [pc, #132]	; (8002cfc <UART_CheckIdleState+0x14c>)
 8002c76:	400a      	ands	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f383 8810 	msr	PRIMASK, r3
}
 8002c84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c86:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c8c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c90:	2301      	movs	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f383 8810 	msr	PRIMASK, r3
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	438a      	bics	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	2120      	movs	r1, #32
 8002cbe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2278      	movs	r2, #120	; 0x78
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e011      	b.n	8002cf0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	2120      	movs	r1, #32
 8002cd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2278      	movs	r2, #120	; 0x78
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b010      	add	sp, #64	; 0x40
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	01ffffff 	.word	0x01ffffff
 8002cfc:	fffffedf 	.word	0xfffffedf

08002d00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	1dfb      	adds	r3, r7, #7
 8002d0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d10:	e04b      	b.n	8002daa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	3301      	adds	r3, #1
 8002d16:	d048      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d18:	f7fd ff58 	bl	8000bcc <HAL_GetTick>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d302      	bcc.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04b      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2204      	movs	r2, #4
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d035      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2208      	movs	r2, #8
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d111      	bne.n	8002d70 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2208      	movs	r2, #8
 8002d52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 f83c 	bl	8002dd4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2284      	movs	r2, #132	; 0x84
 8002d60:	2108      	movs	r1, #8
 8002d62:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2278      	movs	r2, #120	; 0x78
 8002d68:	2100      	movs	r1, #0
 8002d6a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e02c      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d112      	bne.n	8002daa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f81f 	bl	8002dd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2284      	movs	r2, #132	; 0x84
 8002d9a:	2120      	movs	r1, #32
 8002d9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2278      	movs	r2, #120	; 0x78
 8002da2:	2100      	movs	r1, #0
 8002da4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e00f      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	425a      	negs	r2, r3
 8002dba:	4153      	adcs	r3, r2
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d0a4      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08e      	sub	sp, #56	; 0x38
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8002de0:	617b      	str	r3, [r7, #20]
  return(result);
 8002de2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
 8002de6:	2301      	movs	r3, #1
 8002de8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4926      	ldr	r1, [pc, #152]	; (8002e98 <UART_EndRxTransfer+0xc4>)
 8002dfe:	400a      	ands	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f383 8810 	msr	PRIMASK, r3
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e12:	623b      	str	r3, [r7, #32]
  return(result);
 8002e14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
 8002e18:	2301      	movs	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f383 8810 	msr	PRIMASK, r3
}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	438a      	bics	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	f383 8810 	msr	PRIMASK, r3
}
 8002e3e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d118      	bne.n	8002e7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e48:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e52:	2301      	movs	r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f383 8810 	msr	PRIMASK, r3
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2110      	movs	r1, #16
 8002e6a:	438a      	bics	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f383 8810 	msr	PRIMASK, r3
}
 8002e78:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	2120      	movs	r1, #32
 8002e80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b00e      	add	sp, #56	; 0x38
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	fffffedf 	.word	0xfffffedf

08002e9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3308      	adds	r3, #8
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4252      	negs	r2, r2
 8002eb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3308      	adds	r3, #8
 8002eba:	001a      	movs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b002      	add	sp, #8
 8002eec:	bd80      	pop	{r7, pc}

08002eee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3301      	adds	r3, #1
 8002f46:	d103      	bne.n	8002f50 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e00c      	b.n	8002f6a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3308      	adds	r3, #8
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	e002      	b.n	8002f5e <vListInsert+0x2c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d2f6      	bcs.n	8002f58 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b004      	add	sp, #16
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6892      	ldr	r2, [r2, #8]
 8002fb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6852      	ldr	r2, [r2, #4]
 8002fbe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d103      	bne.n	8002fd2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b004      	add	sp, #16
 8002fec:	bd80      	pop	{r7, pc}

08002fee <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <xQueueGenericReset+0x18>
 8003002:	b672      	cpsid	i
 8003004:	e7fe      	b.n	8003004 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003006:	f001 f9d3 	bl	80043b0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	434b      	muls	r3, r1
 8003018:	18d2      	adds	r2, r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003034:	1e59      	subs	r1, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	434b      	muls	r3, r1
 800303c:	18d2      	adds	r2, r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2244      	movs	r2, #68	; 0x44
 8003046:	21ff      	movs	r1, #255	; 0xff
 8003048:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2245      	movs	r2, #69	; 0x45
 800304e:	21ff      	movs	r1, #255	; 0xff
 8003050:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10d      	bne.n	8003074 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3310      	adds	r3, #16
 8003064:	0018      	movs	r0, r3
 8003066:	f000 fea9 	bl	8003dbc <xTaskRemoveFromEventList>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d00c      	beq.n	8003088 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800306e:	f001 f98f 	bl	8004390 <vPortYield>
 8003072:	e009      	b.n	8003088 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3310      	adds	r3, #16
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff ff0f 	bl	8002e9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3324      	adds	r3, #36	; 0x24
 8003082:	0018      	movs	r0, r3
 8003084:	f7ff ff0a 	bl	8002e9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003088:	f001 f9a4 	bl	80043d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800308c:	2301      	movs	r3, #1
}
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b004      	add	sp, #16
 8003094:	bd80      	pop	{r7, pc}

08003096 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003096:	b590      	push	{r4, r7, lr}
 8003098:	b08b      	sub	sp, #44	; 0x2c
 800309a:	af02      	add	r7, sp, #8
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <xQueueGenericCreate+0x18>
 80030aa:	b672      	cpsid	i
 80030ac:	e7fe      	b.n	80030ac <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	e003      	b.n	80030c2 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	4353      	muls	r3, r2
 80030c0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3348      	adds	r3, #72	; 0x48
 80030c6:	0018      	movs	r0, r3
 80030c8:	f001 fa0a 	bl	80044e0 <pvPortMalloc>
 80030cc:	0003      	movs	r3, r0
 80030ce:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3348      	adds	r3, #72	; 0x48
 80030de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2246      	movs	r2, #70	; 0x46
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	781c      	ldrb	r4, [r3, #0]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	0023      	movs	r3, r4
 80030f8:	f000 f805 	bl	8003106 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030fc:	69bb      	ldr	r3, [r7, #24]
	}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b009      	add	sp, #36	; 0x24
 8003104:	bd90      	pop	{r4, r7, pc}

08003106 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	001a      	movs	r2, r3
 8003114:	1cfb      	adds	r3, r7, #3
 8003116:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e002      	b.n	800312c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2101      	movs	r1, #1
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff ff56 	bl	8002fee <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b004      	add	sp, #16
 8003148:	bd80      	pop	{r7, pc}

0800314a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b08a      	sub	sp, #40	; 0x28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <xQueueGenericSend+0x20>
 8003166:	b672      	cpsid	i
 8003168:	e7fe      	b.n	8003168 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d103      	bne.n	8003178 <xQueueGenericSend+0x2e>
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <xQueueGenericSend+0x32>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <xQueueGenericSend+0x34>
 800317c:	2300      	movs	r3, #0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <xQueueGenericSend+0x3c>
 8003182:	b672      	cpsid	i
 8003184:	e7fe      	b.n	8003184 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d103      	bne.n	8003194 <xQueueGenericSend+0x4a>
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <xQueueGenericSend+0x4e>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <xQueueGenericSend+0x50>
 8003198:	2300      	movs	r3, #0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <xQueueGenericSend+0x58>
 800319e:	b672      	cpsid	i
 80031a0:	e7fe      	b.n	80031a0 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031a2:	f000 ff9d 	bl	80040e0 <xTaskGetSchedulerState>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d102      	bne.n	80031b0 <xQueueGenericSend+0x66>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <xQueueGenericSend+0x6a>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <xQueueGenericSend+0x6c>
 80031b4:	2300      	movs	r3, #0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <xQueueGenericSend+0x74>
 80031ba:	b672      	cpsid	i
 80031bc:	e7fe      	b.n	80031bc <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031be:	f001 f8f7 	bl	80043b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d302      	bcc.n	80031d4 <xQueueGenericSend+0x8a>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d11e      	bne.n	8003212 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f92e 	bl	800343c <prvCopyDataToQueue>
 80031e0:	0003      	movs	r3, r0
 80031e2:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	3324      	adds	r3, #36	; 0x24
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 fde3 	bl	8003dbc <xTaskRemoveFromEventList>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d007      	beq.n	800320a <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80031fa:	f001 f8c9 	bl	8004390 <vPortYield>
 80031fe:	e004      	b.n	800320a <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003206:	f001 f8c3 	bl	8004390 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800320a:	f001 f8e3 	bl	80043d4 <vPortExitCritical>
				return pdPASS;
 800320e:	2301      	movs	r3, #1
 8003210:	e05b      	b.n	80032ca <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003218:	f001 f8dc 	bl	80043d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800321c:	2300      	movs	r3, #0
 800321e:	e054      	b.n	80032ca <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003226:	2314      	movs	r3, #20
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	0018      	movs	r0, r3
 800322c:	f000 fe22 	bl	8003e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003230:	2301      	movs	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003234:	f001 f8ce 	bl	80043d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003238:	f000 fc08 	bl	8003a4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800323c:	f001 f8b8 	bl	80043b0 <vPortEnterCritical>
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	2244      	movs	r2, #68	; 0x44
 8003244:	5c9b      	ldrb	r3, [r3, r2]
 8003246:	b25b      	sxtb	r3, r3
 8003248:	3301      	adds	r3, #1
 800324a:	d103      	bne.n	8003254 <xQueueGenericSend+0x10a>
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	2244      	movs	r2, #68	; 0x44
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	2245      	movs	r2, #69	; 0x45
 8003258:	5c9b      	ldrb	r3, [r3, r2]
 800325a:	b25b      	sxtb	r3, r3
 800325c:	3301      	adds	r3, #1
 800325e:	d103      	bne.n	8003268 <xQueueGenericSend+0x11e>
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	2245      	movs	r2, #69	; 0x45
 8003264:	2100      	movs	r1, #0
 8003266:	5499      	strb	r1, [r3, r2]
 8003268:	f001 f8b4 	bl	80043d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800326c:	1d3a      	adds	r2, r7, #4
 800326e:	2314      	movs	r3, #20
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	0011      	movs	r1, r2
 8003274:	0018      	movs	r0, r3
 8003276:	f000 fe11 	bl	8003e9c <xTaskCheckForTimeOut>
 800327a:	1e03      	subs	r3, r0, #0
 800327c:	d11e      	bne.n	80032bc <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f9e0 	bl	8003646 <prvIsQueueFull>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d011      	beq.n	80032ae <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	3310      	adds	r3, #16
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	0011      	movs	r1, r2
 8003292:	0018      	movs	r0, r3
 8003294:	f000 fd74 	bl	8003d80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	0018      	movs	r0, r3
 800329c:	f000 f95f 	bl	800355e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032a0:	f000 fbe0 	bl	8003a64 <xTaskResumeAll>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d18a      	bne.n	80031be <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80032a8:	f001 f872 	bl	8004390 <vPortYield>
 80032ac:	e787      	b.n	80031be <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f000 f954 	bl	800355e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032b6:	f000 fbd5 	bl	8003a64 <xTaskResumeAll>
 80032ba:	e780      	b.n	80031be <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 f94d 	bl	800355e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032c4:	f000 fbce 	bl	8003a64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032c8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b00a      	add	sp, #40	; 0x28
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b08a      	sub	sp, #40	; 0x28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <xQueueReceive+0x1e>
 80032ec:	b672      	cpsid	i
 80032ee:	e7fe      	b.n	80032ee <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <xQueueReceive+0x2c>
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <xQueueReceive+0x30>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <xQueueReceive+0x32>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <xQueueReceive+0x3a>
 8003308:	b672      	cpsid	i
 800330a:	e7fe      	b.n	800330a <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800330c:	f000 fee8 	bl	80040e0 <xTaskGetSchedulerState>
 8003310:	1e03      	subs	r3, r0, #0
 8003312:	d102      	bne.n	800331a <xQueueReceive+0x48>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <xQueueReceive+0x4c>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <xQueueReceive+0x4e>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <xQueueReceive+0x56>
 8003324:	b672      	cpsid	i
 8003326:	e7fe      	b.n	8003326 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003328:	f001 f842 	bl	80043b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01a      	beq.n	800336e <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	0011      	movs	r1, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f000 f8e7 	bl	8003512 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	1e5a      	subs	r2, r3, #1
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	3310      	adds	r3, #16
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fd2f 	bl	8003dbc <xTaskRemoveFromEventList>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d001      	beq.n	8003366 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003362:	f001 f815 	bl	8004390 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003366:	f001 f835 	bl	80043d4 <vPortExitCritical>
				return pdPASS;
 800336a:	2301      	movs	r3, #1
 800336c:	e062      	b.n	8003434 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003374:	f001 f82e 	bl	80043d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003378:	2300      	movs	r3, #0
 800337a:	e05b      	b.n	8003434 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003382:	2314      	movs	r3, #20
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	0018      	movs	r0, r3
 8003388:	f000 fd74 	bl	8003e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800338c:	2301      	movs	r3, #1
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003390:	f001 f820 	bl	80043d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003394:	f000 fb5a 	bl	8003a4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003398:	f001 f80a 	bl	80043b0 <vPortEnterCritical>
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	2244      	movs	r2, #68	; 0x44
 80033a0:	5c9b      	ldrb	r3, [r3, r2]
 80033a2:	b25b      	sxtb	r3, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	d103      	bne.n	80033b0 <xQueueReceive+0xde>
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	2244      	movs	r2, #68	; 0x44
 80033ac:	2100      	movs	r1, #0
 80033ae:	5499      	strb	r1, [r3, r2]
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	2245      	movs	r2, #69	; 0x45
 80033b4:	5c9b      	ldrb	r3, [r3, r2]
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	d103      	bne.n	80033c4 <xQueueReceive+0xf2>
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2245      	movs	r2, #69	; 0x45
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]
 80033c4:	f001 f806 	bl	80043d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033c8:	1d3a      	adds	r2, r7, #4
 80033ca:	2314      	movs	r3, #20
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	0011      	movs	r1, r2
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 fd63 	bl	8003e9c <xTaskCheckForTimeOut>
 80033d6:	1e03      	subs	r3, r0, #0
 80033d8:	d11e      	bne.n	8003418 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 f91c 	bl	800361a <prvIsQueueEmpty>
 80033e2:	1e03      	subs	r3, r0, #0
 80033e4:	d011      	beq.n	800340a <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	3324      	adds	r3, #36	; 0x24
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	0011      	movs	r1, r2
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 fcc6 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 f8b1 	bl	800355e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033fc:	f000 fb32 	bl	8003a64 <xTaskResumeAll>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d191      	bne.n	8003328 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003404:	f000 ffc4 	bl	8004390 <vPortYield>
 8003408:	e78e      	b.n	8003328 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f8a6 	bl	800355e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003412:	f000 fb27 	bl	8003a64 <xTaskResumeAll>
 8003416:	e787      	b.n	8003328 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	0018      	movs	r0, r3
 800341c:	f000 f89f 	bl	800355e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003420:	f000 fb20 	bl	8003a64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 f8f7 	bl	800361a <prvIsQueueEmpty>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d100      	bne.n	8003432 <xQueueReceive+0x160>
 8003430:	e77a      	b.n	8003328 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003432:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b00a      	add	sp, #40	; 0x28
 800343a:	bd80      	pop	{r7, pc}

0800343c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10e      	bne.n	8003478 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d14e      	bne.n	8003500 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 fe56 	bl	8004118 <xTaskPriorityDisinherit>
 800346c:	0003      	movs	r3, r0
 800346e:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	e043      	b.n	8003500 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d119      	bne.n	80034b2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6858      	ldr	r0, [r3, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	0019      	movs	r1, r3
 800348a:	f001 fa23 	bl	80048d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	18d2      	adds	r2, r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d32b      	bcc.n	8003500 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	e026      	b.n	8003500 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68d8      	ldr	r0, [r3, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0019      	movs	r1, r3
 80034be:	f001 fa09 	bl	80048d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	425b      	negs	r3, r3
 80034cc:	18d2      	adds	r2, r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d207      	bcs.n	80034ee <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	425b      	negs	r3, r3
 80034e8:	18d2      	adds	r2, r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d105      	bne.n	8003500 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003508:	697b      	ldr	r3, [r7, #20]
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b006      	add	sp, #24
 8003510:	bd80      	pop	{r7, pc}

08003512 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d018      	beq.n	8003556 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	18d2      	adds	r2, r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	d303      	bcc.n	8003546 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68d9      	ldr	r1, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	0018      	movs	r0, r3
 8003552:	f001 f9bf 	bl	80048d4 <memcpy>
	}
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b002      	add	sp, #8
 800355c:	bd80      	pop	{r7, pc}

0800355e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003566:	f000 ff23 	bl	80043b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800356a:	230f      	movs	r3, #15
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	2145      	movs	r1, #69	; 0x45
 8003572:	5c52      	ldrb	r2, [r2, r1]
 8003574:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003576:	e013      	b.n	80035a0 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	2b00      	cmp	r3, #0
 800357e:	d016      	beq.n	80035ae <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3324      	adds	r3, #36	; 0x24
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fc19 	bl	8003dbc <xTaskRemoveFromEventList>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d001      	beq.n	8003592 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800358e:	f000 fcd5 	bl	8003f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003592:	210f      	movs	r1, #15
 8003594:	187b      	adds	r3, r7, r1
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	3b01      	subs	r3, #1
 800359a:	b2da      	uxtb	r2, r3
 800359c:	187b      	adds	r3, r7, r1
 800359e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035a0:	230f      	movs	r3, #15
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	dce5      	bgt.n	8003578 <prvUnlockQueue+0x1a>
 80035ac:	e000      	b.n	80035b0 <prvUnlockQueue+0x52>
					break;
 80035ae:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2245      	movs	r2, #69	; 0x45
 80035b4:	21ff      	movs	r1, #255	; 0xff
 80035b6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80035b8:	f000 ff0c 	bl	80043d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035bc:	f000 fef8 	bl	80043b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035c0:	230e      	movs	r3, #14
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	2144      	movs	r1, #68	; 0x44
 80035c8:	5c52      	ldrb	r2, [r2, r1]
 80035ca:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035cc:	e013      	b.n	80035f6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3310      	adds	r3, #16
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fbee 	bl	8003dbc <xTaskRemoveFromEventList>
 80035e0:	1e03      	subs	r3, r0, #0
 80035e2:	d001      	beq.n	80035e8 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80035e4:	f000 fcaa 	bl	8003f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035e8:	210e      	movs	r1, #14
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	187b      	adds	r3, r7, r1
 80035f4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f6:	230e      	movs	r3, #14
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	dce5      	bgt.n	80035ce <prvUnlockQueue+0x70>
 8003602:	e000      	b.n	8003606 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003604:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2244      	movs	r2, #68	; 0x44
 800360a:	21ff      	movs	r1, #255	; 0xff
 800360c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800360e:	f000 fee1 	bl	80043d4 <vPortExitCritical>
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b004      	add	sp, #16
 8003618:	bd80      	pop	{r7, pc}

0800361a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003622:	f000 fec5 	bl	80043b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e001      	b.n	8003638 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003638:	f000 fecc 	bl	80043d4 <vPortExitCritical>

	return xReturn;
 800363c:	68fb      	ldr	r3, [r7, #12]
}
 800363e:	0018      	movs	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	b004      	add	sp, #16
 8003644:	bd80      	pop	{r7, pc}

08003646 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800364e:	f000 feaf 	bl	80043b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	429a      	cmp	r2, r3
 800365c:	d102      	bne.n	8003664 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800365e:	2301      	movs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e001      	b.n	8003668 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003668:	f000 feb4 	bl	80043d4 <vPortExitCritical>

	return xReturn;
 800366c:	68fb      	ldr	r3, [r7, #12]
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}

08003676 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003676:	b590      	push	{r4, r7, lr}
 8003678:	b08d      	sub	sp, #52	; 0x34
 800367a:	af04      	add	r7, sp, #16
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <xTaskCreateStatic+0x18>
 800368a:	b672      	cpsid	i
 800368c:	e7fe      	b.n	800368c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <xTaskCreateStatic+0x22>
 8003694:	b672      	cpsid	i
 8003696:	e7fe      	b.n	8003696 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003698:	2354      	movs	r3, #84	; 0x54
 800369a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b54      	cmp	r3, #84	; 0x54
 80036a0:	d001      	beq.n	80036a6 <xTaskCreateStatic+0x30>
 80036a2:	b672      	cpsid	i
 80036a4:	e7fe      	b.n	80036a4 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036a6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d020      	beq.n	80036f0 <xTaskCreateStatic+0x7a>
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01d      	beq.n	80036f0 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2251      	movs	r2, #81	; 0x51
 80036c2:	2102      	movs	r1, #2
 80036c4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036c6:	683c      	ldr	r4, [r7, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9303      	str	r3, [sp, #12]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	2318      	movs	r3, #24
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	0023      	movs	r3, r4
 80036e2:	f000 f859 	bl	8003798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f000 f8d7 	bl	800389c <prvAddNewTaskToReadyList>
 80036ee:	e001      	b.n	80036f4 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036f4:	69bb      	ldr	r3, [r7, #24]
	}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b009      	add	sp, #36	; 0x24
 80036fc:	bd90      	pop	{r4, r7, pc}

080036fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036fe:	b590      	push	{r4, r7, lr}
 8003700:	b08d      	sub	sp, #52	; 0x34
 8003702:	af04      	add	r7, sp, #16
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	1dbb      	adds	r3, r7, #6
 800370c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800370e:	1dbb      	adds	r3, r7, #6
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fee3 	bl	80044e0 <pvPortMalloc>
 800371a:	0003      	movs	r3, r0
 800371c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003724:	2054      	movs	r0, #84	; 0x54
 8003726:	f000 fedb 	bl	80044e0 <pvPortMalloc>
 800372a:	0003      	movs	r3, r0
 800372c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
 800373a:	e006      	b.n	800374a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 ff74 	bl	800462c <vPortFree>
 8003744:	e001      	b.n	800374a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01a      	beq.n	8003786 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2251      	movs	r2, #81	; 0x51
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003758:	1dbb      	adds	r3, r7, #6
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	683c      	ldr	r4, [r7, #0]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	2300      	movs	r3, #0
 8003764:	9303      	str	r3, [sp, #12]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	9302      	str	r3, [sp, #8]
 800376a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	0023      	movs	r3, r4
 8003774:	f000 f810 	bl	8003798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	0018      	movs	r0, r3
 800377c:	f000 f88e 	bl	800389c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003780:	2301      	movs	r3, #1
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	e002      	b.n	800378c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003786:	2301      	movs	r3, #1
 8003788:	425b      	negs	r3, r3
 800378a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800378c:	69bb      	ldr	r3, [r7, #24]
	}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b009      	add	sp, #36	; 0x24
 8003794:	bd90      	pop	{r4, r7, pc}
	...

08003798 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	493a      	ldr	r1, [pc, #232]	; (8003898 <prvInitialiseNewTask+0x100>)
 80037ae:	468c      	mov	ip, r1
 80037b0:	4463      	add	r3, ip
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	18d3      	adds	r3, r2, r3
 80037b6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2207      	movs	r2, #7
 80037bc:	4393      	bics	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2207      	movs	r2, #7
 80037c4:	4013      	ands	r3, r2
 80037c6:	d001      	beq.n	80037cc <prvInitialiseNewTask+0x34>
 80037c8:	b672      	cpsid	i
 80037ca:	e7fe      	b.n	80037ca <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d020      	beq.n	8003814 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e013      	b.n	8003800 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	18d3      	adds	r3, r2, r3
 80037de:	7818      	ldrb	r0, [r3, #0]
 80037e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e2:	2134      	movs	r1, #52	; 0x34
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	18d3      	adds	r3, r2, r3
 80037e8:	185b      	adds	r3, r3, r1
 80037ea:	1c02      	adds	r2, r0, #0
 80037ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	18d3      	adds	r3, r2, r3
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	3301      	adds	r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	d9e8      	bls.n	80037d8 <prvInitialiseNewTask+0x40>
 8003806:	e000      	b.n	800380a <prvInitialiseNewTask+0x72>
			{
				break;
 8003808:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	2243      	movs	r2, #67	; 0x43
 800380e:	2100      	movs	r1, #0
 8003810:	5499      	strb	r1, [r3, r2]
 8003812:	e003      	b.n	800381c <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	2234      	movs	r2, #52	; 0x34
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2b06      	cmp	r3, #6
 8003820:	d901      	bls.n	8003826 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003822:	2306      	movs	r3, #6
 8003824:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	6a3a      	ldr	r2, [r7, #32]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	2200      	movs	r2, #0
 8003836:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	3304      	adds	r3, #4
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff fb4b 	bl	8002ed8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	3318      	adds	r3, #24
 8003846:	0018      	movs	r0, r3
 8003848:	f7ff fb46 	bl	8002ed8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003850:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	2207      	movs	r2, #7
 8003856:	1ad2      	subs	r2, r2, r3
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003860:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	2200      	movs	r2, #0
 8003866:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	2250      	movs	r2, #80	; 0x50
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	0018      	movs	r0, r3
 8003878:	f000 fcfe 	bl	8004278 <pxPortInitialiseStack>
 800387c:	0002      	movs	r2, r0
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b006      	add	sp, #24
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	3fffffff 	.word	0x3fffffff

0800389c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038a4:	f000 fd84 	bl	80043b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038a8:	4b28      	ldr	r3, [pc, #160]	; (800394c <prvAddNewTaskToReadyList+0xb0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	4b27      	ldr	r3, [pc, #156]	; (800394c <prvAddNewTaskToReadyList+0xb0>)
 80038b0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80038b2:	4b27      	ldr	r3, [pc, #156]	; (8003950 <prvAddNewTaskToReadyList+0xb4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038ba:	4b25      	ldr	r3, [pc, #148]	; (8003950 <prvAddNewTaskToReadyList+0xb4>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038c0:	4b22      	ldr	r3, [pc, #136]	; (800394c <prvAddNewTaskToReadyList+0xb0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d110      	bne.n	80038ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038c8:	f000 fb52 	bl	8003f70 <prvInitialiseTaskLists>
 80038cc:	e00d      	b.n	80038ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038ce:	4b21      	ldr	r3, [pc, #132]	; (8003954 <prvAddNewTaskToReadyList+0xb8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038d6:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <prvAddNewTaskToReadyList+0xb4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d802      	bhi.n	80038ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <prvAddNewTaskToReadyList+0xb4>)
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <prvAddNewTaskToReadyList+0xbc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <prvAddNewTaskToReadyList+0xbc>)
 80038f2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <prvAddNewTaskToReadyList+0xc0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d903      	bls.n	8003908 <prvAddNewTaskToReadyList+0x6c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <prvAddNewTaskToReadyList+0xc0>)
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	0013      	movs	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	189b      	adds	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4a12      	ldr	r2, [pc, #72]	; (8003960 <prvAddNewTaskToReadyList+0xc4>)
 8003916:	189a      	adds	r2, r3, r2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	0019      	movs	r1, r3
 800391e:	0010      	movs	r0, r2
 8003920:	f7ff fae5 	bl	8002eee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003924:	f000 fd56 	bl	80043d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <prvAddNewTaskToReadyList+0xb8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <prvAddNewTaskToReadyList+0xb4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	429a      	cmp	r2, r3
 800393c:	d201      	bcs.n	8003942 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800393e:	f000 fd27 	bl	8004390 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	200004b0 	.word	0x200004b0
 8003950:	200003b0 	.word	0x200003b0
 8003954:	200004bc 	.word	0x200004bc
 8003958:	200004cc 	.word	0x200004cc
 800395c:	200004b8 	.word	0x200004b8
 8003960:	200003b4 	.word	0x200003b4

08003964 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d010      	beq.n	8003998 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <vTaskDelay+0x48>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <vTaskDelay+0x1e>
 800397e:	b672      	cpsid	i
 8003980:	e7fe      	b.n	8003980 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003982:	f000 f863 	bl	8003a4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2100      	movs	r1, #0
 800398a:	0018      	movs	r0, r3
 800398c:	f000 fc20 	bl	80041d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003990:	f000 f868 	bl	8003a64 <xTaskResumeAll>
 8003994:	0003      	movs	r3, r0
 8003996:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800399e:	f000 fcf7 	bl	8004390 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b004      	add	sp, #16
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	200004d8 	.word	0x200004d8

080039b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039be:	003a      	movs	r2, r7
 80039c0:	1d39      	adds	r1, r7, #4
 80039c2:	2308      	movs	r3, #8
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7fc fd80 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039cc:	683c      	ldr	r4, [r7, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	4918      	ldr	r1, [pc, #96]	; (8003a34 <vTaskStartScheduler+0x84>)
 80039d4:	4818      	ldr	r0, [pc, #96]	; (8003a38 <vTaskStartScheduler+0x88>)
 80039d6:	9202      	str	r2, [sp, #8]
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	2300      	movs	r3, #0
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	0022      	movs	r2, r4
 80039e2:	f7ff fe48 	bl	8003676 <xTaskCreateStatic>
 80039e6:	0002      	movs	r2, r0
 80039e8:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <vTaskStartScheduler+0x8c>)
 80039ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <vTaskStartScheduler+0x8c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039f4:	2301      	movs	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e001      	b.n	80039fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10d      	bne.n	8003a20 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003a04:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <vTaskStartScheduler+0x90>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	4252      	negs	r2, r2
 8003a0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <vTaskStartScheduler+0x94>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <vTaskStartScheduler+0x98>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a1a:	f000 fc95 	bl	8004348 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a1e:	e004      	b.n	8003a2a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3301      	adds	r3, #1
 8003a24:	d101      	bne.n	8003a2a <vTaskStartScheduler+0x7a>
 8003a26:	b672      	cpsid	i
 8003a28:	e7fe      	b.n	8003a28 <vTaskStartScheduler+0x78>
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b005      	add	sp, #20
 8003a30:	bd90      	pop	{r4, r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	08005310 	.word	0x08005310
 8003a38:	08003f51 	.word	0x08003f51
 8003a3c:	200004d4 	.word	0x200004d4
 8003a40:	200004d0 	.word	0x200004d0
 8003a44:	200004bc 	.word	0x200004bc
 8003a48:	200004b4 	.word	0x200004b4

08003a4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <vTaskSuspendAll+0x14>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	4b02      	ldr	r3, [pc, #8]	; (8003a60 <vTaskSuspendAll+0x14>)
 8003a58:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	200004d8 	.word	0x200004d8

08003a64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a72:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <xTaskResumeAll+0xf8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <xTaskResumeAll+0x1a>
 8003a7a:	b672      	cpsid	i
 8003a7c:	e7fe      	b.n	8003a7c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a7e:	f000 fc97 	bl	80043b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a82:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <xTaskResumeAll+0xf8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1e5a      	subs	r2, r3, #1
 8003a88:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <xTaskResumeAll+0xf8>)
 8003a8a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a8c:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <xTaskResumeAll+0xf8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d15b      	bne.n	8003b4c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a94:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <xTaskResumeAll+0xfc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d057      	beq.n	8003b4c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a9c:	e02f      	b.n	8003afe <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a9e:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <xTaskResumeAll+0x100>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7ff fa77 	bl	8002f9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f7ff fa72 	bl	8002f9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abe:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <xTaskResumeAll+0x104>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d903      	bls.n	8003ace <xTaskResumeAll+0x6a>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aca:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <xTaskResumeAll+0x104>)
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	0013      	movs	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <xTaskResumeAll+0x108>)
 8003adc:	189a      	adds	r2, r3, r2
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	0010      	movs	r0, r2
 8003ae6:	f7ff fa02 	bl	8002eee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <xTaskResumeAll+0x10c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003af8:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <xTaskResumeAll+0x110>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003afe:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <xTaskResumeAll+0x100>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1cb      	bne.n	8003a9e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b0c:	f000 faca 	bl	80040a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <xTaskResumeAll+0x114>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00f      	beq.n	8003b3c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b1c:	f000 f82e 	bl	8003b7c <xTaskIncrementTick>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d002      	beq.n	8003b2a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003b24:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <xTaskResumeAll+0x110>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f2      	bne.n	8003b1c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <xTaskResumeAll+0x114>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <xTaskResumeAll+0x110>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b48:	f000 fc22 	bl	8004390 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b4c:	f000 fc42 	bl	80043d4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b50:	68bb      	ldr	r3, [r7, #8]
}
 8003b52:	0018      	movs	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	200004d8 	.word	0x200004d8
 8003b60:	200004b0 	.word	0x200004b0
 8003b64:	20000470 	.word	0x20000470
 8003b68:	200004b8 	.word	0x200004b8
 8003b6c:	200003b4 	.word	0x200003b4
 8003b70:	200003b0 	.word	0x200003b0
 8003b74:	200004c4 	.word	0x200004c4
 8003b78:	200004c0 	.word	0x200004c0

08003b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <xTaskIncrementTick+0x134>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d000      	beq.n	8003b90 <xTaskIncrementTick+0x14>
 8003b8e:	e07e      	b.n	8003c8e <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b90:	4b48      	ldr	r3, [pc, #288]	; (8003cb4 <xTaskIncrementTick+0x138>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b98:	4b46      	ldr	r3, [pc, #280]	; (8003cb4 <xTaskIncrementTick+0x138>)
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d117      	bne.n	8003bd4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ba4:	4b44      	ldr	r3, [pc, #272]	; (8003cb8 <xTaskIncrementTick+0x13c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <xTaskIncrementTick+0x36>
 8003bae:	b672      	cpsid	i
 8003bb0:	e7fe      	b.n	8003bb0 <xTaskIncrementTick+0x34>
 8003bb2:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <xTaskIncrementTick+0x13c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <xTaskIncrementTick+0x140>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <xTaskIncrementTick+0x13c>)
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	4b3e      	ldr	r3, [pc, #248]	; (8003cbc <xTaskIncrementTick+0x140>)
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <xTaskIncrementTick+0x144>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	4b3c      	ldr	r3, [pc, #240]	; (8003cc0 <xTaskIncrementTick+0x144>)
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f000 fa68 	bl	80040a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bd4:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <xTaskIncrementTick+0x148>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d349      	bcc.n	8003c72 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <xTaskIncrementTick+0x13c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be8:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <xTaskIncrementTick+0x148>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	4252      	negs	r2, r2
 8003bee:	601a      	str	r2, [r3, #0]
					break;
 8003bf0:	e03f      	b.n	8003c72 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf2:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <xTaskIncrementTick+0x13c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d203      	bcs.n	8003c12 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <xTaskIncrementTick+0x148>)
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c10:	e02f      	b.n	8003c72 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	3304      	adds	r3, #4
 8003c16:	0018      	movs	r0, r3
 8003c18:	f7ff f9c1 	bl	8002f9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	3318      	adds	r3, #24
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7ff f9b8 	bl	8002f9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c32:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <xTaskIncrementTick+0x14c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d903      	bls.n	8003c42 <xTaskIncrementTick+0xc6>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3e:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <xTaskIncrementTick+0x14c>)
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	0013      	movs	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	189b      	adds	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <xTaskIncrementTick+0x150>)
 8003c50:	189a      	adds	r2, r3, r2
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3304      	adds	r3, #4
 8003c56:	0019      	movs	r1, r3
 8003c58:	0010      	movs	r0, r2
 8003c5a:	f7ff f948 	bl	8002eee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <xTaskIncrementTick+0x154>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d3b8      	bcc.n	8003bde <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c70:	e7b5      	b.n	8003bde <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c72:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <xTaskIncrementTick+0x154>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4914      	ldr	r1, [pc, #80]	; (8003ccc <xTaskIncrementTick+0x150>)
 8003c7a:	0013      	movs	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	585b      	ldr	r3, [r3, r1]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d907      	bls.n	8003c98 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e004      	b.n	8003c98 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <xTaskIncrementTick+0x158>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <xTaskIncrementTick+0x158>)
 8003c96:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <xTaskIncrementTick+0x15c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ca4:	697b      	ldr	r3, [r7, #20]
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b006      	add	sp, #24
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	200004d8 	.word	0x200004d8
 8003cb4:	200004b4 	.word	0x200004b4
 8003cb8:	20000468 	.word	0x20000468
 8003cbc:	2000046c 	.word	0x2000046c
 8003cc0:	200004c8 	.word	0x200004c8
 8003cc4:	200004d0 	.word	0x200004d0
 8003cc8:	200004b8 	.word	0x200004b8
 8003ccc:	200003b4 	.word	0x200003b4
 8003cd0:	200003b0 	.word	0x200003b0
 8003cd4:	200004c0 	.word	0x200004c0
 8003cd8:	200004c4 	.word	0x200004c4

08003cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ce2:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <vTaskSwitchContext+0x90>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cea:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <vTaskSwitchContext+0x94>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cf0:	e037      	b.n	8003d62 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003cf2:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <vTaskSwitchContext+0x94>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <vTaskSwitchContext+0x98>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	e007      	b.n	8003d10 <vTaskSwitchContext+0x34>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <vTaskSwitchContext+0x2e>
 8003d06:	b672      	cpsid	i
 8003d08:	e7fe      	b.n	8003d08 <vTaskSwitchContext+0x2c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	4919      	ldr	r1, [pc, #100]	; (8003d78 <vTaskSwitchContext+0x9c>)
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	0013      	movs	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	189b      	adds	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	585b      	ldr	r3, [r3, r1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ee      	beq.n	8003d00 <vTaskSwitchContext+0x24>
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	0013      	movs	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	189b      	adds	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <vTaskSwitchContext+0x9c>)
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	3308      	adds	r3, #8
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d104      	bne.n	8003d52 <vTaskSwitchContext+0x76>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <vTaskSwitchContext+0xa0>)
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <vTaskSwitchContext+0x98>)
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b002      	add	sp, #8
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	200004d8 	.word	0x200004d8
 8003d70:	200004c4 	.word	0x200004c4
 8003d74:	200004b8 	.word	0x200004b8
 8003d78:	200003b4 	.word	0x200003b4
 8003d7c:	200003b0 	.word	0x200003b0

08003d80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <vTaskPlaceOnEventList+0x14>
 8003d90:	b672      	cpsid	i
 8003d92:	e7fe      	b.n	8003d92 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <vTaskPlaceOnEventList+0x38>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3318      	adds	r3, #24
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	0011      	movs	r1, r2
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff f8c6 	bl	8002f32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 fa10 	bl	80041d0 <prvAddCurrentTaskToDelayedList>
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	200003b0 	.word	0x200003b0

08003dbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <xTaskRemoveFromEventList+0x1a>
 8003dd2:	b672      	cpsid	i
 8003dd4:	e7fe      	b.n	8003dd4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3318      	adds	r3, #24
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff f8df 	bl	8002f9e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <xTaskRemoveFromEventList+0xa0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11d      	bne.n	8003e24 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	3304      	adds	r3, #4
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7ff f8d6 	bl	8002f9e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df6:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <xTaskRemoveFromEventList+0xa4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d903      	bls.n	8003e06 <xTaskRemoveFromEventList+0x4a>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e02:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <xTaskRemoveFromEventList+0xa4>)
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	0013      	movs	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4a14      	ldr	r2, [pc, #80]	; (8003e64 <xTaskRemoveFromEventList+0xa8>)
 8003e14:	189a      	adds	r2, r3, r2
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	0010      	movs	r0, r2
 8003e1e:	f7ff f866 	bl	8002eee <vListInsertEnd>
 8003e22:	e007      	b.n	8003e34 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3318      	adds	r3, #24
 8003e28:	001a      	movs	r2, r3
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <xTaskRemoveFromEventList+0xac>)
 8003e2c:	0011      	movs	r1, r2
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7ff f85d 	bl	8002eee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <xTaskRemoveFromEventList+0xb0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d905      	bls.n	8003e4e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e46:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <xTaskRemoveFromEventList+0xb4>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e001      	b.n	8003e52 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b004      	add	sp, #16
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	200004d8 	.word	0x200004d8
 8003e60:	200004b8 	.word	0x200004b8
 8003e64:	200003b4 	.word	0x200003b4
 8003e68:	20000470 	.word	0x20000470
 8003e6c:	200003b0 	.word	0x200003b0
 8003e70:	200004c4 	.word	0x200004c4

08003e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <vTaskInternalSetTimeOutState+0x20>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <vTaskInternalSetTimeOutState+0x24>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	605a      	str	r2, [r3, #4]
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b002      	add	sp, #8
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200004c8 	.word	0x200004c8
 8003e98:	200004b4 	.word	0x200004b4

08003e9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <xTaskCheckForTimeOut+0x14>
 8003eac:	b672      	cpsid	i
 8003eae:	e7fe      	b.n	8003eae <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <xTaskCheckForTimeOut+0x1e>
 8003eb6:	b672      	cpsid	i
 8003eb8:	e7fe      	b.n	8003eb8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003eba:	f000 fa79 	bl	80043b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <xTaskCheckForTimeOut+0x98>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	d102      	bne.n	8003edc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e024      	b.n	8003f26 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <xTaskCheckForTimeOut+0x9c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d007      	beq.n	8003ef8 <xTaskCheckForTimeOut+0x5c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e016      	b.n	8003f26 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d20c      	bcs.n	8003f1c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad2      	subs	r2, r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff ffaf 	bl	8003e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e004      	b.n	8003f26 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f22:	2301      	movs	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003f26:	f000 fa55 	bl	80043d4 <vPortExitCritical>

	return xReturn;
 8003f2a:	697b      	ldr	r3, [r7, #20]
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b006      	add	sp, #24
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	200004b4 	.word	0x200004b4
 8003f38:	200004c8 	.word	0x200004c8

08003f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f40:	4b02      	ldr	r3, [pc, #8]	; (8003f4c <vTaskMissedYield+0x10>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200004c4 	.word	0x200004c4

08003f50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f58:	f000 f84e 	bl	8003ff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <prvIdleTask+0x1c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d9f9      	bls.n	8003f58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f64:	f000 fa14 	bl	8004390 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003f68:	e7f6      	b.n	8003f58 <prvIdleTask+0x8>
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	200003b4 	.word	0x200003b4

08003f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	e00c      	b.n	8003f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	0013      	movs	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	189b      	adds	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <prvInitialiseTaskLists+0x68>)
 8003f88:	189b      	adds	r3, r3, r2
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7fe ff86 	bl	8002e9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3301      	adds	r3, #1
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b06      	cmp	r3, #6
 8003f9a:	d9ef      	bls.n	8003f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <prvInitialiseTaskLists+0x6c>)
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7fe ff7c 	bl	8002e9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <prvInitialiseTaskLists+0x70>)
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fe ff78 	bl	8002e9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <prvInitialiseTaskLists+0x74>)
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7fe ff74 	bl	8002e9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <prvInitialiseTaskLists+0x78>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7fe ff70 	bl	8002e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <prvInitialiseTaskLists+0x7c>)
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f7fe ff6c 	bl	8002e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <prvInitialiseTaskLists+0x80>)
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <prvInitialiseTaskLists+0x6c>)
 8003fc8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <prvInitialiseTaskLists+0x84>)
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <prvInitialiseTaskLists+0x70>)
 8003fce:	601a      	str	r2, [r3, #0]
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	200003b4 	.word	0x200003b4
 8003fdc:	20000440 	.word	0x20000440
 8003fe0:	20000454 	.word	0x20000454
 8003fe4:	20000470 	.word	0x20000470
 8003fe8:	20000484 	.word	0x20000484
 8003fec:	2000049c 	.word	0x2000049c
 8003ff0:	20000468 	.word	0x20000468
 8003ff4:	2000046c 	.word	0x2000046c

08003ff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ffe:	e01a      	b.n	8004036 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004000:	f000 f9d6 	bl	80043b0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004004:	4b10      	ldr	r3, [pc, #64]	; (8004048 <prvCheckTasksWaitingTermination+0x50>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	0018      	movs	r0, r3
 8004012:	f7fe ffc4 	bl	8002f9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <prvCheckTasksWaitingTermination+0x54>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	1e5a      	subs	r2, r3, #1
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <prvCheckTasksWaitingTermination+0x54>)
 800401e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <prvCheckTasksWaitingTermination+0x58>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	1e5a      	subs	r2, r3, #1
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <prvCheckTasksWaitingTermination+0x58>)
 8004028:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800402a:	f000 f9d3 	bl	80043d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0018      	movs	r0, r3
 8004032:	f000 f80f 	bl	8004054 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <prvCheckTasksWaitingTermination+0x58>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e0      	bne.n	8004000 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b002      	add	sp, #8
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000484 	.word	0x20000484
 800404c:	200004b0 	.word	0x200004b0
 8004050:	20000498 	.word	0x20000498

08004054 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2251      	movs	r2, #81	; 0x51
 8004060:	5c9b      	ldrb	r3, [r3, r2]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	0018      	movs	r0, r3
 800406c:	f000 fade 	bl	800462c <vPortFree>
				vPortFree( pxTCB );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0018      	movs	r0, r3
 8004074:	f000 fada 	bl	800462c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004078:	e010      	b.n	800409c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2251      	movs	r2, #81	; 0x51
 800407e:	5c9b      	ldrb	r3, [r3, r2]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d104      	bne.n	800408e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0018      	movs	r0, r3
 8004088:	f000 fad0 	bl	800462c <vPortFree>
	}
 800408c:	e006      	b.n	800409c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2251      	movs	r2, #81	; 0x51
 8004092:	5c9b      	ldrb	r3, [r3, r2]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d001      	beq.n	800409c <prvDeleteTCB+0x48>
 8004098:	b672      	cpsid	i
 800409a:	e7fe      	b.n	800409a <prvDeleteTCB+0x46>
	}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	b002      	add	sp, #8
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <prvResetNextTaskUnblockTime+0x34>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <prvResetNextTaskUnblockTime+0x38>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	4252      	negs	r2, r2
 80040ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040bc:	e008      	b.n	80040d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <prvResetNextTaskUnblockTime+0x34>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <prvResetNextTaskUnblockTime+0x38>)
 80040ce:	601a      	str	r2, [r3, #0]
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b002      	add	sp, #8
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000468 	.word	0x20000468
 80040dc:	200004d0 	.word	0x200004d0

080040e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <xTaskGetSchedulerState+0x30>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040ee:	2301      	movs	r3, #1
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	e008      	b.n	8004106 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <xTaskGetSchedulerState+0x34>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040fc:	2302      	movs	r3, #2
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	e001      	b.n	8004106 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004106:	687b      	ldr	r3, [r7, #4]
	}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}
 8004110:	200004bc 	.word	0x200004bc
 8004114:	200004d8 	.word	0x200004d8

08004118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d044      	beq.n	80041b8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800412e:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <xTaskPriorityDisinherit+0xac>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <xTaskPriorityDisinherit+0x24>
 8004138:	b672      	cpsid	i
 800413a:	e7fe      	b.n	800413a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <xTaskPriorityDisinherit+0x30>
 8004144:	b672      	cpsid	i
 8004146:	e7fe      	b.n	8004146 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	429a      	cmp	r2, r3
 800415c:	d02c      	beq.n	80041b8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004162:	2b00      	cmp	r3, #0
 8004164:	d128      	bne.n	80041b8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3304      	adds	r3, #4
 800416a:	0018      	movs	r0, r3
 800416c:	f7fe ff17 	bl	8002f9e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	2207      	movs	r2, #7
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <xTaskPriorityDisinherit+0xb0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d903      	bls.n	8004198 <xTaskPriorityDisinherit+0x80>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <xTaskPriorityDisinherit+0xb0>)
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	0013      	movs	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	189b      	adds	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4a09      	ldr	r2, [pc, #36]	; (80041cc <xTaskPriorityDisinherit+0xb4>)
 80041a6:	189a      	adds	r2, r3, r2
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	3304      	adds	r3, #4
 80041ac:	0019      	movs	r1, r3
 80041ae:	0010      	movs	r0, r2
 80041b0:	f7fe fe9d 	bl	8002eee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041b4:	2301      	movs	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041b8:	68fb      	ldr	r3, [r7, #12]
	}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b004      	add	sp, #16
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	200003b0 	.word	0x200003b0
 80041c8:	200004b8 	.word	0x200004b8
 80041cc:	200003b4 	.word	0x200003b4

080041d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <prvAddCurrentTaskToDelayedList+0x90>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <prvAddCurrentTaskToDelayedList+0x94>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3304      	adds	r3, #4
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7fe fed9 	bl	8002f9e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3301      	adds	r3, #1
 80041f0:	d10b      	bne.n	800420a <prvAddCurrentTaskToDelayedList+0x3a>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <prvAddCurrentTaskToDelayedList+0x94>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	1d1a      	adds	r2, r3, #4
 80041fe:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <prvAddCurrentTaskToDelayedList+0x98>)
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f7fe fe73 	bl	8002eee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004208:	e026      	b.n	8004258 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	18d3      	adds	r3, r2, r3
 8004210:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <prvAddCurrentTaskToDelayedList+0x94>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	429a      	cmp	r2, r3
 8004220:	d209      	bcs.n	8004236 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <prvAddCurrentTaskToDelayedList+0x94>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3304      	adds	r3, #4
 800422c:	0019      	movs	r1, r3
 800422e:	0010      	movs	r0, r2
 8004230:	f7fe fe7f 	bl	8002f32 <vListInsert>
}
 8004234:	e010      	b.n	8004258 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <prvAddCurrentTaskToDelayedList+0x94>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3304      	adds	r3, #4
 8004240:	0019      	movs	r1, r3
 8004242:	0010      	movs	r0, r2
 8004244:	f7fe fe75 	bl	8002f32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <prvAddCurrentTaskToDelayedList+0xa4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	429a      	cmp	r2, r3
 8004250:	d202      	bcs.n	8004258 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	601a      	str	r2, [r3, #0]
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b004      	add	sp, #16
 800425e:	bd80      	pop	{r7, pc}
 8004260:	200004b4 	.word	0x200004b4
 8004264:	200003b0 	.word	0x200003b0
 8004268:	2000049c 	.word	0x2000049c
 800426c:	2000046c 	.word	0x2000046c
 8004270:	20000468 	.word	0x20000468
 8004274:	200004d0 	.word	0x200004d0

08004278 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3b04      	subs	r3, #4
 8004288:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	0452      	lsls	r2, r2, #17
 8004290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3b04      	subs	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b04      	subs	r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042a4:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <pxPortInitialiseStack+0x50>)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3b14      	subs	r3, #20
 80042ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3b20      	subs	r3, #32
 80042ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b004      	add	sp, #16
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	080042cd 	.word	0x080042cd

080042cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <prvTaskExitError+0x2c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3301      	adds	r3, #1
 80042dc:	d001      	beq.n	80042e2 <prvTaskExitError+0x16>
 80042de:	b672      	cpsid	i
 80042e0:	e7fe      	b.n	80042e0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80042e2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0fc      	beq.n	80042e6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b002      	add	sp, #8
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	2000000c 	.word	0x2000000c

080042fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004310 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004310:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <pxCurrentTCBConst2>)
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	3020      	adds	r0, #32
 8004318:	f380 8809 	msr	PSP, r0
 800431c:	2002      	movs	r0, #2
 800431e:	f380 8814 	msr	CONTROL, r0
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004328:	46ae      	mov	lr, r5
 800432a:	bc08      	pop	{r3}
 800432c:	bc04      	pop	{r2}
 800432e:	b662      	cpsie	i
 8004330:	4718      	bx	r3
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46c0      	nop			; (mov r8, r8)

08004340 <pxCurrentTCBConst2>:
 8004340:	200003b0 	.word	0x200003b0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46c0      	nop			; (mov r8, r8)

08004348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <xPortStartScheduler+0x40>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <xPortStartScheduler+0x40>)
 8004352:	21ff      	movs	r1, #255	; 0xff
 8004354:	0409      	lsls	r1, r1, #16
 8004356:	430a      	orrs	r2, r1
 8004358:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <xPortStartScheduler+0x40>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <xPortStartScheduler+0x40>)
 8004360:	21ff      	movs	r1, #255	; 0xff
 8004362:	0609      	lsls	r1, r1, #24
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004368:	f000 f898 	bl	800449c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <xPortStartScheduler+0x44>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004372:	f7ff ffcd 	bl	8004310 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004376:	f7ff fcb1 	bl	8003cdc <vTaskSwitchContext>
	prvTaskExitError();
 800437a:	f7ff ffa7 	bl	80042cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800437e:	2300      	movs	r3, #0
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	e000ed20 	.word	0xe000ed20
 800438c:	2000000c 	.word	0x2000000c

08004390 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <vPortYield+0x1c>)
 8004396:	2280      	movs	r2, #128	; 0x80
 8004398:	0552      	lsls	r2, r2, #21
 800439a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800439c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80043a0:	f3bf 8f6f 	isb	sy
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80043b4:	b672      	cpsid	i
    uxCriticalNesting++;
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <vPortEnterCritical+0x20>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <vPortEnterCritical+0x20>)
 80043be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80043c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80043c4:	f3bf 8f6f 	isb	sy
}
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	2000000c 	.word	0x2000000c

080043d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <vPortExitCritical+0x2c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <vPortExitCritical+0x10>
 80043e0:	b672      	cpsid	i
 80043e2:	e7fe      	b.n	80043e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <vPortExitCritical+0x2c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	1e5a      	subs	r2, r3, #1
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <vPortExitCritical+0x2c>)
 80043ec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <vPortExitCritical+0x2c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d100      	bne.n	80043f8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80043f6:	b662      	cpsie	i
    }
}
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	2000000c 	.word	0x2000000c

08004404 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004404:	f3ef 8010 	mrs	r0, PRIMASK
 8004408:	b672      	cpsid	i
 800440a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	0018      	movs	r0, r3

08004410 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004410:	f380 8810 	msr	PRIMASK, r0
 8004414:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004416:	46c0      	nop			; (mov r8, r8)
	...

08004420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004420:	f3ef 8009 	mrs	r0, PSP
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <pxCurrentTCBConst>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	3820      	subs	r0, #32
 800442a:	6010      	str	r0, [r2, #0]
 800442c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800442e:	4644      	mov	r4, r8
 8004430:	464d      	mov	r5, r9
 8004432:	4656      	mov	r6, sl
 8004434:	465f      	mov	r7, fp
 8004436:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004438:	b508      	push	{r3, lr}
 800443a:	b672      	cpsid	i
 800443c:	f7ff fc4e 	bl	8003cdc <vTaskSwitchContext>
 8004440:	b662      	cpsie	i
 8004442:	bc0c      	pop	{r2, r3}
 8004444:	6811      	ldr	r1, [r2, #0]
 8004446:	6808      	ldr	r0, [r1, #0]
 8004448:	3010      	adds	r0, #16
 800444a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800444c:	46a0      	mov	r8, r4
 800444e:	46a9      	mov	r9, r5
 8004450:	46b2      	mov	sl, r6
 8004452:	46bb      	mov	fp, r7
 8004454:	f380 8809 	msr	PSP, r0
 8004458:	3820      	subs	r0, #32
 800445a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800445c:	4718      	bx	r3
 800445e:	46c0      	nop			; (mov r8, r8)

08004460 <pxCurrentTCBConst>:
 8004460:	200003b0 	.word	0x200003b0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46c0      	nop			; (mov r8, r8)

08004468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800446e:	f7ff ffc9 	bl	8004404 <ulSetInterruptMaskFromISR>
 8004472:	0003      	movs	r3, r0
 8004474:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004476:	f7ff fb81 	bl	8003b7c <xTaskIncrementTick>
 800447a:	1e03      	subs	r3, r0, #0
 800447c:	d003      	beq.n	8004486 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800447e:	4b06      	ldr	r3, [pc, #24]	; (8004498 <SysTick_Handler+0x30>)
 8004480:	2280      	movs	r2, #128	; 0x80
 8004482:	0552      	lsls	r2, r2, #21
 8004484:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff ffc1 	bl	8004410 <vClearInterruptMaskFromISR>
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	b002      	add	sp, #8
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <prvSetupTimerInterrupt+0x34>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <prvSetupTimerInterrupt+0x38>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <prvSetupTimerInterrupt+0x3c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	22fa      	movs	r2, #250	; 0xfa
 80044b2:	0091      	lsls	r1, r2, #2
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7fb fe39 	bl	800012c <__udivsi3>
 80044ba:	0003      	movs	r3, r0
 80044bc:	001a      	movs	r2, r3
 80044be:	4b07      	ldr	r3, [pc, #28]	; (80044dc <prvSetupTimerInterrupt+0x40>)
 80044c0:	3a01      	subs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <prvSetupTimerInterrupt+0x34>)
 80044c6:	2207      	movs	r2, #7
 80044c8:	601a      	str	r2, [r3, #0]
}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	e000e010 	.word	0xe000e010
 80044d4:	e000e018 	.word	0xe000e018
 80044d8:	20000000 	.word	0x20000000
 80044dc:	e000e014 	.word	0xe000e014

080044e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80044ec:	f7ff faae 	bl	8003a4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044f0:	4b49      	ldr	r3, [pc, #292]	; (8004618 <pvPortMalloc+0x138>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044f8:	f000 f8e0 	bl	80046bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044fc:	4b47      	ldr	r3, [pc, #284]	; (800461c <pvPortMalloc+0x13c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4013      	ands	r3, r2
 8004504:	d000      	beq.n	8004508 <pvPortMalloc+0x28>
 8004506:	e079      	b.n	80045fc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d012      	beq.n	8004534 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800450e:	2208      	movs	r2, #8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	189b      	adds	r3, r3, r2
 8004514:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2207      	movs	r2, #7
 800451a:	4013      	ands	r3, r2
 800451c:	d00a      	beq.n	8004534 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2207      	movs	r2, #7
 8004522:	4393      	bics	r3, r2
 8004524:	3308      	adds	r3, #8
 8004526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2207      	movs	r2, #7
 800452c:	4013      	ands	r3, r2
 800452e:	d001      	beq.n	8004534 <pvPortMalloc+0x54>
 8004530:	b672      	cpsid	i
 8004532:	e7fe      	b.n	8004532 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d060      	beq.n	80045fc <pvPortMalloc+0x11c>
 800453a:	4b39      	ldr	r3, [pc, #228]	; (8004620 <pvPortMalloc+0x140>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d85b      	bhi.n	80045fc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004544:	4b37      	ldr	r3, [pc, #220]	; (8004624 <pvPortMalloc+0x144>)
 8004546:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004548:	4b36      	ldr	r3, [pc, #216]	; (8004624 <pvPortMalloc+0x144>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800454e:	e004      	b.n	800455a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d903      	bls.n	800456c <pvPortMalloc+0x8c>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f1      	bne.n	8004550 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <pvPortMalloc+0x138>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	429a      	cmp	r2, r3
 8004574:	d042      	beq.n	80045fc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2208      	movs	r2, #8
 800457c:	189b      	adds	r3, r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad2      	subs	r2, r2, r3
 8004590:	2308      	movs	r3, #8
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	429a      	cmp	r2, r3
 8004596:	d916      	bls.n	80045c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	18d3      	adds	r3, r2, r3
 800459e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2207      	movs	r2, #7
 80045a4:	4013      	ands	r3, r2
 80045a6:	d001      	beq.n	80045ac <pvPortMalloc+0xcc>
 80045a8:	b672      	cpsid	i
 80045aa:	e7fe      	b.n	80045aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 f8db 	bl	800477c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <pvPortMalloc+0x140>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	1ad2      	subs	r2, r2, r3
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <pvPortMalloc+0x140>)
 80045d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <pvPortMalloc+0x140>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <pvPortMalloc+0x148>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d203      	bcs.n	80045e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <pvPortMalloc+0x140>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b10      	ldr	r3, [pc, #64]	; (8004628 <pvPortMalloc+0x148>)
 80045e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <pvPortMalloc+0x13c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045fc:	f7ff fa32 	bl	8003a64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2207      	movs	r2, #7
 8004604:	4013      	ands	r3, r2
 8004606:	d001      	beq.n	800460c <pvPortMalloc+0x12c>
 8004608:	b672      	cpsid	i
 800460a:	e7fe      	b.n	800460a <pvPortMalloc+0x12a>
	return pvReturn;
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b006      	add	sp, #24
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	200010e4 	.word	0x200010e4
 800461c:	200010f0 	.word	0x200010f0
 8004620:	200010e8 	.word	0x200010e8
 8004624:	200010dc 	.word	0x200010dc
 8004628:	200010ec 	.word	0x200010ec

0800462c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d035      	beq.n	80046aa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800463e:	2308      	movs	r3, #8
 8004640:	425b      	negs	r3, r3
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	18d3      	adds	r3, r2, r3
 8004646:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <vPortFree+0x88>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4013      	ands	r3, r2
 8004656:	d101      	bne.n	800465c <vPortFree+0x30>
 8004658:	b672      	cpsid	i
 800465a:	e7fe      	b.n	800465a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <vPortFree+0x3c>
 8004664:	b672      	cpsid	i
 8004666:	e7fe      	b.n	8004666 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <vPortFree+0x88>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4013      	ands	r3, r2
 8004672:	d01a      	beq.n	80046aa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d116      	bne.n	80046aa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <vPortFree+0x88>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	43db      	mvns	r3, r3
 8004686:	401a      	ands	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800468c:	f7ff f9de 	bl	8003a4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <vPortFree+0x8c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	18d2      	adds	r2, r2, r3
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <vPortFree+0x8c>)
 800469c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f000 f86b 	bl	800477c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046a6:	f7ff f9dd 	bl	8003a64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b004      	add	sp, #16
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	200010f0 	.word	0x200010f0
 80046b8:	200010e8 	.word	0x200010e8

080046bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046c2:	23c0      	movs	r3, #192	; 0xc0
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <prvHeapInit+0xa8>)
 80046ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2207      	movs	r2, #7
 80046d0:	4013      	ands	r3, r2
 80046d2:	d00c      	beq.n	80046ee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3307      	adds	r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2207      	movs	r2, #7
 80046de:	4393      	bics	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad2      	subs	r2, r2, r3
 80046e8:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <prvHeapInit+0xa8>)
 80046ea:	18d3      	adds	r3, r2, r3
 80046ec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046f2:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <prvHeapInit+0xac>)
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <prvHeapInit+0xac>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	18d3      	adds	r3, r2, r3
 8004704:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004706:	2208      	movs	r2, #8
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2207      	movs	r2, #7
 8004712:	4393      	bics	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <prvHeapInit+0xb0>)
 800471a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <prvHeapInit+0xb0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2200      	movs	r2, #0
 8004722:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <prvHeapInit+0xb0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	1ad2      	subs	r2, r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <prvHeapInit+0xb0>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <prvHeapInit+0xb4>)
 8004748:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <prvHeapInit+0xb8>)
 8004750:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <prvHeapInit+0xbc>)
 8004754:	2280      	movs	r2, #128	; 0x80
 8004756:	0612      	lsls	r2, r2, #24
 8004758:	601a      	str	r2, [r3, #0]
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	200004dc 	.word	0x200004dc
 8004768:	200010dc 	.word	0x200010dc
 800476c:	200010e4 	.word	0x200010e4
 8004770:	200010ec 	.word	0x200010ec
 8004774:	200010e8 	.word	0x200010e8
 8004778:	200010f0 	.word	0x200010f0

0800477c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004784:	4b27      	ldr	r3, [pc, #156]	; (8004824 <prvInsertBlockIntoFreeList+0xa8>)
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e002      	b.n	8004790 <prvInsertBlockIntoFreeList+0x14>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d8f7      	bhi.n	800478a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	18d3      	adds	r3, r2, r3
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d108      	bne.n	80047be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	18d2      	adds	r2, r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	18d2      	adds	r2, r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d118      	bne.n	8004804 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <prvInsertBlockIntoFreeList+0xac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d00d      	beq.n	80047fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	18d2      	adds	r2, r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e008      	b.n	800480c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <prvInsertBlockIntoFreeList+0xac>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e003      	b.n	800480c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	429a      	cmp	r2, r3
 8004812:	d002      	beq.n	800481a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	46bd      	mov	sp, r7
 800481e:	b004      	add	sp, #16
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	200010dc 	.word	0x200010dc
 8004828:	200010e4 	.word	0x200010e4

0800482c <siprintf>:
 800482c:	b40e      	push	{r1, r2, r3}
 800482e:	b500      	push	{lr}
 8004830:	490b      	ldr	r1, [pc, #44]	; (8004860 <siprintf+0x34>)
 8004832:	b09c      	sub	sp, #112	; 0x70
 8004834:	ab1d      	add	r3, sp, #116	; 0x74
 8004836:	9002      	str	r0, [sp, #8]
 8004838:	9006      	str	r0, [sp, #24]
 800483a:	9107      	str	r1, [sp, #28]
 800483c:	9104      	str	r1, [sp, #16]
 800483e:	4809      	ldr	r0, [pc, #36]	; (8004864 <siprintf+0x38>)
 8004840:	4909      	ldr	r1, [pc, #36]	; (8004868 <siprintf+0x3c>)
 8004842:	cb04      	ldmia	r3!, {r2}
 8004844:	9105      	str	r1, [sp, #20]
 8004846:	6800      	ldr	r0, [r0, #0]
 8004848:	a902      	add	r1, sp, #8
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	f000 f9ac 	bl	8004ba8 <_svfiprintf_r>
 8004850:	2200      	movs	r2, #0
 8004852:	9b02      	ldr	r3, [sp, #8]
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	b01c      	add	sp, #112	; 0x70
 8004858:	bc08      	pop	{r3}
 800485a:	b003      	add	sp, #12
 800485c:	4718      	bx	r3
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	7fffffff 	.word	0x7fffffff
 8004864:	2000005c 	.word	0x2000005c
 8004868:	ffff0208 	.word	0xffff0208

0800486c <memset>:
 800486c:	0003      	movs	r3, r0
 800486e:	1882      	adds	r2, r0, r2
 8004870:	4293      	cmp	r3, r2
 8004872:	d100      	bne.n	8004876 <memset+0xa>
 8004874:	4770      	bx	lr
 8004876:	7019      	strb	r1, [r3, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	e7f9      	b.n	8004870 <memset+0x4>

0800487c <__errno>:
 800487c:	4b01      	ldr	r3, [pc, #4]	; (8004884 <__errno+0x8>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	4770      	bx	lr
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	2000005c 	.word	0x2000005c

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	2600      	movs	r6, #0
 800488c:	4c0c      	ldr	r4, [pc, #48]	; (80048c0 <__libc_init_array+0x38>)
 800488e:	4d0d      	ldr	r5, [pc, #52]	; (80048c4 <__libc_init_array+0x3c>)
 8004890:	1b64      	subs	r4, r4, r5
 8004892:	10a4      	asrs	r4, r4, #2
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	2600      	movs	r6, #0
 800489a:	f000 fc6d 	bl	8005178 <_init>
 800489e:	4c0a      	ldr	r4, [pc, #40]	; (80048c8 <__libc_init_array+0x40>)
 80048a0:	4d0a      	ldr	r5, [pc, #40]	; (80048cc <__libc_init_array+0x44>)
 80048a2:	1b64      	subs	r4, r4, r5
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	00b3      	lsls	r3, r6, #2
 80048ae:	58eb      	ldr	r3, [r5, r3]
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	00b3      	lsls	r3, r6, #2
 80048b8:	58eb      	ldr	r3, [r5, r3]
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	080053c0 	.word	0x080053c0
 80048c4:	080053c0 	.word	0x080053c0
 80048c8:	080053c4 	.word	0x080053c4
 80048cc:	080053c0 	.word	0x080053c0

080048d0 <__retarget_lock_acquire_recursive>:
 80048d0:	4770      	bx	lr

080048d2 <__retarget_lock_release_recursive>:
 80048d2:	4770      	bx	lr

080048d4 <memcpy>:
 80048d4:	2300      	movs	r3, #0
 80048d6:	b510      	push	{r4, lr}
 80048d8:	429a      	cmp	r2, r3
 80048da:	d100      	bne.n	80048de <memcpy+0xa>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	5ccc      	ldrb	r4, [r1, r3]
 80048e0:	54c4      	strb	r4, [r0, r3]
 80048e2:	3301      	adds	r3, #1
 80048e4:	e7f8      	b.n	80048d8 <memcpy+0x4>
	...

080048e8 <_free_r>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	0005      	movs	r5, r0
 80048ec:	2900      	cmp	r1, #0
 80048ee:	d010      	beq.n	8004912 <_free_r+0x2a>
 80048f0:	1f0c      	subs	r4, r1, #4
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da00      	bge.n	80048fa <_free_r+0x12>
 80048f8:	18e4      	adds	r4, r4, r3
 80048fa:	0028      	movs	r0, r5
 80048fc:	f000 f8e2 	bl	8004ac4 <__malloc_lock>
 8004900:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <_free_r+0x90>)
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d105      	bne.n	8004914 <_free_r+0x2c>
 8004908:	6063      	str	r3, [r4, #4]
 800490a:	6014      	str	r4, [r2, #0]
 800490c:	0028      	movs	r0, r5
 800490e:	f000 f8e1 	bl	8004ad4 <__malloc_unlock>
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	42a3      	cmp	r3, r4
 8004916:	d908      	bls.n	800492a <_free_r+0x42>
 8004918:	6820      	ldr	r0, [r4, #0]
 800491a:	1821      	adds	r1, r4, r0
 800491c:	428b      	cmp	r3, r1
 800491e:	d1f3      	bne.n	8004908 <_free_r+0x20>
 8004920:	6819      	ldr	r1, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	1809      	adds	r1, r1, r0
 8004926:	6021      	str	r1, [r4, #0]
 8004928:	e7ee      	b.n	8004908 <_free_r+0x20>
 800492a:	001a      	movs	r2, r3
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <_free_r+0x4e>
 8004932:	42a3      	cmp	r3, r4
 8004934:	d9f9      	bls.n	800492a <_free_r+0x42>
 8004936:	6811      	ldr	r1, [r2, #0]
 8004938:	1850      	adds	r0, r2, r1
 800493a:	42a0      	cmp	r0, r4
 800493c:	d10b      	bne.n	8004956 <_free_r+0x6e>
 800493e:	6820      	ldr	r0, [r4, #0]
 8004940:	1809      	adds	r1, r1, r0
 8004942:	1850      	adds	r0, r2, r1
 8004944:	6011      	str	r1, [r2, #0]
 8004946:	4283      	cmp	r3, r0
 8004948:	d1e0      	bne.n	800490c <_free_r+0x24>
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	1841      	adds	r1, r0, r1
 8004950:	6011      	str	r1, [r2, #0]
 8004952:	6053      	str	r3, [r2, #4]
 8004954:	e7da      	b.n	800490c <_free_r+0x24>
 8004956:	42a0      	cmp	r0, r4
 8004958:	d902      	bls.n	8004960 <_free_r+0x78>
 800495a:	230c      	movs	r3, #12
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	e7d5      	b.n	800490c <_free_r+0x24>
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	1821      	adds	r1, r4, r0
 8004964:	428b      	cmp	r3, r1
 8004966:	d103      	bne.n	8004970 <_free_r+0x88>
 8004968:	6819      	ldr	r1, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	1809      	adds	r1, r1, r0
 800496e:	6021      	str	r1, [r4, #0]
 8004970:	6063      	str	r3, [r4, #4]
 8004972:	6054      	str	r4, [r2, #4]
 8004974:	e7ca      	b.n	800490c <_free_r+0x24>
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	20001234 	.word	0x20001234

0800497c <sbrk_aligned>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4e0f      	ldr	r6, [pc, #60]	; (80049bc <sbrk_aligned+0x40>)
 8004980:	000d      	movs	r5, r1
 8004982:	6831      	ldr	r1, [r6, #0]
 8004984:	0004      	movs	r4, r0
 8004986:	2900      	cmp	r1, #0
 8004988:	d102      	bne.n	8004990 <sbrk_aligned+0x14>
 800498a:	f000 fba1 	bl	80050d0 <_sbrk_r>
 800498e:	6030      	str	r0, [r6, #0]
 8004990:	0029      	movs	r1, r5
 8004992:	0020      	movs	r0, r4
 8004994:	f000 fb9c 	bl	80050d0 <_sbrk_r>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d00a      	beq.n	80049b2 <sbrk_aligned+0x36>
 800499c:	2303      	movs	r3, #3
 800499e:	1cc5      	adds	r5, r0, #3
 80049a0:	439d      	bics	r5, r3
 80049a2:	42a8      	cmp	r0, r5
 80049a4:	d007      	beq.n	80049b6 <sbrk_aligned+0x3a>
 80049a6:	1a29      	subs	r1, r5, r0
 80049a8:	0020      	movs	r0, r4
 80049aa:	f000 fb91 	bl	80050d0 <_sbrk_r>
 80049ae:	3001      	adds	r0, #1
 80049b0:	d101      	bne.n	80049b6 <sbrk_aligned+0x3a>
 80049b2:	2501      	movs	r5, #1
 80049b4:	426d      	negs	r5, r5
 80049b6:	0028      	movs	r0, r5
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	20001238 	.word	0x20001238

080049c0 <_malloc_r>:
 80049c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049c2:	2203      	movs	r2, #3
 80049c4:	1ccb      	adds	r3, r1, #3
 80049c6:	4393      	bics	r3, r2
 80049c8:	3308      	adds	r3, #8
 80049ca:	0006      	movs	r6, r0
 80049cc:	001f      	movs	r7, r3
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	d238      	bcs.n	8004a44 <_malloc_r+0x84>
 80049d2:	270c      	movs	r7, #12
 80049d4:	42b9      	cmp	r1, r7
 80049d6:	d837      	bhi.n	8004a48 <_malloc_r+0x88>
 80049d8:	0030      	movs	r0, r6
 80049da:	f000 f873 	bl	8004ac4 <__malloc_lock>
 80049de:	4b38      	ldr	r3, [pc, #224]	; (8004ac0 <_malloc_r+0x100>)
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	001c      	movs	r4, r3
 80049e6:	2c00      	cmp	r4, #0
 80049e8:	d133      	bne.n	8004a52 <_malloc_r+0x92>
 80049ea:	0039      	movs	r1, r7
 80049ec:	0030      	movs	r0, r6
 80049ee:	f7ff ffc5 	bl	800497c <sbrk_aligned>
 80049f2:	0004      	movs	r4, r0
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d15e      	bne.n	8004ab6 <_malloc_r+0xf6>
 80049f8:	9b00      	ldr	r3, [sp, #0]
 80049fa:	681c      	ldr	r4, [r3, #0]
 80049fc:	0025      	movs	r5, r4
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	d14e      	bne.n	8004aa0 <_malloc_r+0xe0>
 8004a02:	2c00      	cmp	r4, #0
 8004a04:	d051      	beq.n	8004aaa <_malloc_r+0xea>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	0029      	movs	r1, r5
 8004a0a:	18e3      	adds	r3, r4, r3
 8004a0c:	0030      	movs	r0, r6
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	f000 fb5e 	bl	80050d0 <_sbrk_r>
 8004a14:	9b01      	ldr	r3, [sp, #4]
 8004a16:	4283      	cmp	r3, r0
 8004a18:	d147      	bne.n	8004aaa <_malloc_r+0xea>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	0030      	movs	r0, r6
 8004a1e:	1aff      	subs	r7, r7, r3
 8004a20:	0039      	movs	r1, r7
 8004a22:	f7ff ffab 	bl	800497c <sbrk_aligned>
 8004a26:	3001      	adds	r0, #1
 8004a28:	d03f      	beq.n	8004aaa <_malloc_r+0xea>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	19db      	adds	r3, r3, r7
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	9b00      	ldr	r3, [sp, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d040      	beq.n	8004aba <_malloc_r+0xfa>
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	42a2      	cmp	r2, r4
 8004a3c:	d133      	bne.n	8004aa6 <_malloc_r+0xe6>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	e014      	b.n	8004a6e <_malloc_r+0xae>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	dac5      	bge.n	80049d4 <_malloc_r+0x14>
 8004a48:	230c      	movs	r3, #12
 8004a4a:	2500      	movs	r5, #0
 8004a4c:	6033      	str	r3, [r6, #0]
 8004a4e:	0028      	movs	r0, r5
 8004a50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a52:	6821      	ldr	r1, [r4, #0]
 8004a54:	1bc9      	subs	r1, r1, r7
 8004a56:	d420      	bmi.n	8004a9a <_malloc_r+0xda>
 8004a58:	290b      	cmp	r1, #11
 8004a5a:	d918      	bls.n	8004a8e <_malloc_r+0xce>
 8004a5c:	19e2      	adds	r2, r4, r7
 8004a5e:	6027      	str	r7, [r4, #0]
 8004a60:	42a3      	cmp	r3, r4
 8004a62:	d112      	bne.n	8004a8a <_malloc_r+0xca>
 8004a64:	9b00      	ldr	r3, [sp, #0]
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	6863      	ldr	r3, [r4, #4]
 8004a6a:	6011      	str	r1, [r2, #0]
 8004a6c:	6053      	str	r3, [r2, #4]
 8004a6e:	0030      	movs	r0, r6
 8004a70:	0025      	movs	r5, r4
 8004a72:	f000 f82f 	bl	8004ad4 <__malloc_unlock>
 8004a76:	2207      	movs	r2, #7
 8004a78:	350b      	adds	r5, #11
 8004a7a:	1d23      	adds	r3, r4, #4
 8004a7c:	4395      	bics	r5, r2
 8004a7e:	1aea      	subs	r2, r5, r3
 8004a80:	429d      	cmp	r5, r3
 8004a82:	d0e4      	beq.n	8004a4e <_malloc_r+0x8e>
 8004a84:	1b5b      	subs	r3, r3, r5
 8004a86:	50a3      	str	r3, [r4, r2]
 8004a88:	e7e1      	b.n	8004a4e <_malloc_r+0x8e>
 8004a8a:	605a      	str	r2, [r3, #4]
 8004a8c:	e7ec      	b.n	8004a68 <_malloc_r+0xa8>
 8004a8e:	6862      	ldr	r2, [r4, #4]
 8004a90:	42a3      	cmp	r3, r4
 8004a92:	d1d5      	bne.n	8004a40 <_malloc_r+0x80>
 8004a94:	9b00      	ldr	r3, [sp, #0]
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e7e9      	b.n	8004a6e <_malloc_r+0xae>
 8004a9a:	0023      	movs	r3, r4
 8004a9c:	6864      	ldr	r4, [r4, #4]
 8004a9e:	e7a2      	b.n	80049e6 <_malloc_r+0x26>
 8004aa0:	002c      	movs	r4, r5
 8004aa2:	686d      	ldr	r5, [r5, #4]
 8004aa4:	e7ab      	b.n	80049fe <_malloc_r+0x3e>
 8004aa6:	0013      	movs	r3, r2
 8004aa8:	e7c4      	b.n	8004a34 <_malloc_r+0x74>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	0030      	movs	r0, r6
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	f000 f810 	bl	8004ad4 <__malloc_unlock>
 8004ab4:	e7cb      	b.n	8004a4e <_malloc_r+0x8e>
 8004ab6:	6027      	str	r7, [r4, #0]
 8004ab8:	e7d9      	b.n	8004a6e <_malloc_r+0xae>
 8004aba:	605b      	str	r3, [r3, #4]
 8004abc:	deff      	udf	#255	; 0xff
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	20001234 	.word	0x20001234

08004ac4 <__malloc_lock>:
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	4802      	ldr	r0, [pc, #8]	; (8004ad0 <__malloc_lock+0xc>)
 8004ac8:	f7ff ff02 	bl	80048d0 <__retarget_lock_acquire_recursive>
 8004acc:	bd10      	pop	{r4, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	20001230 	.word	0x20001230

08004ad4 <__malloc_unlock>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4802      	ldr	r0, [pc, #8]	; (8004ae0 <__malloc_unlock+0xc>)
 8004ad8:	f7ff fefb 	bl	80048d2 <__retarget_lock_release_recursive>
 8004adc:	bd10      	pop	{r4, pc}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	20001230 	.word	0x20001230

08004ae4 <__ssputs_r>:
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	9203      	str	r2, [sp, #12]
 8004aec:	688e      	ldr	r6, [r1, #8]
 8004aee:	9a01      	ldr	r2, [sp, #4]
 8004af0:	0007      	movs	r7, r0
 8004af2:	000c      	movs	r4, r1
 8004af4:	680b      	ldr	r3, [r1, #0]
 8004af6:	4296      	cmp	r6, r2
 8004af8:	d831      	bhi.n	8004b5e <__ssputs_r+0x7a>
 8004afa:	898a      	ldrh	r2, [r1, #12]
 8004afc:	2190      	movs	r1, #144	; 0x90
 8004afe:	00c9      	lsls	r1, r1, #3
 8004b00:	420a      	tst	r2, r1
 8004b02:	d029      	beq.n	8004b58 <__ssputs_r+0x74>
 8004b04:	2003      	movs	r0, #3
 8004b06:	6921      	ldr	r1, [r4, #16]
 8004b08:	1a5b      	subs	r3, r3, r1
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	6963      	ldr	r3, [r4, #20]
 8004b0e:	4343      	muls	r3, r0
 8004b10:	0fdd      	lsrs	r5, r3, #31
 8004b12:	18ed      	adds	r5, r5, r3
 8004b14:	9b01      	ldr	r3, [sp, #4]
 8004b16:	9802      	ldr	r0, [sp, #8]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	181b      	adds	r3, r3, r0
 8004b1c:	106d      	asrs	r5, r5, #1
 8004b1e:	42ab      	cmp	r3, r5
 8004b20:	d900      	bls.n	8004b24 <__ssputs_r+0x40>
 8004b22:	001d      	movs	r5, r3
 8004b24:	0552      	lsls	r2, r2, #21
 8004b26:	d529      	bpl.n	8004b7c <__ssputs_r+0x98>
 8004b28:	0029      	movs	r1, r5
 8004b2a:	0038      	movs	r0, r7
 8004b2c:	f7ff ff48 	bl	80049c0 <_malloc_r>
 8004b30:	1e06      	subs	r6, r0, #0
 8004b32:	d02d      	beq.n	8004b90 <__ssputs_r+0xac>
 8004b34:	9a02      	ldr	r2, [sp, #8]
 8004b36:	6921      	ldr	r1, [r4, #16]
 8004b38:	f7ff fecc 	bl	80048d4 <memcpy>
 8004b3c:	89a2      	ldrh	r2, [r4, #12]
 8004b3e:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <__ssputs_r+0xc0>)
 8004b40:	401a      	ands	r2, r3
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	4313      	orrs	r3, r2
 8004b46:	81a3      	strh	r3, [r4, #12]
 8004b48:	9b02      	ldr	r3, [sp, #8]
 8004b4a:	6126      	str	r6, [r4, #16]
 8004b4c:	18f6      	adds	r6, r6, r3
 8004b4e:	6026      	str	r6, [r4, #0]
 8004b50:	6165      	str	r5, [r4, #20]
 8004b52:	9e01      	ldr	r6, [sp, #4]
 8004b54:	1aed      	subs	r5, r5, r3
 8004b56:	60a5      	str	r5, [r4, #8]
 8004b58:	9b01      	ldr	r3, [sp, #4]
 8004b5a:	429e      	cmp	r6, r3
 8004b5c:	d900      	bls.n	8004b60 <__ssputs_r+0x7c>
 8004b5e:	9e01      	ldr	r6, [sp, #4]
 8004b60:	0032      	movs	r2, r6
 8004b62:	9903      	ldr	r1, [sp, #12]
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	f000 fa9f 	bl	80050a8 <memmove>
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	68a3      	ldr	r3, [r4, #8]
 8004b6e:	1b9b      	subs	r3, r3, r6
 8004b70:	60a3      	str	r3, [r4, #8]
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	199b      	adds	r3, r3, r6
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	b005      	add	sp, #20
 8004b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7c:	002a      	movs	r2, r5
 8004b7e:	0038      	movs	r0, r7
 8004b80:	f000 fac3 	bl	800510a <_realloc_r>
 8004b84:	1e06      	subs	r6, r0, #0
 8004b86:	d1df      	bne.n	8004b48 <__ssputs_r+0x64>
 8004b88:	0038      	movs	r0, r7
 8004b8a:	6921      	ldr	r1, [r4, #16]
 8004b8c:	f7ff feac 	bl	80048e8 <_free_r>
 8004b90:	230c      	movs	r3, #12
 8004b92:	2001      	movs	r0, #1
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	89a2      	ldrh	r2, [r4, #12]
 8004b98:	3334      	adds	r3, #52	; 0x34
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	81a3      	strh	r3, [r4, #12]
 8004b9e:	4240      	negs	r0, r0
 8004ba0:	e7ea      	b.n	8004b78 <__ssputs_r+0x94>
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	fffffb7f 	.word	0xfffffb7f

08004ba8 <_svfiprintf_r>:
 8004ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004baa:	b0a1      	sub	sp, #132	; 0x84
 8004bac:	9003      	str	r0, [sp, #12]
 8004bae:	001d      	movs	r5, r3
 8004bb0:	898b      	ldrh	r3, [r1, #12]
 8004bb2:	000f      	movs	r7, r1
 8004bb4:	0016      	movs	r6, r2
 8004bb6:	061b      	lsls	r3, r3, #24
 8004bb8:	d511      	bpl.n	8004bde <_svfiprintf_r+0x36>
 8004bba:	690b      	ldr	r3, [r1, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10e      	bne.n	8004bde <_svfiprintf_r+0x36>
 8004bc0:	2140      	movs	r1, #64	; 0x40
 8004bc2:	f7ff fefd 	bl	80049c0 <_malloc_r>
 8004bc6:	6038      	str	r0, [r7, #0]
 8004bc8:	6138      	str	r0, [r7, #16]
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d105      	bne.n	8004bda <_svfiprintf_r+0x32>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	9a03      	ldr	r2, [sp, #12]
 8004bd2:	3801      	subs	r0, #1
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	b021      	add	sp, #132	; 0x84
 8004bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bda:	2340      	movs	r3, #64	; 0x40
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	2300      	movs	r3, #0
 8004be0:	ac08      	add	r4, sp, #32
 8004be2:	6163      	str	r3, [r4, #20]
 8004be4:	3320      	adds	r3, #32
 8004be6:	7663      	strb	r3, [r4, #25]
 8004be8:	3310      	adds	r3, #16
 8004bea:	76a3      	strb	r3, [r4, #26]
 8004bec:	9507      	str	r5, [sp, #28]
 8004bee:	0035      	movs	r5, r6
 8004bf0:	782b      	ldrb	r3, [r5, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <_svfiprintf_r+0x52>
 8004bf6:	2b25      	cmp	r3, #37	; 0x25
 8004bf8:	d148      	bne.n	8004c8c <_svfiprintf_r+0xe4>
 8004bfa:	1bab      	subs	r3, r5, r6
 8004bfc:	9305      	str	r3, [sp, #20]
 8004bfe:	42b5      	cmp	r5, r6
 8004c00:	d00b      	beq.n	8004c1a <_svfiprintf_r+0x72>
 8004c02:	0032      	movs	r2, r6
 8004c04:	0039      	movs	r1, r7
 8004c06:	9803      	ldr	r0, [sp, #12]
 8004c08:	f7ff ff6c 	bl	8004ae4 <__ssputs_r>
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d100      	bne.n	8004c12 <_svfiprintf_r+0x6a>
 8004c10:	e0af      	b.n	8004d72 <_svfiprintf_r+0x1ca>
 8004c12:	6963      	ldr	r3, [r4, #20]
 8004c14:	9a05      	ldr	r2, [sp, #20]
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	6163      	str	r3, [r4, #20]
 8004c1a:	782b      	ldrb	r3, [r5, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d100      	bne.n	8004c22 <_svfiprintf_r+0x7a>
 8004c20:	e0a7      	b.n	8004d72 <_svfiprintf_r+0x1ca>
 8004c22:	2201      	movs	r2, #1
 8004c24:	2300      	movs	r3, #0
 8004c26:	4252      	negs	r2, r2
 8004c28:	6062      	str	r2, [r4, #4]
 8004c2a:	a904      	add	r1, sp, #16
 8004c2c:	3254      	adds	r2, #84	; 0x54
 8004c2e:	1852      	adds	r2, r2, r1
 8004c30:	1c6e      	adds	r6, r5, #1
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	60e3      	str	r3, [r4, #12]
 8004c36:	60a3      	str	r3, [r4, #8]
 8004c38:	7013      	strb	r3, [r2, #0]
 8004c3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c3c:	4b55      	ldr	r3, [pc, #340]	; (8004d94 <_svfiprintf_r+0x1ec>)
 8004c3e:	2205      	movs	r2, #5
 8004c40:	0018      	movs	r0, r3
 8004c42:	7831      	ldrb	r1, [r6, #0]
 8004c44:	9305      	str	r3, [sp, #20]
 8004c46:	f000 fa55 	bl	80050f4 <memchr>
 8004c4a:	1c75      	adds	r5, r6, #1
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d11f      	bne.n	8004c90 <_svfiprintf_r+0xe8>
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	06d3      	lsls	r3, r2, #27
 8004c54:	d504      	bpl.n	8004c60 <_svfiprintf_r+0xb8>
 8004c56:	2353      	movs	r3, #83	; 0x53
 8004c58:	a904      	add	r1, sp, #16
 8004c5a:	185b      	adds	r3, r3, r1
 8004c5c:	2120      	movs	r1, #32
 8004c5e:	7019      	strb	r1, [r3, #0]
 8004c60:	0713      	lsls	r3, r2, #28
 8004c62:	d504      	bpl.n	8004c6e <_svfiprintf_r+0xc6>
 8004c64:	2353      	movs	r3, #83	; 0x53
 8004c66:	a904      	add	r1, sp, #16
 8004c68:	185b      	adds	r3, r3, r1
 8004c6a:	212b      	movs	r1, #43	; 0x2b
 8004c6c:	7019      	strb	r1, [r3, #0]
 8004c6e:	7833      	ldrb	r3, [r6, #0]
 8004c70:	2b2a      	cmp	r3, #42	; 0x2a
 8004c72:	d016      	beq.n	8004ca2 <_svfiprintf_r+0xfa>
 8004c74:	0035      	movs	r5, r6
 8004c76:	2100      	movs	r1, #0
 8004c78:	200a      	movs	r0, #10
 8004c7a:	68e3      	ldr	r3, [r4, #12]
 8004c7c:	782a      	ldrb	r2, [r5, #0]
 8004c7e:	1c6e      	adds	r6, r5, #1
 8004c80:	3a30      	subs	r2, #48	; 0x30
 8004c82:	2a09      	cmp	r2, #9
 8004c84:	d94e      	bls.n	8004d24 <_svfiprintf_r+0x17c>
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d111      	bne.n	8004cae <_svfiprintf_r+0x106>
 8004c8a:	e017      	b.n	8004cbc <_svfiprintf_r+0x114>
 8004c8c:	3501      	adds	r5, #1
 8004c8e:	e7af      	b.n	8004bf0 <_svfiprintf_r+0x48>
 8004c90:	9b05      	ldr	r3, [sp, #20]
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	1ac0      	subs	r0, r0, r3
 8004c96:	2301      	movs	r3, #1
 8004c98:	4083      	lsls	r3, r0
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	002e      	movs	r6, r5
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	e7cc      	b.n	8004c3c <_svfiprintf_r+0x94>
 8004ca2:	9b07      	ldr	r3, [sp, #28]
 8004ca4:	1d19      	adds	r1, r3, #4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	9107      	str	r1, [sp, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	db01      	blt.n	8004cb2 <_svfiprintf_r+0x10a>
 8004cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cb0:	e004      	b.n	8004cbc <_svfiprintf_r+0x114>
 8004cb2:	425b      	negs	r3, r3
 8004cb4:	60e3      	str	r3, [r4, #12]
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	782b      	ldrb	r3, [r5, #0]
 8004cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8004cc0:	d10a      	bne.n	8004cd8 <_svfiprintf_r+0x130>
 8004cc2:	786b      	ldrb	r3, [r5, #1]
 8004cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004cc6:	d135      	bne.n	8004d34 <_svfiprintf_r+0x18c>
 8004cc8:	9b07      	ldr	r3, [sp, #28]
 8004cca:	3502      	adds	r5, #2
 8004ccc:	1d1a      	adds	r2, r3, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	9207      	str	r2, [sp, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	db2b      	blt.n	8004d2e <_svfiprintf_r+0x186>
 8004cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd8:	4e2f      	ldr	r6, [pc, #188]	; (8004d98 <_svfiprintf_r+0x1f0>)
 8004cda:	2203      	movs	r2, #3
 8004cdc:	0030      	movs	r0, r6
 8004cde:	7829      	ldrb	r1, [r5, #0]
 8004ce0:	f000 fa08 	bl	80050f4 <memchr>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d006      	beq.n	8004cf6 <_svfiprintf_r+0x14e>
 8004ce8:	2340      	movs	r3, #64	; 0x40
 8004cea:	1b80      	subs	r0, r0, r6
 8004cec:	4083      	lsls	r3, r0
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	3501      	adds	r5, #1
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	7829      	ldrb	r1, [r5, #0]
 8004cf8:	2206      	movs	r2, #6
 8004cfa:	4828      	ldr	r0, [pc, #160]	; (8004d9c <_svfiprintf_r+0x1f4>)
 8004cfc:	1c6e      	adds	r6, r5, #1
 8004cfe:	7621      	strb	r1, [r4, #24]
 8004d00:	f000 f9f8 	bl	80050f4 <memchr>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d03c      	beq.n	8004d82 <_svfiprintf_r+0x1da>
 8004d08:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <_svfiprintf_r+0x1f8>)
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d125      	bne.n	8004d5a <_svfiprintf_r+0x1b2>
 8004d0e:	2207      	movs	r2, #7
 8004d10:	9b07      	ldr	r3, [sp, #28]
 8004d12:	3307      	adds	r3, #7
 8004d14:	4393      	bics	r3, r2
 8004d16:	3308      	adds	r3, #8
 8004d18:	9307      	str	r3, [sp, #28]
 8004d1a:	6963      	ldr	r3, [r4, #20]
 8004d1c:	9a04      	ldr	r2, [sp, #16]
 8004d1e:	189b      	adds	r3, r3, r2
 8004d20:	6163      	str	r3, [r4, #20]
 8004d22:	e764      	b.n	8004bee <_svfiprintf_r+0x46>
 8004d24:	4343      	muls	r3, r0
 8004d26:	0035      	movs	r5, r6
 8004d28:	2101      	movs	r1, #1
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	e7a6      	b.n	8004c7c <_svfiprintf_r+0xd4>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	425b      	negs	r3, r3
 8004d32:	e7d0      	b.n	8004cd6 <_svfiprintf_r+0x12e>
 8004d34:	2300      	movs	r3, #0
 8004d36:	200a      	movs	r0, #10
 8004d38:	001a      	movs	r2, r3
 8004d3a:	3501      	adds	r5, #1
 8004d3c:	6063      	str	r3, [r4, #4]
 8004d3e:	7829      	ldrb	r1, [r5, #0]
 8004d40:	1c6e      	adds	r6, r5, #1
 8004d42:	3930      	subs	r1, #48	; 0x30
 8004d44:	2909      	cmp	r1, #9
 8004d46:	d903      	bls.n	8004d50 <_svfiprintf_r+0x1a8>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0c5      	beq.n	8004cd8 <_svfiprintf_r+0x130>
 8004d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d4e:	e7c3      	b.n	8004cd8 <_svfiprintf_r+0x130>
 8004d50:	4342      	muls	r2, r0
 8004d52:	0035      	movs	r5, r6
 8004d54:	2301      	movs	r3, #1
 8004d56:	1852      	adds	r2, r2, r1
 8004d58:	e7f1      	b.n	8004d3e <_svfiprintf_r+0x196>
 8004d5a:	aa07      	add	r2, sp, #28
 8004d5c:	9200      	str	r2, [sp, #0]
 8004d5e:	0021      	movs	r1, r4
 8004d60:	003a      	movs	r2, r7
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <_svfiprintf_r+0x1fc>)
 8004d64:	9803      	ldr	r0, [sp, #12]
 8004d66:	e000      	b.n	8004d6a <_svfiprintf_r+0x1c2>
 8004d68:	bf00      	nop
 8004d6a:	9004      	str	r0, [sp, #16]
 8004d6c:	9b04      	ldr	r3, [sp, #16]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	d1d3      	bne.n	8004d1a <_svfiprintf_r+0x172>
 8004d72:	89bb      	ldrh	r3, [r7, #12]
 8004d74:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d76:	065b      	lsls	r3, r3, #25
 8004d78:	d400      	bmi.n	8004d7c <_svfiprintf_r+0x1d4>
 8004d7a:	e72c      	b.n	8004bd6 <_svfiprintf_r+0x2e>
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	4240      	negs	r0, r0
 8004d80:	e729      	b.n	8004bd6 <_svfiprintf_r+0x2e>
 8004d82:	aa07      	add	r2, sp, #28
 8004d84:	9200      	str	r2, [sp, #0]
 8004d86:	0021      	movs	r1, r4
 8004d88:	003a      	movs	r2, r7
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <_svfiprintf_r+0x1fc>)
 8004d8c:	9803      	ldr	r0, [sp, #12]
 8004d8e:	f000 f87b 	bl	8004e88 <_printf_i>
 8004d92:	e7ea      	b.n	8004d6a <_svfiprintf_r+0x1c2>
 8004d94:	08005384 	.word	0x08005384
 8004d98:	0800538a 	.word	0x0800538a
 8004d9c:	0800538e 	.word	0x0800538e
 8004da0:	00000000 	.word	0x00000000
 8004da4:	08004ae5 	.word	0x08004ae5

08004da8 <_printf_common>:
 8004da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004daa:	0016      	movs	r6, r2
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	688a      	ldr	r2, [r1, #8]
 8004db0:	690b      	ldr	r3, [r1, #16]
 8004db2:	000c      	movs	r4, r1
 8004db4:	9000      	str	r0, [sp, #0]
 8004db6:	4293      	cmp	r3, r2
 8004db8:	da00      	bge.n	8004dbc <_printf_common+0x14>
 8004dba:	0013      	movs	r3, r2
 8004dbc:	0022      	movs	r2, r4
 8004dbe:	6033      	str	r3, [r6, #0]
 8004dc0:	3243      	adds	r2, #67	; 0x43
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	2a00      	cmp	r2, #0
 8004dc6:	d001      	beq.n	8004dcc <_printf_common+0x24>
 8004dc8:	3301      	adds	r3, #1
 8004dca:	6033      	str	r3, [r6, #0]
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	069b      	lsls	r3, r3, #26
 8004dd0:	d502      	bpl.n	8004dd8 <_printf_common+0x30>
 8004dd2:	6833      	ldr	r3, [r6, #0]
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	6033      	str	r3, [r6, #0]
 8004dd8:	6822      	ldr	r2, [r4, #0]
 8004dda:	2306      	movs	r3, #6
 8004ddc:	0015      	movs	r5, r2
 8004dde:	401d      	ands	r5, r3
 8004de0:	421a      	tst	r2, r3
 8004de2:	d027      	beq.n	8004e34 <_printf_common+0x8c>
 8004de4:	0023      	movs	r3, r4
 8004de6:	3343      	adds	r3, #67	; 0x43
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	1e5a      	subs	r2, r3, #1
 8004dec:	4193      	sbcs	r3, r2
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	0692      	lsls	r2, r2, #26
 8004df2:	d430      	bmi.n	8004e56 <_printf_common+0xae>
 8004df4:	0022      	movs	r2, r4
 8004df6:	9901      	ldr	r1, [sp, #4]
 8004df8:	9800      	ldr	r0, [sp, #0]
 8004dfa:	9d08      	ldr	r5, [sp, #32]
 8004dfc:	3243      	adds	r2, #67	; 0x43
 8004dfe:	47a8      	blx	r5
 8004e00:	3001      	adds	r0, #1
 8004e02:	d025      	beq.n	8004e50 <_printf_common+0xa8>
 8004e04:	2206      	movs	r2, #6
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	2500      	movs	r5, #0
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d105      	bne.n	8004e1c <_printf_common+0x74>
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	68e5      	ldr	r5, [r4, #12]
 8004e14:	1aed      	subs	r5, r5, r3
 8004e16:	43eb      	mvns	r3, r5
 8004e18:	17db      	asrs	r3, r3, #31
 8004e1a:	401d      	ands	r5, r3
 8004e1c:	68a3      	ldr	r3, [r4, #8]
 8004e1e:	6922      	ldr	r2, [r4, #16]
 8004e20:	4293      	cmp	r3, r2
 8004e22:	dd01      	ble.n	8004e28 <_printf_common+0x80>
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	18ed      	adds	r5, r5, r3
 8004e28:	2600      	movs	r6, #0
 8004e2a:	42b5      	cmp	r5, r6
 8004e2c:	d120      	bne.n	8004e70 <_printf_common+0xc8>
 8004e2e:	2000      	movs	r0, #0
 8004e30:	e010      	b.n	8004e54 <_printf_common+0xac>
 8004e32:	3501      	adds	r5, #1
 8004e34:	68e3      	ldr	r3, [r4, #12]
 8004e36:	6832      	ldr	r2, [r6, #0]
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	42ab      	cmp	r3, r5
 8004e3c:	ddd2      	ble.n	8004de4 <_printf_common+0x3c>
 8004e3e:	0022      	movs	r2, r4
 8004e40:	2301      	movs	r3, #1
 8004e42:	9901      	ldr	r1, [sp, #4]
 8004e44:	9800      	ldr	r0, [sp, #0]
 8004e46:	9f08      	ldr	r7, [sp, #32]
 8004e48:	3219      	adds	r2, #25
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d1f0      	bne.n	8004e32 <_printf_common+0x8a>
 8004e50:	2001      	movs	r0, #1
 8004e52:	4240      	negs	r0, r0
 8004e54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e56:	2030      	movs	r0, #48	; 0x30
 8004e58:	18e1      	adds	r1, r4, r3
 8004e5a:	3143      	adds	r1, #67	; 0x43
 8004e5c:	7008      	strb	r0, [r1, #0]
 8004e5e:	0021      	movs	r1, r4
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	3145      	adds	r1, #69	; 0x45
 8004e64:	7809      	ldrb	r1, [r1, #0]
 8004e66:	18a2      	adds	r2, r4, r2
 8004e68:	3243      	adds	r2, #67	; 0x43
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	7011      	strb	r1, [r2, #0]
 8004e6e:	e7c1      	b.n	8004df4 <_printf_common+0x4c>
 8004e70:	0022      	movs	r2, r4
 8004e72:	2301      	movs	r3, #1
 8004e74:	9901      	ldr	r1, [sp, #4]
 8004e76:	9800      	ldr	r0, [sp, #0]
 8004e78:	9f08      	ldr	r7, [sp, #32]
 8004e7a:	321a      	adds	r2, #26
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d0e6      	beq.n	8004e50 <_printf_common+0xa8>
 8004e82:	3601      	adds	r6, #1
 8004e84:	e7d1      	b.n	8004e2a <_printf_common+0x82>
	...

08004e88 <_printf_i>:
 8004e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e8a:	b08b      	sub	sp, #44	; 0x2c
 8004e8c:	9206      	str	r2, [sp, #24]
 8004e8e:	000a      	movs	r2, r1
 8004e90:	3243      	adds	r2, #67	; 0x43
 8004e92:	9307      	str	r3, [sp, #28]
 8004e94:	9005      	str	r0, [sp, #20]
 8004e96:	9204      	str	r2, [sp, #16]
 8004e98:	7e0a      	ldrb	r2, [r1, #24]
 8004e9a:	000c      	movs	r4, r1
 8004e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e9e:	2a78      	cmp	r2, #120	; 0x78
 8004ea0:	d809      	bhi.n	8004eb6 <_printf_i+0x2e>
 8004ea2:	2a62      	cmp	r2, #98	; 0x62
 8004ea4:	d80b      	bhi.n	8004ebe <_printf_i+0x36>
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	d100      	bne.n	8004eac <_printf_i+0x24>
 8004eaa:	e0be      	b.n	800502a <_printf_i+0x1a2>
 8004eac:	497c      	ldr	r1, [pc, #496]	; (80050a0 <_printf_i+0x218>)
 8004eae:	9103      	str	r1, [sp, #12]
 8004eb0:	2a58      	cmp	r2, #88	; 0x58
 8004eb2:	d100      	bne.n	8004eb6 <_printf_i+0x2e>
 8004eb4:	e093      	b.n	8004fde <_printf_i+0x156>
 8004eb6:	0026      	movs	r6, r4
 8004eb8:	3642      	adds	r6, #66	; 0x42
 8004eba:	7032      	strb	r2, [r6, #0]
 8004ebc:	e022      	b.n	8004f04 <_printf_i+0x7c>
 8004ebe:	0010      	movs	r0, r2
 8004ec0:	3863      	subs	r0, #99	; 0x63
 8004ec2:	2815      	cmp	r0, #21
 8004ec4:	d8f7      	bhi.n	8004eb6 <_printf_i+0x2e>
 8004ec6:	f7fb f927 	bl	8000118 <__gnu_thumb1_case_shi>
 8004eca:	0016      	.short	0x0016
 8004ecc:	fff6001f 	.word	0xfff6001f
 8004ed0:	fff6fff6 	.word	0xfff6fff6
 8004ed4:	001ffff6 	.word	0x001ffff6
 8004ed8:	fff6fff6 	.word	0xfff6fff6
 8004edc:	fff6fff6 	.word	0xfff6fff6
 8004ee0:	003600a3 	.word	0x003600a3
 8004ee4:	fff60083 	.word	0xfff60083
 8004ee8:	00b4fff6 	.word	0x00b4fff6
 8004eec:	0036fff6 	.word	0x0036fff6
 8004ef0:	fff6fff6 	.word	0xfff6fff6
 8004ef4:	0087      	.short	0x0087
 8004ef6:	0026      	movs	r6, r4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	3642      	adds	r6, #66	; 0x42
 8004efc:	1d11      	adds	r1, r2, #4
 8004efe:	6019      	str	r1, [r3, #0]
 8004f00:	6813      	ldr	r3, [r2, #0]
 8004f02:	7033      	strb	r3, [r6, #0]
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0a2      	b.n	800504e <_printf_i+0x1c6>
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	6809      	ldr	r1, [r1, #0]
 8004f0c:	1d02      	adds	r2, r0, #4
 8004f0e:	060d      	lsls	r5, r1, #24
 8004f10:	d50b      	bpl.n	8004f2a <_printf_i+0xa2>
 8004f12:	6805      	ldr	r5, [r0, #0]
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	da03      	bge.n	8004f22 <_printf_i+0x9a>
 8004f1a:	232d      	movs	r3, #45	; 0x2d
 8004f1c:	9a04      	ldr	r2, [sp, #16]
 8004f1e:	426d      	negs	r5, r5
 8004f20:	7013      	strb	r3, [r2, #0]
 8004f22:	4b5f      	ldr	r3, [pc, #380]	; (80050a0 <_printf_i+0x218>)
 8004f24:	270a      	movs	r7, #10
 8004f26:	9303      	str	r3, [sp, #12]
 8004f28:	e01b      	b.n	8004f62 <_printf_i+0xda>
 8004f2a:	6805      	ldr	r5, [r0, #0]
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	0649      	lsls	r1, r1, #25
 8004f30:	d5f1      	bpl.n	8004f16 <_printf_i+0x8e>
 8004f32:	b22d      	sxth	r5, r5
 8004f34:	e7ef      	b.n	8004f16 <_printf_i+0x8e>
 8004f36:	680d      	ldr	r5, [r1, #0]
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	1d08      	adds	r0, r1, #4
 8004f3c:	6018      	str	r0, [r3, #0]
 8004f3e:	062e      	lsls	r6, r5, #24
 8004f40:	d501      	bpl.n	8004f46 <_printf_i+0xbe>
 8004f42:	680d      	ldr	r5, [r1, #0]
 8004f44:	e003      	b.n	8004f4e <_printf_i+0xc6>
 8004f46:	066d      	lsls	r5, r5, #25
 8004f48:	d5fb      	bpl.n	8004f42 <_printf_i+0xba>
 8004f4a:	680d      	ldr	r5, [r1, #0]
 8004f4c:	b2ad      	uxth	r5, r5
 8004f4e:	4b54      	ldr	r3, [pc, #336]	; (80050a0 <_printf_i+0x218>)
 8004f50:	2708      	movs	r7, #8
 8004f52:	9303      	str	r3, [sp, #12]
 8004f54:	2a6f      	cmp	r2, #111	; 0x6f
 8004f56:	d000      	beq.n	8004f5a <_printf_i+0xd2>
 8004f58:	3702      	adds	r7, #2
 8004f5a:	0023      	movs	r3, r4
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	3343      	adds	r3, #67	; 0x43
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	6863      	ldr	r3, [r4, #4]
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	db03      	blt.n	8004f72 <_printf_i+0xea>
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	6822      	ldr	r2, [r4, #0]
 8004f6e:	438a      	bics	r2, r1
 8004f70:	6022      	str	r2, [r4, #0]
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	d102      	bne.n	8004f7c <_printf_i+0xf4>
 8004f76:	9e04      	ldr	r6, [sp, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00c      	beq.n	8004f96 <_printf_i+0x10e>
 8004f7c:	9e04      	ldr	r6, [sp, #16]
 8004f7e:	0028      	movs	r0, r5
 8004f80:	0039      	movs	r1, r7
 8004f82:	f7fb f959 	bl	8000238 <__aeabi_uidivmod>
 8004f86:	9b03      	ldr	r3, [sp, #12]
 8004f88:	3e01      	subs	r6, #1
 8004f8a:	5c5b      	ldrb	r3, [r3, r1]
 8004f8c:	7033      	strb	r3, [r6, #0]
 8004f8e:	002b      	movs	r3, r5
 8004f90:	0005      	movs	r5, r0
 8004f92:	429f      	cmp	r7, r3
 8004f94:	d9f3      	bls.n	8004f7e <_printf_i+0xf6>
 8004f96:	2f08      	cmp	r7, #8
 8004f98:	d109      	bne.n	8004fae <_printf_i+0x126>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	07db      	lsls	r3, r3, #31
 8004f9e:	d506      	bpl.n	8004fae <_printf_i+0x126>
 8004fa0:	6862      	ldr	r2, [r4, #4]
 8004fa2:	6923      	ldr	r3, [r4, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	dc02      	bgt.n	8004fae <_printf_i+0x126>
 8004fa8:	2330      	movs	r3, #48	; 0x30
 8004faa:	3e01      	subs	r6, #1
 8004fac:	7033      	strb	r3, [r6, #0]
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	1b9b      	subs	r3, r3, r6
 8004fb2:	6123      	str	r3, [r4, #16]
 8004fb4:	9b07      	ldr	r3, [sp, #28]
 8004fb6:	0021      	movs	r1, r4
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	9805      	ldr	r0, [sp, #20]
 8004fbc:	9b06      	ldr	r3, [sp, #24]
 8004fbe:	aa09      	add	r2, sp, #36	; 0x24
 8004fc0:	f7ff fef2 	bl	8004da8 <_printf_common>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d147      	bne.n	8005058 <_printf_i+0x1d0>
 8004fc8:	2001      	movs	r0, #1
 8004fca:	4240      	negs	r0, r0
 8004fcc:	b00b      	add	sp, #44	; 0x2c
 8004fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	6809      	ldr	r1, [r1, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	6022      	str	r2, [r4, #0]
 8004fd8:	2278      	movs	r2, #120	; 0x78
 8004fda:	4932      	ldr	r1, [pc, #200]	; (80050a4 <_printf_i+0x21c>)
 8004fdc:	9103      	str	r1, [sp, #12]
 8004fde:	0021      	movs	r1, r4
 8004fe0:	3145      	adds	r1, #69	; 0x45
 8004fe2:	700a      	strb	r2, [r1, #0]
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	c920      	ldmia	r1!, {r5}
 8004fea:	0610      	lsls	r0, r2, #24
 8004fec:	d402      	bmi.n	8004ff4 <_printf_i+0x16c>
 8004fee:	0650      	lsls	r0, r2, #25
 8004ff0:	d500      	bpl.n	8004ff4 <_printf_i+0x16c>
 8004ff2:	b2ad      	uxth	r5, r5
 8004ff4:	6019      	str	r1, [r3, #0]
 8004ff6:	07d3      	lsls	r3, r2, #31
 8004ff8:	d502      	bpl.n	8005000 <_printf_i+0x178>
 8004ffa:	2320      	movs	r3, #32
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	2710      	movs	r7, #16
 8005002:	2d00      	cmp	r5, #0
 8005004:	d1a9      	bne.n	8004f5a <_printf_i+0xd2>
 8005006:	2220      	movs	r2, #32
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	4393      	bics	r3, r2
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	e7a4      	b.n	8004f5a <_printf_i+0xd2>
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	680d      	ldr	r5, [r1, #0]
 8005014:	1d10      	adds	r0, r2, #4
 8005016:	6949      	ldr	r1, [r1, #20]
 8005018:	6018      	str	r0, [r3, #0]
 800501a:	6813      	ldr	r3, [r2, #0]
 800501c:	062e      	lsls	r6, r5, #24
 800501e:	d501      	bpl.n	8005024 <_printf_i+0x19c>
 8005020:	6019      	str	r1, [r3, #0]
 8005022:	e002      	b.n	800502a <_printf_i+0x1a2>
 8005024:	066d      	lsls	r5, r5, #25
 8005026:	d5fb      	bpl.n	8005020 <_printf_i+0x198>
 8005028:	8019      	strh	r1, [r3, #0]
 800502a:	2300      	movs	r3, #0
 800502c:	9e04      	ldr	r6, [sp, #16]
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	e7c0      	b.n	8004fb4 <_printf_i+0x12c>
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	1d11      	adds	r1, r2, #4
 8005036:	6019      	str	r1, [r3, #0]
 8005038:	6816      	ldr	r6, [r2, #0]
 800503a:	2100      	movs	r1, #0
 800503c:	0030      	movs	r0, r6
 800503e:	6862      	ldr	r2, [r4, #4]
 8005040:	f000 f858 	bl	80050f4 <memchr>
 8005044:	2800      	cmp	r0, #0
 8005046:	d001      	beq.n	800504c <_printf_i+0x1c4>
 8005048:	1b80      	subs	r0, r0, r6
 800504a:	6060      	str	r0, [r4, #4]
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	6123      	str	r3, [r4, #16]
 8005050:	2300      	movs	r3, #0
 8005052:	9a04      	ldr	r2, [sp, #16]
 8005054:	7013      	strb	r3, [r2, #0]
 8005056:	e7ad      	b.n	8004fb4 <_printf_i+0x12c>
 8005058:	0032      	movs	r2, r6
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	9906      	ldr	r1, [sp, #24]
 800505e:	9805      	ldr	r0, [sp, #20]
 8005060:	9d07      	ldr	r5, [sp, #28]
 8005062:	47a8      	blx	r5
 8005064:	3001      	adds	r0, #1
 8005066:	d0af      	beq.n	8004fc8 <_printf_i+0x140>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	079b      	lsls	r3, r3, #30
 800506c:	d415      	bmi.n	800509a <_printf_i+0x212>
 800506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005070:	68e0      	ldr	r0, [r4, #12]
 8005072:	4298      	cmp	r0, r3
 8005074:	daaa      	bge.n	8004fcc <_printf_i+0x144>
 8005076:	0018      	movs	r0, r3
 8005078:	e7a8      	b.n	8004fcc <_printf_i+0x144>
 800507a:	0022      	movs	r2, r4
 800507c:	2301      	movs	r3, #1
 800507e:	9906      	ldr	r1, [sp, #24]
 8005080:	9805      	ldr	r0, [sp, #20]
 8005082:	9e07      	ldr	r6, [sp, #28]
 8005084:	3219      	adds	r2, #25
 8005086:	47b0      	blx	r6
 8005088:	3001      	adds	r0, #1
 800508a:	d09d      	beq.n	8004fc8 <_printf_i+0x140>
 800508c:	3501      	adds	r5, #1
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	42ab      	cmp	r3, r5
 8005096:	dcf0      	bgt.n	800507a <_printf_i+0x1f2>
 8005098:	e7e9      	b.n	800506e <_printf_i+0x1e6>
 800509a:	2500      	movs	r5, #0
 800509c:	e7f7      	b.n	800508e <_printf_i+0x206>
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	08005395 	.word	0x08005395
 80050a4:	080053a6 	.word	0x080053a6

080050a8 <memmove>:
 80050a8:	b510      	push	{r4, lr}
 80050aa:	4288      	cmp	r0, r1
 80050ac:	d902      	bls.n	80050b4 <memmove+0xc>
 80050ae:	188b      	adds	r3, r1, r2
 80050b0:	4298      	cmp	r0, r3
 80050b2:	d303      	bcc.n	80050bc <memmove+0x14>
 80050b4:	2300      	movs	r3, #0
 80050b6:	e007      	b.n	80050c8 <memmove+0x20>
 80050b8:	5c8b      	ldrb	r3, [r1, r2]
 80050ba:	5483      	strb	r3, [r0, r2]
 80050bc:	3a01      	subs	r2, #1
 80050be:	d2fb      	bcs.n	80050b8 <memmove+0x10>
 80050c0:	bd10      	pop	{r4, pc}
 80050c2:	5ccc      	ldrb	r4, [r1, r3]
 80050c4:	54c4      	strb	r4, [r0, r3]
 80050c6:	3301      	adds	r3, #1
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1fa      	bne.n	80050c2 <memmove+0x1a>
 80050cc:	e7f8      	b.n	80050c0 <memmove+0x18>
	...

080050d0 <_sbrk_r>:
 80050d0:	2300      	movs	r3, #0
 80050d2:	b570      	push	{r4, r5, r6, lr}
 80050d4:	4d06      	ldr	r5, [pc, #24]	; (80050f0 <_sbrk_r+0x20>)
 80050d6:	0004      	movs	r4, r0
 80050d8:	0008      	movs	r0, r1
 80050da:	602b      	str	r3, [r5, #0]
 80050dc:	f7fb fcde 	bl	8000a9c <_sbrk>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d103      	bne.n	80050ec <_sbrk_r+0x1c>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d000      	beq.n	80050ec <_sbrk_r+0x1c>
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	2000122c 	.word	0x2000122c

080050f4 <memchr>:
 80050f4:	b2c9      	uxtb	r1, r1
 80050f6:	1882      	adds	r2, r0, r2
 80050f8:	4290      	cmp	r0, r2
 80050fa:	d101      	bne.n	8005100 <memchr+0xc>
 80050fc:	2000      	movs	r0, #0
 80050fe:	4770      	bx	lr
 8005100:	7803      	ldrb	r3, [r0, #0]
 8005102:	428b      	cmp	r3, r1
 8005104:	d0fb      	beq.n	80050fe <memchr+0xa>
 8005106:	3001      	adds	r0, #1
 8005108:	e7f6      	b.n	80050f8 <memchr+0x4>

0800510a <_realloc_r>:
 800510a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800510c:	0007      	movs	r7, r0
 800510e:	000e      	movs	r6, r1
 8005110:	0014      	movs	r4, r2
 8005112:	2900      	cmp	r1, #0
 8005114:	d105      	bne.n	8005122 <_realloc_r+0x18>
 8005116:	0011      	movs	r1, r2
 8005118:	f7ff fc52 	bl	80049c0 <_malloc_r>
 800511c:	0005      	movs	r5, r0
 800511e:	0028      	movs	r0, r5
 8005120:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005122:	2a00      	cmp	r2, #0
 8005124:	d103      	bne.n	800512e <_realloc_r+0x24>
 8005126:	f7ff fbdf 	bl	80048e8 <_free_r>
 800512a:	0025      	movs	r5, r4
 800512c:	e7f7      	b.n	800511e <_realloc_r+0x14>
 800512e:	f000 f81b 	bl	8005168 <_malloc_usable_size_r>
 8005132:	9001      	str	r0, [sp, #4]
 8005134:	4284      	cmp	r4, r0
 8005136:	d803      	bhi.n	8005140 <_realloc_r+0x36>
 8005138:	0035      	movs	r5, r6
 800513a:	0843      	lsrs	r3, r0, #1
 800513c:	42a3      	cmp	r3, r4
 800513e:	d3ee      	bcc.n	800511e <_realloc_r+0x14>
 8005140:	0021      	movs	r1, r4
 8005142:	0038      	movs	r0, r7
 8005144:	f7ff fc3c 	bl	80049c0 <_malloc_r>
 8005148:	1e05      	subs	r5, r0, #0
 800514a:	d0e8      	beq.n	800511e <_realloc_r+0x14>
 800514c:	9b01      	ldr	r3, [sp, #4]
 800514e:	0022      	movs	r2, r4
 8005150:	429c      	cmp	r4, r3
 8005152:	d900      	bls.n	8005156 <_realloc_r+0x4c>
 8005154:	001a      	movs	r2, r3
 8005156:	0031      	movs	r1, r6
 8005158:	0028      	movs	r0, r5
 800515a:	f7ff fbbb 	bl	80048d4 <memcpy>
 800515e:	0031      	movs	r1, r6
 8005160:	0038      	movs	r0, r7
 8005162:	f7ff fbc1 	bl	80048e8 <_free_r>
 8005166:	e7da      	b.n	800511e <_realloc_r+0x14>

08005168 <_malloc_usable_size_r>:
 8005168:	1f0b      	subs	r3, r1, #4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	1f18      	subs	r0, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	da01      	bge.n	8005176 <_malloc_usable_size_r+0xe>
 8005172:	580b      	ldr	r3, [r1, r0]
 8005174:	18c0      	adds	r0, r0, r3
 8005176:	4770      	bx	lr

08005178 <_init>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr

08005184 <_fini>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr

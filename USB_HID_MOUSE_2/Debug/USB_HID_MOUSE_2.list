
USB_HID_MOUSE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007748  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078cc  080078cc  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d4  080078d4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080078dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000164  08007a40  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  08007a40  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af5d  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002675  00000000  00000000  0002b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073b  00000000  00000000  0002e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015299  00000000  00000000  0002e8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da00  00000000  00000000  00043b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076eee  00000000  00000000  0005155c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002194  00000000  00000000  000c844c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ca5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000164 	.word	0x20000164
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080077f0 	.word	0x080077f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000168 	.word	0x20000168
 8000104:	080077f0 	.word	0x080077f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ae:	f000 f989 	bl	80007c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b2:	f000 f88d 	bl	80005d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004b6:	f000 f901 	bl	80006bc <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80004ba:	f006 fceb 	bl	8006e94 <MX_USB_DEVICE_Init>
//	buffer[3] = 0x00;
//	buffer[4] = 0x00;
//	buffer[5] =~0x10;
//	buffer[6] =~0x10;
//	buffer[7] = 0x00;
	buffer1[0] = 0x00;
 80004be:	4b3f      	ldr	r3, [pc, #252]	; (80005bc <main+0x114>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
	buffer1[1] = 0x10;
 80004c4:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <main+0x114>)
 80004c6:	2210      	movs	r2, #16
 80004c8:	705a      	strb	r2, [r3, #1]
	buffer1[2] = 0x00;
 80004ca:	4b3c      	ldr	r3, [pc, #240]	; (80005bc <main+0x114>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	709a      	strb	r2, [r3, #2]
	buffer1[3] = 0x00;
 80004d0:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <main+0x114>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	70da      	strb	r2, [r3, #3]
	buffer2[0] = 0x00;
 80004d6:	4b3a      	ldr	r3, [pc, #232]	; (80005c0 <main+0x118>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
	buffer2[1] = 0x00;
 80004dc:	4b38      	ldr	r3, [pc, #224]	; (80005c0 <main+0x118>)
 80004de:	2200      	movs	r2, #0
 80004e0:	705a      	strb	r2, [r3, #1]
	buffer2[2] = 0x10;
 80004e2:	4b37      	ldr	r3, [pc, #220]	; (80005c0 <main+0x118>)
 80004e4:	2210      	movs	r2, #16
 80004e6:	709a      	strb	r2, [r3, #2]
	buffer2[3] = 0x00;
 80004e8:	4b35      	ldr	r3, [pc, #212]	; (80005c0 <main+0x118>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	70da      	strb	r2, [r3, #3]
	buffer3[0] = 0x00;
 80004ee:	4b35      	ldr	r3, [pc, #212]	; (80005c4 <main+0x11c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
	buffer3[1] = ~0x10;
 80004f4:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <main+0x11c>)
 80004f6:	22ef      	movs	r2, #239	; 0xef
 80004f8:	705a      	strb	r2, [r3, #1]
	buffer3[2] = 0x00;
 80004fa:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <main+0x11c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	709a      	strb	r2, [r3, #2]
	buffer3[3] = 0x00;
 8000500:	4b30      	ldr	r3, [pc, #192]	; (80005c4 <main+0x11c>)
 8000502:	2200      	movs	r2, #0
 8000504:	70da      	strb	r2, [r3, #3]
	buffer4[0] = 0x00;
 8000506:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <main+0x120>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	buffer4[1] = 0x00;
 800050c:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <main+0x120>)
 800050e:	2200      	movs	r2, #0
 8000510:	705a      	strb	r2, [r3, #1]
	buffer4[2] =~0x10;
 8000512:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <main+0x120>)
 8000514:	22ef      	movs	r2, #239	; 0xef
 8000516:	709a      	strb	r2, [r3, #2]
	buffer4[3] = 0x00;
 8000518:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <main+0x120>)
 800051a:	2200      	movs	r2, #0
 800051c:	70da      	strb	r2, [r3, #3]
//			// Delay before sending the next report
//			HAL_Delay(1000);
//		}
//		USBD_HID_SendReport(&hUsbDeviceFS, buffer, 8);
//		HAL_Delay(1000);
		for (int i = 0; i < 4; i++) {
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	e047      	b.n	80005b4 <main+0x10c>
			for (int j = 0; j < 10; j++) {
 8000524:	2300      	movs	r3, #0
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	e03e      	b.n	80005a8 <main+0x100>
				switch (i) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d02d      	beq.n	800058c <main+0xe4>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b03      	cmp	r3, #3
 8000534:	dc34      	bgt.n	80005a0 <main+0xf8>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d01d      	beq.n	8000578 <main+0xd0>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b02      	cmp	r3, #2
 8000540:	dc2e      	bgt.n	80005a0 <main+0xf8>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d003      	beq.n	8000550 <main+0xa8>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d00a      	beq.n	8000564 <main+0xbc>
				case 3:
					USBD_HID_SendReport(&hUsbDeviceFS, buffer4, 4);
					HAL_Delay(10);
					break;
				default:
					break;
 800054e:	e027      	b.n	80005a0 <main+0xf8>
					USBD_HID_SendReport(&hUsbDeviceFS, buffer1, 4);
 8000550:	491a      	ldr	r1, [pc, #104]	; (80005bc <main+0x114>)
 8000552:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <main+0x124>)
 8000554:	2204      	movs	r2, #4
 8000556:	0018      	movs	r0, r3
 8000558:	f005 fa42 	bl	80059e0 <USBD_HID_SendReport>
					HAL_Delay(10);
 800055c:	200a      	movs	r0, #10
 800055e:	f000 f9a1 	bl	80008a4 <HAL_Delay>
					break;
 8000562:	e01e      	b.n	80005a2 <main+0xfa>
					USBD_HID_SendReport(&hUsbDeviceFS, buffer2, 4);
 8000564:	4916      	ldr	r1, [pc, #88]	; (80005c0 <main+0x118>)
 8000566:	4b19      	ldr	r3, [pc, #100]	; (80005cc <main+0x124>)
 8000568:	2204      	movs	r2, #4
 800056a:	0018      	movs	r0, r3
 800056c:	f005 fa38 	bl	80059e0 <USBD_HID_SendReport>
					HAL_Delay(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f000 f997 	bl	80008a4 <HAL_Delay>
					break;
 8000576:	e014      	b.n	80005a2 <main+0xfa>
					USBD_HID_SendReport(&hUsbDeviceFS, buffer3, 4);
 8000578:	4912      	ldr	r1, [pc, #72]	; (80005c4 <main+0x11c>)
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <main+0x124>)
 800057c:	2204      	movs	r2, #4
 800057e:	0018      	movs	r0, r3
 8000580:	f005 fa2e 	bl	80059e0 <USBD_HID_SendReport>
					HAL_Delay(10);
 8000584:	200a      	movs	r0, #10
 8000586:	f000 f98d 	bl	80008a4 <HAL_Delay>
					break;
 800058a:	e00a      	b.n	80005a2 <main+0xfa>
					USBD_HID_SendReport(&hUsbDeviceFS, buffer4, 4);
 800058c:	490e      	ldr	r1, [pc, #56]	; (80005c8 <main+0x120>)
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0x124>)
 8000590:	2204      	movs	r2, #4
 8000592:	0018      	movs	r0, r3
 8000594:	f005 fa24 	bl	80059e0 <USBD_HID_SendReport>
					HAL_Delay(10);
 8000598:	200a      	movs	r0, #10
 800059a:	f000 f983 	bl	80008a4 <HAL_Delay>
					break;
 800059e:	e000      	b.n	80005a2 <main+0xfa>
					break;
 80005a0:	46c0      	nop			; (mov r8, r8)
			for (int j = 0; j < 10; j++) {
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	2b09      	cmp	r3, #9
 80005ac:	ddbd      	ble.n	800052a <main+0x82>
		for (int i = 0; i < 4; i++) {
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3301      	adds	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	ddb4      	ble.n	8000524 <main+0x7c>
 80005ba:	e7b0      	b.n	800051e <main+0x76>
 80005bc:	20000180 	.word	0x20000180
 80005c0:	20000184 	.word	0x20000184
 80005c4:	20000188 	.word	0x20000188
 80005c8:	2000018c 	.word	0x2000018c
 80005cc:	20000198 	.word	0x20000198

080005d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b09d      	sub	sp, #116	; 0x74
 80005d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005d6:	2438      	movs	r4, #56	; 0x38
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	0018      	movs	r0, r3
 80005dc:	2338      	movs	r3, #56	; 0x38
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f007 f8d9 	bl	8007798 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005e6:	2324      	movs	r3, #36	; 0x24
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f007 f8d1 	bl	8007798 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005f6:	003b      	movs	r3, r7
 80005f8:	0018      	movs	r0, r3
 80005fa:	2324      	movs	r3, #36	; 0x24
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f007 f8ca 	bl	8007798 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <SystemClock_Config+0xe4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a2b      	ldr	r2, [pc, #172]	; (80006b8 <SystemClock_Config+0xe8>)
 800060a:	401a      	ands	r2, r3
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xe4>)
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0109      	lsls	r1, r1, #4
 8000612:	430a      	orrs	r2, r1
 8000614:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000616:	0021      	movs	r1, r4
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2222      	movs	r2, #34	; 0x22
 800061c:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2201      	movs	r2, #1
 8000622:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2210      	movs	r2, #16
 8000628:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2201      	movs	r2, #1
 800062e:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2202      	movs	r2, #2
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	02d2      	lsls	r2, r2, #11
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	03d2      	lsls	r2, r2, #15
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800064c:	187b      	adds	r3, r7, r1
 800064e:	0018      	movs	r0, r3
 8000650:	f002 f862 	bl	8002718 <HAL_RCC_OscConfig>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x8c>
		Error_Handler();
 8000658:	f000 f846 	bl	80006e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800065c:	2124      	movs	r1, #36	; 0x24
 800065e:	187b      	adds	r3, r7, r1
 8000660:	220f      	movs	r2, #15
 8000662:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2203      	movs	r2, #3
 8000668:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2101      	movs	r1, #1
 8000680:	0018      	movs	r0, r3
 8000682:	f002 fc0d 	bl	8002ea0 <HAL_RCC_ClockConfig>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xbe>
		Error_Handler();
 800068a:	f000 f82d 	bl	80006e8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800068e:	003b      	movs	r3, r7
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	601a      	str	r2, [r3, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000694:	003b      	movs	r3, r7
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	04d2      	lsls	r2, r2, #19
 800069a:	621a      	str	r2, [r3, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800069c:	003b      	movs	r3, r7
 800069e:	0018      	movs	r0, r3
 80006a0:	f002 fdec 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xdc>
		Error_Handler();
 80006a8:	f000 f81e 	bl	80006e8 <Error_Handler>
	}
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b01d      	add	sp, #116	; 0x74
 80006b2:	bd90      	pop	{r4, r7, pc}
 80006b4:	40007000 	.word	0x40007000
 80006b8:	ffffe7ff 	.word	0xffffe7ff

080006bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_GPIO_Init+0x28>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_GPIO_Init+0x28>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MX_GPIO_Init+0x28>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000

080006e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <HAL_MspInit+0x24>)
 80006fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x24>)
 80006fe:	2101      	movs	r1, #1
 8000700:	430a      	orrs	r2, r1
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <HAL_MspInit+0x24>)
 8000706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <HAL_MspInit+0x24>)
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	0549      	lsls	r1, r1, #21
 800070e:	430a      	orrs	r2, r1
 8000710:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f894 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <USB_IRQHandler+0x14>)
 8000752:	0018      	movs	r0, r3
 8000754:	f000 face 	bl	8000cf4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	2000065c 	.word	0x2000065c

08000764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000772:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000774:	f7ff fff6 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 800077a:	490d      	ldr	r1, [pc, #52]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000790:	4c0a      	ldr	r4, [pc, #40]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079e:	f007 f803 	bl	80077a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a2:	f7ff fe81 	bl	80004a8 <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   r0, =_estack
 80007a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80007b4:	080078dc 	.word	0x080078dc
  ldr r2, =_sbss
 80007b8:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80007bc:	20000964 	.word	0x20000964

080007c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_COMP_IRQHandler>
	...

080007c4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_Init+0x3c>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_Init+0x3c>)
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	430a      	orrs	r2, r1
 80007da:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 f811 	bl	8000804 <HAL_InitTick>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d003      	beq.n	80007ee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e001      	b.n	80007f2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007ee:	f7ff ff81 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_InitTick+0x5c>)
 800080e:	681c      	ldr	r4, [r3, #0]
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_InitTick+0x60>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	0019      	movs	r1, r3
 8000816:	23fa      	movs	r3, #250	; 0xfa
 8000818:	0098      	lsls	r0, r3, #2
 800081a:	f7ff fc75 	bl	8000108 <__udivsi3>
 800081e:	0003      	movs	r3, r0
 8000820:	0019      	movs	r1, r3
 8000822:	0020      	movs	r0, r4
 8000824:	f7ff fc70 	bl	8000108 <__udivsi3>
 8000828:	0003      	movs	r3, r0
 800082a:	0018      	movs	r0, r3
 800082c:	f000 f92f 	bl	8000a8e <HAL_SYSTICK_Config>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	e00f      	b.n	8000858 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d80b      	bhi.n	8000856 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	2200      	movs	r2, #0
 8000846:	0018      	movs	r0, r3
 8000848:	f000 f8fc 	bl	8000a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_InitTick+0x64>)
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b003      	add	sp, #12
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	20000000 	.word	0x20000000
 8000864:	20000008 	.word	0x20000008
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x1c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	001a      	movs	r2, r3
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x20>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	18d2      	adds	r2, r2, r3
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_IncTick+0x20>)
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000008 	.word	0x20000008
 800088c:	20000190 	.word	0x20000190

08000890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <HAL_GetTick+0x10>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000190 	.word	0x20000190

080008a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ac:	f7ff fff0 	bl	8000890 <HAL_GetTick>
 80008b0:	0003      	movs	r3, r0
 80008b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3301      	adds	r3, #1
 80008bc:	d005      	beq.n	80008ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_Delay+0x44>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	001a      	movs	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	189b      	adds	r3, r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	f7ff ffe0 	bl	8000890 <HAL_GetTick>
 80008d0:	0002      	movs	r2, r0
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d8f7      	bhi.n	80008cc <HAL_Delay+0x28>
  {
  }
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b004      	add	sp, #16
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000008 	.word	0x20000008

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	0002      	movs	r2, r0
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b7f      	cmp	r3, #127	; 0x7f
 80008fe:	d809      	bhi.n	8000914 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	231f      	movs	r3, #31
 8000908:	401a      	ands	r2, r3
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <__NVIC_EnableIRQ+0x30>)
 800090c:	2101      	movs	r1, #1
 800090e:	4091      	lsls	r1, r2
 8000910:	000a      	movs	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
  }
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	0002      	movs	r2, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b7f      	cmp	r3, #127	; 0x7f
 8000934:	d828      	bhi.n	8000988 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <__NVIC_SetPriority+0xd4>)
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b25b      	sxtb	r3, r3
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	33c0      	adds	r3, #192	; 0xc0
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	589b      	ldr	r3, [r3, r2]
 8000946:	1dfa      	adds	r2, r7, #7
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	0011      	movs	r1, r2
 800094c:	2203      	movs	r2, #3
 800094e:	400a      	ands	r2, r1
 8000950:	00d2      	lsls	r2, r2, #3
 8000952:	21ff      	movs	r1, #255	; 0xff
 8000954:	4091      	lsls	r1, r2
 8000956:	000a      	movs	r2, r1
 8000958:	43d2      	mvns	r2, r2
 800095a:	401a      	ands	r2, r3
 800095c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	019b      	lsls	r3, r3, #6
 8000962:	22ff      	movs	r2, #255	; 0xff
 8000964:	401a      	ands	r2, r3
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	0018      	movs	r0, r3
 800096c:	2303      	movs	r3, #3
 800096e:	4003      	ands	r3, r0
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <__NVIC_SetPriority+0xd4>)
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	089b      	lsrs	r3, r3, #2
 800097e:	430a      	orrs	r2, r1
 8000980:	33c0      	adds	r3, #192	; 0xc0
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000986:	e031      	b.n	80009ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <__NVIC_SetPriority+0xd8>)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0019      	movs	r1, r3
 8000990:	230f      	movs	r3, #15
 8000992:	400b      	ands	r3, r1
 8000994:	3b08      	subs	r3, #8
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3306      	adds	r3, #6
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	18d3      	adds	r3, r2, r3
 800099e:	3304      	adds	r3, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	1dfa      	adds	r2, r7, #7
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	0011      	movs	r1, r2
 80009a8:	2203      	movs	r2, #3
 80009aa:	400a      	ands	r2, r1
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	21ff      	movs	r1, #255	; 0xff
 80009b0:	4091      	lsls	r1, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	401a      	ands	r2, r3
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0018      	movs	r0, r3
 80009c8:	2303      	movs	r3, #3
 80009ca:	4003      	ands	r3, r0
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <__NVIC_SetPriority+0xd8>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	001c      	movs	r4, r3
 80009d8:	230f      	movs	r3, #15
 80009da:	4023      	ands	r3, r4
 80009dc:	3b08      	subs	r3, #8
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	430a      	orrs	r2, r1
 80009e2:	3306      	adds	r3, #6
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	18c3      	adds	r3, r0, r3
 80009e8:	3304      	adds	r3, #4
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b003      	add	sp, #12
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	045b      	lsls	r3, r3, #17
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d301      	bcc.n	8000a14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a10:	2301      	movs	r3, #1
 8000a12:	e010      	b.n	8000a36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <SysTick_Config+0x44>)
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	2103      	movs	r1, #3
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff ff7c 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <SysTick_Config+0x44>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x44>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	210f      	movs	r1, #15
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <__NVIC_SetPriority>
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	0002      	movs	r2, r0
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ff33 	bl	80008ec <__NVIC_EnableIRQ>
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff ffaf 	bl	80009fc <SysTick_Config>
 8000a9e:	0003      	movs	r3, r0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	b08b      	sub	sp, #44	; 0x2c
 8000aac:	af06      	add	r7, sp, #24
 8000aae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e0f0      	b.n	8000c9c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a79      	ldr	r2, [pc, #484]	; (8000ca4 <HAL_PCD_Init+0x1fc>)
 8000abe:	5c9b      	ldrb	r3, [r3, r2]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d108      	bne.n	8000ad8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	23aa      	movs	r3, #170	; 0xaa
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	2100      	movs	r1, #0
 8000ace:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f006 fb34 	bl	8007140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a72      	ldr	r2, [pc, #456]	; (8000ca4 <HAL_PCD_Init+0x1fc>)
 8000adc:	2103      	movs	r1, #3
 8000ade:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 fd6d 	bl	80035c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000aea:	230f      	movs	r3, #15
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e049      	b.n	8000b88 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000af4:	200f      	movs	r0, #15
 8000af6:	183b      	adds	r3, r7, r0
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	0013      	movs	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	189b      	adds	r3, r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	18cb      	adds	r3, r1, r3
 8000b08:	3301      	adds	r3, #1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b0e:	183b      	adds	r3, r7, r0
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	0013      	movs	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	183a      	adds	r2, r7, r0
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b24:	183b      	adds	r3, r7, r0
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	189b      	adds	r3, r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	18cb      	adds	r3, r1, r3
 8000b36:	3303      	adds	r3, #3
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b3c:	183b      	adds	r3, r7, r0
 8000b3e:	781a      	ldrb	r2, [r3, #0]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	0013      	movs	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	189b      	adds	r3, r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	18cb      	adds	r3, r1, r3
 8000b4c:	3338      	adds	r3, #56	; 0x38
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b52:	183b      	adds	r3, r7, r0
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	0013      	movs	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	189b      	adds	r3, r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	18cb      	adds	r3, r1, r3
 8000b62:	333c      	adds	r3, #60	; 0x3c
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b68:	183b      	adds	r3, r7, r0
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	0013      	movs	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	189b      	adds	r3, r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	18cb      	adds	r3, r1, r3
 8000b78:	3340      	adds	r3, #64	; 0x40
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b7e:	183b      	adds	r3, r7, r0
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	183b      	adds	r3, r7, r0
 8000b84:	3201      	adds	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	210f      	movs	r1, #15
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3ae      	bcc.n	8000af4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e056      	b.n	8000c4c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b9e:	240f      	movs	r4, #15
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	236a      	movs	r3, #106	; 0x6a
 8000ba8:	33ff      	adds	r3, #255	; 0xff
 8000baa:	0019      	movs	r1, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	189b      	adds	r3, r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	18c3      	adds	r3, r0, r3
 8000bb6:	185b      	adds	r3, r3, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	23b4      	movs	r3, #180	; 0xb4
 8000bc4:	0059      	lsls	r1, r3, #1
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	189b      	adds	r3, r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	18c3      	adds	r3, r0, r3
 8000bd0:	185b      	adds	r3, r3, r1
 8000bd2:	193a      	adds	r2, r7, r4
 8000bd4:	7812      	ldrb	r2, [r2, #0]
 8000bd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	236c      	movs	r3, #108	; 0x6c
 8000be0:	33ff      	adds	r3, #255	; 0xff
 8000be2:	0019      	movs	r1, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	189b      	adds	r3, r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	18c3      	adds	r3, r0, r3
 8000bee:	185b      	adds	r3, r3, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	23bc      	movs	r3, #188	; 0xbc
 8000bfc:	0059      	lsls	r1, r3, #1
 8000bfe:	0013      	movs	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	189b      	adds	r3, r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	18c3      	adds	r3, r0, r3
 8000c08:	185b      	adds	r3, r3, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	23be      	movs	r3, #190	; 0xbe
 8000c16:	0059      	lsls	r1, r3, #1
 8000c18:	0013      	movs	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	189b      	adds	r3, r3, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	18c3      	adds	r3, r0, r3
 8000c22:	185b      	adds	r3, r3, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	23c0      	movs	r3, #192	; 0xc0
 8000c30:	0059      	lsls	r1, r3, #1
 8000c32:	0013      	movs	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	189b      	adds	r3, r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	18c3      	adds	r3, r0, r3
 8000c3c:	185b      	adds	r3, r3, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	3201      	adds	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3a1      	bcc.n	8000b9e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	466a      	mov	r2, sp
 8000c62:	0011      	movs	r1, r2
 8000c64:	001a      	movs	r2, r3
 8000c66:	3210      	adds	r2, #16
 8000c68:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000c6a:	c170      	stmia	r1!, {r4, r5, r6}
 8000c6c:	ca30      	ldmia	r2!, {r4, r5}
 8000c6e:	c130      	stmia	r1!, {r4, r5}
 8000c70:	6859      	ldr	r1, [r3, #4]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	f002 fcbf 	bl	80035f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2224      	movs	r2, #36	; 0x24
 8000c7e:	2100      	movs	r1, #0
 8000c80:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_PCD_Init+0x1fc>)
 8000c86:	2101      	movs	r1, #1
 8000c88:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d103      	bne.n	8000c9a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 fd09 	bl	80026ac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b005      	add	sp, #20
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca4:	000002a9 	.word	0x000002a9

08000ca8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	23aa      	movs	r3, #170	; 0xaa
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d101      	bne.n	8000cc0 <HAL_PCD_Start+0x18>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e014      	b.n	8000cea <HAL_PCD_Start+0x42>
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	23aa      	movs	r3, #170	; 0xaa
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 fc62 	bl	8003598 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f004 fc65 	bl	80055a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	23aa      	movs	r3, #170	; 0xaa
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	0018      	movs	r0, r3
 8000d02:	f004 fc67 	bl	80055d4 <USB_ReadInterrupts>
 8000d06:	0003      	movs	r3, r0
 8000d08:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	4013      	ands	r3, r2
 8000d12:	d004      	beq.n	8000d1e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fb48 	bl	80013ac <PCD_EP_ISR_Handler>

    return;
 8000d1c:	e11d      	b.n	8000f5a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4013      	ands	r3, r2
 8000d26:	d015      	beq.n	8000d54 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2244      	movs	r2, #68	; 0x44
 8000d2e:	5a9b      	ldrh	r3, [r3, r2]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	498a      	ldr	r1, [pc, #552]	; (8000f60 <HAL_PCD_IRQHandler+0x26c>)
 8000d38:	400a      	ands	r2, r1
 8000d3a:	b291      	uxth	r1, r2
 8000d3c:	2244      	movs	r2, #68	; 0x44
 8000d3e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	0018      	movs	r0, r3
 8000d44:	f006 fa7f 	bl	8007246 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 f915 	bl	8000f7c <HAL_PCD_SetAddress>

    return;
 8000d52:	e102      	b.n	8000f5a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	01db      	lsls	r3, r3, #7
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d00c      	beq.n	8000d78 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2244      	movs	r2, #68	; 0x44
 8000d64:	5a9b      	ldrh	r3, [r3, r2]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	497d      	ldr	r1, [pc, #500]	; (8000f64 <HAL_PCD_IRQHandler+0x270>)
 8000d6e:	400a      	ands	r2, r1
 8000d70:	b291      	uxth	r1, r2
 8000d72:	2244      	movs	r2, #68	; 0x44
 8000d74:	5299      	strh	r1, [r3, r2]

    return;
 8000d76:	e0f0      	b.n	8000f5a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	019b      	lsls	r3, r3, #6
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d00c      	beq.n	8000d9c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2244      	movs	r2, #68	; 0x44
 8000d88:	5a9b      	ldrh	r3, [r3, r2]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4975      	ldr	r1, [pc, #468]	; (8000f68 <HAL_PCD_IRQHandler+0x274>)
 8000d92:	400a      	ands	r2, r1
 8000d94:	b291      	uxth	r1, r2
 8000d96:	2244      	movs	r2, #68	; 0x44
 8000d98:	5299      	strh	r1, [r3, r2]

    return;
 8000d9a:	e0de      	b.n	8000f5a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	015b      	lsls	r3, r3, #5
 8000da2:	4013      	ands	r3, r2
 8000da4:	d038      	beq.n	8000e18 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	5a9b      	ldrh	r3, [r3, r2]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2104      	movs	r1, #4
 8000db6:	438a      	bics	r2, r1
 8000db8:	b291      	uxth	r1, r2
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2240      	movs	r2, #64	; 0x40
 8000dc4:	5a9b      	ldrh	r3, [r3, r2]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2108      	movs	r1, #8
 8000dce:	438a      	bics	r2, r1
 8000dd0:	b291      	uxth	r1, r2
 8000dd2:	2240      	movs	r2, #64	; 0x40
 8000dd4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	23b8      	movs	r3, #184	; 0xb8
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	5cd3      	ldrb	r3, [r2, r3]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d109      	bne.n	8000df6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	23b8      	movs	r3, #184	; 0xb8
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	2100      	movs	r1, #0
 8000dea:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2100      	movs	r1, #0
 8000df0:	0018      	movs	r0, r3
 8000df2:	f001 fc85 	bl	8002700 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f006 fa65 	bl	80072c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2244      	movs	r2, #68	; 0x44
 8000e04:	5a9b      	ldrh	r3, [r3, r2]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4957      	ldr	r1, [pc, #348]	; (8000f6c <HAL_PCD_IRQHandler+0x278>)
 8000e0e:	400a      	ands	r2, r1
 8000e10:	b291      	uxth	r1, r2
 8000e12:	2244      	movs	r2, #68	; 0x44
 8000e14:	5299      	strh	r1, [r3, r2]

    return;
 8000e16:	e0a0      	b.n	8000f5a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d028      	beq.n	8000e74 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2240      	movs	r2, #64	; 0x40
 8000e28:	5a9b      	ldrh	r3, [r3, r2]
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2108      	movs	r1, #8
 8000e32:	430a      	orrs	r2, r1
 8000e34:	b291      	uxth	r1, r2
 8000e36:	2240      	movs	r2, #64	; 0x40
 8000e38:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2244      	movs	r2, #68	; 0x44
 8000e40:	5a9b      	ldrh	r3, [r3, r2]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4949      	ldr	r1, [pc, #292]	; (8000f70 <HAL_PCD_IRQHandler+0x27c>)
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	b291      	uxth	r1, r2
 8000e4e:	2244      	movs	r2, #68	; 0x44
 8000e50:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	5a9b      	ldrh	r3, [r3, r2]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2104      	movs	r1, #4
 8000e62:	430a      	orrs	r2, r1
 8000e64:	b291      	uxth	r1, r2
 8000e66:	2240      	movs	r2, #64	; 0x40
 8000e68:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f006 fa0f 	bl	8007290 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e72:	e072      	b.n	8000f5a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d046      	beq.n	8000f0a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2244      	movs	r2, #68	; 0x44
 8000e82:	5a9b      	ldrh	r3, [r3, r2]
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	b291      	uxth	r1, r2
 8000e90:	2244      	movs	r2, #68	; 0x44
 8000e92:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	23b8      	movs	r3, #184	; 0xb8
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d12f      	bne.n	8000f00 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2240      	movs	r2, #64	; 0x40
 8000ea6:	5a9b      	ldrh	r3, [r3, r2]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2104      	movs	r1, #4
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	b291      	uxth	r1, r2
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2240      	movs	r2, #64	; 0x40
 8000ebe:	5a9b      	ldrh	r3, [r3, r2]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	b291      	uxth	r1, r2
 8000ecc:	2240      	movs	r2, #64	; 0x40
 8000ece:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	23b8      	movs	r3, #184	; 0xb8
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2254      	movs	r2, #84	; 0x54
 8000ee0:	5a9b      	ldrh	r3, [r3, r2]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	223c      	movs	r2, #60	; 0x3c
 8000ee8:	4013      	ands	r3, r2
 8000eea:	0019      	movs	r1, r3
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	23b9      	movs	r3, #185	; 0xb9
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f001 fc01 	bl	8002700 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000efe:	e02c      	b.n	8000f5a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	0018      	movs	r0, r3
 8000f04:	f006 f9c4 	bl	8007290 <HAL_PCD_SuspendCallback>
    return;
 8000f08:	e027      	b.n	8000f5a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4013      	ands	r3, r2
 8000f12:	d010      	beq.n	8000f36 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2244      	movs	r2, #68	; 0x44
 8000f1a:	5a9b      	ldrh	r3, [r3, r2]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4914      	ldr	r1, [pc, #80]	; (8000f74 <HAL_PCD_IRQHandler+0x280>)
 8000f24:	400a      	ands	r2, r1
 8000f26:	b291      	uxth	r1, r2
 8000f28:	2244      	movs	r2, #68	; 0x44
 8000f2a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f006 f97a 	bl	8007228 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f34:	e011      	b.n	8000f5a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d00c      	beq.n	8000f5a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2244      	movs	r2, #68	; 0x44
 8000f46:	5a9b      	ldrh	r3, [r3, r2]
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	490a      	ldr	r1, [pc, #40]	; (8000f78 <HAL_PCD_IRQHandler+0x284>)
 8000f50:	400a      	ands	r2, r1
 8000f52:	b291      	uxth	r1, r2
 8000f54:	2244      	movs	r2, #68	; 0x44
 8000f56:	5299      	strh	r1, [r3, r2]

    return;
 8000f58:	46c0      	nop			; (mov r8, r8)
  }
}
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b004      	add	sp, #16
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	fffffbff 	.word	0xfffffbff
 8000f64:	ffffbfff 	.word	0xffffbfff
 8000f68:	ffffdfff 	.word	0xffffdfff
 8000f6c:	ffffefff 	.word	0xffffefff
 8000f70:	fffff7ff 	.word	0xfffff7ff
 8000f74:	fffffdff 	.word	0xfffffdff
 8000f78:	fffffeff 	.word	0xfffffeff

08000f7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	000a      	movs	r2, r1
 8000f86:	1cfb      	adds	r3, r7, #3
 8000f88:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	23aa      	movs	r3, #170	; 0xaa
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	5cd3      	ldrb	r3, [r2, r3]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_PCD_SetAddress+0x1e>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e017      	b.n	8000fca <HAL_PCD_SetAddress+0x4e>
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	23aa      	movs	r3, #170	; 0xaa
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	1cfa      	adds	r2, r7, #3
 8000fa8:	2124      	movs	r1, #36	; 0x24
 8000faa:	7812      	ldrb	r2, [r2, #0]
 8000fac:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	1cfb      	adds	r3, r7, #3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	0010      	movs	r0, r2
 8000fba:	f004 fae1 	bl	8005580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	23aa      	movs	r3, #170	; 0xaa
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000fd2:	b590      	push	{r4, r7, lr}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	000c      	movs	r4, r1
 8000fdc:	0010      	movs	r0, r2
 8000fde:	0019      	movs	r1, r3
 8000fe0:	1cfb      	adds	r3, r7, #3
 8000fe2:	1c22      	adds	r2, r4, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	003b      	movs	r3, r7
 8000fe8:	1c02      	adds	r2, r0, #0
 8000fea:	801a      	strh	r2, [r3, #0]
 8000fec:	1cbb      	adds	r3, r7, #2
 8000fee:	1c0a      	adds	r2, r1, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000ff2:	230b      	movs	r3, #11
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ffa:	1cfb      	adds	r3, r7, #3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	da0f      	bge.n	8001024 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001004:	1cfb      	adds	r3, r7, #3
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2207      	movs	r2, #7
 800100a:	4013      	ands	r3, r2
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	0013      	movs	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	189b      	adds	r3, r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	18d3      	adds	r3, r2, r3
 800101a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2201      	movs	r2, #1
 8001020:	705a      	strb	r2, [r3, #1]
 8001022:	e00f      	b.n	8001044 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001024:	1cfb      	adds	r3, r7, #3
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2207      	movs	r2, #7
 800102a:	401a      	ands	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	189b      	adds	r3, r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	3369      	adds	r3, #105	; 0x69
 8001036:	33ff      	adds	r3, #255	; 0xff
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001044:	1cfb      	adds	r3, r7, #3
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2207      	movs	r2, #7
 800104a:	4013      	ands	r3, r2
 800104c:	b2da      	uxtb	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001052:	003b      	movs	r3, r7
 8001054:	881a      	ldrh	r2, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1cba      	adds	r2, r7, #2
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001062:	1cbb      	adds	r3, r7, #2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d102      	bne.n	8001070 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	23aa      	movs	r3, #170	; 0xaa
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_PCD_EP_Open+0xae>
 800107c:	2302      	movs	r3, #2
 800107e:	e013      	b.n	80010a8 <HAL_PCD_EP_Open+0xd6>
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	23aa      	movs	r3, #170	; 0xaa
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	2101      	movs	r1, #1
 8001088:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	0011      	movs	r1, r2
 8001092:	0018      	movs	r0, r3
 8001094:	f002 fad8 	bl	8003648 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	23aa      	movs	r3, #170	; 0xaa
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	2100      	movs	r1, #0
 80010a0:	54d1      	strb	r1, [r2, r3]

  return ret;
 80010a2:	230b      	movs	r3, #11
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	781b      	ldrb	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b005      	add	sp, #20
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	000a      	movs	r2, r1
 80010ba:	1cfb      	adds	r3, r7, #3
 80010bc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010be:	1cfb      	adds	r3, r7, #3
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	da0f      	bge.n	80010e8 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010c8:	1cfb      	adds	r3, r7, #3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2207      	movs	r2, #7
 80010ce:	4013      	ands	r3, r2
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	0013      	movs	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	189b      	adds	r3, r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	18d3      	adds	r3, r2, r3
 80010de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2201      	movs	r2, #1
 80010e4:	705a      	strb	r2, [r3, #1]
 80010e6:	e00f      	b.n	8001108 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010e8:	1cfb      	adds	r3, r7, #3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2207      	movs	r2, #7
 80010ee:	401a      	ands	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	189b      	adds	r3, r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	3369      	adds	r3, #105	; 0x69
 80010fa:	33ff      	adds	r3, #255	; 0xff
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	18d3      	adds	r3, r2, r3
 8001100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001108:	1cfb      	adds	r3, r7, #3
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2207      	movs	r2, #7
 800110e:	4013      	ands	r3, r2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	23aa      	movs	r3, #170	; 0xaa
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_PCD_EP_Close+0x76>
 8001122:	2302      	movs	r3, #2
 8001124:	e011      	b.n	800114a <HAL_PCD_EP_Close+0x9a>
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	23aa      	movs	r3, #170	; 0xaa
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	2101      	movs	r1, #1
 800112e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f002 fe27 	bl	8003d8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	23aa      	movs	r3, #170	; 0xaa
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	2100      	movs	r1, #0
 8001146:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	200b      	movs	r0, #11
 8001160:	183b      	adds	r3, r7, r0
 8001162:	1c0a      	adds	r2, r1, #0
 8001164:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001166:	0001      	movs	r1, r0
 8001168:	187b      	adds	r3, r7, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2207      	movs	r2, #7
 800116e:	401a      	ands	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	189b      	adds	r3, r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	3369      	adds	r3, #105	; 0x69
 800117a:	33ff      	adds	r3, #255	; 0xff
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	18d3      	adds	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2200      	movs	r2, #0
 8001198:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2207      	movs	r2, #7
 80011a0:	4013      	ands	r3, r2
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f002 ffab 	bl	800410c <USB_EPStartXfer>

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b006      	add	sp, #24
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	200b      	movs	r0, #11
 80011ce:	183b      	adds	r3, r7, r0
 80011d0:	1c0a      	adds	r2, r1, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2207      	movs	r2, #7
 80011da:	4013      	ands	r3, r2
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	0013      	movs	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	189b      	adds	r3, r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	18d3      	adds	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2224      	movs	r2, #36	; 0x24
 80011fc:	2101      	movs	r1, #1
 80011fe:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2201      	movs	r2, #1
 8001210:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001212:	183b      	adds	r3, r7, r0
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2207      	movs	r2, #7
 8001218:	4013      	ands	r3, r2
 800121a:	b2da      	uxtb	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f002 ff6f 	bl	800410c <USB_EPStartXfer>

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	b006      	add	sp, #24
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	000a      	movs	r2, r1
 8001242:	1cfb      	adds	r3, r7, #3
 8001244:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001246:	1cfb      	adds	r3, r7, #3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2207      	movs	r2, #7
 800124c:	401a      	ands	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d901      	bls.n	800125a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e046      	b.n	80012e8 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800125a:	1cfb      	adds	r3, r7, #3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b25b      	sxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	da0f      	bge.n	8001284 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001264:	1cfb      	adds	r3, r7, #3
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2207      	movs	r2, #7
 800126a:	4013      	ands	r3, r2
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	0013      	movs	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	189b      	adds	r3, r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2201      	movs	r2, #1
 8001280:	705a      	strb	r2, [r3, #1]
 8001282:	e00d      	b.n	80012a0 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001284:	1cfb      	adds	r3, r7, #3
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	0013      	movs	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	189b      	adds	r3, r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	3369      	adds	r3, #105	; 0x69
 8001292:	33ff      	adds	r3, #255	; 0xff
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	18d3      	adds	r3, r2, r3
 8001298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2201      	movs	r2, #1
 80012a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012a6:	1cfb      	adds	r3, r7, #3
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2207      	movs	r2, #7
 80012ac:	4013      	ands	r3, r2
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	23aa      	movs	r3, #170	; 0xaa
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_PCD_EP_SetStall+0x8c>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e011      	b.n	80012e8 <HAL_PCD_EP_SetStall+0xb0>
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	23aa      	movs	r3, #170	; 0xaa
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	2101      	movs	r1, #1
 80012cc:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	0011      	movs	r1, r2
 80012d6:	0018      	movs	r0, r3
 80012d8:	f004 f850 	bl	800537c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	23aa      	movs	r3, #170	; 0xaa
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	2100      	movs	r1, #0
 80012e4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b004      	add	sp, #16
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	000a      	movs	r2, r1
 80012fa:	1cfb      	adds	r3, r7, #3
 80012fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80012fe:	1cfb      	adds	r3, r7, #3
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	220f      	movs	r2, #15
 8001304:	401a      	ands	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d901      	bls.n	8001312 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e048      	b.n	80013a4 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001312:	1cfb      	adds	r3, r7, #3
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	da0f      	bge.n	800133c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800131c:	1cfb      	adds	r3, r7, #3
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2207      	movs	r2, #7
 8001322:	4013      	ands	r3, r2
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	0013      	movs	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	189b      	adds	r3, r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2201      	movs	r2, #1
 8001338:	705a      	strb	r2, [r3, #1]
 800133a:	e00f      	b.n	800135c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800133c:	1cfb      	adds	r3, r7, #3
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2207      	movs	r2, #7
 8001342:	401a      	ands	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	189b      	adds	r3, r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	3369      	adds	r3, #105	; 0x69
 800134e:	33ff      	adds	r3, #255	; 0xff
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	18d3      	adds	r3, r2, r3
 8001354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001362:	1cfb      	adds	r3, r7, #3
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2207      	movs	r2, #7
 8001368:	4013      	ands	r3, r2
 800136a:	b2da      	uxtb	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	23aa      	movs	r3, #170	; 0xaa
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_PCD_EP_ClrStall+0x90>
 800137c:	2302      	movs	r3, #2
 800137e:	e011      	b.n	80013a4 <HAL_PCD_EP_ClrStall+0xb4>
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	23aa      	movs	r3, #170	; 0xaa
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	2101      	movs	r1, #1
 8001388:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	0011      	movs	r1, r2
 8001392:	0018      	movs	r0, r3
 8001394:	f004 f842 	bl	800541c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	23aa      	movs	r3, #170	; 0xaa
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	2100      	movs	r1, #0
 80013a0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b004      	add	sp, #16
 80013aa:	bd80      	pop	{r7, pc}

080013ac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b096      	sub	sp, #88	; 0x58
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013b4:	f000 fbec 	bl	8001b90 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	204e      	movs	r0, #78	; 0x4e
 80013be:	183b      	adds	r3, r7, r0
 80013c0:	2144      	movs	r1, #68	; 0x44
 80013c2:	5a52      	ldrh	r2, [r2, r1]
 80013c4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013c6:	183b      	adds	r3, r7, r0
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	244d      	movs	r4, #77	; 0x4d
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	210f      	movs	r1, #15
 80013d2:	400a      	ands	r2, r1
 80013d4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d000      	beq.n	80013e0 <PCD_EP_ISR_Handler+0x34>
 80013de:	e18f      	b.n	8001700 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013e0:	183b      	adds	r3, r7, r0
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	2210      	movs	r2, #16
 80013e6:	4013      	ands	r3, r2
 80013e8:	d155      	bne.n	8001496 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	200e      	movs	r0, #14
 80013f4:	183b      	adds	r3, r7, r0
 80013f6:	49bb      	ldr	r1, [pc, #748]	; (80016e4 <PCD_EP_ISR_Handler+0x338>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	801a      	strh	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	183a      	adds	r2, r7, r0
 8001402:	8812      	ldrh	r2, [r2, #0]
 8001404:	49b8      	ldr	r1, [pc, #736]	; (80016e8 <PCD_EP_ISR_Handler+0x33c>)
 8001406:	430a      	orrs	r2, r1
 8001408:	b292      	uxth	r2, r2
 800140a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3328      	adds	r3, #40	; 0x28
 8001410:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2250      	movs	r2, #80	; 0x50
 8001418:	5a9b      	ldrh	r3, [r3, r2]
 800141a:	b29b      	uxth	r3, r3
 800141c:	001a      	movs	r2, r3
 800141e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	18d2      	adds	r2, r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	18d3      	adds	r3, r2, r3
 800142c:	4aaf      	ldr	r2, [pc, #700]	; (80016ec <PCD_EP_ISR_Handler+0x340>)
 800142e:	4694      	mov	ip, r2
 8001430:	4463      	add	r3, ip
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	059b      	lsls	r3, r3, #22
 8001436:	0d9a      	lsrs	r2, r3, #22
 8001438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800143c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	18d2      	adds	r2, r2, r3
 8001446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001448:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2100      	movs	r1, #0
 800144e:	0018      	movs	r0, r3
 8001450:	f005 fecc 	bl	80071ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2224      	movs	r2, #36	; 0x24
 8001458:	5c9b      	ldrb	r3, [r3, r2]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <PCD_EP_ISR_Handler+0xb8>
 8001460:	f000 fb96 	bl	8001b90 <PCD_EP_ISR_Handler+0x7e4>
 8001464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <PCD_EP_ISR_Handler+0xc4>
 800146c:	f000 fb90 	bl	8001b90 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2224      	movs	r2, #36	; 0x24
 8001474:	5c9b      	ldrb	r3, [r3, r2]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	4252      	negs	r2, r2
 800147c:	4313      	orrs	r3, r2
 800147e:	b2da      	uxtb	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b291      	uxth	r1, r2
 8001486:	224c      	movs	r2, #76	; 0x4c
 8001488:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2224      	movs	r2, #36	; 0x24
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]
 8001492:	f000 fb7d 	bl	8001b90 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3369      	adds	r3, #105	; 0x69
 800149a:	33ff      	adds	r3, #255	; 0xff
 800149c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	214a      	movs	r1, #74	; 0x4a
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	8812      	ldrh	r2, [r2, #0]
 80014a8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	881a      	ldrh	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	4013      	ands	r3, r2
 80014b4:	d037      	beq.n	8001526 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2250      	movs	r2, #80	; 0x50
 80014bc:	5a9b      	ldrh	r3, [r3, r2]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	001a      	movs	r2, r3
 80014c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	18d2      	adds	r2, r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	18d3      	adds	r3, r2, r3
 80014d0:	4a87      	ldr	r2, [pc, #540]	; (80016f0 <PCD_EP_ISR_Handler+0x344>)
 80014d2:	4694      	mov	ip, r2
 80014d4:	4463      	add	r3, ip
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	059b      	lsls	r3, r3, #22
 80014da:	0d9a      	lsrs	r2, r3, #22
 80014dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	22ac      	movs	r2, #172	; 0xac
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	1899      	adds	r1, r3, r2
 80014ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80014f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f004 f8c4 	bl	8005682 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	b29a      	uxth	r2, r3
 8001502:	2010      	movs	r0, #16
 8001504:	183b      	adds	r3, r7, r0
 8001506:	497b      	ldr	r1, [pc, #492]	; (80016f4 <PCD_EP_ISR_Handler+0x348>)
 8001508:	400a      	ands	r2, r1
 800150a:	801a      	strh	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	183a      	adds	r2, r7, r0
 8001512:	8812      	ldrh	r2, [r2, #0]
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	430a      	orrs	r2, r1
 8001518:	b292      	uxth	r2, r2
 800151a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	0018      	movs	r0, r3
 8001520:	f005 fe2e 	bl	8007180 <HAL_PCD_SetupStageCallback>
 8001524:	e334      	b.n	8001b90 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001526:	234a      	movs	r3, #74	; 0x4a
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	2200      	movs	r2, #0
 800152c:	5e9b      	ldrsh	r3, [r3, r2]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db00      	blt.n	8001534 <PCD_EP_ISR_Handler+0x188>
 8001532:	e32d      	b.n	8001b90 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b29a      	uxth	r2, r3
 800153c:	201e      	movs	r0, #30
 800153e:	183b      	adds	r3, r7, r0
 8001540:	496c      	ldr	r1, [pc, #432]	; (80016f4 <PCD_EP_ISR_Handler+0x348>)
 8001542:	400a      	ands	r2, r1
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	183a      	adds	r2, r7, r0
 800154c:	8812      	ldrh	r2, [r2, #0]
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	430a      	orrs	r2, r1
 8001552:	b292      	uxth	r2, r2
 8001554:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2250      	movs	r2, #80	; 0x50
 800155c:	5a9b      	ldrh	r3, [r3, r2]
 800155e:	b29b      	uxth	r3, r3
 8001560:	001a      	movs	r2, r3
 8001562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	18d2      	adds	r2, r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	18d3      	adds	r3, r2, r3
 8001570:	4a5f      	ldr	r2, [pc, #380]	; (80016f0 <PCD_EP_ISR_Handler+0x344>)
 8001572:	4694      	mov	ip, r2
 8001574:	4463      	add	r3, ip
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	059b      	lsls	r3, r3, #22
 800157a:	0d9a      	lsrs	r2, r3, #22
 800157c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d01a      	beq.n	80015be <PCD_EP_ISR_Handler+0x212>
 8001588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d016      	beq.n	80015be <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001596:	6959      	ldr	r1, [r3, #20]
 8001598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800159c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f004 f86e 	bl	8005682 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80015a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	18d2      	adds	r2, r2, r3
 80015b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2100      	movs	r1, #0
 80015b8:	0018      	movs	r0, r3
 80015ba:	f005 fdf6 	bl	80071aa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	214a      	movs	r1, #74	; 0x4a
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	8812      	ldrh	r2, [r2, #0]
 80015c8:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	881a      	ldrh	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	d000      	beq.n	80015d8 <PCD_EP_ISR_Handler+0x22c>
 80015d6:	e2db      	b.n	8001b90 <PCD_EP_ISR_Handler+0x7e4>
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	881a      	ldrh	r2, [r3, #0]
 80015dc:	23c0      	movs	r3, #192	; 0xc0
 80015de:	019b      	lsls	r3, r3, #6
 80015e0:	401a      	ands	r2, r3
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	019b      	lsls	r3, r3, #6
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d100      	bne.n	80015ec <PCD_EP_ISR_Handler+0x240>
 80015ea:	e2d1      	b.n	8001b90 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2250      	movs	r2, #80	; 0x50
 80015f8:	5a9b      	ldrh	r3, [r3, r2]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	001a      	movs	r2, r3
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	189b      	adds	r3, r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <PCD_EP_ISR_Handler+0x344>)
 8001608:	4694      	mov	ip, r2
 800160a:	4463      	add	r3, ip
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	059b      	lsls	r3, r3, #22
 8001616:	0d9b      	lsrs	r3, r3, #22
 8001618:	b29a      	uxth	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2b3e      	cmp	r3, #62	; 0x3e
 8001624:	d91a      	bls.n	800165c <PCD_EP_ISR_Handler+0x2b0>
 8001626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	647b      	str	r3, [r7, #68]	; 0x44
 800162e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	221f      	movs	r2, #31
 8001634:	4013      	ands	r3, r2
 8001636:	d102      	bne.n	800163e <PCD_EP_ISR_Handler+0x292>
 8001638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800163a:	3b01      	subs	r3, #1
 800163c:	647b      	str	r3, [r7, #68]	; 0x44
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	b29a      	uxth	r2, r3
 8001644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001646:	b29b      	uxth	r3, r3
 8001648:	029b      	lsls	r3, r3, #10
 800164a:	b29b      	uxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <PCD_EP_ISR_Handler+0x33c>)
 8001652:	4313      	orrs	r3, r2
 8001654:	b29a      	uxth	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	e023      	b.n	80016a4 <PCD_EP_ISR_Handler+0x2f8>
 800165c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d108      	bne.n	8001676 <PCD_EP_ISR_Handler+0x2ca>
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <PCD_EP_ISR_Handler+0x33c>)
 800166c:	4313      	orrs	r3, r2
 800166e:	b29a      	uxth	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	801a      	strh	r2, [r3, #0]
 8001674:	e016      	b.n	80016a4 <PCD_EP_ISR_Handler+0x2f8>
 8001676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	647b      	str	r3, [r7, #68]	; 0x44
 800167e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	d002      	beq.n	800168e <PCD_EP_ISR_Handler+0x2e2>
 8001688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800168a:	3301      	adds	r3, #1
 800168c:	647b      	str	r3, [r7, #68]	; 0x44
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29a      	uxth	r2, r3
 8001694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001696:	b29b      	uxth	r3, r3
 8001698:	029b      	lsls	r3, r3, #10
 800169a:	b29b      	uxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b29a      	uxth	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	2012      	movs	r0, #18
 80016ae:	183b      	adds	r3, r7, r0
 80016b0:	4911      	ldr	r1, [pc, #68]	; (80016f8 <PCD_EP_ISR_Handler+0x34c>)
 80016b2:	400a      	ands	r2, r1
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	183b      	adds	r3, r7, r0
 80016b8:	183a      	adds	r2, r7, r0
 80016ba:	8812      	ldrh	r2, [r2, #0]
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	0149      	lsls	r1, r1, #5
 80016c0:	404a      	eors	r2, r1
 80016c2:	801a      	strh	r2, [r3, #0]
 80016c4:	183b      	adds	r3, r7, r0
 80016c6:	183a      	adds	r2, r7, r0
 80016c8:	8812      	ldrh	r2, [r2, #0]
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	0189      	lsls	r1, r1, #6
 80016ce:	404a      	eors	r2, r1
 80016d0:	801a      	strh	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	183a      	adds	r2, r7, r0
 80016d8:	8812      	ldrh	r2, [r2, #0]
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <PCD_EP_ISR_Handler+0x350>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	b292      	uxth	r2, r2
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	e255      	b.n	8001b90 <PCD_EP_ISR_Handler+0x7e4>
 80016e4:	ffff8f0f 	.word	0xffff8f0f
 80016e8:	ffff8000 	.word	0xffff8000
 80016ec:	00000402 	.word	0x00000402
 80016f0:	00000406 	.word	0x00000406
 80016f4:	00000f8f 	.word	0x00000f8f
 80016f8:	ffffbf8f 	.word	0xffffbf8f
 80016fc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	001a      	movs	r2, r3
 8001706:	204d      	movs	r0, #77	; 0x4d
 8001708:	183b      	adds	r3, r7, r0
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	18d2      	adds	r2, r2, r3
 8001710:	214a      	movs	r1, #74	; 0x4a
 8001712:	187b      	adds	r3, r7, r1
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2200      	movs	r2, #0
 800171c:	5e9b      	ldrsh	r3, [r3, r2]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db00      	blt.n	8001724 <PCD_EP_ISR_Handler+0x378>
 8001722:	e0fa      	b.n	800191a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	001a      	movs	r2, r3
 800172a:	183b      	adds	r3, r7, r0
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	18d3      	adds	r3, r2, r3
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	b29a      	uxth	r2, r3
 8001736:	2448      	movs	r4, #72	; 0x48
 8001738:	193b      	adds	r3, r7, r4
 800173a:	49d1      	ldr	r1, [pc, #836]	; (8001a80 <PCD_EP_ISR_Handler+0x6d4>)
 800173c:	400a      	ands	r2, r1
 800173e:	801a      	strh	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	001a      	movs	r2, r3
 8001746:	183b      	adds	r3, r7, r0
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	18d3      	adds	r3, r2, r3
 800174e:	193a      	adds	r2, r7, r4
 8001750:	8812      	ldrh	r2, [r2, #0]
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	430a      	orrs	r2, r1
 8001756:	b292      	uxth	r2, r2
 8001758:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800175a:	183b      	adds	r3, r7, r0
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	0013      	movs	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	189b      	adds	r3, r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	3369      	adds	r3, #105	; 0x69
 8001768:	33ff      	adds	r3, #255	; 0xff
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	18d3      	adds	r3, r2, r3
 800176e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001772:	7b1b      	ldrb	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d125      	bne.n	80017c4 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2250      	movs	r2, #80	; 0x50
 800177e:	5a9b      	ldrh	r3, [r3, r2]
 8001780:	b29b      	uxth	r3, r3
 8001782:	001a      	movs	r2, r3
 8001784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	18d2      	adds	r2, r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	18d3      	adds	r3, r2, r3
 8001792:	4abc      	ldr	r2, [pc, #752]	; (8001a84 <PCD_EP_ISR_Handler+0x6d8>)
 8001794:	4694      	mov	ip, r2
 8001796:	4463      	add	r3, ip
 8001798:	881a      	ldrh	r2, [r3, #0]
 800179a:	2450      	movs	r4, #80	; 0x50
 800179c:	193b      	adds	r3, r7, r4
 800179e:	0592      	lsls	r2, r2, #22
 80017a0:	0d92      	lsrs	r2, r2, #22
 80017a2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d100      	bne.n	80017ae <PCD_EP_ISR_Handler+0x402>
 80017ac:	e08d      	b.n	80018ca <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b4:	6959      	ldr	r1, [r3, #20]
 80017b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b8:	88da      	ldrh	r2, [r3, #6]
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	f003 ff60 	bl	8005682 <USB_ReadPMA>
 80017c2:	e082      	b.n	80018ca <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c6:	78db      	ldrb	r3, [r3, #3]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d10c      	bne.n	80017e6 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017cc:	2350      	movs	r3, #80	; 0x50
 80017ce:	18fc      	adds	r4, r7, r3
 80017d0:	234a      	movs	r3, #74	; 0x4a
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	881a      	ldrh	r2, [r3, #0]
 80017d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 f9ec 	bl	8001bb8 <HAL_PCD_EP_DB_Receive>
 80017e0:	0003      	movs	r3, r0
 80017e2:	8023      	strh	r3, [r4, #0]
 80017e4:	e071      	b.n	80018ca <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	001a      	movs	r2, r3
 80017ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2052      	movs	r0, #82	; 0x52
 80017fa:	183b      	adds	r3, r7, r0
 80017fc:	49a2      	ldr	r1, [pc, #648]	; (8001a88 <PCD_EP_ISR_Handler+0x6dc>)
 80017fe:	400a      	ands	r2, r1
 8001800:	801a      	strh	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	001a      	movs	r2, r3
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	18d3      	adds	r3, r2, r3
 8001810:	183a      	adds	r2, r7, r0
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	499d      	ldr	r1, [pc, #628]	; (8001a8c <PCD_EP_ISR_Handler+0x6e0>)
 8001816:	430a      	orrs	r2, r1
 8001818:	b292      	uxth	r2, r2
 800181a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	001a      	movs	r2, r3
 8001822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	18d3      	adds	r3, r2, r3
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	001a      	movs	r2, r3
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	01db      	lsls	r3, r3, #7
 8001834:	4013      	ands	r3, r2
 8001836:	d024      	beq.n	8001882 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2250      	movs	r2, #80	; 0x50
 800183e:	5a9b      	ldrh	r3, [r3, r2]
 8001840:	b29b      	uxth	r3, r3
 8001842:	001a      	movs	r2, r3
 8001844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	18d2      	adds	r2, r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	18d3      	adds	r3, r2, r3
 8001852:	4a8f      	ldr	r2, [pc, #572]	; (8001a90 <PCD_EP_ISR_Handler+0x6e4>)
 8001854:	4694      	mov	ip, r2
 8001856:	4463      	add	r3, ip
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	2450      	movs	r4, #80	; 0x50
 800185c:	193b      	adds	r3, r7, r4
 800185e:	0592      	lsls	r2, r2, #22
 8001860:	0d92      	lsrs	r2, r2, #22
 8001862:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001864:	193b      	adds	r3, r7, r4
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d02e      	beq.n	80018ca <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001872:	6959      	ldr	r1, [r3, #20]
 8001874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001876:	891a      	ldrh	r2, [r3, #8]
 8001878:	193b      	adds	r3, r7, r4
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	f003 ff01 	bl	8005682 <USB_ReadPMA>
 8001880:	e023      	b.n	80018ca <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2250      	movs	r2, #80	; 0x50
 8001888:	5a9b      	ldrh	r3, [r3, r2]
 800188a:	b29b      	uxth	r3, r3
 800188c:	001a      	movs	r2, r3
 800188e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	18d2      	adds	r2, r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	18d3      	adds	r3, r2, r3
 800189c:	4a79      	ldr	r2, [pc, #484]	; (8001a84 <PCD_EP_ISR_Handler+0x6d8>)
 800189e:	4694      	mov	ip, r2
 80018a0:	4463      	add	r3, ip
 80018a2:	881a      	ldrh	r2, [r3, #0]
 80018a4:	2450      	movs	r4, #80	; 0x50
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	0592      	lsls	r2, r2, #22
 80018aa:	0d92      	lsrs	r2, r2, #22
 80018ac:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018bc:	6959      	ldr	r1, [r3, #20]
 80018be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c0:	895a      	ldrh	r2, [r3, #10]
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	f003 fedc 	bl	8005682 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018cc:	69da      	ldr	r2, [r3, #28]
 80018ce:	2150      	movs	r1, #80	; 0x50
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	18d2      	adds	r2, r2, r3
 80018d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	18d2      	adds	r2, r2, r3
 80018e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <PCD_EP_ISR_Handler+0x550>
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	881a      	ldrh	r2, [r3, #0]
 80018f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	0011      	movs	r1, r2
 8001904:	0018      	movs	r0, r3
 8001906:	f005 fc50 	bl	80071aa <HAL_PCD_DataOutStageCallback>
 800190a:	e006      	b.n	800191a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001912:	0011      	movs	r1, r2
 8001914:	0018      	movs	r0, r3
 8001916:	f002 fbf9 	bl	800410c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800191a:	244a      	movs	r4, #74	; 0x4a
 800191c:	193b      	adds	r3, r7, r4
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	4013      	ands	r3, r2
 8001924:	d100      	bne.n	8001928 <PCD_EP_ISR_Handler+0x57c>
 8001926:	e133      	b.n	8001b90 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001928:	204d      	movs	r0, #77	; 0x4d
 800192a:	183b      	adds	r3, r7, r0
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	0013      	movs	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	189b      	adds	r3, r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	18d3      	adds	r3, r2, r3
 800193c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	001a      	movs	r2, r3
 8001944:	183b      	adds	r3, r7, r0
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	18d3      	adds	r3, r2, r3
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29a      	uxth	r2, r3
 8001950:	2542      	movs	r5, #66	; 0x42
 8001952:	197b      	adds	r3, r7, r5
 8001954:	494f      	ldr	r1, [pc, #316]	; (8001a94 <PCD_EP_ISR_Handler+0x6e8>)
 8001956:	400a      	ands	r2, r1
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	001a      	movs	r2, r3
 8001960:	183b      	adds	r3, r7, r0
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	18d3      	adds	r3, r2, r3
 8001968:	197a      	adds	r2, r7, r5
 800196a:	8812      	ldrh	r2, [r2, #0]
 800196c:	494a      	ldr	r1, [pc, #296]	; (8001a98 <PCD_EP_ISR_Handler+0x6ec>)
 800196e:	430a      	orrs	r2, r1
 8001970:	b292      	uxth	r2, r2
 8001972:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d000      	beq.n	800197e <PCD_EP_ISR_Handler+0x5d2>
 800197c:	e0af      	b.n	8001ade <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001986:	7b1b      	ldrb	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d100      	bne.n	800198e <PCD_EP_ISR_Handler+0x5e2>
 800198c:	e09f      	b.n	8001ace <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800198e:	193b      	adds	r3, r7, r4
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	4013      	ands	r3, r2
 8001996:	d046      	beq.n	8001a26 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d125      	bne.n	80019ec <PCD_EP_ISR_Handler+0x640>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2250      	movs	r2, #80	; 0x50
 80019ac:	5a9b      	ldrh	r3, [r3, r2]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	001a      	movs	r2, r3
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	189b      	adds	r3, r3, r2
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	00da      	lsls	r2, r3, #3
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	18d3      	adds	r3, r2, r3
 80019c2:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <PCD_EP_ISR_Handler+0x6e4>)
 80019c4:	4694      	mov	ip, r2
 80019c6:	4463      	add	r3, ip
 80019c8:	623b      	str	r3, [r7, #32]
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	059b      	lsls	r3, r3, #22
 80019d2:	0d9b      	lsrs	r3, r3, #22
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <PCD_EP_ISR_Handler+0x6ec>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	e070      	b.n	8001ace <PCD_EP_ISR_Handler+0x722>
 80019ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d16c      	bne.n	8001ace <PCD_EP_ISR_Handler+0x722>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2250      	movs	r2, #80	; 0x50
 8001a00:	5a9b      	ldrh	r3, [r3, r2]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	001a      	movs	r2, r3
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	00da      	lsls	r2, r3, #3
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <PCD_EP_ISR_Handler+0x6e4>)
 8001a18:	4694      	mov	ip, r2
 8001a1a:	4463      	add	r3, ip
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]
 8001a24:	e053      	b.n	8001ace <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2e:	785b      	ldrb	r3, [r3, #1]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d133      	bne.n	8001a9c <PCD_EP_ISR_Handler+0x6f0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2250      	movs	r2, #80	; 0x50
 8001a40:	5a9b      	ldrh	r3, [r3, r2]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	001a      	movs	r2, r3
 8001a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a48:	189b      	adds	r3, r3, r2
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	00da      	lsls	r2, r3, #3
 8001a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <PCD_EP_ISR_Handler+0x6d8>)
 8001a58:	4694      	mov	ip, r2
 8001a5a:	4463      	add	r3, ip
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	059b      	lsls	r3, r3, #22
 8001a66:	0d9b      	lsrs	r3, r3, #22
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <PCD_EP_ISR_Handler+0x6ec>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	801a      	strh	r2, [r3, #0]
 8001a7e:	e026      	b.n	8001ace <PCD_EP_ISR_Handler+0x722>
 8001a80:	00000f8f 	.word	0x00000f8f
 8001a84:	00000406 	.word	0x00000406
 8001a88:	ffff8f8f 	.word	0xffff8f8f
 8001a8c:	ffff80c0 	.word	0xffff80c0
 8001a90:	00000402 	.word	0x00000402
 8001a94:	ffff8f0f 	.word	0xffff8f0f
 8001a98:	ffff8000 	.word	0xffff8000
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d114      	bne.n	8001ace <PCD_EP_ISR_Handler+0x722>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2250      	movs	r2, #80	; 0x50
 8001aaa:	5a9b      	ldrh	r3, [r3, r2]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	001a      	movs	r2, r3
 8001ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab2:	189b      	adds	r3, r3, r2
 8001ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	00da      	lsls	r2, r3, #3
 8001abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001abe:	18d3      	adds	r3, r2, r3
 8001ac0:	4a3b      	ldr	r2, [pc, #236]	; (8001bb0 <PCD_EP_ISR_Handler+0x804>)
 8001ac2:	4694      	mov	ip, r2
 8001ac4:	4463      	add	r3, ip
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aca:	2200      	movs	r2, #0
 8001acc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0011      	movs	r1, r2
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f005 fb88 	bl	80071ec <HAL_PCD_DataInStageCallback>
 8001adc:	e058      	b.n	8001b90 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001ade:	234a      	movs	r3, #74	; 0x4a
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d149      	bne.n	8001b80 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2250      	movs	r2, #80	; 0x50
 8001af2:	5a9b      	ldrh	r3, [r3, r2]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	001a      	movs	r2, r3
 8001af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	18d2      	adds	r2, r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	18d3      	adds	r3, r2, r3
 8001b06:	4a2b      	ldr	r2, [pc, #172]	; (8001bb4 <PCD_EP_ISR_Handler+0x808>)
 8001b08:	4694      	mov	ip, r2
 8001b0a:	4463      	add	r3, ip
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	2140      	movs	r1, #64	; 0x40
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	0592      	lsls	r2, r2, #22
 8001b14:	0d92      	lsrs	r2, r2, #22
 8001b16:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d907      	bls.n	8001b34 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	699a      	ldr	r2, [r3, #24]
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b30:	619a      	str	r2, [r3, #24]
 8001b32:	e002      	b.n	8001b3a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	0011      	movs	r1, r2
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f005 fb4e 	bl	80071ec <HAL_PCD_DataInStageCallback>
 8001b50:	e01e      	b.n	8001b90 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	2140      	movs	r1, #64	; 0x40
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	18d2      	adds	r2, r2, r3
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b60:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	18d2      	adds	r2, r2, r3
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b76:	0011      	movs	r1, r2
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f002 fac7 	bl	800410c <USB_EPStartXfer>
 8001b7e:	e007      	b.n	8001b90 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b80:	234a      	movs	r3, #74	; 0x4a
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 f930 	bl	8001df0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2244      	movs	r2, #68	; 0x44
 8001b96:	5a9b      	ldrh	r3, [r3, r2]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da01      	bge.n	8001ba4 <PCD_EP_ISR_Handler+0x7f8>
 8001ba0:	f7ff fc0a 	bl	80013b8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b016      	add	sp, #88	; 0x58
 8001bac:	bdb0      	pop	{r4, r5, r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	00000406 	.word	0x00000406
 8001bb4:	00000402 	.word	0x00000402

08001bb8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	1dbb      	adds	r3, r7, #6
 8001bc4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001bc6:	1dbb      	adds	r3, r7, #6
 8001bc8:	881a      	ldrh	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d100      	bne.n	8001bd4 <HAL_PCD_EP_DB_Receive+0x1c>
 8001bd2:	e07d      	b.n	8001cd0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2250      	movs	r2, #80	; 0x50
 8001bda:	5a9b      	ldrh	r3, [r3, r2]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	001a      	movs	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	18d2      	adds	r2, r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	18d3      	adds	r3, r2, r3
 8001bee:	4a7a      	ldr	r2, [pc, #488]	; (8001dd8 <HAL_PCD_EP_DB_Receive+0x220>)
 8001bf0:	4694      	mov	ip, r2
 8001bf2:	4463      	add	r3, ip
 8001bf4:	881a      	ldrh	r2, [r3, #0]
 8001bf6:	211a      	movs	r1, #26
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	0592      	lsls	r2, r2, #22
 8001bfc:	0d92      	lsrs	r2, r2, #22
 8001bfe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d307      	bcc.n	8001c1c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	1ad2      	subs	r2, r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	619a      	str	r2, [r3, #24]
 8001c1a:	e002      	b.n	8001c22 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d121      	bne.n	8001c6e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	001a      	movs	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	18d3      	adds	r3, r2, r3
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	2018      	movs	r0, #24
 8001c3e:	183b      	adds	r3, r7, r0
 8001c40:	4966      	ldr	r1, [pc, #408]	; (8001ddc <HAL_PCD_EP_DB_Receive+0x224>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	183b      	adds	r3, r7, r0
 8001c48:	183a      	adds	r2, r7, r0
 8001c4a:	8812      	ldrh	r2, [r2, #0]
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0189      	lsls	r1, r1, #6
 8001c50:	404a      	eors	r2, r1
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	001a      	movs	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	18d3      	adds	r3, r2, r3
 8001c62:	183a      	adds	r2, r7, r0
 8001c64:	8812      	ldrh	r2, [r2, #0]
 8001c66:	495e      	ldr	r1, [pc, #376]	; (8001de0 <HAL_PCD_EP_DB_Receive+0x228>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	2240      	movs	r2, #64	; 0x40
 8001c74:	4013      	ands	r3, r2
 8001c76:	d01a      	beq.n	8001cae <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	18d3      	adds	r3, r2, r3
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	2016      	movs	r0, #22
 8001c8c:	183b      	adds	r3, r7, r0
 8001c8e:	4955      	ldr	r1, [pc, #340]	; (8001de4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001c90:	400a      	ands	r2, r1
 8001c92:	801a      	strh	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	001a      	movs	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	18d3      	adds	r3, r2, r3
 8001ca2:	183a      	adds	r2, r7, r0
 8001ca4:	8812      	ldrh	r2, [r2, #0]
 8001ca6:	4950      	ldr	r1, [pc, #320]	; (8001de8 <HAL_PCD_EP_DB_Receive+0x230>)
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	b292      	uxth	r2, r2
 8001cac:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001cae:	241a      	movs	r4, #26
 8001cb0:	193b      	adds	r3, r7, r4
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d100      	bne.n	8001cba <HAL_PCD_EP_DB_Receive+0x102>
 8001cb8:	e086      	b.n	8001dc8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	6959      	ldr	r1, [r3, #20]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	891a      	ldrh	r2, [r3, #8]
 8001cc6:	193b      	adds	r3, r7, r4
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	f003 fcda 	bl	8005682 <USB_ReadPMA>
 8001cce:	e07b      	b.n	8001dc8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2250      	movs	r2, #80	; 0x50
 8001cd6:	5a9b      	ldrh	r3, [r3, r2]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	001a      	movs	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	18d2      	adds	r2, r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	18d3      	adds	r3, r2, r3
 8001cea:	4a40      	ldr	r2, [pc, #256]	; (8001dec <HAL_PCD_EP_DB_Receive+0x234>)
 8001cec:	4694      	mov	ip, r2
 8001cee:	4463      	add	r3, ip
 8001cf0:	881a      	ldrh	r2, [r3, #0]
 8001cf2:	211a      	movs	r1, #26
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	0592      	lsls	r2, r2, #22
 8001cf8:	0d92      	lsrs	r2, r2, #22
 8001cfa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	699a      	ldr	r2, [r3, #24]
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d307      	bcc.n	8001d18 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	1ad2      	subs	r2, r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	619a      	str	r2, [r3, #24]
 8001d16:	e002      	b.n	8001d1e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d121      	bne.n	8001d6a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	001a      	movs	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	18d3      	adds	r3, r2, r3
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	201e      	movs	r0, #30
 8001d3a:	183b      	adds	r3, r7, r0
 8001d3c:	4927      	ldr	r1, [pc, #156]	; (8001ddc <HAL_PCD_EP_DB_Receive+0x224>)
 8001d3e:	400a      	ands	r2, r1
 8001d40:	801a      	strh	r2, [r3, #0]
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	183a      	adds	r2, r7, r0
 8001d46:	8812      	ldrh	r2, [r2, #0]
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	0189      	lsls	r1, r1, #6
 8001d4c:	404a      	eors	r2, r1
 8001d4e:	801a      	strh	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	001a      	movs	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	18d3      	adds	r3, r2, r3
 8001d5e:	183a      	adds	r2, r7, r0
 8001d60:	8812      	ldrh	r2, [r2, #0]
 8001d62:	491f      	ldr	r1, [pc, #124]	; (8001de0 <HAL_PCD_EP_DB_Receive+0x228>)
 8001d64:	430a      	orrs	r2, r1
 8001d66:	b292      	uxth	r2, r2
 8001d68:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d6a:	1dbb      	adds	r3, r7, #6
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	4013      	ands	r3, r2
 8001d72:	d11a      	bne.n	8001daa <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	001a      	movs	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	18d3      	adds	r3, r2, r3
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	201c      	movs	r0, #28
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	4916      	ldr	r1, [pc, #88]	; (8001de4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	801a      	strh	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	001a      	movs	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	18d3      	adds	r3, r2, r3
 8001d9e:	183a      	adds	r2, r7, r0
 8001da0:	8812      	ldrh	r2, [r2, #0]
 8001da2:	4911      	ldr	r1, [pc, #68]	; (8001de8 <HAL_PCD_EP_DB_Receive+0x230>)
 8001da4:	430a      	orrs	r2, r1
 8001da6:	b292      	uxth	r2, r2
 8001da8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001daa:	241a      	movs	r4, #26
 8001dac:	193b      	adds	r3, r7, r4
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d009      	beq.n	8001dc8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	6959      	ldr	r1, [r3, #20]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	895a      	ldrh	r2, [r3, #10]
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	f003 fc5d 	bl	8005682 <USB_ReadPMA>
    }
  }

  return count;
 8001dc8:	231a      	movs	r3, #26
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	881b      	ldrh	r3, [r3, #0]
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b009      	add	sp, #36	; 0x24
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	00000402 	.word	0x00000402
 8001ddc:	ffffbf8f 	.word	0xffffbf8f
 8001de0:	ffff8080 	.word	0xffff8080
 8001de4:	ffff8f8f 	.word	0xffff8f8f
 8001de8:	ffff80c0 	.word	0xffff80c0
 8001dec:	00000406 	.word	0x00000406

08001df0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0a4      	sub	sp, #144	; 0x90
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	1dbb      	adds	r3, r7, #6
 8001dfc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dfe:	1dbb      	adds	r3, r7, #6
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	2240      	movs	r2, #64	; 0x40
 8001e04:	4013      	ands	r3, r2
 8001e06:	d100      	bne.n	8001e0a <HAL_PCD_EP_DB_Transmit+0x1a>
 8001e08:	e1e4      	b.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2250      	movs	r2, #80	; 0x50
 8001e10:	5a9b      	ldrh	r3, [r3, r2]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	001a      	movs	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	18d2      	adds	r2, r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	4ad0      	ldr	r2, [pc, #832]	; (8002168 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e26:	4694      	mov	ip, r2
 8001e28:	4463      	add	r3, ip
 8001e2a:	881a      	ldrh	r2, [r3, #0]
 8001e2c:	2186      	movs	r1, #134	; 0x86
 8001e2e:	187b      	adds	r3, r7, r1
 8001e30:	0592      	lsls	r2, r2, #22
 8001e32:	0d92      	lsrs	r2, r2, #22
 8001e34:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d907      	bls.n	8001e52 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	1ad2      	subs	r2, r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	619a      	str	r2, [r3, #24]
 8001e50:	e002      	b.n	8001e58 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d000      	beq.n	8001e62 <HAL_PCD_EP_DB_Transmit+0x72>
 8001e60:	e0b5      	b.n	8001fce <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d125      	bne.n	8001eb6 <HAL_PCD_EP_DB_Transmit+0xc6>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2250      	movs	r2, #80	; 0x50
 8001e76:	5a9b      	ldrh	r3, [r3, r2]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	189b      	adds	r3, r3, r2
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	00da      	lsls	r2, r3, #3
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	18d3      	adds	r3, r2, r3
 8001e8c:	4ab6      	ldr	r2, [pc, #728]	; (8002168 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e8e:	4694      	mov	ip, r2
 8001e90:	4463      	add	r3, ip
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	059b      	lsls	r3, r3, #22
 8001e9c:	0d9b      	lsrs	r3, r3, #22
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	801a      	strh	r2, [r3, #0]
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4ab0      	ldr	r2, [pc, #704]	; (800216c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	e01b      	b.n	8001eee <HAL_PCD_EP_DB_Transmit+0xfe>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d117      	bne.n	8001eee <HAL_PCD_EP_DB_Transmit+0xfe>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2250      	movs	r2, #80	; 0x50
 8001eca:	5a9b      	ldrh	r3, [r3, r2]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	001a      	movs	r2, r3
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	00da      	lsls	r2, r3, #3
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	18d3      	adds	r3, r2, r3
 8001ee0:	4aa1      	ldr	r2, [pc, #644]	; (8002168 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	4463      	add	r3, ip
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	2200      	movs	r2, #0
 8001eec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	785b      	ldrb	r3, [r3, #1]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d125      	bne.n	8001f48 <HAL_PCD_EP_DB_Transmit+0x158>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2250      	movs	r2, #80	; 0x50
 8001f08:	5a9b      	ldrh	r3, [r3, r2]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	189b      	adds	r3, r3, r2
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	00da      	lsls	r2, r3, #3
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	18d3      	adds	r3, r2, r3
 8001f1e:	4a94      	ldr	r2, [pc, #592]	; (8002170 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001f20:	4694      	mov	ip, r2
 8001f22:	4463      	add	r3, ip
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	059b      	lsls	r3, r3, #22
 8001f2e:	0d9b      	lsrs	r3, r3, #22
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4a8b      	ldr	r2, [pc, #556]	; (800216c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	e018      	b.n	8001f7a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	785b      	ldrb	r3, [r3, #1]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d114      	bne.n	8001f7a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2250      	movs	r2, #80	; 0x50
 8001f56:	5a9b      	ldrh	r3, [r3, r2]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	189b      	adds	r3, r3, r2
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	00da      	lsls	r2, r3, #3
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	18d3      	adds	r3, r2, r3
 8001f6c:	4a80      	ldr	r2, [pc, #512]	; (8002170 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001f6e:	4694      	mov	ip, r2
 8001f70:	4463      	add	r3, ip
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	2200      	movs	r2, #0
 8001f78:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0011      	movs	r1, r2
 8001f82:	0018      	movs	r0, r3
 8001f84:	f005 f932 	bl	80071ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f88:	1dbb      	adds	r3, r7, #6
 8001f8a:	881a      	ldrh	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	01db      	lsls	r3, r3, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	d100      	bne.n	8001f96 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001f94:	e309      	b.n	80025aa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	18d3      	adds	r3, r2, r3
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	2016      	movs	r0, #22
 8001faa:	183b      	adds	r3, r7, r0
 8001fac:	4971      	ldr	r1, [pc, #452]	; (8002174 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	001a      	movs	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	18d3      	adds	r3, r2, r3
 8001fc0:	183a      	adds	r2, r7, r0
 8001fc2:	8812      	ldrh	r2, [r2, #0]
 8001fc4:	496c      	ldr	r1, [pc, #432]	; (8002178 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	801a      	strh	r2, [r3, #0]
 8001fcc:	e2ed      	b.n	80025aa <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fce:	1dbb      	adds	r3, r7, #6
 8001fd0:	881a      	ldrh	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	01db      	lsls	r3, r3, #7
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d01a      	beq.n	8002010 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	001a      	movs	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	18d3      	adds	r3, r2, r3
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	208a      	movs	r0, #138	; 0x8a
 8001fee:	183b      	adds	r3, r7, r0
 8001ff0:	4960      	ldr	r1, [pc, #384]	; (8002174 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	801a      	strh	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	18d3      	adds	r3, r2, r3
 8002004:	183a      	adds	r2, r7, r0
 8002006:	8812      	ldrh	r2, [r2, #0]
 8002008:	495b      	ldr	r1, [pc, #364]	; (8002178 <HAL_PCD_EP_DB_Transmit+0x388>)
 800200a:	430a      	orrs	r2, r1
 800200c:	b292      	uxth	r2, r2
 800200e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2224      	movs	r2, #36	; 0x24
 8002014:	5c9b      	ldrb	r3, [r3, r2]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d000      	beq.n	800201c <HAL_PCD_EP_DB_Transmit+0x22c>
 800201a:	e2c6      	b.n	80025aa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	2186      	movs	r1, #134	; 0x86
 8002022:	187b      	adds	r3, r7, r1
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	18d2      	adds	r2, r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	187b      	adds	r3, r7, r1
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	18d2      	adds	r2, r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	6a1a      	ldr	r2, [r3, #32]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	429a      	cmp	r2, r3
 8002044:	d30c      	bcc.n	8002060 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	218c      	movs	r1, #140	; 0x8c
 800204c:	187a      	adds	r2, r7, r1
 800204e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	6a1a      	ldr	r2, [r3, #32]
 8002054:	187b      	adds	r3, r7, r1
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	1ad2      	subs	r2, r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	621a      	str	r2, [r3, #32]
 800205e:	e01a      	b.n	8002096 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002068:	2386      	movs	r3, #134	; 0x86
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	228c      	movs	r2, #140	; 0x8c
 8002070:	18ba      	adds	r2, r7, r2
 8002072:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	2100      	movs	r1, #0
 800207a:	5499      	strb	r1, [r3, r2]
 800207c:	e00b      	b.n	8002096 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2224      	movs	r2, #36	; 0x24
 8002082:	2100      	movs	r1, #0
 8002084:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	228c      	movs	r2, #140	; 0x8c
 800208c:	18ba      	adds	r2, r7, r2
 800208e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	785b      	ldrb	r3, [r3, #1]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d000      	beq.n	80020a0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800209e:	e06d      	b.n	800217c <HAL_PCD_EP_DB_Transmit+0x38c>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2250      	movs	r2, #80	; 0x50
 80020ac:	5a9b      	ldrh	r3, [r3, r2]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	001a      	movs	r2, r3
 80020b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b4:	189b      	adds	r3, r3, r2
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	00da      	lsls	r2, r3, #3
 80020be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c0:	18d3      	adds	r3, r2, r3
 80020c2:	4a29      	ldr	r2, [pc, #164]	; (8002168 <HAL_PCD_EP_DB_Transmit+0x378>)
 80020c4:	4694      	mov	ip, r2
 80020c6:	4463      	add	r3, ip
 80020c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	059b      	lsls	r3, r3, #22
 80020d2:	0d9b      	lsrs	r3, r3, #22
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d8:	801a      	strh	r2, [r3, #0]
 80020da:	228c      	movs	r2, #140	; 0x8c
 80020dc:	18bb      	adds	r3, r7, r2
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b3e      	cmp	r3, #62	; 0x3e
 80020e2:	d91a      	bls.n	800211a <HAL_PCD_EP_DB_Transmit+0x32a>
 80020e4:	18bb      	adds	r3, r7, r2
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80020ec:	18bb      	adds	r3, r7, r2
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	221f      	movs	r2, #31
 80020f2:	4013      	ands	r3, r2
 80020f4:	d102      	bne.n	80020fc <HAL_PCD_EP_DB_Transmit+0x30c>
 80020f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f8:	3b01      	subs	r3, #1
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29a      	uxth	r2, r3
 8002102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002104:	b29b      	uxth	r3, r3
 8002106:	029b      	lsls	r3, r3, #10
 8002108:	b29b      	uxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b29b      	uxth	r3, r3
 800210e:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	b29a      	uxth	r2, r3
 8002114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	e04f      	b.n	80021ba <HAL_PCD_EP_DB_Transmit+0x3ca>
 800211a:	238c      	movs	r3, #140	; 0x8c
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <HAL_PCD_EP_DB_Transmit+0x346>
 8002124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800212c:	4313      	orrs	r3, r2
 800212e:	b29a      	uxth	r2, r3
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	e041      	b.n	80021ba <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002136:	228c      	movs	r2, #140	; 0x8c
 8002138:	18bb      	adds	r3, r7, r2
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002140:	18bb      	adds	r3, r7, r2
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	4013      	ands	r3, r2
 8002148:	d002      	beq.n	8002150 <HAL_PCD_EP_DB_Transmit+0x360>
 800214a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214c:	3301      	adds	r3, #1
 800214e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29a      	uxth	r2, r3
 8002156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002158:	b29b      	uxth	r3, r3
 800215a:	029b      	lsls	r3, r3, #10
 800215c:	b29b      	uxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b29a      	uxth	r2, r3
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002164:	801a      	strh	r2, [r3, #0]
 8002166:	e028      	b.n	80021ba <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002168:	00000402 	.word	0x00000402
 800216c:	ffff8000 	.word	0xffff8000
 8002170:	00000406 	.word	0x00000406
 8002174:	ffff8f8f 	.word	0xffff8f8f
 8002178:	ffffc080 	.word	0xffffc080
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	785b      	ldrb	r3, [r3, #1]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d11a      	bne.n	80021ba <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	647b      	str	r3, [r7, #68]	; 0x44
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2250      	movs	r2, #80	; 0x50
 8002190:	5a9b      	ldrh	r3, [r3, r2]
 8002192:	b29b      	uxth	r3, r3
 8002194:	001a      	movs	r2, r3
 8002196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002198:	189b      	adds	r3, r3, r2
 800219a:	647b      	str	r3, [r7, #68]	; 0x44
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	00da      	lsls	r2, r3, #3
 80021a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a4:	18d3      	adds	r3, r2, r3
 80021a6:	4adb      	ldr	r2, [pc, #876]	; (8002514 <HAL_PCD_EP_DB_Transmit+0x724>)
 80021a8:	4694      	mov	ip, r2
 80021aa:	4463      	add	r3, ip
 80021ac:	643b      	str	r3, [r7, #64]	; 0x40
 80021ae:	238c      	movs	r3, #140	; 0x8c
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	6959      	ldr	r1, [r3, #20]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	891a      	ldrh	r2, [r3, #8]
 80021c6:	238c      	movs	r3, #140	; 0x8c
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f003 fa0f 	bl	80055f0 <USB_WritePMA>
 80021d2:	e1ea      	b.n	80025aa <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2250      	movs	r2, #80	; 0x50
 80021da:	5a9b      	ldrh	r3, [r3, r2]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	001a      	movs	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	18d2      	adds	r2, r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	4aca      	ldr	r2, [pc, #808]	; (8002518 <HAL_PCD_EP_DB_Transmit+0x728>)
 80021f0:	4694      	mov	ip, r2
 80021f2:	4463      	add	r3, ip
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	2186      	movs	r1, #134	; 0x86
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	0592      	lsls	r2, r2, #22
 80021fc:	0d92      	lsrs	r2, r2, #22
 80021fe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	187b      	adds	r3, r7, r1
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d307      	bcc.n	800221c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	187b      	adds	r3, r7, r1
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	1ad2      	subs	r2, r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	619a      	str	r2, [r3, #24]
 800221a:	e002      	b.n	8002222 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d000      	beq.n	800222c <HAL_PCD_EP_DB_Transmit+0x43c>
 800222a:	e0bb      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	785b      	ldrb	r3, [r3, #1]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d125      	bne.n	8002280 <HAL_PCD_EP_DB_Transmit+0x490>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	67fb      	str	r3, [r7, #124]	; 0x7c
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2250      	movs	r2, #80	; 0x50
 8002240:	5a9b      	ldrh	r3, [r3, r2]
 8002242:	b29b      	uxth	r3, r3
 8002244:	001a      	movs	r2, r3
 8002246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002248:	189b      	adds	r3, r3, r2
 800224a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	00da      	lsls	r2, r3, #3
 8002252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002254:	18d3      	adds	r3, r2, r3
 8002256:	4aaf      	ldr	r2, [pc, #700]	; (8002514 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002258:	4694      	mov	ip, r2
 800225a:	4463      	add	r3, ip
 800225c:	67bb      	str	r3, [r7, #120]	; 0x78
 800225e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	059b      	lsls	r3, r3, #22
 8002266:	0d9b      	lsrs	r3, r3, #22
 8002268:	b29a      	uxth	r2, r3
 800226a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800226c:	801a      	strh	r2, [r3, #0]
 800226e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4aa9      	ldr	r2, [pc, #676]	; (800251c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	b29a      	uxth	r2, r3
 800227a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800227c:	801a      	strh	r2, [r3, #0]
 800227e:	e01b      	b.n	80022b8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d117      	bne.n	80022b8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	667b      	str	r3, [r7, #100]	; 0x64
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2250      	movs	r2, #80	; 0x50
 8002294:	5a9b      	ldrh	r3, [r3, r2]
 8002296:	b29b      	uxth	r3, r3
 8002298:	001a      	movs	r2, r3
 800229a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800229c:	189b      	adds	r3, r3, r2
 800229e:	667b      	str	r3, [r7, #100]	; 0x64
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	00da      	lsls	r2, r3, #3
 80022a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022a8:	18d3      	adds	r3, r2, r3
 80022aa:	4a9a      	ldr	r2, [pc, #616]	; (8002514 <HAL_PCD_EP_DB_Transmit+0x724>)
 80022ac:	4694      	mov	ip, r2
 80022ae:	4463      	add	r3, ip
 80022b0:	663b      	str	r3, [r7, #96]	; 0x60
 80022b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b4:	2200      	movs	r2, #0
 80022b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	677b      	str	r3, [r7, #116]	; 0x74
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d12b      	bne.n	800231e <HAL_PCD_EP_DB_Transmit+0x52e>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2250      	movs	r2, #80	; 0x50
 80022d2:	5a9b      	ldrh	r3, [r3, r2]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	001a      	movs	r2, r3
 80022d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022da:	189b      	adds	r3, r3, r2
 80022dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	00da      	lsls	r2, r3, #3
 80022e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	4a8b      	ldr	r2, [pc, #556]	; (8002518 <HAL_PCD_EP_DB_Transmit+0x728>)
 80022ea:	4694      	mov	ip, r2
 80022ec:	4463      	add	r3, ip
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	187a      	adds	r2, r7, r1
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	059b      	lsls	r3, r3, #22
 80022fe:	0d9b      	lsrs	r3, r3, #22
 8002300:	b29a      	uxth	r2, r3
 8002302:	187b      	adds	r3, r7, r1
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	187b      	adds	r3, r7, r1
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4a82      	ldr	r2, [pc, #520]	; (800251c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	b29a      	uxth	r2, r3
 8002316:	187b      	adds	r3, r7, r1
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	801a      	strh	r2, [r3, #0]
 800231c:	e018      	b.n	8002350 <HAL_PCD_EP_DB_Transmit+0x560>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	785b      	ldrb	r3, [r3, #1]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d114      	bne.n	8002350 <HAL_PCD_EP_DB_Transmit+0x560>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2250      	movs	r2, #80	; 0x50
 800232c:	5a9b      	ldrh	r3, [r3, r2]
 800232e:	b29b      	uxth	r3, r3
 8002330:	001a      	movs	r2, r3
 8002332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002334:	189b      	adds	r3, r3, r2
 8002336:	677b      	str	r3, [r7, #116]	; 0x74
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	00da      	lsls	r2, r3, #3
 800233e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002340:	18d3      	adds	r3, r2, r3
 8002342:	4a75      	ldr	r2, [pc, #468]	; (8002518 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002344:	4694      	mov	ip, r2
 8002346:	4463      	add	r3, ip
 8002348:	673b      	str	r3, [r7, #112]	; 0x70
 800234a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800234c:	2200      	movs	r2, #0
 800234e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	0011      	movs	r1, r2
 8002358:	0018      	movs	r0, r3
 800235a:	f004 ff47 	bl	80071ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800235e:	1dbb      	adds	r3, r7, #6
 8002360:	881a      	ldrh	r2, [r3, #0]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	01db      	lsls	r3, r3, #7
 8002366:	4013      	ands	r3, r2
 8002368:	d000      	beq.n	800236c <HAL_PCD_EP_DB_Transmit+0x57c>
 800236a:	e11e      	b.n	80025aa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	001a      	movs	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	18d3      	adds	r3, r2, r3
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29a      	uxth	r2, r3
 800237e:	2088      	movs	r0, #136	; 0x88
 8002380:	183b      	adds	r3, r7, r0
 8002382:	4967      	ldr	r1, [pc, #412]	; (8002520 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002384:	400a      	ands	r2, r1
 8002386:	801a      	strh	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	001a      	movs	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	183a      	adds	r2, r7, r0
 8002398:	8812      	ldrh	r2, [r2, #0]
 800239a:	4962      	ldr	r1, [pc, #392]	; (8002524 <HAL_PCD_EP_DB_Transmit+0x734>)
 800239c:	430a      	orrs	r2, r1
 800239e:	b292      	uxth	r2, r2
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	e102      	b.n	80025aa <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023a4:	1dbb      	adds	r3, r7, #6
 80023a6:	881a      	ldrh	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	01db      	lsls	r3, r3, #7
 80023ac:	4013      	ands	r3, r2
 80023ae:	d11a      	bne.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	001a      	movs	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	18d3      	adds	r3, r2, r3
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	204e      	movs	r0, #78	; 0x4e
 80023c4:	183b      	adds	r3, r7, r0
 80023c6:	4956      	ldr	r1, [pc, #344]	; (8002520 <HAL_PCD_EP_DB_Transmit+0x730>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	001a      	movs	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	18d3      	adds	r3, r2, r3
 80023da:	183a      	adds	r2, r7, r0
 80023dc:	8812      	ldrh	r2, [r2, #0]
 80023de:	4951      	ldr	r1, [pc, #324]	; (8002524 <HAL_PCD_EP_DB_Transmit+0x734>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	b292      	uxth	r2, r2
 80023e4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2224      	movs	r2, #36	; 0x24
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d000      	beq.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x602>
 80023f0:	e0db      	b.n	80025aa <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	2186      	movs	r1, #134	; 0x86
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	18d2      	adds	r2, r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	187b      	adds	r3, r7, r1
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	18d2      	adds	r2, r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d30c      	bcc.n	8002436 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	218c      	movs	r1, #140	; 0x8c
 8002422:	187a      	adds	r2, r7, r1
 8002424:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	6a1a      	ldr	r2, [r3, #32]
 800242a:	187b      	adds	r3, r7, r1
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	621a      	str	r2, [r3, #32]
 8002434:	e01a      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800243e:	2386      	movs	r3, #134	; 0x86
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	228c      	movs	r2, #140	; 0x8c
 8002446:	18ba      	adds	r2, r7, r2
 8002448:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2224      	movs	r2, #36	; 0x24
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]
 8002452:	e00b      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	228c      	movs	r2, #140	; 0x8c
 800245a:	18ba      	adds	r2, r7, r2
 800245c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2200      	movs	r2, #0
 8002462:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2224      	movs	r2, #36	; 0x24
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	657b      	str	r3, [r7, #84]	; 0x54
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d000      	beq.n	800247c <HAL_PCD_EP_DB_Transmit+0x68c>
 800247a:	e06e      	b.n	800255a <HAL_PCD_EP_DB_Transmit+0x76a>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2250      	movs	r2, #80	; 0x50
 8002488:	5a9b      	ldrh	r3, [r3, r2]
 800248a:	b29b      	uxth	r3, r3
 800248c:	001a      	movs	r2, r3
 800248e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002490:	189b      	adds	r3, r3, r2
 8002492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	00da      	lsls	r2, r3, #3
 800249a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249c:	18d3      	adds	r3, r2, r3
 800249e:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <HAL_PCD_EP_DB_Transmit+0x728>)
 80024a0:	4694      	mov	ip, r2
 80024a2:	4463      	add	r3, ip
 80024a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80024a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	059b      	lsls	r3, r3, #22
 80024ae:	0d9b      	lsrs	r3, r3, #22
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	228c      	movs	r2, #140	; 0x8c
 80024b8:	18bb      	adds	r3, r7, r2
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b3e      	cmp	r3, #62	; 0x3e
 80024be:	d91a      	bls.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x706>
 80024c0:	18bb      	adds	r3, r7, r2
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80024c8:	18bb      	adds	r3, r7, r2
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	221f      	movs	r2, #31
 80024ce:	4013      	ands	r3, r2
 80024d0:	d102      	bne.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80024d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d4:	3b01      	subs	r3, #1
 80024d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80024d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_PCD_EP_DB_Transmit+0x72c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f2:	801a      	strh	r2, [r3, #0]
 80024f4:	e04d      	b.n	8002592 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024f6:	238c      	movs	r3, #140	; 0x8c
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d113      	bne.n	8002528 <HAL_PCD_EP_DB_Transmit+0x738>
 8002500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002508:	4313      	orrs	r3, r2
 800250a:	b29a      	uxth	r2, r3
 800250c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800250e:	801a      	strh	r2, [r3, #0]
 8002510:	e03f      	b.n	8002592 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	00000402 	.word	0x00000402
 8002518:	00000406 	.word	0x00000406
 800251c:	ffff8000 	.word	0xffff8000
 8002520:	ffff8f8f 	.word	0xffff8f8f
 8002524:	ffffc080 	.word	0xffffc080
 8002528:	228c      	movs	r2, #140	; 0x8c
 800252a:	18bb      	adds	r3, r7, r2
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	66bb      	str	r3, [r7, #104]	; 0x68
 8002532:	18bb      	adds	r3, r7, r2
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	4013      	ands	r3, r2
 800253a:	d002      	beq.n	8002542 <HAL_PCD_EP_DB_Transmit+0x752>
 800253c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800253e:	3301      	adds	r3, #1
 8002540:	66bb      	str	r3, [r7, #104]	; 0x68
 8002542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29a      	uxth	r2, r3
 8002548:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800254a:	b29b      	uxth	r3, r3
 800254c:	029b      	lsls	r3, r3, #10
 800254e:	b29b      	uxth	r3, r3
 8002550:	4313      	orrs	r3, r2
 8002552:	b29a      	uxth	r2, r3
 8002554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002556:	801a      	strh	r2, [r3, #0]
 8002558:	e01b      	b.n	8002592 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d117      	bne.n	8002592 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2250      	movs	r2, #80	; 0x50
 8002568:	5a9b      	ldrh	r3, [r3, r2]
 800256a:	b29b      	uxth	r3, r3
 800256c:	001a      	movs	r2, r3
 800256e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002570:	189b      	adds	r3, r3, r2
 8002572:	657b      	str	r3, [r7, #84]	; 0x54
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	00da      	lsls	r2, r3, #3
 800257a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257c:	18d3      	adds	r3, r2, r3
 800257e:	4a21      	ldr	r2, [pc, #132]	; (8002604 <HAL_PCD_EP_DB_Transmit+0x814>)
 8002580:	4694      	mov	ip, r2
 8002582:	4463      	add	r3, ip
 8002584:	653b      	str	r3, [r7, #80]	; 0x50
 8002586:	238c      	movs	r3, #140	; 0x8c
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b29a      	uxth	r2, r3
 800258e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002590:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6959      	ldr	r1, [r3, #20]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	895a      	ldrh	r2, [r3, #10]
 800259e:	238c      	movs	r3, #140	; 0x8c
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f003 f823 	bl	80055f0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	001a      	movs	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	18d3      	adds	r3, r2, r3
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	2014      	movs	r0, #20
 80025be:	183b      	adds	r3, r7, r0
 80025c0:	4911      	ldr	r1, [pc, #68]	; (8002608 <HAL_PCD_EP_DB_Transmit+0x818>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	801a      	strh	r2, [r3, #0]
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	183a      	adds	r2, r7, r0
 80025ca:	8812      	ldrh	r2, [r2, #0]
 80025cc:	2110      	movs	r1, #16
 80025ce:	404a      	eors	r2, r1
 80025d0:	801a      	strh	r2, [r3, #0]
 80025d2:	183b      	adds	r3, r7, r0
 80025d4:	183a      	adds	r2, r7, r0
 80025d6:	8812      	ldrh	r2, [r2, #0]
 80025d8:	2120      	movs	r1, #32
 80025da:	404a      	eors	r2, r1
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	001a      	movs	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	18d3      	adds	r3, r2, r3
 80025ec:	183a      	adds	r2, r7, r0
 80025ee:	8812      	ldrh	r2, [r2, #0]
 80025f0:	4906      	ldr	r1, [pc, #24]	; (800260c <HAL_PCD_EP_DB_Transmit+0x81c>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	b292      	uxth	r2, r2
 80025f6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b024      	add	sp, #144	; 0x90
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	00000406 	.word	0x00000406
 8002608:	ffff8fbf 	.word	0xffff8fbf
 800260c:	ffff8080 	.word	0xffff8080

08002610 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	0008      	movs	r0, r1
 800261a:	0011      	movs	r1, r2
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	240a      	movs	r4, #10
 8002620:	193b      	adds	r3, r7, r4
 8002622:	1c02      	adds	r2, r0, #0
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	2308      	movs	r3, #8
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	1c0a      	adds	r2, r1, #0
 800262c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800262e:	0021      	movs	r1, r4
 8002630:	187b      	adds	r3, r7, r1
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	4013      	ands	r3, r2
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263e:	187b      	adds	r3, r7, r1
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	2207      	movs	r2, #7
 8002644:	4013      	ands	r3, r2
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	0013      	movs	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	189b      	adds	r3, r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	18d3      	adds	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e00b      	b.n	8002670 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002658:	230a      	movs	r3, #10
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	0013      	movs	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	189b      	adds	r3, r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	3369      	adds	r3, #105	; 0x69
 8002668:	33ff      	adds	r3, #255	; 0xff
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	18d3      	adds	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002670:	2308      	movs	r3, #8
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d107      	bne.n	800268a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	b29a      	uxth	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	80da      	strh	r2, [r3, #6]
 8002688:	e00b      	b.n	80026a2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2201      	movs	r2, #1
 800268e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	b29a      	uxth	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	0c1b      	lsrs	r3, r3, #16
 800269c:	b29a      	uxth	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b007      	add	sp, #28
 80026aa:	bd90      	pop	{r4, r7, pc}

080026ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	23ba      	movs	r3, #186	; 0xba
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	2101      	movs	r1, #1
 80026c2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	23b8      	movs	r3, #184	; 0xb8
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	2100      	movs	r1, #0
 80026cc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2254      	movs	r2, #84	; 0x54
 80026d2:	5a9b      	ldrh	r3, [r3, r2]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2201      	movs	r2, #1
 80026d8:	4313      	orrs	r3, r2
 80026da:	b299      	uxth	r1, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2254      	movs	r2, #84	; 0x54
 80026e0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2254      	movs	r2, #84	; 0x54
 80026e6:	5a9b      	ldrh	r3, [r3, r2]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2202      	movs	r2, #2
 80026ec:	4313      	orrs	r3, r2
 80026ee:	b299      	uxth	r1, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2254      	movs	r2, #84	; 0x54
 80026f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b004      	add	sp, #16
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	000a      	movs	r2, r1
 800270a:	1cfb      	adds	r3, r7, #3
 800270c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b5b0      	push	{r4, r5, r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f000 fbaf 	bl	8002e8a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272c:	4bcf      	ldr	r3, [pc, #828]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	220c      	movs	r2, #12
 8002732:	4013      	ands	r3, r2
 8002734:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002736:	4bcd      	ldr	r3, [pc, #820]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	025b      	lsls	r3, r3, #9
 800273e:	4013      	ands	r3, r2
 8002740:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	d100      	bne.n	800274e <HAL_RCC_OscConfig+0x36>
 800274c:	e07e      	b.n	800284c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d007      	beq.n	8002764 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d112      	bne.n	8002780 <HAL_RCC_OscConfig+0x68>
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	429a      	cmp	r2, r3
 8002762:	d10d      	bne.n	8002780 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	4bc1      	ldr	r3, [pc, #772]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	029b      	lsls	r3, r3, #10
 800276c:	4013      	ands	r3, r2
 800276e:	d100      	bne.n	8002772 <HAL_RCC_OscConfig+0x5a>
 8002770:	e06b      	b.n	800284a <HAL_RCC_OscConfig+0x132>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d167      	bne.n	800284a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	f000 fb85 	bl	8002e8a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	025b      	lsls	r3, r3, #9
 8002788:	429a      	cmp	r2, r3
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x84>
 800278c:	4bb7      	ldr	r3, [pc, #732]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4bb6      	ldr	r3, [pc, #728]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	0249      	lsls	r1, r1, #9
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e027      	b.n	80027ec <HAL_RCC_OscConfig+0xd4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	23a0      	movs	r3, #160	; 0xa0
 80027a2:	02db      	lsls	r3, r3, #11
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d10e      	bne.n	80027c6 <HAL_RCC_OscConfig+0xae>
 80027a8:	4bb0      	ldr	r3, [pc, #704]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4baf      	ldr	r3, [pc, #700]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	02c9      	lsls	r1, r1, #11
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	4bad      	ldr	r3, [pc, #692]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4bac      	ldr	r3, [pc, #688]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0249      	lsls	r1, r1, #9
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e012      	b.n	80027ec <HAL_RCC_OscConfig+0xd4>
 80027c6:	4ba9      	ldr	r3, [pc, #676]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4ba8      	ldr	r3, [pc, #672]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80027cc:	49a8      	ldr	r1, [pc, #672]	; (8002a70 <HAL_RCC_OscConfig+0x358>)
 80027ce:	400a      	ands	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	4ba6      	ldr	r3, [pc, #664]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	025b      	lsls	r3, r3, #9
 80027da:	4013      	ands	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4ba2      	ldr	r3, [pc, #648]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4ba1      	ldr	r3, [pc, #644]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80027e6:	49a3      	ldr	r1, [pc, #652]	; (8002a74 <HAL_RCC_OscConfig+0x35c>)
 80027e8:	400a      	ands	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe f84c 	bl	8000890 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027fc:	e009      	b.n	8002812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fe:	f7fe f847 	bl	8000890 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b64      	cmp	r3, #100	; 0x64
 800280a:	d902      	bls.n	8002812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	f000 fb3c 	bl	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002812:	4b96      	ldr	r3, [pc, #600]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	4013      	ands	r3, r2
 800281c:	d0ef      	beq.n	80027fe <HAL_RCC_OscConfig+0xe6>
 800281e:	e015      	b.n	800284c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe f836 	bl	8000890 <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282a:	f7fe f831 	bl	8000890 <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	; 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e326      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800283c:	4b8b      	ldr	r3, [pc, #556]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	4013      	ands	r3, r2
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x112>
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2202      	movs	r2, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d100      	bne.n	8002858 <HAL_RCC_OscConfig+0x140>
 8002856:	e08b      	b.n	8002970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d005      	beq.n	8002870 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d13e      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1d0>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d13b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002870:	4b7e      	ldr	r3, [pc, #504]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2204      	movs	r2, #4
 8002876:	4013      	ands	r3, r2
 8002878:	d004      	beq.n	8002884 <HAL_RCC_OscConfig+0x16c>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e302      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b79      	ldr	r3, [pc, #484]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a7b      	ldr	r2, [pc, #492]	; (8002a78 <HAL_RCC_OscConfig+0x360>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	021a      	lsls	r2, r3, #8
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800289a:	4b74      	ldr	r3, [pc, #464]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2209      	movs	r2, #9
 80028a0:	4393      	bics	r3, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	4b71      	ldr	r3, [pc, #452]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ac:	f000 fc40 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80028b0:	0001      	movs	r1, r0
 80028b2:	4b6e      	ldr	r3, [pc, #440]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	220f      	movs	r2, #15
 80028ba:	4013      	ands	r3, r2
 80028bc:	4a6f      	ldr	r2, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x364>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	000a      	movs	r2, r1
 80028c2:	40da      	lsrs	r2, r3
 80028c4:	4b6e      	ldr	r3, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x368>)
 80028c6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80028c8:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x36c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2513      	movs	r5, #19
 80028ce:	197c      	adds	r4, r7, r5
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fd ff97 	bl	8000804 <HAL_InitTick>
 80028d6:	0003      	movs	r3, r0
 80028d8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80028da:	197b      	adds	r3, r7, r5
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d046      	beq.n	8002970 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80028e2:	197b      	adds	r3, r7, r5
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	e2d0      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d027      	beq.n	800293e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028ee:	4b5f      	ldr	r3, [pc, #380]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2209      	movs	r2, #9
 80028f4:	4393      	bics	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	4b5c      	ldr	r3, [pc, #368]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fd ffc6 	bl	8000890 <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290a:	f7fd ffc1 	bl	8000890 <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e2b6      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800291c:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2204      	movs	r2, #4
 8002922:	4013      	ands	r3, r2
 8002924:	d0f1      	beq.n	800290a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b51      	ldr	r3, [pc, #324]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a53      	ldr	r2, [pc, #332]	; (8002a78 <HAL_RCC_OscConfig+0x360>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	e018      	b.n	8002970 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002944:	2101      	movs	r1, #1
 8002946:	438a      	bics	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fd ffa1 	bl	8000890 <HAL_GetTick>
 800294e:	0003      	movs	r3, r0
 8002950:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002954:	f7fd ff9c 	bl	8000890 <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e291      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002966:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2204      	movs	r2, #4
 800296c:	4013      	ands	r3, r2
 800296e:	d1f1      	bne.n	8002954 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2210      	movs	r2, #16
 8002976:	4013      	ands	r3, r2
 8002978:	d100      	bne.n	800297c <HAL_RCC_OscConfig+0x264>
 800297a:	e0a1      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d140      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002982:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x282>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e277      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299a:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a3a      	ldr	r2, [pc, #232]	; (8002a88 <HAL_RCC_OscConfig+0x370>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	0019      	movs	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a8:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ae:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	0a19      	lsrs	r1, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	061a      	lsls	r2, r3, #24
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	0b5b      	lsrs	r3, r3, #13
 80029c8:	3301      	adds	r3, #1
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	0212      	lsls	r2, r2, #8
 80029ce:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	210f      	movs	r1, #15
 80029d8:	400b      	ands	r3, r1
 80029da:	4928      	ldr	r1, [pc, #160]	; (8002a7c <HAL_RCC_OscConfig+0x364>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x368>)
 80029e2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_OscConfig+0x36c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2513      	movs	r5, #19
 80029ea:	197c      	adds	r4, r7, r5
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fd ff09 	bl	8000804 <HAL_InitTick>
 80029f2:	0003      	movs	r3, r0
 80029f4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80029f6:	197b      	adds	r3, r7, r5
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d060      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80029fe:	197b      	adds	r3, r7, r5
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	e242      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d03f      	beq.n	8002a8c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	0049      	lsls	r1, r1, #1
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fd ff39 	bl	8000890 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a24:	f7fd ff34 	bl	8000890 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e229      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <HAL_RCC_OscConfig+0x370>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	0a19      	lsrs	r1, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	061a      	lsls	r2, r3, #24
 8002a64:	4b01      	ldr	r3, [pc, #4]	; (8002a6c <HAL_RCC_OscConfig+0x354>)
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	e029      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3a8>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	fffeffff 	.word	0xfffeffff
 8002a74:	fffbffff 	.word	0xfffbffff
 8002a78:	ffffe0ff 	.word	0xffffe0ff
 8002a7c:	08007850 	.word	0x08007850
 8002a80:	20000000 	.word	0x20000000
 8002a84:	20000004 	.word	0x20000004
 8002a88:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a8c:	4bbd      	ldr	r3, [pc, #756]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4bbc      	ldr	r3, [pc, #752]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002a92:	49bd      	ldr	r1, [pc, #756]	; (8002d88 <HAL_RCC_OscConfig+0x670>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fd fefa 	bl	8000890 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa2:	f7fd fef5 	bl	8000890 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1ea      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ab4:	4bb3      	ldr	r3, [pc, #716]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d036      	beq.n	8002b38 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d019      	beq.n	8002b06 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad2:	4bac      	ldr	r3, [pc, #688]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ad6:	4bab      	ldr	r3, [pc, #684]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002ad8:	2101      	movs	r1, #1
 8002ada:	430a      	orrs	r2, r1
 8002adc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fd fed7 	bl	8000890 <HAL_GetTick>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fd fed2 	bl	8000890 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1c7      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002afa:	4ba2      	ldr	r3, [pc, #648]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	2202      	movs	r2, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	d0f1      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x3d0>
 8002b04:	e018      	b.n	8002b38 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b06:	4b9f      	ldr	r3, [pc, #636]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b0a:	4b9e      	ldr	r3, [pc, #632]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	438a      	bics	r2, r1
 8002b10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7fd febd 	bl	8000890 <HAL_GetTick>
 8002b16:	0003      	movs	r3, r0
 8002b18:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7fd feb8 	bl	8000890 <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1ad      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b2e:	4b95      	ldr	r3, [pc, #596]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b32:	2202      	movs	r2, #2
 8002b34:	4013      	ands	r3, r2
 8002b36:	d1f1      	bne.n	8002b1c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d100      	bne.n	8002b44 <HAL_RCC_OscConfig+0x42c>
 8002b42:	e0ae      	b.n	8002ca2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b44:	2027      	movs	r0, #39	; 0x27
 8002b46:	183b      	adds	r3, r7, r0
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4c:	4b8d      	ldr	r3, [pc, #564]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	055b      	lsls	r3, r3, #21
 8002b54:	4013      	ands	r3, r2
 8002b56:	d109      	bne.n	8002b6c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b58:	4b8a      	ldr	r3, [pc, #552]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5c:	4b89      	ldr	r3, [pc, #548]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0549      	lsls	r1, r1, #21
 8002b62:	430a      	orrs	r2, r1
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b66:	183b      	adds	r3, r7, r0
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	4b87      	ldr	r3, [pc, #540]	; (8002d8c <HAL_RCC_OscConfig+0x674>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4013      	ands	r3, r2
 8002b76:	d11a      	bne.n	8002bae <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b78:	4b84      	ldr	r3, [pc, #528]	; (8002d8c <HAL_RCC_OscConfig+0x674>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b83      	ldr	r3, [pc, #524]	; (8002d8c <HAL_RCC_OscConfig+0x674>)
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	0049      	lsls	r1, r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7fd fe83 	bl	8000890 <HAL_GetTick>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7fd fe7e 	bl	8000890 <HAL_GetTick>
 8002b94:	0002      	movs	r2, r0
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e173      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	4b7a      	ldr	r3, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x674>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_OscConfig+0x4b2>
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bbe:	4b71      	ldr	r3, [pc, #452]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	0049      	lsls	r1, r1, #1
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8002bc8:	e031      	b.n	8002c2e <HAL_RCC_OscConfig+0x516>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x4d4>
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bd6:	4b6b      	ldr	r3, [pc, #428]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002bd8:	496b      	ldr	r1, [pc, #428]	; (8002d88 <HAL_RCC_OscConfig+0x670>)
 8002bda:	400a      	ands	r2, r1
 8002bdc:	651a      	str	r2, [r3, #80]	; 0x50
 8002bde:	4b69      	ldr	r3, [pc, #420]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be2:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002be4:	496a      	ldr	r1, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x678>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	651a      	str	r2, [r3, #80]	; 0x50
 8002bea:	e020      	b.n	8002c2e <HAL_RCC_OscConfig+0x516>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	23a0      	movs	r3, #160	; 0xa0
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10e      	bne.n	8002c16 <HAL_RCC_OscConfig+0x4fe>
 8002bf8:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bfc:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002bfe:	2180      	movs	r1, #128	; 0x80
 8002c00:	00c9      	lsls	r1, r1, #3
 8002c02:	430a      	orrs	r2, r1
 8002c04:	651a      	str	r2, [r3, #80]	; 0x50
 8002c06:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c0a:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	0049      	lsls	r1, r1, #1
 8002c10:	430a      	orrs	r2, r1
 8002c12:	651a      	str	r2, [r3, #80]	; 0x50
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x516>
 8002c16:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c1c:	495a      	ldr	r1, [pc, #360]	; (8002d88 <HAL_RCC_OscConfig+0x670>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	651a      	str	r2, [r3, #80]	; 0x50
 8002c22:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c26:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c28:	4959      	ldr	r1, [pc, #356]	; (8002d90 <HAL_RCC_OscConfig+0x678>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d015      	beq.n	8002c62 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fd fe2b 	bl	8000890 <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c3e:	e009      	b.n	8002c54 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fd fe26 	bl	8000890 <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	4a52      	ldr	r2, [pc, #328]	; (8002d94 <HAL_RCC_OscConfig+0x67c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e11a      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c54:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d0ef      	beq.n	8002c40 <HAL_RCC_OscConfig+0x528>
 8002c60:	e014      	b.n	8002c8c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7fd fe15 	bl	8000890 <HAL_GetTick>
 8002c66:	0003      	movs	r3, r0
 8002c68:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c6a:	e009      	b.n	8002c80 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fd fe10 	bl	8000890 <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	4a47      	ldr	r2, [pc, #284]	; (8002d94 <HAL_RCC_OscConfig+0x67c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e104      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c80:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d1ef      	bne.n	8002c6c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c8c:	2327      	movs	r3, #39	; 0x27
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002c9c:	493e      	ldr	r1, [pc, #248]	; (8002d98 <HAL_RCC_OscConfig+0x680>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d049      	beq.n	8002d40 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d026      	beq.n	8002d02 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002cb4:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	4b32      	ldr	r3, [pc, #200]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34
 8002ccc:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <HAL_RCC_OscConfig+0x684>)
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <HAL_RCC_OscConfig+0x684>)
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	0189      	lsls	r1, r1, #6
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fd fdd9 	bl	8000890 <HAL_GetTick>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce4:	f7fd fdd4 	bl	8000890 <HAL_GetTick>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0c9      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d0f1      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x5cc>
 8002d00:	e01e      	b.n	8002d40 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	438a      	bics	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_RCC_OscConfig+0x684>)
 8002d10:	6a1a      	ldr	r2, [r3, #32]
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_RCC_OscConfig+0x684>)
 8002d14:	4922      	ldr	r1, [pc, #136]	; (8002da0 <HAL_RCC_OscConfig+0x688>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fd fdb9 	bl	8000890 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d24:	f7fd fdb4 	bl	8000890 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e0a9      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d1f1      	bne.n	8002d24 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d100      	bne.n	8002d4a <HAL_RCC_OscConfig+0x632>
 8002d48:	e09e      	b.n	8002e88 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	d100      	bne.n	8002d52 <HAL_RCC_OscConfig+0x63a>
 8002d50:	e077      	b.n	8002e42 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d158      	bne.n	8002e0c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_OscConfig+0x66c>)
 8002d60:	4910      	ldr	r1, [pc, #64]	; (8002da4 <HAL_RCC_OscConfig+0x68c>)
 8002d62:	400a      	ands	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fd fd93 	bl	8000890 <HAL_GetTick>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d6e:	e01b      	b.n	8002da8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fd fd8e 	bl	8000890 <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d914      	bls.n	8002da8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e083      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	40021000 	.word	0x40021000
 8002d88:	fffffeff 	.word	0xfffffeff
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	fffffbff 	.word	0xfffffbff
 8002d94:	00001388 	.word	0x00001388
 8002d98:	efffffff 	.word	0xefffffff
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	ffffdfff 	.word	0xffffdfff
 8002da4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002da8:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	049b      	lsls	r3, r3, #18
 8002db0:	4013      	ands	r3, r2
 8002db2:	d1dd      	bne.n	8002d70 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db4:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <HAL_RCC_OscConfig+0x780>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b2f      	ldr	r3, [pc, #188]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	0449      	lsls	r1, r1, #17
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fd fd55 	bl	8000890 <HAL_GetTick>
 8002de6:	0003      	movs	r3, r0
 8002de8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fd fd50 	bl	8000890 <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e045      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002dfe:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	049b      	lsls	r3, r3, #18
 8002e06:	4013      	ands	r3, r2
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x6d4>
 8002e0a:	e03d      	b.n	8002e88 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002e12:	4922      	ldr	r1, [pc, #136]	; (8002e9c <HAL_RCC_OscConfig+0x784>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fd fd3a 	bl	8000890 <HAL_GetTick>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e22:	f7fd fd35 	bl	8000890 <HAL_GetTick>
 8002e26:	0002      	movs	r2, r0
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e02a      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	049b      	lsls	r3, r3, #18
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0x70a>
 8002e40:	e022      	b.n	8002e88 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e01d      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_RCC_OscConfig+0x77c>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	025b      	lsls	r3, r3, #9
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d10f      	bne.n	8002e84 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	23f0      	movs	r3, #240	; 0xf0
 8002e68:	039b      	lsls	r3, r3, #14
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	23c0      	movs	r3, #192	; 0xc0
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b00a      	add	sp, #40	; 0x28
 8002e90:	bdb0      	pop	{r4, r5, r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	40021000 	.word	0x40021000
 8002e98:	ff02ffff 	.word	0xff02ffff
 8002e9c:	feffffff 	.word	0xfeffffff

08002ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e128      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b96      	ldr	r3, [pc, #600]	; (8003110 <HAL_RCC_ClockConfig+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4013      	ands	r3, r2
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d91e      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b93      	ldr	r3, [pc, #588]	; (8003110 <HAL_RCC_ClockConfig+0x270>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4393      	bics	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	4b90      	ldr	r3, [pc, #576]	; (8003110 <HAL_RCC_ClockConfig+0x270>)
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ed4:	f7fd fcdc 	bl	8000890 <HAL_GetTick>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002edc:	e009      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ede:	f7fd fcd7 	bl	8000890 <HAL_GetTick>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	4a8a      	ldr	r2, [pc, #552]	; (8003114 <HAL_RCC_ClockConfig+0x274>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e109      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b87      	ldr	r3, [pc, #540]	; (8003110 <HAL_RCC_ClockConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4013      	ands	r3, r2
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1ee      	bne.n	8002ede <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2202      	movs	r2, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0a:	4b83      	ldr	r3, [pc, #524]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	22f0      	movs	r2, #240	; 0xf0
 8002f10:	4393      	bics	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b7f      	ldr	r3, [pc, #508]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	d100      	bne.n	8002f2a <HAL_RCC_ClockConfig+0x8a>
 8002f28:	e089      	b.n	800303e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f32:	4b79      	ldr	r3, [pc, #484]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	029b      	lsls	r3, r3, #10
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d120      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0e1      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f4a:	4b73      	ldr	r3, [pc, #460]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	049b      	lsls	r3, r3, #18
 8002f52:	4013      	ands	r3, r2
 8002f54:	d114      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0d5      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f62:	4b6d      	ldr	r3, [pc, #436]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2204      	movs	r2, #4
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d109      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0ca      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f70:	4b69      	ldr	r3, [pc, #420]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0c2      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f80:	4b65      	ldr	r3, [pc, #404]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2203      	movs	r2, #3
 8002f86:	4393      	bics	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4b62      	ldr	r3, [pc, #392]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002f90:	430a      	orrs	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f94:	f7fd fc7c 	bl	8000890 <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d111      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fa4:	e009      	b.n	8002fba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa6:	f7fd fc73 	bl	8000890 <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_ClockConfig+0x274>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0a5      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fba:	4b57      	ldr	r3, [pc, #348]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d1ef      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x106>
 8002fc6:	e03a      	b.n	800303e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d111      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd0:	e009      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd2:	f7fd fc5d 	bl	8000890 <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	4a4d      	ldr	r2, [pc, #308]	; (8003114 <HAL_RCC_ClockConfig+0x274>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e08f      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe6:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	220c      	movs	r2, #12
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d1ef      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x132>
 8002ff2:	e024      	b.n	800303e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d11b      	bne.n	8003034 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffc:	e009      	b.n	8003012 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffe:	f7fd fc47 	bl	8000890 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	4a42      	ldr	r2, [pc, #264]	; (8003114 <HAL_RCC_ClockConfig+0x274>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e079      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003012:	4b41      	ldr	r3, [pc, #260]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	220c      	movs	r2, #12
 8003018:	4013      	ands	r3, r2
 800301a:	2b04      	cmp	r3, #4
 800301c:	d1ef      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x15e>
 800301e:	e00e      	b.n	800303e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fd fc36 	bl	8000890 <HAL_GetTick>
 8003024:	0002      	movs	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <HAL_RCC_ClockConfig+0x274>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e068      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003034:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	220c      	movs	r2, #12
 800303a:	4013      	ands	r3, r2
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303e:	4b34      	ldr	r3, [pc, #208]	; (8003110 <HAL_RCC_ClockConfig+0x270>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	4013      	ands	r3, r2
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d21e      	bcs.n	800308a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304c:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_RCC_ClockConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2201      	movs	r2, #1
 8003052:	4393      	bics	r3, r2
 8003054:	0019      	movs	r1, r3
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <HAL_RCC_ClockConfig+0x270>)
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800305e:	f7fd fc17 	bl	8000890 <HAL_GetTick>
 8003062:	0003      	movs	r3, r0
 8003064:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	e009      	b.n	800307c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fd fc12 	bl	8000890 <HAL_GetTick>
 800306c:	0002      	movs	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	4a28      	ldr	r2, [pc, #160]	; (8003114 <HAL_RCC_ClockConfig+0x274>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e044      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307c:	4b24      	ldr	r3, [pc, #144]	; (8003110 <HAL_RCC_ClockConfig+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	4013      	ands	r3, r2
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d1ee      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2204      	movs	r2, #4
 8003090:	4013      	ands	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a20      	ldr	r2, [pc, #128]	; (800311c <HAL_RCC_ClockConfig+0x27c>)
 800309a:	4013      	ands	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2208      	movs	r2, #8
 80030ae:	4013      	ands	r3, r2
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <HAL_RCC_ClockConfig+0x280>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	00da      	lsls	r2, r3, #3
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c8:	f000 f832 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030cc:	0001      	movs	r1, r0
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	220f      	movs	r2, #15
 80030d6:	4013      	ands	r3, r2
 80030d8:	4a12      	ldr	r2, [pc, #72]	; (8003124 <HAL_RCC_ClockConfig+0x284>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	000a      	movs	r2, r1
 80030de:	40da      	lsrs	r2, r3
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_RCC_ClockConfig+0x288>)
 80030e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_RCC_ClockConfig+0x28c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	250b      	movs	r5, #11
 80030ea:	197c      	adds	r4, r7, r5
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fd fb89 	bl	8000804 <HAL_InitTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80030f6:	197b      	adds	r3, r7, r5
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80030fe:	197b      	adds	r3, r7, r5
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	e000      	b.n	8003106 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bdb0      	pop	{r4, r5, r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	40022000 	.word	0x40022000
 8003114:	00001388 	.word	0x00001388
 8003118:	40021000 	.word	0x40021000
 800311c:	fffff8ff 	.word	0xfffff8ff
 8003120:	ffffc7ff 	.word	0xffffc7ff
 8003124:	08007850 	.word	0x08007850
 8003128:	20000000 	.word	0x20000000
 800312c:	20000004 	.word	0x20000004

08003130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b5b0      	push	{r4, r5, r7, lr}
 8003132:	b08e      	sub	sp, #56	; 0x38
 8003134:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003136:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_RCC_GetSysClockFreq+0x138>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800313c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800313e:	230c      	movs	r3, #12
 8003140:	4013      	ands	r3, r2
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d014      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x40>
 8003146:	d900      	bls.n	800314a <HAL_RCC_GetSysClockFreq+0x1a>
 8003148:	e07b      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x112>
 800314a:	2b04      	cmp	r3, #4
 800314c:	d002      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x24>
 800314e:	2b08      	cmp	r3, #8
 8003150:	d00b      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x3a>
 8003152:	e076      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003154:	4b44      	ldr	r3, [pc, #272]	; (8003268 <HAL_RCC_GetSysClockFreq+0x138>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2210      	movs	r2, #16
 800315a:	4013      	ands	r3, r2
 800315c:	d002      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800315e:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003162:	e07c      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003164:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_RCC_GetSysClockFreq+0x140>)
 8003166:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003168:	e079      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800316a:	4b42      	ldr	r3, [pc, #264]	; (8003274 <HAL_RCC_GetSysClockFreq+0x144>)
 800316c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800316e:	e076      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	0c9a      	lsrs	r2, r3, #18
 8003174:	230f      	movs	r3, #15
 8003176:	401a      	ands	r2, r3
 8003178:	4b3f      	ldr	r3, [pc, #252]	; (8003278 <HAL_RCC_GetSysClockFreq+0x148>)
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	0d9a      	lsrs	r2, r3, #22
 8003182:	2303      	movs	r3, #3
 8003184:	4013      	ands	r3, r2
 8003186:	3301      	adds	r3, #1
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_RCC_GetSysClockFreq+0x138>)
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	025b      	lsls	r3, r3, #9
 8003192:	4013      	ands	r3, r2
 8003194:	d01a      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	4a35      	ldr	r2, [pc, #212]	; (8003274 <HAL_RCC_GetSysClockFreq+0x144>)
 80031a0:	2300      	movs	r3, #0
 80031a2:	69b8      	ldr	r0, [r7, #24]
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	f7fd f85b 	bl	8000260 <__aeabi_lmul>
 80031aa:	0002      	movs	r2, r0
 80031ac:	000b      	movs	r3, r1
 80031ae:	0010      	movs	r0, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f7fd f82f 	bl	8000220 <__aeabi_uldivmod>
 80031c2:	0002      	movs	r2, r0
 80031c4:	000b      	movs	r3, r1
 80031c6:	0013      	movs	r3, r2
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ca:	e037      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031cc:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_RCC_GetSysClockFreq+0x138>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2210      	movs	r2, #16
 80031d2:	4013      	ands	r3, r2
 80031d4:	d01a      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4a23      	ldr	r2, [pc, #140]	; (800326c <HAL_RCC_GetSysClockFreq+0x13c>)
 80031e0:	2300      	movs	r3, #0
 80031e2:	68b8      	ldr	r0, [r7, #8]
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	f7fd f83b 	bl	8000260 <__aeabi_lmul>
 80031ea:	0002      	movs	r2, r0
 80031ec:	000b      	movs	r3, r1
 80031ee:	0010      	movs	r0, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f7fd f80f 	bl	8000220 <__aeabi_uldivmod>
 8003202:	0002      	movs	r2, r0
 8003204:	000b      	movs	r3, r1
 8003206:	0013      	movs	r3, r2
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
 800320a:	e017      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	0018      	movs	r0, r3
 8003210:	2300      	movs	r3, #0
 8003212:	0019      	movs	r1, r3
 8003214:	4a16      	ldr	r2, [pc, #88]	; (8003270 <HAL_RCC_GetSysClockFreq+0x140>)
 8003216:	2300      	movs	r3, #0
 8003218:	f7fd f822 	bl	8000260 <__aeabi_lmul>
 800321c:	0002      	movs	r2, r0
 800321e:	000b      	movs	r3, r1
 8003220:	0010      	movs	r0, r2
 8003222:	0019      	movs	r1, r3
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	001c      	movs	r4, r3
 8003228:	2300      	movs	r3, #0
 800322a:	001d      	movs	r5, r3
 800322c:	0022      	movs	r2, r4
 800322e:	002b      	movs	r3, r5
 8003230:	f7fc fff6 	bl	8000220 <__aeabi_uldivmod>
 8003234:	0002      	movs	r2, r0
 8003236:	000b      	movs	r3, r1
 8003238:	0013      	movs	r3, r2
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800323c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003240:	e00d      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_GetSysClockFreq+0x138>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0b5b      	lsrs	r3, r3, #13
 8003248:	2207      	movs	r2, #7
 800324a:	4013      	ands	r3, r2
 800324c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	3301      	adds	r3, #1
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	0212      	lsls	r2, r2, #8
 8003256:	409a      	lsls	r2, r3
 8003258:	0013      	movs	r3, r2
 800325a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800325c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b00e      	add	sp, #56	; 0x38
 8003266:	bdb0      	pop	{r4, r5, r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	003d0900 	.word	0x003d0900
 8003270:	00f42400 	.word	0x00f42400
 8003274:	007a1200 	.word	0x007a1200
 8003278:	08007860 	.word	0x08007860

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003284:	2317      	movs	r3, #23
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2220      	movs	r2, #32
 8003292:	4013      	ands	r3, r2
 8003294:	d106      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	4013      	ands	r3, r2
 80032a0:	d100      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80032a2:	e104      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a4:	4bb1      	ldr	r3, [pc, #708]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	055b      	lsls	r3, r3, #21
 80032ac:	4013      	ands	r3, r2
 80032ae:	d10a      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	4bae      	ldr	r3, [pc, #696]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b4:	4bad      	ldr	r3, [pc, #692]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	0549      	lsls	r1, r1, #21
 80032ba:	430a      	orrs	r2, r1
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80032be:	2317      	movs	r3, #23
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	4baa      	ldr	r3, [pc, #680]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	d11a      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d2:	4ba7      	ldr	r3, [pc, #668]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4ba6      	ldr	r3, [pc, #664]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032d8:	2180      	movs	r1, #128	; 0x80
 80032da:	0049      	lsls	r1, r1, #1
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e0:	f7fd fad6 	bl	8000890 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fd fad1 	bl	8000890 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b64      	cmp	r3, #100	; 0x64
 80032f6:	d901      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e133      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b9c      	ldr	r3, [pc, #624]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4013      	ands	r3, r2
 8003306:	d0f0      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003308:	4b98      	ldr	r3, [pc, #608]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	23c0      	movs	r3, #192	; 0xc0
 800330e:	039b      	lsls	r3, r3, #14
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	23c0      	movs	r3, #192	; 0xc0
 800331a:	039b      	lsls	r3, r3, #14
 800331c:	4013      	ands	r3, r2
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	429a      	cmp	r2, r3
 8003322:	d107      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	23c0      	movs	r3, #192	; 0xc0
 800332a:	039b      	lsls	r3, r3, #14
 800332c:	4013      	ands	r3, r2
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d013      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	23c0      	movs	r3, #192	; 0xc0
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	401a      	ands	r2, r3
 800333e:	23c0      	movs	r3, #192	; 0xc0
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	429a      	cmp	r2, r3
 8003344:	d10a      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003346:	4b89      	ldr	r3, [pc, #548]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	029b      	lsls	r3, r3, #10
 800334e:	401a      	ands	r2, r3
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	429a      	cmp	r2, r3
 8003356:	d101      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e103      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800335c:	4b83      	ldr	r3, [pc, #524]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800335e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003360:	23c0      	movs	r3, #192	; 0xc0
 8003362:	029b      	lsls	r3, r3, #10
 8003364:	4013      	ands	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d049      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	23c0      	movs	r3, #192	; 0xc0
 8003374:	029b      	lsls	r3, r3, #10
 8003376:	4013      	ands	r3, r2
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	429a      	cmp	r2, r3
 800337c:	d004      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2220      	movs	r2, #32
 8003384:	4013      	ands	r3, r2
 8003386:	d10d      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	23c0      	movs	r3, #192	; 0xc0
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	4013      	ands	r3, r2
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d034      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	4013      	ands	r3, r2
 80033a2:	d02e      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80033a4:	4b71      	ldr	r3, [pc, #452]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a8:	4a72      	ldr	r2, [pc, #456]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033ae:	4b6f      	ldr	r3, [pc, #444]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033b2:	4b6e      	ldr	r3, [pc, #440]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	0309      	lsls	r1, r1, #12
 80033b8:	430a      	orrs	r2, r1
 80033ba:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033bc:	4b6b      	ldr	r3, [pc, #428]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033c0:	4b6a      	ldr	r3, [pc, #424]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033c2:	496d      	ldr	r1, [pc, #436]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80033c8:	4b68      	ldr	r3, [pc, #416]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4013      	ands	r3, r2
 80033d6:	d014      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fd fa5a 	bl	8000890 <HAL_GetTick>
 80033dc:	0003      	movs	r3, r0
 80033de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033e0:	e009      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7fd fa55 	bl	8000890 <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	4a63      	ldr	r2, [pc, #396]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0b6      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f6:	4b5d      	ldr	r3, [pc, #372]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	d0ef      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	4013      	ands	r3, r2
 800340c:	d01f      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	23c0      	movs	r3, #192	; 0xc0
 8003414:	029b      	lsls	r3, r3, #10
 8003416:	401a      	ands	r2, r3
 8003418:	23c0      	movs	r3, #192	; 0xc0
 800341a:	029b      	lsls	r3, r3, #10
 800341c:	429a      	cmp	r2, r3
 800341e:	d10c      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003420:	4b52      	ldr	r3, [pc, #328]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a56      	ldr	r2, [pc, #344]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	23c0      	movs	r3, #192	; 0xc0
 8003430:	039b      	lsls	r3, r3, #14
 8003432:	401a      	ands	r2, r3
 8003434:	4b4d      	ldr	r3, [pc, #308]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003436:	430a      	orrs	r2, r1
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	4b4c      	ldr	r3, [pc, #304]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800343c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	23c0      	movs	r3, #192	; 0xc0
 8003444:	029b      	lsls	r3, r3, #10
 8003446:	401a      	ands	r2, r3
 8003448:	4b48      	ldr	r3, [pc, #288]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800344a:	430a      	orrs	r2, r1
 800344c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2220      	movs	r2, #32
 8003454:	4013      	ands	r3, r2
 8003456:	d01f      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	23c0      	movs	r3, #192	; 0xc0
 800345e:	029b      	lsls	r3, r3, #10
 8003460:	401a      	ands	r2, r3
 8003462:	23c0      	movs	r3, #192	; 0xc0
 8003464:	029b      	lsls	r3, r3, #10
 8003466:	429a      	cmp	r2, r3
 8003468:	d10c      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800346a:	4b40      	ldr	r3, [pc, #256]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a44      	ldr	r2, [pc, #272]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003470:	4013      	ands	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	23c0      	movs	r3, #192	; 0xc0
 800347a:	039b      	lsls	r3, r3, #14
 800347c:	401a      	ands	r2, r3
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003486:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	23c0      	movs	r3, #192	; 0xc0
 800348e:	029b      	lsls	r3, r3, #10
 8003490:	401a      	ands	r2, r3
 8003492:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003494:	430a      	orrs	r2, r1
 8003496:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003498:	2317      	movs	r3, #23
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a2:	4b32      	ldr	r3, [pc, #200]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a6:	4b31      	ldr	r3, [pc, #196]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034a8:	4936      	ldr	r1, [pc, #216]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034aa:	400a      	ands	r2, r1
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2201      	movs	r2, #1
 80034b4:	4013      	ands	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034b8:	4b2c      	ldr	r3, [pc, #176]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034bc:	2203      	movs	r2, #3
 80034be:	4393      	bics	r3, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	4b29      	ldr	r3, [pc, #164]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034c8:	430a      	orrs	r2, r1
 80034ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2202      	movs	r2, #2
 80034d2:	4013      	ands	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034d6:	4b25      	ldr	r3, [pc, #148]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	220c      	movs	r2, #12
 80034dc:	4393      	bics	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	4b21      	ldr	r3, [pc, #132]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034e6:	430a      	orrs	r2, r1
 80034e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2204      	movs	r2, #4
 80034f0:	4013      	ands	r3, r2
 80034f2:	d009      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	4a23      	ldr	r2, [pc, #140]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003504:	430a      	orrs	r2, r1
 8003506:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2208      	movs	r2, #8
 800350e:	4013      	ands	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003518:	4013      	ands	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003522:	430a      	orrs	r2, r1
 8003524:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2240      	movs	r2, #64	; 0x40
 800352c:	4013      	ands	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003534:	4a16      	ldr	r2, [pc, #88]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003536:	4013      	ands	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1a      	ldr	r2, [r3, #32]
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003540:	430a      	orrs	r2, r1
 8003542:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	4013      	ands	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	4a10      	ldr	r2, [pc, #64]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800355e:	430a      	orrs	r2, r1
 8003560:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b006      	add	sp, #24
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
 8003574:	fffcffff 	.word	0xfffcffff
 8003578:	fff7ffff 	.word	0xfff7ffff
 800357c:	00001388 	.word	0x00001388
 8003580:	ffcfffff 	.word	0xffcfffff
 8003584:	efffffff 	.word	0xefffffff
 8003588:	fffff3ff 	.word	0xfffff3ff
 800358c:	ffffcfff 	.word	0xffffcfff
 8003590:	fbffffff 	.word	0xfbffffff
 8003594:	fff3ffff 	.word	0xfff3ffff

08003598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2244      	movs	r2, #68	; 0x44
 80035a4:	2100      	movs	r1, #0
 80035a6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <USB_EnableGlobalInt+0x28>)
 80035aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	b299      	uxth	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b004      	add	sp, #16
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	0000bf80 	.word	0x0000bf80

080035c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <USB_DisableGlobalInt+0x30>)
 80035ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	5a9b      	ldrh	r3, [r3, r2]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	b292      	uxth	r2, r2
 80035dc:	43d2      	mvns	r2, r2
 80035de:	b292      	uxth	r2, r2
 80035e0:	4013      	ands	r3, r2
 80035e2:	b299      	uxth	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b004      	add	sp, #16
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	0000bf80 	.word	0x0000bf80

080035f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035f8:	b084      	sub	sp, #16
 80035fa:	b590      	push	{r4, r7, lr}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	2004      	movs	r0, #4
 8003604:	2410      	movs	r4, #16
 8003606:	1900      	adds	r0, r0, r4
 8003608:	2408      	movs	r4, #8
 800360a:	46a4      	mov	ip, r4
 800360c:	44bc      	add	ip, r7
 800360e:	4460      	add	r0, ip
 8003610:	6001      	str	r1, [r0, #0]
 8003612:	6042      	str	r2, [r0, #4]
 8003614:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2240      	movs	r2, #64	; 0x40
 800361a:	2101      	movs	r1, #1
 800361c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2240      	movs	r2, #64	; 0x40
 8003622:	2100      	movs	r1, #0
 8003624:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2244      	movs	r2, #68	; 0x44
 800362a:	2100      	movs	r1, #0
 800362c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2250      	movs	r2, #80	; 0x50
 8003632:	2100      	movs	r1, #0
 8003634:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b003      	add	sp, #12
 800363e:	bc90      	pop	{r4, r7}
 8003640:	bc08      	pop	{r3}
 8003642:	b004      	add	sp, #16
 8003644:	4718      	bx	r3
	...

08003648 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b09c      	sub	sp, #112	; 0x70
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003652:	236f      	movs	r3, #111	; 0x6f
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	18d3      	adds	r3, r2, r3
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b29a      	uxth	r2, r3
 8003668:	236c      	movs	r3, #108	; 0x6c
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	49a3      	ldr	r1, [pc, #652]	; (80038fc <USB_ActivateEndpoint+0x2b4>)
 800366e:	400a      	ands	r2, r1
 8003670:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	78db      	ldrb	r3, [r3, #3]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d017      	beq.n	80036aa <USB_ActivateEndpoint+0x62>
 800367a:	dc28      	bgt.n	80036ce <USB_ActivateEndpoint+0x86>
 800367c:	2b02      	cmp	r3, #2
 800367e:	d00e      	beq.n	800369e <USB_ActivateEndpoint+0x56>
 8003680:	dc25      	bgt.n	80036ce <USB_ActivateEndpoint+0x86>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <USB_ActivateEndpoint+0x44>
 8003686:	2b01      	cmp	r3, #1
 8003688:	d018      	beq.n	80036bc <USB_ActivateEndpoint+0x74>
 800368a:	e020      	b.n	80036ce <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800368c:	226c      	movs	r2, #108	; 0x6c
 800368e:	18bb      	adds	r3, r7, r2
 8003690:	18ba      	adds	r2, r7, r2
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	0089      	lsls	r1, r1, #2
 8003698:	430a      	orrs	r2, r1
 800369a:	801a      	strh	r2, [r3, #0]
      break;
 800369c:	e01c      	b.n	80036d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800369e:	226c      	movs	r2, #108	; 0x6c
 80036a0:	18bb      	adds	r3, r7, r2
 80036a2:	18ba      	adds	r2, r7, r2
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	801a      	strh	r2, [r3, #0]
      break;
 80036a8:	e016      	b.n	80036d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80036aa:	226c      	movs	r2, #108	; 0x6c
 80036ac:	18bb      	adds	r3, r7, r2
 80036ae:	18ba      	adds	r2, r7, r2
 80036b0:	8812      	ldrh	r2, [r2, #0]
 80036b2:	21c0      	movs	r1, #192	; 0xc0
 80036b4:	00c9      	lsls	r1, r1, #3
 80036b6:	430a      	orrs	r2, r1
 80036b8:	801a      	strh	r2, [r3, #0]
      break;
 80036ba:	e00d      	b.n	80036d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80036bc:	226c      	movs	r2, #108	; 0x6c
 80036be:	18bb      	adds	r3, r7, r2
 80036c0:	18ba      	adds	r2, r7, r2
 80036c2:	8812      	ldrh	r2, [r2, #0]
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	00c9      	lsls	r1, r1, #3
 80036c8:	430a      	orrs	r2, r1
 80036ca:	801a      	strh	r2, [r3, #0]
      break;
 80036cc:	e004      	b.n	80036d8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80036ce:	236f      	movs	r3, #111	; 0x6f
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
      break;
 80036d6:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	18d3      	adds	r3, r2, r3
 80036e2:	226c      	movs	r2, #108	; 0x6c
 80036e4:	18ba      	adds	r2, r7, r2
 80036e6:	8812      	ldrh	r2, [r2, #0]
 80036e8:	4985      	ldr	r1, [pc, #532]	; (8003900 <USB_ActivateEndpoint+0x2b8>)
 80036ea:	430a      	orrs	r2, r1
 80036ec:	b292      	uxth	r2, r2
 80036ee:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	18d3      	adds	r3, r2, r3
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	b21b      	sxth	r3, r3
 8003700:	4a80      	ldr	r2, [pc, #512]	; (8003904 <USB_ActivateEndpoint+0x2bc>)
 8003702:	4013      	ands	r3, r2
 8003704:	b21a      	sxth	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b21b      	sxth	r3, r3
 800370c:	4313      	orrs	r3, r2
 800370e:	b21a      	sxth	r2, r3
 8003710:	2166      	movs	r1, #102	; 0x66
 8003712:	187b      	adds	r3, r7, r1
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	18d3      	adds	r3, r2, r3
 8003720:	187a      	adds	r2, r7, r1
 8003722:	8812      	ldrh	r2, [r2, #0]
 8003724:	4976      	ldr	r1, [pc, #472]	; (8003900 <USB_ActivateEndpoint+0x2b8>)
 8003726:	430a      	orrs	r2, r1
 8003728:	b292      	uxth	r2, r2
 800372a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	7b1b      	ldrb	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d000      	beq.n	8003736 <USB_ActivateEndpoint+0xee>
 8003734:	e178      	b.n	8003a28 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d100      	bne.n	8003740 <USB_ActivateEndpoint+0xf8>
 800373e:	e07a      	b.n	8003836 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2250      	movs	r2, #80	; 0x50
 8003748:	5a9b      	ldrh	r3, [r3, r2]
 800374a:	b29b      	uxth	r3, r3
 800374c:	001a      	movs	r2, r3
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	189b      	adds	r3, r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	00da      	lsls	r2, r3, #3
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	00d2      	lsls	r2, r2, #3
 8003762:	4694      	mov	ip, r2
 8003764:	4463      	add	r3, ip
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	88db      	ldrh	r3, [r3, #6]
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	b29b      	uxth	r3, r3
 8003770:	18db      	adds	r3, r3, r3
 8003772:	b29a      	uxth	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	18d2      	adds	r2, r2, r3
 8003782:	2112      	movs	r1, #18
 8003784:	187b      	adds	r3, r7, r1
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	187b      	adds	r3, r7, r1
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	4013      	ands	r3, r2
 8003792:	d016      	beq.n	80037c2 <USB_ActivateEndpoint+0x17a>
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	18d3      	adds	r3, r2, r3
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	2010      	movs	r0, #16
 80037a4:	183b      	adds	r3, r7, r0
 80037a6:	4957      	ldr	r1, [pc, #348]	; (8003904 <USB_ActivateEndpoint+0x2bc>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	801a      	strh	r2, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	18d3      	adds	r3, r2, r3
 80037b6:	183a      	adds	r2, r7, r0
 80037b8:	8812      	ldrh	r2, [r2, #0]
 80037ba:	4953      	ldr	r1, [pc, #332]	; (8003908 <USB_ActivateEndpoint+0x2c0>)
 80037bc:	430a      	orrs	r2, r1
 80037be:	b292      	uxth	r2, r2
 80037c0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	78db      	ldrb	r3, [r3, #3]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d01d      	beq.n	8003806 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	18d3      	adds	r3, r2, r3
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	200c      	movs	r0, #12
 80037da:	183b      	adds	r3, r7, r0
 80037dc:	494b      	ldr	r1, [pc, #300]	; (800390c <USB_ActivateEndpoint+0x2c4>)
 80037de:	400a      	ands	r2, r1
 80037e0:	801a      	strh	r2, [r3, #0]
 80037e2:	183b      	adds	r3, r7, r0
 80037e4:	183a      	adds	r2, r7, r0
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	2120      	movs	r1, #32
 80037ea:	404a      	eors	r2, r1
 80037ec:	801a      	strh	r2, [r3, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	18d3      	adds	r3, r2, r3
 80037f8:	183a      	adds	r2, r7, r0
 80037fa:	8812      	ldrh	r2, [r2, #0]
 80037fc:	4940      	ldr	r1, [pc, #256]	; (8003900 <USB_ActivateEndpoint+0x2b8>)
 80037fe:	430a      	orrs	r2, r1
 8003800:	b292      	uxth	r2, r2
 8003802:	801a      	strh	r2, [r3, #0]
 8003804:	e2b4      	b.n	8003d70 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	18d3      	adds	r3, r2, r3
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29a      	uxth	r2, r3
 8003814:	200e      	movs	r0, #14
 8003816:	183b      	adds	r3, r7, r0
 8003818:	493c      	ldr	r1, [pc, #240]	; (800390c <USB_ActivateEndpoint+0x2c4>)
 800381a:	400a      	ands	r2, r1
 800381c:	801a      	strh	r2, [r3, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	18d3      	adds	r3, r2, r3
 8003828:	183a      	adds	r2, r7, r0
 800382a:	8812      	ldrh	r2, [r2, #0]
 800382c:	4934      	ldr	r1, [pc, #208]	; (8003900 <USB_ActivateEndpoint+0x2b8>)
 800382e:	430a      	orrs	r2, r1
 8003830:	b292      	uxth	r2, r2
 8003832:	801a      	strh	r2, [r3, #0]
 8003834:	e29c      	b.n	8003d70 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2250      	movs	r2, #80	; 0x50
 800383e:	5a9b      	ldrh	r3, [r3, r2]
 8003840:	b29b      	uxth	r3, r3
 8003842:	001a      	movs	r2, r3
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	189b      	adds	r3, r3, r2
 8003848:	633b      	str	r3, [r7, #48]	; 0x30
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	00da      	lsls	r2, r3, #3
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	18d3      	adds	r3, r2, r3
 8003854:	4a2e      	ldr	r2, [pc, #184]	; (8003910 <USB_ActivateEndpoint+0x2c8>)
 8003856:	4694      	mov	ip, r2
 8003858:	4463      	add	r3, ip
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	88db      	ldrh	r3, [r3, #6]
 8003860:	085b      	lsrs	r3, r3, #1
 8003862:	b29b      	uxth	r3, r3
 8003864:	18db      	adds	r3, r3, r3
 8003866:	b29a      	uxth	r2, r3
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2250      	movs	r2, #80	; 0x50
 8003874:	5a9b      	ldrh	r3, [r3, r2]
 8003876:	b29b      	uxth	r3, r3
 8003878:	001a      	movs	r2, r3
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	189b      	adds	r3, r3, r2
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	00da      	lsls	r2, r3, #3
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	18d3      	adds	r3, r2, r3
 800388a:	4a22      	ldr	r2, [pc, #136]	; (8003914 <USB_ActivateEndpoint+0x2cc>)
 800388c:	4694      	mov	ip, r2
 800388e:	4463      	add	r3, ip
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	059b      	lsls	r3, r3, #22
 800389a:	0d9b      	lsrs	r3, r3, #22
 800389c:	b29a      	uxth	r2, r3
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b3e      	cmp	r3, #62	; 0x3e
 80038a8:	d91a      	bls.n	80038e0 <USB_ActivateEndpoint+0x298>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	221f      	movs	r2, #31
 80038b8:	4013      	ands	r3, r2
 80038ba:	d102      	bne.n	80038c2 <USB_ActivateEndpoint+0x27a>
 80038bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038be:	3b01      	subs	r3, #1
 80038c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	029b      	lsls	r3, r3, #10
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4a10      	ldr	r2, [pc, #64]	; (8003918 <USB_ActivateEndpoint+0x2d0>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	b29a      	uxth	r2, r3
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	801a      	strh	r2, [r3, #0]
 80038de:	e034      	b.n	800394a <USB_ActivateEndpoint+0x302>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d119      	bne.n	800391c <USB_ActivateEndpoint+0x2d4>
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <USB_ActivateEndpoint+0x2d0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	e027      	b.n	800394a <USB_ActivateEndpoint+0x302>
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	ffff898f 	.word	0xffff898f
 8003900:	ffff8080 	.word	0xffff8080
 8003904:	ffff8f8f 	.word	0xffff8f8f
 8003908:	ffff80c0 	.word	0xffff80c0
 800390c:	ffff8fbf 	.word	0xffff8fbf
 8003910:	00000404 	.word	0x00000404
 8003914:	00000406 	.word	0x00000406
 8003918:	ffff8000 	.word	0xffff8000
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	66bb      	str	r3, [r7, #104]	; 0x68
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2201      	movs	r2, #1
 800392a:	4013      	ands	r3, r2
 800392c:	d002      	beq.n	8003934 <USB_ActivateEndpoint+0x2ec>
 800392e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003930:	3301      	adds	r3, #1
 8003932:	66bb      	str	r3, [r7, #104]	; 0x68
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b29a      	uxth	r2, r3
 800393a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800393c:	b29b      	uxth	r3, r3
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	b29b      	uxth	r3, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	b29a      	uxth	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	18d2      	adds	r2, r2, r3
 8003954:	2122      	movs	r1, #34	; 0x22
 8003956:	187b      	adds	r3, r7, r1
 8003958:	8812      	ldrh	r2, [r2, #0]
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	187b      	adds	r3, r7, r1
 800395e:	881a      	ldrh	r2, [r3, #0]
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	01db      	lsls	r3, r3, #7
 8003964:	4013      	ands	r3, r2
 8003966:	d016      	beq.n	8003996 <USB_ActivateEndpoint+0x34e>
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	18d3      	adds	r3, r2, r3
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29a      	uxth	r2, r3
 8003976:	2020      	movs	r0, #32
 8003978:	183b      	adds	r3, r7, r0
 800397a:	49dd      	ldr	r1, [pc, #884]	; (8003cf0 <USB_ActivateEndpoint+0x6a8>)
 800397c:	400a      	ands	r2, r1
 800397e:	801a      	strh	r2, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	183a      	adds	r2, r7, r0
 800398c:	8812      	ldrh	r2, [r2, #0]
 800398e:	49d9      	ldr	r1, [pc, #868]	; (8003cf4 <USB_ActivateEndpoint+0x6ac>)
 8003990:	430a      	orrs	r2, r1
 8003992:	b292      	uxth	r2, r2
 8003994:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d125      	bne.n	80039ea <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	18d3      	adds	r3, r2, r3
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	201c      	movs	r0, #28
 80039ae:	183b      	adds	r3, r7, r0
 80039b0:	49d1      	ldr	r1, [pc, #836]	; (8003cf8 <USB_ActivateEndpoint+0x6b0>)
 80039b2:	400a      	ands	r2, r1
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	183b      	adds	r3, r7, r0
 80039b8:	183a      	adds	r2, r7, r0
 80039ba:	8812      	ldrh	r2, [r2, #0]
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	0149      	lsls	r1, r1, #5
 80039c0:	404a      	eors	r2, r1
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	183b      	adds	r3, r7, r0
 80039c6:	183a      	adds	r2, r7, r0
 80039c8:	8812      	ldrh	r2, [r2, #0]
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	0189      	lsls	r1, r1, #6
 80039ce:	404a      	eors	r2, r1
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	18d3      	adds	r3, r2, r3
 80039dc:	183a      	adds	r2, r7, r0
 80039de:	8812      	ldrh	r2, [r2, #0]
 80039e0:	49c6      	ldr	r1, [pc, #792]	; (8003cfc <USB_ActivateEndpoint+0x6b4>)
 80039e2:	430a      	orrs	r2, r1
 80039e4:	b292      	uxth	r2, r2
 80039e6:	801a      	strh	r2, [r3, #0]
 80039e8:	e1c2      	b.n	8003d70 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	18d3      	adds	r3, r2, r3
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	201e      	movs	r0, #30
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	49be      	ldr	r1, [pc, #760]	; (8003cf8 <USB_ActivateEndpoint+0x6b0>)
 80039fe:	400a      	ands	r2, r1
 8003a00:	801a      	strh	r2, [r3, #0]
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	183a      	adds	r2, r7, r0
 8003a06:	8812      	ldrh	r2, [r2, #0]
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	0189      	lsls	r1, r1, #6
 8003a0c:	404a      	eors	r2, r1
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	18d3      	adds	r3, r2, r3
 8003a1a:	183a      	adds	r2, r7, r0
 8003a1c:	8812      	ldrh	r2, [r2, #0]
 8003a1e:	49b7      	ldr	r1, [pc, #732]	; (8003cfc <USB_ActivateEndpoint+0x6b4>)
 8003a20:	430a      	orrs	r2, r1
 8003a22:	b292      	uxth	r2, r2
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	e1a3      	b.n	8003d70 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	78db      	ldrb	r3, [r3, #3]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d117      	bne.n	8003a60 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	18d3      	adds	r3, r2, r3
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	2062      	movs	r0, #98	; 0x62
 8003a40:	183b      	adds	r3, r7, r0
 8003a42:	49ab      	ldr	r1, [pc, #684]	; (8003cf0 <USB_ActivateEndpoint+0x6a8>)
 8003a44:	400a      	ands	r2, r1
 8003a46:	801a      	strh	r2, [r3, #0]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	18d3      	adds	r3, r2, r3
 8003a52:	183a      	adds	r2, r7, r0
 8003a54:	8812      	ldrh	r2, [r2, #0]
 8003a56:	49aa      	ldr	r1, [pc, #680]	; (8003d00 <USB_ActivateEndpoint+0x6b8>)
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	b292      	uxth	r2, r2
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	e016      	b.n	8003a8e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	18d3      	adds	r3, r2, r3
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	2064      	movs	r0, #100	; 0x64
 8003a70:	183b      	adds	r3, r7, r0
 8003a72:	49a4      	ldr	r1, [pc, #656]	; (8003d04 <USB_ActivateEndpoint+0x6bc>)
 8003a74:	400a      	ands	r2, r1
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	18d3      	adds	r3, r2, r3
 8003a82:	183a      	adds	r2, r7, r0
 8003a84:	8812      	ldrh	r2, [r2, #0]
 8003a86:	499d      	ldr	r1, [pc, #628]	; (8003cfc <USB_ActivateEndpoint+0x6b4>)
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	b292      	uxth	r2, r2
 8003a8c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2250      	movs	r2, #80	; 0x50
 8003a96:	5a9b      	ldrh	r3, [r3, r2]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	001a      	movs	r2, r3
 8003a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9e:	189b      	adds	r3, r3, r2
 8003aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	00da      	lsls	r2, r3, #3
 8003aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aaa:	18d3      	adds	r3, r2, r3
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	00d2      	lsls	r2, r2, #3
 8003ab0:	4694      	mov	ip, r2
 8003ab2:	4463      	add	r3, ip
 8003ab4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	891b      	ldrh	r3, [r3, #8]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	18db      	adds	r3, r3, r3
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	657b      	str	r3, [r7, #84]	; 0x54
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2250      	movs	r2, #80	; 0x50
 8003ace:	5a9b      	ldrh	r3, [r3, r2]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	00da      	lsls	r2, r3, #3
 8003ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae2:	18d3      	adds	r3, r2, r3
 8003ae4:	4a88      	ldr	r2, [pc, #544]	; (8003d08 <USB_ActivateEndpoint+0x6c0>)
 8003ae6:	4694      	mov	ip, r2
 8003ae8:	4463      	add	r3, ip
 8003aea:	653b      	str	r3, [r7, #80]	; 0x50
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	895b      	ldrh	r3, [r3, #10]
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	18db      	adds	r3, r3, r3
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003afa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d000      	beq.n	8003b06 <USB_ActivateEndpoint+0x4be>
 8003b04:	e087      	b.n	8003c16 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	18d2      	adds	r2, r2, r3
 8003b10:	2140      	movs	r1, #64	; 0x40
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	8812      	ldrh	r2, [r2, #0]
 8003b16:	801a      	strh	r2, [r3, #0]
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	881a      	ldrh	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	01db      	lsls	r3, r3, #7
 8003b20:	4013      	ands	r3, r2
 8003b22:	d016      	beq.n	8003b52 <USB_ActivateEndpoint+0x50a>
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	18d3      	adds	r3, r2, r3
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	203e      	movs	r0, #62	; 0x3e
 8003b34:	183b      	adds	r3, r7, r0
 8003b36:	496e      	ldr	r1, [pc, #440]	; (8003cf0 <USB_ActivateEndpoint+0x6a8>)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	801a      	strh	r2, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	18d3      	adds	r3, r2, r3
 8003b46:	183a      	adds	r2, r7, r0
 8003b48:	8812      	ldrh	r2, [r2, #0]
 8003b4a:	496a      	ldr	r1, [pc, #424]	; (8003cf4 <USB_ActivateEndpoint+0x6ac>)
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	b292      	uxth	r2, r2
 8003b50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	18d2      	adds	r2, r2, r3
 8003b5c:	213c      	movs	r1, #60	; 0x3c
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	8812      	ldrh	r2, [r2, #0]
 8003b62:	801a      	strh	r2, [r3, #0]
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	2240      	movs	r2, #64	; 0x40
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d016      	beq.n	8003b9c <USB_ActivateEndpoint+0x554>
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	18d3      	adds	r3, r2, r3
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	203a      	movs	r0, #58	; 0x3a
 8003b7e:	183b      	adds	r3, r7, r0
 8003b80:	495b      	ldr	r1, [pc, #364]	; (8003cf0 <USB_ActivateEndpoint+0x6a8>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	18d3      	adds	r3, r2, r3
 8003b90:	183a      	adds	r2, r7, r0
 8003b92:	8812      	ldrh	r2, [r2, #0]
 8003b94:	495d      	ldr	r1, [pc, #372]	; (8003d0c <USB_ActivateEndpoint+0x6c4>)
 8003b96:	430a      	orrs	r2, r1
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	18d3      	adds	r3, r2, r3
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	2038      	movs	r0, #56	; 0x38
 8003bac:	183b      	adds	r3, r7, r0
 8003bae:	4952      	ldr	r1, [pc, #328]	; (8003cf8 <USB_ActivateEndpoint+0x6b0>)
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	183b      	adds	r3, r7, r0
 8003bb6:	183a      	adds	r2, r7, r0
 8003bb8:	8812      	ldrh	r2, [r2, #0]
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	0149      	lsls	r1, r1, #5
 8003bbe:	404a      	eors	r2, r1
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	183b      	adds	r3, r7, r0
 8003bc4:	183a      	adds	r2, r7, r0
 8003bc6:	8812      	ldrh	r2, [r2, #0]
 8003bc8:	2180      	movs	r1, #128	; 0x80
 8003bca:	0189      	lsls	r1, r1, #6
 8003bcc:	404a      	eors	r2, r1
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	18d3      	adds	r3, r2, r3
 8003bda:	183a      	adds	r2, r7, r0
 8003bdc:	8812      	ldrh	r2, [r2, #0]
 8003bde:	4947      	ldr	r1, [pc, #284]	; (8003cfc <USB_ActivateEndpoint+0x6b4>)
 8003be0:	430a      	orrs	r2, r1
 8003be2:	b292      	uxth	r2, r2
 8003be4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	18d3      	adds	r3, r2, r3
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	2036      	movs	r0, #54	; 0x36
 8003bf6:	183b      	adds	r3, r7, r0
 8003bf8:	4945      	ldr	r1, [pc, #276]	; (8003d10 <USB_ActivateEndpoint+0x6c8>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	18d3      	adds	r3, r2, r3
 8003c08:	183a      	adds	r2, r7, r0
 8003c0a:	8812      	ldrh	r2, [r2, #0]
 8003c0c:	493b      	ldr	r1, [pc, #236]	; (8003cfc <USB_ActivateEndpoint+0x6b4>)
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	b292      	uxth	r2, r2
 8003c12:	801a      	strh	r2, [r3, #0]
 8003c14:	e0ac      	b.n	8003d70 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	18d2      	adds	r2, r2, r3
 8003c20:	214e      	movs	r1, #78	; 0x4e
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	8812      	ldrh	r2, [r2, #0]
 8003c26:	801a      	strh	r2, [r3, #0]
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	881a      	ldrh	r2, [r3, #0]
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	01db      	lsls	r3, r3, #7
 8003c30:	4013      	ands	r3, r2
 8003c32:	d016      	beq.n	8003c62 <USB_ActivateEndpoint+0x61a>
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	18d3      	adds	r3, r2, r3
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	204c      	movs	r0, #76	; 0x4c
 8003c44:	183b      	adds	r3, r7, r0
 8003c46:	492a      	ldr	r1, [pc, #168]	; (8003cf0 <USB_ActivateEndpoint+0x6a8>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	801a      	strh	r2, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	18d3      	adds	r3, r2, r3
 8003c56:	183a      	adds	r2, r7, r0
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	4926      	ldr	r1, [pc, #152]	; (8003cf4 <USB_ActivateEndpoint+0x6ac>)
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	b292      	uxth	r2, r2
 8003c60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	18d2      	adds	r2, r2, r3
 8003c6c:	214a      	movs	r1, #74	; 0x4a
 8003c6e:	187b      	adds	r3, r7, r1
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	801a      	strh	r2, [r3, #0]
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d016      	beq.n	8003cac <USB_ActivateEndpoint+0x664>
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	18d3      	adds	r3, r2, r3
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	2048      	movs	r0, #72	; 0x48
 8003c8e:	183b      	adds	r3, r7, r0
 8003c90:	4917      	ldr	r1, [pc, #92]	; (8003cf0 <USB_ActivateEndpoint+0x6a8>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	18d3      	adds	r3, r2, r3
 8003ca0:	183a      	adds	r2, r7, r0
 8003ca2:	8812      	ldrh	r2, [r2, #0]
 8003ca4:	4919      	ldr	r1, [pc, #100]	; (8003d0c <USB_ActivateEndpoint+0x6c4>)
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	78db      	ldrb	r3, [r3, #3]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d02f      	beq.n	8003d14 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	18d3      	adds	r3, r2, r3
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	2044      	movs	r0, #68	; 0x44
 8003cc4:	183b      	adds	r3, r7, r0
 8003cc6:	4912      	ldr	r1, [pc, #72]	; (8003d10 <USB_ActivateEndpoint+0x6c8>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	801a      	strh	r2, [r3, #0]
 8003ccc:	183b      	adds	r3, r7, r0
 8003cce:	183a      	adds	r2, r7, r0
 8003cd0:	8812      	ldrh	r2, [r2, #0]
 8003cd2:	2120      	movs	r1, #32
 8003cd4:	404a      	eors	r2, r1
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	18d3      	adds	r3, r2, r3
 8003ce2:	183a      	adds	r2, r7, r0
 8003ce4:	8812      	ldrh	r2, [r2, #0]
 8003ce6:	4905      	ldr	r1, [pc, #20]	; (8003cfc <USB_ActivateEndpoint+0x6b4>)
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	b292      	uxth	r2, r2
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	e028      	b.n	8003d42 <USB_ActivateEndpoint+0x6fa>
 8003cf0:	ffff8f8f 	.word	0xffff8f8f
 8003cf4:	ffffc080 	.word	0xffffc080
 8003cf8:	ffffbf8f 	.word	0xffffbf8f
 8003cfc:	ffff8080 	.word	0xffff8080
 8003d00:	ffff8180 	.word	0xffff8180
 8003d04:	ffff8e8f 	.word	0xffff8e8f
 8003d08:	00000404 	.word	0x00000404
 8003d0c:	ffff80c0 	.word	0xffff80c0
 8003d10:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	18d3      	adds	r3, r2, r3
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	2046      	movs	r0, #70	; 0x46
 8003d24:	183b      	adds	r3, r7, r0
 8003d26:	4916      	ldr	r1, [pc, #88]	; (8003d80 <USB_ActivateEndpoint+0x738>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	18d3      	adds	r3, r2, r3
 8003d36:	183a      	adds	r2, r7, r0
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	4912      	ldr	r1, [pc, #72]	; (8003d84 <USB_ActivateEndpoint+0x73c>)
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	18d3      	adds	r3, r2, r3
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	2042      	movs	r0, #66	; 0x42
 8003d52:	183b      	adds	r3, r7, r0
 8003d54:	490c      	ldr	r1, [pc, #48]	; (8003d88 <USB_ActivateEndpoint+0x740>)
 8003d56:	400a      	ands	r2, r1
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	183a      	adds	r2, r7, r0
 8003d66:	8812      	ldrh	r2, [r2, #0]
 8003d68:	4906      	ldr	r1, [pc, #24]	; (8003d84 <USB_ActivateEndpoint+0x73c>)
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003d70:	236f      	movs	r3, #111	; 0x6f
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	781b      	ldrb	r3, [r3, #0]
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b01c      	add	sp, #112	; 0x70
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	ffff8fbf 	.word	0xffff8fbf
 8003d84:	ffff8080 	.word	0xffff8080
 8003d88:	ffffbf8f 	.word	0xffffbf8f

08003d8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08c      	sub	sp, #48	; 0x30
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	7b1b      	ldrb	r3, [r3, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d000      	beq.n	8003da0 <USB_DeactivateEndpoint+0x14>
 8003d9e:	e07e      	b.n	8003e9e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d03c      	beq.n	8003e22 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	18d2      	adds	r2, r2, r3
 8003db2:	210c      	movs	r1, #12
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	8812      	ldrh	r2, [r2, #0]
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	2240      	movs	r2, #64	; 0x40
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d016      	beq.n	8003df2 <USB_DeactivateEndpoint+0x66>
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	18d3      	adds	r3, r2, r3
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	200a      	movs	r0, #10
 8003dd4:	183b      	adds	r3, r7, r0
 8003dd6:	49c7      	ldr	r1, [pc, #796]	; (80040f4 <USB_DeactivateEndpoint+0x368>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	18d3      	adds	r3, r2, r3
 8003de6:	183a      	adds	r2, r7, r0
 8003de8:	8812      	ldrh	r2, [r2, #0]
 8003dea:	49c3      	ldr	r1, [pc, #780]	; (80040f8 <USB_DeactivateEndpoint+0x36c>)
 8003dec:	430a      	orrs	r2, r1
 8003dee:	b292      	uxth	r2, r2
 8003df0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	18d3      	adds	r3, r2, r3
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	2008      	movs	r0, #8
 8003e02:	183b      	adds	r3, r7, r0
 8003e04:	49bd      	ldr	r1, [pc, #756]	; (80040fc <USB_DeactivateEndpoint+0x370>)
 8003e06:	400a      	ands	r2, r1
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	18d3      	adds	r3, r2, r3
 8003e14:	183a      	adds	r2, r7, r0
 8003e16:	8812      	ldrh	r2, [r2, #0]
 8003e18:	49b9      	ldr	r1, [pc, #740]	; (8004100 <USB_DeactivateEndpoint+0x374>)
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	b292      	uxth	r2, r2
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e163      	b.n	80040ea <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	18d2      	adds	r2, r2, r3
 8003e2c:	2112      	movs	r1, #18
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	8812      	ldrh	r2, [r2, #0]
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	01db      	lsls	r3, r3, #7
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d016      	beq.n	8003e6e <USB_DeactivateEndpoint+0xe2>
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	18d3      	adds	r3, r2, r3
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	2010      	movs	r0, #16
 8003e50:	183b      	adds	r3, r7, r0
 8003e52:	49a8      	ldr	r1, [pc, #672]	; (80040f4 <USB_DeactivateEndpoint+0x368>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	18d3      	adds	r3, r2, r3
 8003e62:	183a      	adds	r2, r7, r0
 8003e64:	8812      	ldrh	r2, [r2, #0]
 8003e66:	49a7      	ldr	r1, [pc, #668]	; (8004104 <USB_DeactivateEndpoint+0x378>)
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	b292      	uxth	r2, r2
 8003e6c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	18d3      	adds	r3, r2, r3
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	200e      	movs	r0, #14
 8003e7e:	183b      	adds	r3, r7, r0
 8003e80:	49a1      	ldr	r1, [pc, #644]	; (8004108 <USB_DeactivateEndpoint+0x37c>)
 8003e82:	400a      	ands	r2, r1
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	18d3      	adds	r3, r2, r3
 8003e90:	183a      	adds	r2, r7, r0
 8003e92:	8812      	ldrh	r2, [r2, #0]
 8003e94:	499a      	ldr	r1, [pc, #616]	; (8004100 <USB_DeactivateEndpoint+0x374>)
 8003e96:	430a      	orrs	r2, r1
 8003e98:	b292      	uxth	r2, r2
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e125      	b.n	80040ea <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d000      	beq.n	8003ea8 <USB_DeactivateEndpoint+0x11c>
 8003ea6:	e090      	b.n	8003fca <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	18d2      	adds	r2, r2, r3
 8003eb2:	2120      	movs	r1, #32
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	8812      	ldrh	r2, [r2, #0]
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	881a      	ldrh	r2, [r3, #0]
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	01db      	lsls	r3, r3, #7
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d016      	beq.n	8003ef4 <USB_DeactivateEndpoint+0x168>
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	18d3      	adds	r3, r2, r3
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	201e      	movs	r0, #30
 8003ed6:	183b      	adds	r3, r7, r0
 8003ed8:	4986      	ldr	r1, [pc, #536]	; (80040f4 <USB_DeactivateEndpoint+0x368>)
 8003eda:	400a      	ands	r2, r1
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	18d3      	adds	r3, r2, r3
 8003ee8:	183a      	adds	r2, r7, r0
 8003eea:	8812      	ldrh	r2, [r2, #0]
 8003eec:	4985      	ldr	r1, [pc, #532]	; (8004104 <USB_DeactivateEndpoint+0x378>)
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	18d2      	adds	r2, r2, r3
 8003efe:	211c      	movs	r1, #28
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	8812      	ldrh	r2, [r2, #0]
 8003f04:	801a      	strh	r2, [r3, #0]
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	2240      	movs	r2, #64	; 0x40
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d016      	beq.n	8003f3e <USB_DeactivateEndpoint+0x1b2>
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	18d3      	adds	r3, r2, r3
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	201a      	movs	r0, #26
 8003f20:	183b      	adds	r3, r7, r0
 8003f22:	4974      	ldr	r1, [pc, #464]	; (80040f4 <USB_DeactivateEndpoint+0x368>)
 8003f24:	400a      	ands	r2, r1
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	18d3      	adds	r3, r2, r3
 8003f32:	183a      	adds	r2, r7, r0
 8003f34:	8812      	ldrh	r2, [r2, #0]
 8003f36:	4970      	ldr	r1, [pc, #448]	; (80040f8 <USB_DeactivateEndpoint+0x36c>)
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	18d3      	adds	r3, r2, r3
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	2018      	movs	r0, #24
 8003f4e:	183b      	adds	r3, r7, r0
 8003f50:	4968      	ldr	r1, [pc, #416]	; (80040f4 <USB_DeactivateEndpoint+0x368>)
 8003f52:	400a      	ands	r2, r1
 8003f54:	801a      	strh	r2, [r3, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	18d3      	adds	r3, r2, r3
 8003f60:	183a      	adds	r2, r7, r0
 8003f62:	8812      	ldrh	r2, [r2, #0]
 8003f64:	4964      	ldr	r1, [pc, #400]	; (80040f8 <USB_DeactivateEndpoint+0x36c>)
 8003f66:	430a      	orrs	r2, r1
 8003f68:	b292      	uxth	r2, r2
 8003f6a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	2016      	movs	r0, #22
 8003f7c:	183b      	adds	r3, r7, r0
 8003f7e:	4962      	ldr	r1, [pc, #392]	; (8004108 <USB_DeactivateEndpoint+0x37c>)
 8003f80:	400a      	ands	r2, r1
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	18d3      	adds	r3, r2, r3
 8003f8e:	183a      	adds	r2, r7, r0
 8003f90:	8812      	ldrh	r2, [r2, #0]
 8003f92:	495b      	ldr	r1, [pc, #364]	; (8004100 <USB_DeactivateEndpoint+0x374>)
 8003f94:	430a      	orrs	r2, r1
 8003f96:	b292      	uxth	r2, r2
 8003f98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	18d3      	adds	r3, r2, r3
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	2014      	movs	r0, #20
 8003faa:	183b      	adds	r3, r7, r0
 8003fac:	4953      	ldr	r1, [pc, #332]	; (80040fc <USB_DeactivateEndpoint+0x370>)
 8003fae:	400a      	ands	r2, r1
 8003fb0:	801a      	strh	r2, [r3, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	18d3      	adds	r3, r2, r3
 8003fbc:	183a      	adds	r2, r7, r0
 8003fbe:	8812      	ldrh	r2, [r2, #0]
 8003fc0:	494f      	ldr	r1, [pc, #316]	; (8004100 <USB_DeactivateEndpoint+0x374>)
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	b292      	uxth	r2, r2
 8003fc6:	801a      	strh	r2, [r3, #0]
 8003fc8:	e08f      	b.n	80040ea <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	18d2      	adds	r2, r2, r3
 8003fd4:	212e      	movs	r1, #46	; 0x2e
 8003fd6:	187b      	adds	r3, r7, r1
 8003fd8:	8812      	ldrh	r2, [r2, #0]
 8003fda:	801a      	strh	r2, [r3, #0]
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	881a      	ldrh	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	01db      	lsls	r3, r3, #7
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d016      	beq.n	8004016 <USB_DeactivateEndpoint+0x28a>
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	18d3      	adds	r3, r2, r3
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	202c      	movs	r0, #44	; 0x2c
 8003ff8:	183b      	adds	r3, r7, r0
 8003ffa:	493e      	ldr	r1, [pc, #248]	; (80040f4 <USB_DeactivateEndpoint+0x368>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	801a      	strh	r2, [r3, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	18d3      	adds	r3, r2, r3
 800400a:	183a      	adds	r2, r7, r0
 800400c:	8812      	ldrh	r2, [r2, #0]
 800400e:	493d      	ldr	r1, [pc, #244]	; (8004104 <USB_DeactivateEndpoint+0x378>)
 8004010:	430a      	orrs	r2, r1
 8004012:	b292      	uxth	r2, r2
 8004014:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	18d2      	adds	r2, r2, r3
 8004020:	212a      	movs	r1, #42	; 0x2a
 8004022:	187b      	adds	r3, r7, r1
 8004024:	8812      	ldrh	r2, [r2, #0]
 8004026:	801a      	strh	r2, [r3, #0]
 8004028:	187b      	adds	r3, r7, r1
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	2240      	movs	r2, #64	; 0x40
 800402e:	4013      	ands	r3, r2
 8004030:	d016      	beq.n	8004060 <USB_DeactivateEndpoint+0x2d4>
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	18d3      	adds	r3, r2, r3
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b29a      	uxth	r2, r3
 8004040:	2028      	movs	r0, #40	; 0x28
 8004042:	183b      	adds	r3, r7, r0
 8004044:	492b      	ldr	r1, [pc, #172]	; (80040f4 <USB_DeactivateEndpoint+0x368>)
 8004046:	400a      	ands	r2, r1
 8004048:	801a      	strh	r2, [r3, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	18d3      	adds	r3, r2, r3
 8004054:	183a      	adds	r2, r7, r0
 8004056:	8812      	ldrh	r2, [r2, #0]
 8004058:	4927      	ldr	r1, [pc, #156]	; (80040f8 <USB_DeactivateEndpoint+0x36c>)
 800405a:	430a      	orrs	r2, r1
 800405c:	b292      	uxth	r2, r2
 800405e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29a      	uxth	r2, r3
 800406e:	2026      	movs	r0, #38	; 0x26
 8004070:	183b      	adds	r3, r7, r0
 8004072:	4920      	ldr	r1, [pc, #128]	; (80040f4 <USB_DeactivateEndpoint+0x368>)
 8004074:	400a      	ands	r2, r1
 8004076:	801a      	strh	r2, [r3, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	18d3      	adds	r3, r2, r3
 8004082:	183a      	adds	r2, r7, r0
 8004084:	8812      	ldrh	r2, [r2, #0]
 8004086:	491f      	ldr	r1, [pc, #124]	; (8004104 <USB_DeactivateEndpoint+0x378>)
 8004088:	430a      	orrs	r2, r1
 800408a:	b292      	uxth	r2, r2
 800408c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	18d3      	adds	r3, r2, r3
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29a      	uxth	r2, r3
 800409c:	2024      	movs	r0, #36	; 0x24
 800409e:	183b      	adds	r3, r7, r0
 80040a0:	4916      	ldr	r1, [pc, #88]	; (80040fc <USB_DeactivateEndpoint+0x370>)
 80040a2:	400a      	ands	r2, r1
 80040a4:	801a      	strh	r2, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	18d3      	adds	r3, r2, r3
 80040b0:	183a      	adds	r2, r7, r0
 80040b2:	8812      	ldrh	r2, [r2, #0]
 80040b4:	4912      	ldr	r1, [pc, #72]	; (8004100 <USB_DeactivateEndpoint+0x374>)
 80040b6:	430a      	orrs	r2, r1
 80040b8:	b292      	uxth	r2, r2
 80040ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	2022      	movs	r0, #34	; 0x22
 80040cc:	183b      	adds	r3, r7, r0
 80040ce:	490e      	ldr	r1, [pc, #56]	; (8004108 <USB_DeactivateEndpoint+0x37c>)
 80040d0:	400a      	ands	r2, r1
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	18d3      	adds	r3, r2, r3
 80040de:	183a      	adds	r2, r7, r0
 80040e0:	8812      	ldrh	r2, [r2, #0]
 80040e2:	4907      	ldr	r1, [pc, #28]	; (8004100 <USB_DeactivateEndpoint+0x374>)
 80040e4:	430a      	orrs	r2, r1
 80040e6:	b292      	uxth	r2, r2
 80040e8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b00c      	add	sp, #48	; 0x30
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	ffff8f8f 	.word	0xffff8f8f
 80040f8:	ffff80c0 	.word	0xffff80c0
 80040fc:	ffff8fbf 	.word	0xffff8fbf
 8004100:	ffff8080 	.word	0xffff8080
 8004104:	ffffc080 	.word	0xffffc080
 8004108:	ffffbf8f 	.word	0xffffbf8f

0800410c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b0c3      	sub	sp, #268	; 0x10c
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d001      	beq.n	8004122 <USB_EPStartXfer+0x16>
 800411e:	f000 fd2d 	bl	8004b7c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	429a      	cmp	r2, r3
 800412c:	d905      	bls.n	800413a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	1d7a      	adds	r2, r7, #5
 8004134:	32ff      	adds	r2, #255	; 0xff
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e004      	b.n	8004144 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	1d7a      	adds	r2, r7, #5
 8004140:	32ff      	adds	r2, #255	; 0xff
 8004142:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	7b1b      	ldrb	r3, [r3, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d125      	bne.n	8004198 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6959      	ldr	r1, [r3, #20]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	88da      	ldrh	r2, [r3, #6]
 8004154:	1d7b      	adds	r3, r7, #5
 8004156:	33ff      	adds	r3, #255	; 0xff
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f001 fa47 	bl	80055f0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2250      	movs	r2, #80	; 0x50
 800416a:	5a9b      	ldrh	r3, [r3, r2]
 800416c:	b29b      	uxth	r3, r3
 800416e:	001a      	movs	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	189b      	adds	r3, r3, r2
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	00da      	lsls	r2, r3, #3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	18d3      	adds	r3, r2, r3
 8004180:	4ad7      	ldr	r2, [pc, #860]	; (80044e0 <USB_EPStartXfer+0x3d4>)
 8004182:	4694      	mov	ip, r2
 8004184:	4463      	add	r3, ip
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	1d7b      	adds	r3, r7, #5
 800418a:	33ff      	adds	r3, #255	; 0xff
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	801a      	strh	r2, [r3, #0]
 8004194:	f000 fccd 	bl	8004b32 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	78db      	ldrb	r3, [r3, #3]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d000      	beq.n	80041a2 <USB_EPStartXfer+0x96>
 80041a0:	e362      	b.n	8004868 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6a1a      	ldr	r2, [r3, #32]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d800      	bhi.n	80041b0 <USB_EPStartXfer+0xa4>
 80041ae:	e309      	b.n	80047c4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	18d3      	adds	r3, r2, r3
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	2056      	movs	r0, #86	; 0x56
 80041c0:	183b      	adds	r3, r7, r0
 80041c2:	49c8      	ldr	r1, [pc, #800]	; (80044e4 <USB_EPStartXfer+0x3d8>)
 80041c4:	400a      	ands	r2, r1
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	18d3      	adds	r3, r2, r3
 80041d2:	183a      	adds	r2, r7, r0
 80041d4:	8812      	ldrh	r2, [r2, #0]
 80041d6:	49c4      	ldr	r1, [pc, #784]	; (80044e8 <USB_EPStartXfer+0x3dc>)
 80041d8:	430a      	orrs	r2, r1
 80041da:	b292      	uxth	r2, r2
 80041dc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6a1a      	ldr	r2, [r3, #32]
 80041e2:	1d7b      	adds	r3, r7, #5
 80041e4:	33ff      	adds	r3, #255	; 0xff
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	1ad2      	subs	r2, r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	001a      	movs	r2, r3
 80041fe:	2340      	movs	r3, #64	; 0x40
 8004200:	4013      	ands	r3, r2
 8004202:	d100      	bne.n	8004206 <USB_EPStartXfer+0xfa>
 8004204:	e176      	b.n	80044f4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d000      	beq.n	8004214 <USB_EPStartXfer+0x108>
 8004212:	e074      	b.n	80042fe <USB_EPStartXfer+0x1f2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2250      	movs	r2, #80	; 0x50
 800421c:	5a9b      	ldrh	r3, [r3, r2]
 800421e:	b29b      	uxth	r3, r3
 8004220:	001a      	movs	r2, r3
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	189b      	adds	r3, r3, r2
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	00da      	lsls	r2, r3, #3
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	18d3      	adds	r3, r2, r3
 8004232:	4aae      	ldr	r2, [pc, #696]	; (80044ec <USB_EPStartXfer+0x3e0>)
 8004234:	4694      	mov	ip, r2
 8004236:	4463      	add	r3, ip
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	059b      	lsls	r3, r3, #22
 8004242:	0d9b      	lsrs	r3, r3, #22
 8004244:	b29a      	uxth	r2, r3
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	801a      	strh	r2, [r3, #0]
 800424a:	1d7b      	adds	r3, r7, #5
 800424c:	33ff      	adds	r3, #255	; 0xff
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b3e      	cmp	r3, #62	; 0x3e
 8004252:	d924      	bls.n	800429e <USB_EPStartXfer+0x192>
 8004254:	1d7b      	adds	r3, r7, #5
 8004256:	33ff      	adds	r3, #255	; 0xff
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	1c7a      	adds	r2, r7, #1
 800425e:	32ff      	adds	r2, #255	; 0xff
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	1d7b      	adds	r3, r7, #5
 8004264:	33ff      	adds	r3, #255	; 0xff
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	221f      	movs	r2, #31
 800426a:	4013      	ands	r3, r2
 800426c:	d106      	bne.n	800427c <USB_EPStartXfer+0x170>
 800426e:	1c7b      	adds	r3, r7, #1
 8004270:	33ff      	adds	r3, #255	; 0xff
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3b01      	subs	r3, #1
 8004276:	1c7a      	adds	r2, r7, #1
 8004278:	32ff      	adds	r2, #255	; 0xff
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29a      	uxth	r2, r3
 8004282:	1c7b      	adds	r3, r7, #1
 8004284:	33ff      	adds	r3, #255	; 0xff
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	029b      	lsls	r3, r3, #10
 800428c:	b29b      	uxth	r3, r3
 800428e:	4313      	orrs	r3, r2
 8004290:	b29b      	uxth	r3, r3
 8004292:	4a97      	ldr	r2, [pc, #604]	; (80044f0 <USB_EPStartXfer+0x3e4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	b29a      	uxth	r2, r3
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	801a      	strh	r2, [r3, #0]
 800429c:	e04a      	b.n	8004334 <USB_EPStartXfer+0x228>
 800429e:	1d7b      	adds	r3, r7, #5
 80042a0:	33ff      	adds	r3, #255	; 0xff
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d108      	bne.n	80042ba <USB_EPStartXfer+0x1ae>
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	4a90      	ldr	r2, [pc, #576]	; (80044f0 <USB_EPStartXfer+0x3e4>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	e03c      	b.n	8004334 <USB_EPStartXfer+0x228>
 80042ba:	1d7b      	adds	r3, r7, #5
 80042bc:	33ff      	adds	r3, #255	; 0xff
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	1c7a      	adds	r2, r7, #1
 80042c4:	32ff      	adds	r2, #255	; 0xff
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	1d7b      	adds	r3, r7, #5
 80042ca:	33ff      	adds	r3, #255	; 0xff
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2201      	movs	r2, #1
 80042d0:	4013      	ands	r3, r2
 80042d2:	d006      	beq.n	80042e2 <USB_EPStartXfer+0x1d6>
 80042d4:	1c7b      	adds	r3, r7, #1
 80042d6:	33ff      	adds	r3, #255	; 0xff
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3301      	adds	r3, #1
 80042dc:	1c7a      	adds	r2, r7, #1
 80042de:	32ff      	adds	r2, #255	; 0xff
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	1c7b      	adds	r3, r7, #1
 80042ea:	33ff      	adds	r3, #255	; 0xff
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	801a      	strh	r2, [r3, #0]
 80042fc:	e01a      	b.n	8004334 <USB_EPStartXfer+0x228>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d116      	bne.n	8004334 <USB_EPStartXfer+0x228>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2250      	movs	r2, #80	; 0x50
 800430a:	5a9b      	ldrh	r3, [r3, r2]
 800430c:	b29b      	uxth	r3, r3
 800430e:	001a      	movs	r2, r3
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	189b      	adds	r3, r3, r2
 8004314:	633b      	str	r3, [r7, #48]	; 0x30
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	00da      	lsls	r2, r3, #3
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	4a72      	ldr	r2, [pc, #456]	; (80044ec <USB_EPStartXfer+0x3e0>)
 8004322:	4694      	mov	ip, r2
 8004324:	4463      	add	r3, ip
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004328:	1d7b      	adds	r3, r7, #5
 800432a:	33ff      	adds	r3, #255	; 0xff
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b29a      	uxth	r2, r3
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004334:	2076      	movs	r0, #118	; 0x76
 8004336:	183b      	adds	r3, r7, r0
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	8952      	ldrh	r2, [r2, #10]
 800433c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6959      	ldr	r1, [r3, #20]
 8004342:	1d7b      	adds	r3, r7, #5
 8004344:	33ff      	adds	r3, #255	; 0xff
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b29c      	uxth	r4, r3
 800434a:	183b      	adds	r3, r7, r0
 800434c:	881a      	ldrh	r2, [r3, #0]
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	0023      	movs	r3, r4
 8004352:	f001 f94d 	bl	80055f0 <USB_WritePMA>
            ep->xfer_buff += len;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	1d7b      	adds	r3, r7, #5
 800435c:	33ff      	adds	r3, #255	; 0xff
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	18d2      	adds	r2, r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6a1a      	ldr	r2, [r3, #32]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	429a      	cmp	r2, r3
 8004370:	d908      	bls.n	8004384 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	1d7b      	adds	r3, r7, #5
 8004378:	33ff      	adds	r3, #255	; 0xff
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1ad2      	subs	r2, r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	621a      	str	r2, [r3, #32]
 8004382:	e007      	b.n	8004394 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	1d7a      	adds	r2, r7, #5
 800438a:	32ff      	adds	r2, #255	; 0xff
 800438c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2200      	movs	r2, #0
 8004392:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	785b      	ldrb	r3, [r3, #1]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d000      	beq.n	800439e <USB_EPStartXfer+0x292>
 800439c:	e070      	b.n	8004480 <USB_EPStartXfer+0x374>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2250      	movs	r2, #80	; 0x50
 80043a6:	5a9b      	ldrh	r3, [r3, r2]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	001a      	movs	r2, r3
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	00da      	lsls	r2, r3, #3
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	18d3      	adds	r3, r2, r3
 80043bc:	4a48      	ldr	r2, [pc, #288]	; (80044e0 <USB_EPStartXfer+0x3d4>)
 80043be:	4694      	mov	ip, r2
 80043c0:	4463      	add	r3, ip
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	059b      	lsls	r3, r3, #22
 80043cc:	0d9b      	lsrs	r3, r3, #22
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	1d7b      	adds	r3, r7, #5
 80043d6:	33ff      	adds	r3, #255	; 0xff
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b3e      	cmp	r3, #62	; 0x3e
 80043dc:	d922      	bls.n	8004424 <USB_EPStartXfer+0x318>
 80043de:	1d7b      	adds	r3, r7, #5
 80043e0:	33ff      	adds	r3, #255	; 0xff
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	21fc      	movs	r1, #252	; 0xfc
 80043e8:	187a      	adds	r2, r7, r1
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	1d7b      	adds	r3, r7, #5
 80043ee:	33ff      	adds	r3, #255	; 0xff
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	221f      	movs	r2, #31
 80043f4:	4013      	ands	r3, r2
 80043f6:	d104      	bne.n	8004402 <USB_EPStartXfer+0x2f6>
 80043f8:	187b      	adds	r3, r7, r1
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	187a      	adds	r2, r7, r1
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29a      	uxth	r2, r3
 8004408:	23fc      	movs	r3, #252	; 0xfc
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	029b      	lsls	r3, r3, #10
 8004412:	b29b      	uxth	r3, r3
 8004414:	4313      	orrs	r3, r2
 8004416:	b29b      	uxth	r3, r3
 8004418:	4a35      	ldr	r2, [pc, #212]	; (80044f0 <USB_EPStartXfer+0x3e4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	b29a      	uxth	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	e04a      	b.n	80044ba <USB_EPStartXfer+0x3ae>
 8004424:	1d7b      	adds	r3, r7, #5
 8004426:	33ff      	adds	r3, #255	; 0xff
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <USB_EPStartXfer+0x334>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b29b      	uxth	r3, r3
 8004434:	4a2e      	ldr	r2, [pc, #184]	; (80044f0 <USB_EPStartXfer+0x3e4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	b29a      	uxth	r2, r3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	e03c      	b.n	80044ba <USB_EPStartXfer+0x3ae>
 8004440:	1d7b      	adds	r3, r7, #5
 8004442:	33ff      	adds	r3, #255	; 0xff
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	21fc      	movs	r1, #252	; 0xfc
 800444a:	187a      	adds	r2, r7, r1
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	1d7b      	adds	r3, r7, #5
 8004450:	33ff      	adds	r3, #255	; 0xff
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2201      	movs	r2, #1
 8004456:	4013      	ands	r3, r2
 8004458:	d004      	beq.n	8004464 <USB_EPStartXfer+0x358>
 800445a:	187b      	adds	r3, r7, r1
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	187a      	adds	r2, r7, r1
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29a      	uxth	r2, r3
 800446a:	23fc      	movs	r3, #252	; 0xfc
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	029b      	lsls	r3, r3, #10
 8004474:	b29b      	uxth	r3, r3
 8004476:	4313      	orrs	r3, r2
 8004478:	b29a      	uxth	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	e01c      	b.n	80044ba <USB_EPStartXfer+0x3ae>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	785b      	ldrb	r3, [r3, #1]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d118      	bne.n	80044ba <USB_EPStartXfer+0x3ae>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	623b      	str	r3, [r7, #32]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2250      	movs	r2, #80	; 0x50
 8004490:	5a9b      	ldrh	r3, [r3, r2]
 8004492:	b29b      	uxth	r3, r3
 8004494:	001a      	movs	r2, r3
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	189b      	adds	r3, r3, r2
 800449a:	623b      	str	r3, [r7, #32]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	00da      	lsls	r2, r3, #3
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	18d3      	adds	r3, r2, r3
 80044a6:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <USB_EPStartXfer+0x3d4>)
 80044a8:	4694      	mov	ip, r2
 80044aa:	4463      	add	r3, ip
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	1d7b      	adds	r3, r7, #5
 80044b0:	33ff      	adds	r3, #255	; 0xff
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80044ba:	2076      	movs	r0, #118	; 0x76
 80044bc:	183b      	adds	r3, r7, r0
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	8912      	ldrh	r2, [r2, #8]
 80044c2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6959      	ldr	r1, [r3, #20]
 80044c8:	1d7b      	adds	r3, r7, #5
 80044ca:	33ff      	adds	r3, #255	; 0xff
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	b29c      	uxth	r4, r3
 80044d0:	183b      	adds	r3, r7, r0
 80044d2:	881a      	ldrh	r2, [r3, #0]
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	0023      	movs	r3, r4
 80044d8:	f001 f88a 	bl	80055f0 <USB_WritePMA>
 80044dc:	e329      	b.n	8004b32 <USB_EPStartXfer+0xa26>
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	00000402 	.word	0x00000402
 80044e4:	ffff8f8f 	.word	0xffff8f8f
 80044e8:	ffff8180 	.word	0xffff8180
 80044ec:	00000406 	.word	0x00000406
 80044f0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d000      	beq.n	80044fe <USB_EPStartXfer+0x3f2>
 80044fc:	e070      	b.n	80045e0 <USB_EPStartXfer+0x4d4>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	64bb      	str	r3, [r7, #72]	; 0x48
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2250      	movs	r2, #80	; 0x50
 8004506:	5a9b      	ldrh	r3, [r3, r2]
 8004508:	b29b      	uxth	r3, r3
 800450a:	001a      	movs	r2, r3
 800450c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450e:	189b      	adds	r3, r3, r2
 8004510:	64bb      	str	r3, [r7, #72]	; 0x48
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	00da      	lsls	r2, r3, #3
 8004518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451a:	18d3      	adds	r3, r2, r3
 800451c:	4acd      	ldr	r2, [pc, #820]	; (8004854 <USB_EPStartXfer+0x748>)
 800451e:	4694      	mov	ip, r2
 8004520:	4463      	add	r3, ip
 8004522:	647b      	str	r3, [r7, #68]	; 0x44
 8004524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	059b      	lsls	r3, r3, #22
 800452c:	0d9b      	lsrs	r3, r3, #22
 800452e:	b29a      	uxth	r2, r3
 8004530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004532:	801a      	strh	r2, [r3, #0]
 8004534:	1d7b      	adds	r3, r7, #5
 8004536:	33ff      	adds	r3, #255	; 0xff
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b3e      	cmp	r3, #62	; 0x3e
 800453c:	d922      	bls.n	8004584 <USB_EPStartXfer+0x478>
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	33ff      	adds	r3, #255	; 0xff
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	21f8      	movs	r1, #248	; 0xf8
 8004548:	187a      	adds	r2, r7, r1
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	1d7b      	adds	r3, r7, #5
 800454e:	33ff      	adds	r3, #255	; 0xff
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	221f      	movs	r2, #31
 8004554:	4013      	ands	r3, r2
 8004556:	d104      	bne.n	8004562 <USB_EPStartXfer+0x456>
 8004558:	187b      	adds	r3, r7, r1
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3b01      	subs	r3, #1
 800455e:	187a      	adds	r2, r7, r1
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29a      	uxth	r2, r3
 8004568:	23f8      	movs	r3, #248	; 0xf8
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	029b      	lsls	r3, r3, #10
 8004572:	b29b      	uxth	r3, r3
 8004574:	4313      	orrs	r3, r2
 8004576:	b29b      	uxth	r3, r3
 8004578:	4ab7      	ldr	r2, [pc, #732]	; (8004858 <USB_EPStartXfer+0x74c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	b29a      	uxth	r2, r3
 800457e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004580:	801a      	strh	r2, [r3, #0]
 8004582:	e04a      	b.n	800461a <USB_EPStartXfer+0x50e>
 8004584:	1d7b      	adds	r3, r7, #5
 8004586:	33ff      	adds	r3, #255	; 0xff
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d108      	bne.n	80045a0 <USB_EPStartXfer+0x494>
 800458e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	4ab0      	ldr	r2, [pc, #704]	; (8004858 <USB_EPStartXfer+0x74c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	b29a      	uxth	r2, r3
 800459a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	e03c      	b.n	800461a <USB_EPStartXfer+0x50e>
 80045a0:	1d7b      	adds	r3, r7, #5
 80045a2:	33ff      	adds	r3, #255	; 0xff
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	21f8      	movs	r1, #248	; 0xf8
 80045aa:	187a      	adds	r2, r7, r1
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	1d7b      	adds	r3, r7, #5
 80045b0:	33ff      	adds	r3, #255	; 0xff
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2201      	movs	r2, #1
 80045b6:	4013      	ands	r3, r2
 80045b8:	d004      	beq.n	80045c4 <USB_EPStartXfer+0x4b8>
 80045ba:	187b      	adds	r3, r7, r1
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	187a      	adds	r2, r7, r1
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	23f8      	movs	r3, #248	; 0xf8
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	029b      	lsls	r3, r3, #10
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4313      	orrs	r3, r2
 80045d8:	b29a      	uxth	r2, r3
 80045da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	e01c      	b.n	800461a <USB_EPStartXfer+0x50e>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d118      	bne.n	800461a <USB_EPStartXfer+0x50e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	653b      	str	r3, [r7, #80]	; 0x50
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2250      	movs	r2, #80	; 0x50
 80045f0:	5a9b      	ldrh	r3, [r3, r2]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	001a      	movs	r2, r3
 80045f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f8:	189b      	adds	r3, r3, r2
 80045fa:	653b      	str	r3, [r7, #80]	; 0x50
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	00da      	lsls	r2, r3, #3
 8004602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004604:	18d3      	adds	r3, r2, r3
 8004606:	4a93      	ldr	r2, [pc, #588]	; (8004854 <USB_EPStartXfer+0x748>)
 8004608:	4694      	mov	ip, r2
 800460a:	4463      	add	r3, ip
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460e:	1d7b      	adds	r3, r7, #5
 8004610:	33ff      	adds	r3, #255	; 0xff
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	b29a      	uxth	r2, r3
 8004616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004618:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800461a:	2076      	movs	r0, #118	; 0x76
 800461c:	183b      	adds	r3, r7, r0
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	8912      	ldrh	r2, [r2, #8]
 8004622:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6959      	ldr	r1, [r3, #20]
 8004628:	1d7b      	adds	r3, r7, #5
 800462a:	33ff      	adds	r3, #255	; 0xff
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	b29c      	uxth	r4, r3
 8004630:	183b      	adds	r3, r7, r0
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	0023      	movs	r3, r4
 8004638:	f000 ffda 	bl	80055f0 <USB_WritePMA>
            ep->xfer_buff += len;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	1d7b      	adds	r3, r7, #5
 8004642:	33ff      	adds	r3, #255	; 0xff
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	18d2      	adds	r2, r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d908      	bls.n	800466a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6a1a      	ldr	r2, [r3, #32]
 800465c:	1d7b      	adds	r3, r7, #5
 800465e:	33ff      	adds	r3, #255	; 0xff
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1ad2      	subs	r2, r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	621a      	str	r2, [r3, #32]
 8004668:	e007      	b.n	800467a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	1d7a      	adds	r2, r7, #5
 8004670:	32ff      	adds	r2, #255	; 0xff
 8004672:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	643b      	str	r3, [r7, #64]	; 0x40
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d000      	beq.n	8004688 <USB_EPStartXfer+0x57c>
 8004686:	e070      	b.n	800476a <USB_EPStartXfer+0x65e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	63bb      	str	r3, [r7, #56]	; 0x38
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2250      	movs	r2, #80	; 0x50
 8004690:	5a9b      	ldrh	r3, [r3, r2]
 8004692:	b29b      	uxth	r3, r3
 8004694:	001a      	movs	r2, r3
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	189b      	adds	r3, r3, r2
 800469a:	63bb      	str	r3, [r7, #56]	; 0x38
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	00da      	lsls	r2, r3, #3
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	18d3      	adds	r3, r2, r3
 80046a6:	4a6d      	ldr	r2, [pc, #436]	; (800485c <USB_EPStartXfer+0x750>)
 80046a8:	4694      	mov	ip, r2
 80046aa:	4463      	add	r3, ip
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
 80046ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	059b      	lsls	r3, r3, #22
 80046b6:	0d9b      	lsrs	r3, r3, #22
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	1d7b      	adds	r3, r7, #5
 80046c0:	33ff      	adds	r3, #255	; 0xff
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b3e      	cmp	r3, #62	; 0x3e
 80046c6:	d922      	bls.n	800470e <USB_EPStartXfer+0x602>
 80046c8:	1d7b      	adds	r3, r7, #5
 80046ca:	33ff      	adds	r3, #255	; 0xff
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	21f4      	movs	r1, #244	; 0xf4
 80046d2:	187a      	adds	r2, r7, r1
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	1d7b      	adds	r3, r7, #5
 80046d8:	33ff      	adds	r3, #255	; 0xff
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	221f      	movs	r2, #31
 80046de:	4013      	ands	r3, r2
 80046e0:	d104      	bne.n	80046ec <USB_EPStartXfer+0x5e0>
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	187a      	adds	r2, r7, r1
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	23f4      	movs	r3, #244	; 0xf4
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	029b      	lsls	r3, r3, #10
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	4313      	orrs	r3, r2
 8004700:	b29b      	uxth	r3, r3
 8004702:	4a55      	ldr	r2, [pc, #340]	; (8004858 <USB_EPStartXfer+0x74c>)
 8004704:	4313      	orrs	r3, r2
 8004706:	b29a      	uxth	r2, r3
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	e048      	b.n	80047a0 <USB_EPStartXfer+0x694>
 800470e:	1d7b      	adds	r3, r7, #5
 8004710:	33ff      	adds	r3, #255	; 0xff
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d108      	bne.n	800472a <USB_EPStartXfer+0x61e>
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <USB_EPStartXfer+0x74c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	b29a      	uxth	r2, r3
 8004724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	e03a      	b.n	80047a0 <USB_EPStartXfer+0x694>
 800472a:	1d7b      	adds	r3, r7, #5
 800472c:	33ff      	adds	r3, #255	; 0xff
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	21f4      	movs	r1, #244	; 0xf4
 8004734:	187a      	adds	r2, r7, r1
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	1d7b      	adds	r3, r7, #5
 800473a:	33ff      	adds	r3, #255	; 0xff
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2201      	movs	r2, #1
 8004740:	4013      	ands	r3, r2
 8004742:	d004      	beq.n	800474e <USB_EPStartXfer+0x642>
 8004744:	187b      	adds	r3, r7, r1
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	187a      	adds	r2, r7, r1
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29a      	uxth	r2, r3
 8004754:	23f4      	movs	r3, #244	; 0xf4
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	029b      	lsls	r3, r3, #10
 800475e:	b29b      	uxth	r3, r3
 8004760:	4313      	orrs	r3, r2
 8004762:	b29a      	uxth	r2, r3
 8004764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	e01a      	b.n	80047a0 <USB_EPStartXfer+0x694>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d116      	bne.n	80047a0 <USB_EPStartXfer+0x694>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2250      	movs	r2, #80	; 0x50
 8004776:	5a9b      	ldrh	r3, [r3, r2]
 8004778:	b29b      	uxth	r3, r3
 800477a:	001a      	movs	r2, r3
 800477c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477e:	189b      	adds	r3, r3, r2
 8004780:	643b      	str	r3, [r7, #64]	; 0x40
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	00da      	lsls	r2, r3, #3
 8004788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478a:	18d3      	adds	r3, r2, r3
 800478c:	4a33      	ldr	r2, [pc, #204]	; (800485c <USB_EPStartXfer+0x750>)
 800478e:	4694      	mov	ip, r2
 8004790:	4463      	add	r3, ip
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004794:	1d7b      	adds	r3, r7, #5
 8004796:	33ff      	adds	r3, #255	; 0xff
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b29a      	uxth	r2, r3
 800479c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80047a0:	2076      	movs	r0, #118	; 0x76
 80047a2:	183b      	adds	r3, r7, r0
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	8952      	ldrh	r2, [r2, #10]
 80047a8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6959      	ldr	r1, [r3, #20]
 80047ae:	1d7b      	adds	r3, r7, #5
 80047b0:	33ff      	adds	r3, #255	; 0xff
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b29c      	uxth	r4, r3
 80047b6:	183b      	adds	r3, r7, r0
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	0023      	movs	r3, r4
 80047be:	f000 ff17 	bl	80055f0 <USB_WritePMA>
 80047c2:	e1b6      	b.n	8004b32 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	1d7a      	adds	r2, r7, #5
 80047ca:	32ff      	adds	r2, #255	; 0xff
 80047cc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	18d3      	adds	r3, r2, r3
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	2062      	movs	r0, #98	; 0x62
 80047de:	183b      	adds	r3, r7, r0
 80047e0:	491f      	ldr	r1, [pc, #124]	; (8004860 <USB_EPStartXfer+0x754>)
 80047e2:	400a      	ands	r2, r1
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	18d3      	adds	r3, r2, r3
 80047f0:	183a      	adds	r2, r7, r0
 80047f2:	8812      	ldrh	r2, [r2, #0]
 80047f4:	491b      	ldr	r1, [pc, #108]	; (8004864 <USB_EPStartXfer+0x758>)
 80047f6:	430a      	orrs	r2, r1
 80047f8:	b292      	uxth	r2, r2
 80047fa:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2250      	movs	r2, #80	; 0x50
 8004804:	5a9b      	ldrh	r3, [r3, r2]
 8004806:	b29b      	uxth	r3, r3
 8004808:	001a      	movs	r2, r3
 800480a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480c:	189b      	adds	r3, r3, r2
 800480e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	00da      	lsls	r2, r3, #3
 8004816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004818:	18d3      	adds	r3, r2, r3
 800481a:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <USB_EPStartXfer+0x748>)
 800481c:	4694      	mov	ip, r2
 800481e:	4463      	add	r3, ip
 8004820:	65bb      	str	r3, [r7, #88]	; 0x58
 8004822:	1d7b      	adds	r3, r7, #5
 8004824:	33ff      	adds	r3, #255	; 0xff
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	b29a      	uxth	r2, r3
 800482a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800482c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800482e:	2076      	movs	r0, #118	; 0x76
 8004830:	183b      	adds	r3, r7, r0
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	8912      	ldrh	r2, [r2, #8]
 8004836:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	6959      	ldr	r1, [r3, #20]
 800483c:	1d7b      	adds	r3, r7, #5
 800483e:	33ff      	adds	r3, #255	; 0xff
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29c      	uxth	r4, r3
 8004844:	183b      	adds	r3, r7, r0
 8004846:	881a      	ldrh	r2, [r3, #0]
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	0023      	movs	r3, r4
 800484c:	f000 fed0 	bl	80055f0 <USB_WritePMA>
 8004850:	e16f      	b.n	8004b32 <USB_EPStartXfer+0xa26>
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	00000402 	.word	0x00000402
 8004858:	ffff8000 	.word	0xffff8000
 800485c:	00000406 	.word	0x00000406
 8004860:	ffff8e8f 	.word	0xffff8e8f
 8004864:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6a1a      	ldr	r2, [r3, #32]
 800486c:	1d7b      	adds	r3, r7, #5
 800486e:	33ff      	adds	r3, #255	; 0xff
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	1ad2      	subs	r2, r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	18d3      	adds	r3, r2, r3
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	001a      	movs	r2, r3
 8004888:	2340      	movs	r3, #64	; 0x40
 800488a:	4013      	ands	r3, r2
 800488c:	d100      	bne.n	8004890 <USB_EPStartXfer+0x784>
 800488e:	e0a4      	b.n	80049da <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	673b      	str	r3, [r7, #112]	; 0x70
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d000      	beq.n	800489e <USB_EPStartXfer+0x792>
 800489c:	e070      	b.n	8004980 <USB_EPStartXfer+0x874>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2250      	movs	r2, #80	; 0x50
 80048a6:	5a9b      	ldrh	r3, [r3, r2]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	001a      	movs	r2, r3
 80048ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	00da      	lsls	r2, r3, #3
 80048b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ba:	18d3      	adds	r3, r2, r3
 80048bc:	4abc      	ldr	r2, [pc, #752]	; (8004bb0 <USB_EPStartXfer+0xaa4>)
 80048be:	4694      	mov	ip, r2
 80048c0:	4463      	add	r3, ip
 80048c2:	667b      	str	r3, [r7, #100]	; 0x64
 80048c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	059b      	lsls	r3, r3, #22
 80048cc:	0d9b      	lsrs	r3, r3, #22
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	1d7b      	adds	r3, r7, #5
 80048d6:	33ff      	adds	r3, #255	; 0xff
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b3e      	cmp	r3, #62	; 0x3e
 80048dc:	d922      	bls.n	8004924 <USB_EPStartXfer+0x818>
 80048de:	1d7b      	adds	r3, r7, #5
 80048e0:	33ff      	adds	r3, #255	; 0xff
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	21f0      	movs	r1, #240	; 0xf0
 80048e8:	187a      	adds	r2, r7, r1
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	1d7b      	adds	r3, r7, #5
 80048ee:	33ff      	adds	r3, #255	; 0xff
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	221f      	movs	r2, #31
 80048f4:	4013      	ands	r3, r2
 80048f6:	d104      	bne.n	8004902 <USB_EPStartXfer+0x7f6>
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	187a      	adds	r2, r7, r1
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29a      	uxth	r2, r3
 8004908:	23f0      	movs	r3, #240	; 0xf0
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29b      	uxth	r3, r3
 8004914:	4313      	orrs	r3, r2
 8004916:	b29b      	uxth	r3, r3
 8004918:	4aa6      	ldr	r2, [pc, #664]	; (8004bb4 <USB_EPStartXfer+0xaa8>)
 800491a:	4313      	orrs	r3, r2
 800491c:	b29a      	uxth	r2, r3
 800491e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	e048      	b.n	80049b6 <USB_EPStartXfer+0x8aa>
 8004924:	1d7b      	adds	r3, r7, #5
 8004926:	33ff      	adds	r3, #255	; 0xff
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <USB_EPStartXfer+0x834>
 800492e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	4a9f      	ldr	r2, [pc, #636]	; (8004bb4 <USB_EPStartXfer+0xaa8>)
 8004936:	4313      	orrs	r3, r2
 8004938:	b29a      	uxth	r2, r3
 800493a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	e03a      	b.n	80049b6 <USB_EPStartXfer+0x8aa>
 8004940:	1d7b      	adds	r3, r7, #5
 8004942:	33ff      	adds	r3, #255	; 0xff
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	21f0      	movs	r1, #240	; 0xf0
 800494a:	187a      	adds	r2, r7, r1
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	1d7b      	adds	r3, r7, #5
 8004950:	33ff      	adds	r3, #255	; 0xff
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2201      	movs	r2, #1
 8004956:	4013      	ands	r3, r2
 8004958:	d004      	beq.n	8004964 <USB_EPStartXfer+0x858>
 800495a:	187b      	adds	r3, r7, r1
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	187a      	adds	r2, r7, r1
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29a      	uxth	r2, r3
 800496a:	23f0      	movs	r3, #240	; 0xf0
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	029b      	lsls	r3, r3, #10
 8004974:	b29b      	uxth	r3, r3
 8004976:	4313      	orrs	r3, r2
 8004978:	b29a      	uxth	r2, r3
 800497a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	e01a      	b.n	80049b6 <USB_EPStartXfer+0x8aa>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d116      	bne.n	80049b6 <USB_EPStartXfer+0x8aa>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2250      	movs	r2, #80	; 0x50
 800498c:	5a9b      	ldrh	r3, [r3, r2]
 800498e:	b29b      	uxth	r3, r3
 8004990:	001a      	movs	r2, r3
 8004992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004994:	189b      	adds	r3, r3, r2
 8004996:	673b      	str	r3, [r7, #112]	; 0x70
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	00da      	lsls	r2, r3, #3
 800499e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049a0:	18d3      	adds	r3, r2, r3
 80049a2:	4a83      	ldr	r2, [pc, #524]	; (8004bb0 <USB_EPStartXfer+0xaa4>)
 80049a4:	4694      	mov	ip, r2
 80049a6:	4463      	add	r3, ip
 80049a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049aa:	1d7b      	adds	r3, r7, #5
 80049ac:	33ff      	adds	r3, #255	; 0xff
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80049b6:	2076      	movs	r0, #118	; 0x76
 80049b8:	183b      	adds	r3, r7, r0
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	8952      	ldrh	r2, [r2, #10]
 80049be:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6959      	ldr	r1, [r3, #20]
 80049c4:	1d7b      	adds	r3, r7, #5
 80049c6:	33ff      	adds	r3, #255	; 0xff
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	b29c      	uxth	r4, r3
 80049cc:	183b      	adds	r3, r7, r0
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	0023      	movs	r3, r4
 80049d4:	f000 fe0c 	bl	80055f0 <USB_WritePMA>
 80049d8:	e0ab      	b.n	8004b32 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d000      	beq.n	80049e4 <USB_EPStartXfer+0x8d8>
 80049e2:	e070      	b.n	8004ac6 <USB_EPStartXfer+0x9ba>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2250      	movs	r2, #80	; 0x50
 80049ec:	5a9b      	ldrh	r3, [r3, r2]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	001a      	movs	r2, r3
 80049f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049f4:	189b      	adds	r3, r3, r2
 80049f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	00da      	lsls	r2, r3, #3
 80049fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a00:	18d3      	adds	r3, r2, r3
 8004a02:	4a6d      	ldr	r2, [pc, #436]	; (8004bb8 <USB_EPStartXfer+0xaac>)
 8004a04:	4694      	mov	ip, r2
 8004a06:	4463      	add	r3, ip
 8004a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	059b      	lsls	r3, r3, #22
 8004a12:	0d9b      	lsrs	r3, r3, #22
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	1d7b      	adds	r3, r7, #5
 8004a1c:	33ff      	adds	r3, #255	; 0xff
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b3e      	cmp	r3, #62	; 0x3e
 8004a22:	d922      	bls.n	8004a6a <USB_EPStartXfer+0x95e>
 8004a24:	1d7b      	adds	r3, r7, #5
 8004a26:	33ff      	adds	r3, #255	; 0xff
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	21ec      	movs	r1, #236	; 0xec
 8004a2e:	187a      	adds	r2, r7, r1
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	1d7b      	adds	r3, r7, #5
 8004a34:	33ff      	adds	r3, #255	; 0xff
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	221f      	movs	r2, #31
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d104      	bne.n	8004a48 <USB_EPStartXfer+0x93c>
 8004a3e:	187b      	adds	r3, r7, r1
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	187a      	adds	r2, r7, r1
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	23ec      	movs	r3, #236	; 0xec
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	029b      	lsls	r3, r3, #10
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	4a55      	ldr	r2, [pc, #340]	; (8004bb4 <USB_EPStartXfer+0xaa8>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	e052      	b.n	8004b10 <USB_EPStartXfer+0xa04>
 8004a6a:	1d7b      	adds	r3, r7, #5
 8004a6c:	33ff      	adds	r3, #255	; 0xff
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d108      	bne.n	8004a86 <USB_EPStartXfer+0x97a>
 8004a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	4a4e      	ldr	r2, [pc, #312]	; (8004bb4 <USB_EPStartXfer+0xaa8>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	e044      	b.n	8004b10 <USB_EPStartXfer+0xa04>
 8004a86:	1d7b      	adds	r3, r7, #5
 8004a88:	33ff      	adds	r3, #255	; 0xff
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	21ec      	movs	r1, #236	; 0xec
 8004a90:	187a      	adds	r2, r7, r1
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	1d7b      	adds	r3, r7, #5
 8004a96:	33ff      	adds	r3, #255	; 0xff
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <USB_EPStartXfer+0x99e>
 8004aa0:	187b      	adds	r3, r7, r1
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	187a      	adds	r2, r7, r1
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	23ec      	movs	r3, #236	; 0xec
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	029b      	lsls	r3, r3, #10
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	4313      	orrs	r3, r2
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac2:	801a      	strh	r2, [r3, #0]
 8004ac4:	e024      	b.n	8004b10 <USB_EPStartXfer+0xa04>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d120      	bne.n	8004b10 <USB_EPStartXfer+0xa04>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2184      	movs	r1, #132	; 0x84
 8004ad2:	187a      	adds	r2, r7, r1
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2250      	movs	r2, #80	; 0x50
 8004ada:	5a9b      	ldrh	r3, [r3, r2]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	001a      	movs	r2, r3
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	189b      	adds	r3, r3, r2
 8004ae6:	187a      	adds	r2, r7, r1
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	00da      	lsls	r2, r3, #3
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	18d3      	adds	r3, r2, r3
 8004af6:	4a30      	ldr	r2, [pc, #192]	; (8004bb8 <USB_EPStartXfer+0xaac>)
 8004af8:	4694      	mov	ip, r2
 8004afa:	4463      	add	r3, ip
 8004afc:	2180      	movs	r1, #128	; 0x80
 8004afe:	187a      	adds	r2, r7, r1
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	1d7b      	adds	r3, r7, #5
 8004b04:	33ff      	adds	r3, #255	; 0xff
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b10:	2076      	movs	r0, #118	; 0x76
 8004b12:	183b      	adds	r3, r7, r0
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	8912      	ldrh	r2, [r2, #8]
 8004b18:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6959      	ldr	r1, [r3, #20]
 8004b1e:	1d7b      	adds	r3, r7, #5
 8004b20:	33ff      	adds	r3, #255	; 0xff
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b29c      	uxth	r4, r3
 8004b26:	183b      	adds	r3, r7, r0
 8004b28:	881a      	ldrh	r2, [r3, #0]
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	0023      	movs	r3, r4
 8004b2e:	f000 fd5f 	bl	80055f0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	18d3      	adds	r3, r2, r3
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	200a      	movs	r0, #10
 8004b42:	183b      	adds	r3, r7, r0
 8004b44:	491d      	ldr	r1, [pc, #116]	; (8004bbc <USB_EPStartXfer+0xab0>)
 8004b46:	400a      	ands	r2, r1
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	183b      	adds	r3, r7, r0
 8004b4c:	183a      	adds	r2, r7, r0
 8004b4e:	8812      	ldrh	r2, [r2, #0]
 8004b50:	2110      	movs	r1, #16
 8004b52:	404a      	eors	r2, r1
 8004b54:	801a      	strh	r2, [r3, #0]
 8004b56:	183b      	adds	r3, r7, r0
 8004b58:	183a      	adds	r2, r7, r0
 8004b5a:	8812      	ldrh	r2, [r2, #0]
 8004b5c:	2120      	movs	r1, #32
 8004b5e:	404a      	eors	r2, r1
 8004b60:	801a      	strh	r2, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	18d3      	adds	r3, r2, r3
 8004b6c:	183a      	adds	r2, r7, r0
 8004b6e:	8812      	ldrh	r2, [r2, #0]
 8004b70:	4913      	ldr	r1, [pc, #76]	; (8004bc0 <USB_EPStartXfer+0xab4>)
 8004b72:	430a      	orrs	r2, r1
 8004b74:	b292      	uxth	r2, r2
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	f000 fbf4 	bl	8005364 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	7b1b      	ldrb	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d000      	beq.n	8004b86 <USB_EPStartXfer+0xa7a>
 8004b84:	e0a9      	b.n	8004cda <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d918      	bls.n	8004bc4 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	1d7a      	adds	r2, r7, #5
 8004b98:	32ff      	adds	r2, #255	; 0xff
 8004b9a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	1d7b      	adds	r3, r7, #5
 8004ba2:	33ff      	adds	r3, #255	; 0xff
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	1ad2      	subs	r2, r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	619a      	str	r2, [r3, #24]
 8004bac:	e012      	b.n	8004bd4 <USB_EPStartXfer+0xac8>
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	00000406 	.word	0x00000406
 8004bb4:	ffff8000 	.word	0xffff8000
 8004bb8:	00000402 	.word	0x00000402
 8004bbc:	ffff8fbf 	.word	0xffff8fbf
 8004bc0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	1d7a      	adds	r2, r7, #5
 8004bca:	32ff      	adds	r2, #255	; 0xff
 8004bcc:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2190      	movs	r1, #144	; 0x90
 8004bd8:	187a      	adds	r2, r7, r1
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2250      	movs	r2, #80	; 0x50
 8004be0:	5a9b      	ldrh	r3, [r3, r2]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	001a      	movs	r2, r3
 8004be6:	187b      	adds	r3, r7, r1
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	187a      	adds	r2, r7, r1
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	00da      	lsls	r2, r3, #3
 8004bf6:	187b      	adds	r3, r7, r1
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	18d3      	adds	r3, r2, r3
 8004bfc:	4acf      	ldr	r2, [pc, #828]	; (8004f3c <USB_EPStartXfer+0xe30>)
 8004bfe:	4694      	mov	ip, r2
 8004c00:	4463      	add	r3, ip
 8004c02:	218c      	movs	r1, #140	; 0x8c
 8004c04:	187a      	adds	r2, r7, r1
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	187b      	adds	r3, r7, r1
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	059b      	lsls	r3, r3, #22
 8004c12:	0d9b      	lsrs	r3, r3, #22
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	187b      	adds	r3, r7, r1
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	1d7b      	adds	r3, r7, #5
 8004c1e:	33ff      	adds	r3, #255	; 0xff
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b3e      	cmp	r3, #62	; 0x3e
 8004c24:	d925      	bls.n	8004c72 <USB_EPStartXfer+0xb66>
 8004c26:	1d7b      	adds	r3, r7, #5
 8004c28:	33ff      	adds	r3, #255	; 0xff
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	21e8      	movs	r1, #232	; 0xe8
 8004c30:	187a      	adds	r2, r7, r1
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	1d7b      	adds	r3, r7, #5
 8004c36:	33ff      	adds	r3, #255	; 0xff
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	221f      	movs	r2, #31
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d104      	bne.n	8004c4a <USB_EPStartXfer+0xb3e>
 8004c40:	187b      	adds	r3, r7, r1
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	187a      	adds	r2, r7, r1
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	218c      	movs	r1, #140	; 0x8c
 8004c4c:	187b      	adds	r3, r7, r1
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	23e8      	movs	r3, #232	; 0xe8
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	4313      	orrs	r3, r2
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4ab6      	ldr	r2, [pc, #728]	; (8004f40 <USB_EPStartXfer+0xe34>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	187b      	adds	r3, r7, r1
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	e353      	b.n	800531a <USB_EPStartXfer+0x120e>
 8004c72:	1d7b      	adds	r3, r7, #5
 8004c74:	33ff      	adds	r3, #255	; 0xff
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <USB_EPStartXfer+0xb88>
 8004c7c:	218c      	movs	r1, #140	; 0x8c
 8004c7e:	187b      	adds	r3, r7, r1
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	4aae      	ldr	r2, [pc, #696]	; (8004f40 <USB_EPStartXfer+0xe34>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	e342      	b.n	800531a <USB_EPStartXfer+0x120e>
 8004c94:	1d7b      	adds	r3, r7, #5
 8004c96:	33ff      	adds	r3, #255	; 0xff
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	21e8      	movs	r1, #232	; 0xe8
 8004c9e:	187a      	adds	r2, r7, r1
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	1d7b      	adds	r3, r7, #5
 8004ca4:	33ff      	adds	r3, #255	; 0xff
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	4013      	ands	r3, r2
 8004cac:	d004      	beq.n	8004cb8 <USB_EPStartXfer+0xbac>
 8004cae:	187b      	adds	r3, r7, r1
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	187a      	adds	r2, r7, r1
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	218c      	movs	r1, #140	; 0x8c
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	23e8      	movs	r3, #232	; 0xe8
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	029b      	lsls	r3, r3, #10
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	187b      	adds	r3, r7, r1
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	e31f      	b.n	800531a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	78db      	ldrb	r3, [r3, #3]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d000      	beq.n	8004ce4 <USB_EPStartXfer+0xbd8>
 8004ce2:	e191      	b.n	8005008 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d000      	beq.n	8004cee <USB_EPStartXfer+0xbe2>
 8004cec:	e07c      	b.n	8004de8 <USB_EPStartXfer+0xcdc>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	21ac      	movs	r1, #172	; 0xac
 8004cf2:	187a      	adds	r2, r7, r1
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2250      	movs	r2, #80	; 0x50
 8004cfa:	5a9b      	ldrh	r3, [r3, r2]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	001a      	movs	r2, r3
 8004d00:	187b      	adds	r3, r7, r1
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	189b      	adds	r3, r3, r2
 8004d06:	187a      	adds	r2, r7, r1
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	00da      	lsls	r2, r3, #3
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	18d3      	adds	r3, r2, r3
 8004d16:	4a8b      	ldr	r2, [pc, #556]	; (8004f44 <USB_EPStartXfer+0xe38>)
 8004d18:	4694      	mov	ip, r2
 8004d1a:	4463      	add	r3, ip
 8004d1c:	21a8      	movs	r1, #168	; 0xa8
 8004d1e:	187a      	adds	r2, r7, r1
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	059b      	lsls	r3, r3, #22
 8004d2c:	0d9b      	lsrs	r3, r3, #22
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d3c:	d923      	bls.n	8004d86 <USB_EPStartXfer+0xc7a>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	21e4      	movs	r1, #228	; 0xe4
 8004d46:	187a      	adds	r2, r7, r1
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	221f      	movs	r2, #31
 8004d50:	4013      	ands	r3, r2
 8004d52:	d104      	bne.n	8004d5e <USB_EPStartXfer+0xc52>
 8004d54:	187b      	adds	r3, r7, r1
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	187a      	adds	r2, r7, r1
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	21a8      	movs	r1, #168	; 0xa8
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	23e4      	movs	r3, #228	; 0xe4
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	029b      	lsls	r3, r3, #10
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	4313      	orrs	r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	4a71      	ldr	r2, [pc, #452]	; (8004f40 <USB_EPStartXfer+0xe34>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	187b      	adds	r3, r7, r1
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	e054      	b.n	8004e30 <USB_EPStartXfer+0xd24>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <USB_EPStartXfer+0xc9a>
 8004d8e:	21a8      	movs	r1, #168	; 0xa8
 8004d90:	187b      	adds	r3, r7, r1
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4a69      	ldr	r2, [pc, #420]	; (8004f40 <USB_EPStartXfer+0xe34>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	187b      	adds	r3, r7, r1
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e044      	b.n	8004e30 <USB_EPStartXfer+0xd24>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	21e4      	movs	r1, #228	; 0xe4
 8004dae:	187a      	adds	r2, r7, r1
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2201      	movs	r2, #1
 8004db8:	4013      	ands	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <USB_EPStartXfer+0xcba>
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	187a      	adds	r2, r7, r1
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	21a8      	movs	r1, #168	; 0xa8
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	23e4      	movs	r3, #228	; 0xe4
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	029b      	lsls	r3, r3, #10
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	187b      	adds	r3, r7, r1
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	e023      	b.n	8004e30 <USB_EPStartXfer+0xd24>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d11f      	bne.n	8004e30 <USB_EPStartXfer+0xd24>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	21b4      	movs	r1, #180	; 0xb4
 8004df4:	187a      	adds	r2, r7, r1
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2250      	movs	r2, #80	; 0x50
 8004dfc:	5a9b      	ldrh	r3, [r3, r2]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	001a      	movs	r2, r3
 8004e02:	187b      	adds	r3, r7, r1
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	187a      	adds	r2, r7, r1
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	00da      	lsls	r2, r3, #3
 8004e12:	187b      	adds	r3, r7, r1
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	18d3      	adds	r3, r2, r3
 8004e18:	4a4a      	ldr	r2, [pc, #296]	; (8004f44 <USB_EPStartXfer+0xe38>)
 8004e1a:	4694      	mov	ip, r2
 8004e1c:	4463      	add	r3, ip
 8004e1e:	21b0      	movs	r1, #176	; 0xb0
 8004e20:	187a      	adds	r2, r7, r1
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	22a4      	movs	r2, #164	; 0xa4
 8004e34:	18ba      	adds	r2, r7, r2
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d000      	beq.n	8004e42 <USB_EPStartXfer+0xd36>
 8004e40:	e082      	b.n	8004f48 <USB_EPStartXfer+0xe3c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	219c      	movs	r1, #156	; 0x9c
 8004e46:	187a      	adds	r2, r7, r1
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2250      	movs	r2, #80	; 0x50
 8004e4e:	5a9b      	ldrh	r3, [r3, r2]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	001a      	movs	r2, r3
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	189b      	adds	r3, r3, r2
 8004e5a:	187a      	adds	r2, r7, r1
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	00da      	lsls	r2, r3, #3
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	18d3      	adds	r3, r2, r3
 8004e6a:	4a34      	ldr	r2, [pc, #208]	; (8004f3c <USB_EPStartXfer+0xe30>)
 8004e6c:	4694      	mov	ip, r2
 8004e6e:	4463      	add	r3, ip
 8004e70:	2198      	movs	r1, #152	; 0x98
 8004e72:	187a      	adds	r2, r7, r1
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	187b      	adds	r3, r7, r1
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	059b      	lsls	r3, r3, #22
 8004e80:	0d9b      	lsrs	r3, r3, #22
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	187b      	adds	r3, r7, r1
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e90:	d923      	bls.n	8004eda <USB_EPStartXfer+0xdce>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	21e0      	movs	r1, #224	; 0xe0
 8004e9a:	187a      	adds	r2, r7, r1
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	221f      	movs	r2, #31
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d104      	bne.n	8004eb2 <USB_EPStartXfer+0xda6>
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	187a      	adds	r2, r7, r1
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	2198      	movs	r1, #152	; 0x98
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	23e0      	movs	r3, #224	; 0xe0
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	4a1c      	ldr	r2, [pc, #112]	; (8004f40 <USB_EPStartXfer+0xe34>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	e057      	b.n	8004f8a <USB_EPStartXfer+0xe7e>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <USB_EPStartXfer+0xdee>
 8004ee2:	2198      	movs	r1, #152	; 0x98
 8004ee4:	187b      	adds	r3, r7, r1
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4a14      	ldr	r2, [pc, #80]	; (8004f40 <USB_EPStartXfer+0xe34>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e047      	b.n	8004f8a <USB_EPStartXfer+0xe7e>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	21e0      	movs	r1, #224	; 0xe0
 8004f02:	187a      	adds	r2, r7, r1
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d004      	beq.n	8004f1a <USB_EPStartXfer+0xe0e>
 8004f10:	187b      	adds	r3, r7, r1
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	187a      	adds	r2, r7, r1
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	2198      	movs	r1, #152	; 0x98
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	23e0      	movs	r3, #224	; 0xe0
 8004f26:	18fb      	adds	r3, r7, r3
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	029b      	lsls	r3, r3, #10
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	4313      	orrs	r3, r2
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	e026      	b.n	8004f8a <USB_EPStartXfer+0xe7e>
 8004f3c:	00000406 	.word	0x00000406
 8004f40:	ffff8000 	.word	0xffff8000
 8004f44:	00000402 	.word	0x00000402
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d11c      	bne.n	8004f8a <USB_EPStartXfer+0xe7e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2250      	movs	r2, #80	; 0x50
 8004f54:	5a9b      	ldrh	r3, [r3, r2]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	001a      	movs	r2, r3
 8004f5a:	21a4      	movs	r1, #164	; 0xa4
 8004f5c:	187b      	adds	r3, r7, r1
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	189b      	adds	r3, r3, r2
 8004f62:	187a      	adds	r2, r7, r1
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	00da      	lsls	r2, r3, #3
 8004f6c:	187b      	adds	r3, r7, r1
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	18d3      	adds	r3, r2, r3
 8004f72:	4ad2      	ldr	r2, [pc, #840]	; (80052bc <USB_EPStartXfer+0x11b0>)
 8004f74:	4694      	mov	ip, r2
 8004f76:	4463      	add	r3, ip
 8004f78:	21a0      	movs	r1, #160	; 0xa0
 8004f7a:	187a      	adds	r2, r7, r1
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	187b      	adds	r3, r7, r1
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d100      	bne.n	8004f94 <USB_EPStartXfer+0xe88>
 8004f92:	e1c2      	b.n	800531a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	18d2      	adds	r2, r2, r3
 8004f9e:	2196      	movs	r1, #150	; 0x96
 8004fa0:	187b      	adds	r3, r7, r1
 8004fa2:	8812      	ldrh	r2, [r2, #0]
 8004fa4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004fa6:	187b      	adds	r3, r7, r1
 8004fa8:	881a      	ldrh	r2, [r3, #0]
 8004faa:	2380      	movs	r3, #128	; 0x80
 8004fac:	01db      	lsls	r3, r3, #7
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <USB_EPStartXfer+0xeb0>
 8004fb2:	187b      	adds	r3, r7, r1
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	2240      	movs	r2, #64	; 0x40
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d10d      	bne.n	8004fd8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004fbc:	2196      	movs	r1, #150	; 0x96
 8004fbe:	187b      	adds	r3, r7, r1
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	01db      	lsls	r3, r3, #7
 8004fc6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004fc8:	d000      	beq.n	8004fcc <USB_EPStartXfer+0xec0>
 8004fca:	e1a6      	b.n	800531a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	2240      	movs	r2, #64	; 0x40
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d000      	beq.n	8004fd8 <USB_EPStartXfer+0xecc>
 8004fd6:	e1a0      	b.n	800531a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	18d3      	adds	r3, r2, r3
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	2094      	movs	r0, #148	; 0x94
 8004fe8:	183b      	adds	r3, r7, r0
 8004fea:	49b5      	ldr	r1, [pc, #724]	; (80052c0 <USB_EPStartXfer+0x11b4>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	18d3      	adds	r3, r2, r3
 8004ffa:	183a      	adds	r2, r7, r0
 8004ffc:	8812      	ldrh	r2, [r2, #0]
 8004ffe:	49b1      	ldr	r1, [pc, #708]	; (80052c4 <USB_EPStartXfer+0x11b8>)
 8005000:	430a      	orrs	r2, r1
 8005002:	b292      	uxth	r2, r2
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e188      	b.n	800531a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	78db      	ldrb	r3, [r3, #3]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d000      	beq.n	8005012 <USB_EPStartXfer+0xf06>
 8005010:	e181      	b.n	8005316 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	d90d      	bls.n	800503a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	1d7a      	adds	r2, r7, #5
 8005024:	32ff      	adds	r2, #255	; 0xff
 8005026:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	1d7b      	adds	r3, r7, #5
 800502e:	33ff      	adds	r3, #255	; 0xff
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	619a      	str	r2, [r3, #24]
 8005038:	e007      	b.n	800504a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	1d7a      	adds	r2, r7, #5
 8005040:	32ff      	adds	r2, #255	; 0xff
 8005042:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d000      	beq.n	8005054 <USB_EPStartXfer+0xf48>
 8005052:	e082      	b.n	800515a <USB_EPStartXfer+0x104e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	21cc      	movs	r1, #204	; 0xcc
 8005058:	187a      	adds	r2, r7, r1
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2250      	movs	r2, #80	; 0x50
 8005060:	5a9b      	ldrh	r3, [r3, r2]
 8005062:	b29b      	uxth	r3, r3
 8005064:	001a      	movs	r2, r3
 8005066:	187b      	adds	r3, r7, r1
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	189b      	adds	r3, r3, r2
 800506c:	187a      	adds	r2, r7, r1
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	00da      	lsls	r2, r3, #3
 8005076:	187b      	adds	r3, r7, r1
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	18d3      	adds	r3, r2, r3
 800507c:	4a92      	ldr	r2, [pc, #584]	; (80052c8 <USB_EPStartXfer+0x11bc>)
 800507e:	4694      	mov	ip, r2
 8005080:	4463      	add	r3, ip
 8005082:	21c8      	movs	r1, #200	; 0xc8
 8005084:	187a      	adds	r2, r7, r1
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	187b      	adds	r3, r7, r1
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	059b      	lsls	r3, r3, #22
 8005092:	0d9b      	lsrs	r3, r3, #22
 8005094:	b29a      	uxth	r2, r3
 8005096:	187b      	adds	r3, r7, r1
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	1d7b      	adds	r3, r7, #5
 800509e:	33ff      	adds	r3, #255	; 0xff
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b3e      	cmp	r3, #62	; 0x3e
 80050a4:	d925      	bls.n	80050f2 <USB_EPStartXfer+0xfe6>
 80050a6:	1d7b      	adds	r3, r7, #5
 80050a8:	33ff      	adds	r3, #255	; 0xff
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	21dc      	movs	r1, #220	; 0xdc
 80050b0:	187a      	adds	r2, r7, r1
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	1d7b      	adds	r3, r7, #5
 80050b6:	33ff      	adds	r3, #255	; 0xff
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	221f      	movs	r2, #31
 80050bc:	4013      	ands	r3, r2
 80050be:	d104      	bne.n	80050ca <USB_EPStartXfer+0xfbe>
 80050c0:	187b      	adds	r3, r7, r1
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	187a      	adds	r2, r7, r1
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	21c8      	movs	r1, #200	; 0xc8
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	23dc      	movs	r3, #220	; 0xdc
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	029b      	lsls	r3, r3, #10
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4313      	orrs	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	4a79      	ldr	r2, [pc, #484]	; (80052cc <USB_EPStartXfer+0x11c0>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	187b      	adds	r3, r7, r1
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	e058      	b.n	80051a4 <USB_EPStartXfer+0x1098>
 80050f2:	1d7b      	adds	r3, r7, #5
 80050f4:	33ff      	adds	r3, #255	; 0xff
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <USB_EPStartXfer+0x1008>
 80050fc:	21c8      	movs	r1, #200	; 0xc8
 80050fe:	187b      	adds	r3, r7, r1
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	4a71      	ldr	r2, [pc, #452]	; (80052cc <USB_EPStartXfer+0x11c0>)
 8005108:	4313      	orrs	r3, r2
 800510a:	b29a      	uxth	r2, r3
 800510c:	187b      	adds	r3, r7, r1
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	e047      	b.n	80051a4 <USB_EPStartXfer+0x1098>
 8005114:	1d7b      	adds	r3, r7, #5
 8005116:	33ff      	adds	r3, #255	; 0xff
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	21dc      	movs	r1, #220	; 0xdc
 800511e:	187a      	adds	r2, r7, r1
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	1d7b      	adds	r3, r7, #5
 8005124:	33ff      	adds	r3, #255	; 0xff
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2201      	movs	r2, #1
 800512a:	4013      	ands	r3, r2
 800512c:	d004      	beq.n	8005138 <USB_EPStartXfer+0x102c>
 800512e:	187b      	adds	r3, r7, r1
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	187a      	adds	r2, r7, r1
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	21c8      	movs	r1, #200	; 0xc8
 800513a:	187b      	adds	r3, r7, r1
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29a      	uxth	r2, r3
 8005142:	23dc      	movs	r3, #220	; 0xdc
 8005144:	18fb      	adds	r3, r7, r3
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	029b      	lsls	r3, r3, #10
 800514c:	b29b      	uxth	r3, r3
 800514e:	4313      	orrs	r3, r2
 8005150:	b29a      	uxth	r2, r3
 8005152:	187b      	adds	r3, r7, r1
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	e024      	b.n	80051a4 <USB_EPStartXfer+0x1098>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d120      	bne.n	80051a4 <USB_EPStartXfer+0x1098>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	21d4      	movs	r1, #212	; 0xd4
 8005166:	187a      	adds	r2, r7, r1
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2250      	movs	r2, #80	; 0x50
 800516e:	5a9b      	ldrh	r3, [r3, r2]
 8005170:	b29b      	uxth	r3, r3
 8005172:	001a      	movs	r2, r3
 8005174:	187b      	adds	r3, r7, r1
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	189b      	adds	r3, r3, r2
 800517a:	187a      	adds	r2, r7, r1
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	00da      	lsls	r2, r3, #3
 8005184:	187b      	adds	r3, r7, r1
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	18d3      	adds	r3, r2, r3
 800518a:	4a4f      	ldr	r2, [pc, #316]	; (80052c8 <USB_EPStartXfer+0x11bc>)
 800518c:	4694      	mov	ip, r2
 800518e:	4463      	add	r3, ip
 8005190:	21d0      	movs	r1, #208	; 0xd0
 8005192:	187a      	adds	r2, r7, r1
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	1d7b      	adds	r3, r7, #5
 8005198:	33ff      	adds	r3, #255	; 0xff
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	b29a      	uxth	r2, r3
 800519e:	187b      	adds	r3, r7, r1
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	22c4      	movs	r2, #196	; 0xc4
 80051a8:	18ba      	adds	r2, r7, r2
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d000      	beq.n	80051b6 <USB_EPStartXfer+0x10aa>
 80051b4:	e08c      	b.n	80052d0 <USB_EPStartXfer+0x11c4>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	21bc      	movs	r1, #188	; 0xbc
 80051ba:	187a      	adds	r2, r7, r1
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2250      	movs	r2, #80	; 0x50
 80051c2:	5a9b      	ldrh	r3, [r3, r2]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	001a      	movs	r2, r3
 80051c8:	187b      	adds	r3, r7, r1
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	187a      	adds	r2, r7, r1
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	00da      	lsls	r2, r3, #3
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	18d3      	adds	r3, r2, r3
 80051de:	4a37      	ldr	r2, [pc, #220]	; (80052bc <USB_EPStartXfer+0x11b0>)
 80051e0:	4694      	mov	ip, r2
 80051e2:	4463      	add	r3, ip
 80051e4:	21b8      	movs	r1, #184	; 0xb8
 80051e6:	187a      	adds	r2, r7, r1
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	059b      	lsls	r3, r3, #22
 80051f4:	0d9b      	lsrs	r3, r3, #22
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	1d7b      	adds	r3, r7, #5
 8005200:	33ff      	adds	r3, #255	; 0xff
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b3e      	cmp	r3, #62	; 0x3e
 8005206:	d925      	bls.n	8005254 <USB_EPStartXfer+0x1148>
 8005208:	1d7b      	adds	r3, r7, #5
 800520a:	33ff      	adds	r3, #255	; 0xff
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	21d8      	movs	r1, #216	; 0xd8
 8005212:	187a      	adds	r2, r7, r1
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	1d7b      	adds	r3, r7, #5
 8005218:	33ff      	adds	r3, #255	; 0xff
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	221f      	movs	r2, #31
 800521e:	4013      	ands	r3, r2
 8005220:	d104      	bne.n	800522c <USB_EPStartXfer+0x1120>
 8005222:	187b      	adds	r3, r7, r1
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3b01      	subs	r3, #1
 8005228:	187a      	adds	r2, r7, r1
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	21b8      	movs	r1, #184	; 0xb8
 800522e:	187b      	adds	r3, r7, r1
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29a      	uxth	r2, r3
 8005236:	23d8      	movs	r3, #216	; 0xd8
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	029b      	lsls	r3, r3, #10
 8005240:	b29b      	uxth	r3, r3
 8005242:	4313      	orrs	r3, r2
 8005244:	b29b      	uxth	r3, r3
 8005246:	4a21      	ldr	r2, [pc, #132]	; (80052cc <USB_EPStartXfer+0x11c0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	b29a      	uxth	r2, r3
 800524c:	187b      	adds	r3, r7, r1
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	e062      	b.n	800531a <USB_EPStartXfer+0x120e>
 8005254:	1d7b      	adds	r3, r7, #5
 8005256:	33ff      	adds	r3, #255	; 0xff
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10b      	bne.n	8005276 <USB_EPStartXfer+0x116a>
 800525e:	21b8      	movs	r1, #184	; 0xb8
 8005260:	187b      	adds	r3, r7, r1
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	4a18      	ldr	r2, [pc, #96]	; (80052cc <USB_EPStartXfer+0x11c0>)
 800526a:	4313      	orrs	r3, r2
 800526c:	b29a      	uxth	r2, r3
 800526e:	187b      	adds	r3, r7, r1
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	e051      	b.n	800531a <USB_EPStartXfer+0x120e>
 8005276:	1d7b      	adds	r3, r7, #5
 8005278:	33ff      	adds	r3, #255	; 0xff
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	21d8      	movs	r1, #216	; 0xd8
 8005280:	187a      	adds	r2, r7, r1
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	1d7b      	adds	r3, r7, #5
 8005286:	33ff      	adds	r3, #255	; 0xff
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2201      	movs	r2, #1
 800528c:	4013      	ands	r3, r2
 800528e:	d004      	beq.n	800529a <USB_EPStartXfer+0x118e>
 8005290:	187b      	adds	r3, r7, r1
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3301      	adds	r3, #1
 8005296:	187a      	adds	r2, r7, r1
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	21b8      	movs	r1, #184	; 0xb8
 800529c:	187b      	adds	r3, r7, r1
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	23d8      	movs	r3, #216	; 0xd8
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	029b      	lsls	r3, r3, #10
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	4313      	orrs	r3, r2
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	187b      	adds	r3, r7, r1
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	e02e      	b.n	800531a <USB_EPStartXfer+0x120e>
 80052bc:	00000406 	.word	0x00000406
 80052c0:	ffff8f8f 	.word	0xffff8f8f
 80052c4:	ffff80c0 	.word	0xffff80c0
 80052c8:	00000402 	.word	0x00000402
 80052cc:	ffff8000 	.word	0xffff8000
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d120      	bne.n	800531a <USB_EPStartXfer+0x120e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2250      	movs	r2, #80	; 0x50
 80052dc:	5a9b      	ldrh	r3, [r3, r2]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	001a      	movs	r2, r3
 80052e2:	21c4      	movs	r1, #196	; 0xc4
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	189b      	adds	r3, r3, r2
 80052ea:	187a      	adds	r2, r7, r1
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	00da      	lsls	r2, r3, #3
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	4a1d      	ldr	r2, [pc, #116]	; (8005370 <USB_EPStartXfer+0x1264>)
 80052fc:	4694      	mov	ip, r2
 80052fe:	4463      	add	r3, ip
 8005300:	21c0      	movs	r1, #192	; 0xc0
 8005302:	187a      	adds	r2, r7, r1
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	1d7b      	adds	r3, r7, #5
 8005308:	33ff      	adds	r3, #255	; 0xff
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	b29a      	uxth	r2, r3
 800530e:	187b      	adds	r3, r7, r1
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e001      	b.n	800531a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e025      	b.n	8005366 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	18d3      	adds	r3, r2, r3
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29a      	uxth	r2, r3
 8005328:	208a      	movs	r0, #138	; 0x8a
 800532a:	183b      	adds	r3, r7, r0
 800532c:	4911      	ldr	r1, [pc, #68]	; (8005374 <USB_EPStartXfer+0x1268>)
 800532e:	400a      	ands	r2, r1
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	183b      	adds	r3, r7, r0
 8005334:	183a      	adds	r2, r7, r0
 8005336:	8812      	ldrh	r2, [r2, #0]
 8005338:	2180      	movs	r1, #128	; 0x80
 800533a:	0149      	lsls	r1, r1, #5
 800533c:	404a      	eors	r2, r1
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	183b      	adds	r3, r7, r0
 8005342:	183a      	adds	r2, r7, r0
 8005344:	8812      	ldrh	r2, [r2, #0]
 8005346:	2180      	movs	r1, #128	; 0x80
 8005348:	0189      	lsls	r1, r1, #6
 800534a:	404a      	eors	r2, r1
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	18d3      	adds	r3, r2, r3
 8005358:	183a      	adds	r2, r7, r0
 800535a:	8812      	ldrh	r2, [r2, #0]
 800535c:	4906      	ldr	r1, [pc, #24]	; (8005378 <USB_EPStartXfer+0x126c>)
 800535e:	430a      	orrs	r2, r1
 8005360:	b292      	uxth	r2, r2
 8005362:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	0018      	movs	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	b043      	add	sp, #268	; 0x10c
 800536c:	bd90      	pop	{r4, r7, pc}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	00000406 	.word	0x00000406
 8005374:	ffffbf8f 	.word	0xffffbf8f
 8005378:	ffff8080 	.word	0xffff8080

0800537c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01d      	beq.n	80053ca <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	18d3      	adds	r3, r2, r3
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29a      	uxth	r2, r3
 800539c:	200c      	movs	r0, #12
 800539e:	183b      	adds	r3, r7, r0
 80053a0:	491b      	ldr	r1, [pc, #108]	; (8005410 <USB_EPSetStall+0x94>)
 80053a2:	400a      	ands	r2, r1
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	183b      	adds	r3, r7, r0
 80053a8:	183a      	adds	r2, r7, r0
 80053aa:	8812      	ldrh	r2, [r2, #0]
 80053ac:	2110      	movs	r1, #16
 80053ae:	404a      	eors	r2, r1
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	18d3      	adds	r3, r2, r3
 80053bc:	183a      	adds	r2, r7, r0
 80053be:	8812      	ldrh	r2, [r2, #0]
 80053c0:	4914      	ldr	r1, [pc, #80]	; (8005414 <USB_EPSetStall+0x98>)
 80053c2:	430a      	orrs	r2, r1
 80053c4:	b292      	uxth	r2, r2
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	e01d      	b.n	8005406 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	18d3      	adds	r3, r2, r3
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	200e      	movs	r0, #14
 80053da:	183b      	adds	r3, r7, r0
 80053dc:	490e      	ldr	r1, [pc, #56]	; (8005418 <USB_EPSetStall+0x9c>)
 80053de:	400a      	ands	r2, r1
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	183a      	adds	r2, r7, r0
 80053e6:	8812      	ldrh	r2, [r2, #0]
 80053e8:	2180      	movs	r1, #128	; 0x80
 80053ea:	0149      	lsls	r1, r1, #5
 80053ec:	404a      	eors	r2, r1
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	18d3      	adds	r3, r2, r3
 80053fa:	183a      	adds	r2, r7, r0
 80053fc:	8812      	ldrh	r2, [r2, #0]
 80053fe:	4905      	ldr	r1, [pc, #20]	; (8005414 <USB_EPSetStall+0x98>)
 8005400:	430a      	orrs	r2, r1
 8005402:	b292      	uxth	r2, r2
 8005404:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	0018      	movs	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	b004      	add	sp, #16
 800540e:	bd80      	pop	{r7, pc}
 8005410:	ffff8fbf 	.word	0xffff8fbf
 8005414:	ffff8080 	.word	0xffff8080
 8005418:	ffffbf8f 	.word	0xffffbf8f

0800541c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	7b1b      	ldrb	r3, [r3, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d000      	beq.n	8005430 <USB_EPClearStall+0x14>
 800542e:	e095      	b.n	800555c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	785b      	ldrb	r3, [r3, #1]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d046      	beq.n	80054c6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	18d2      	adds	r2, r2, r3
 8005442:	2110      	movs	r1, #16
 8005444:	187b      	adds	r3, r7, r1
 8005446:	8812      	ldrh	r2, [r2, #0]
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	187b      	adds	r3, r7, r1
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	2240      	movs	r2, #64	; 0x40
 8005450:	4013      	ands	r3, r2
 8005452:	d016      	beq.n	8005482 <USB_EPClearStall+0x66>
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	18d3      	adds	r3, r2, r3
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29a      	uxth	r2, r3
 8005462:	200e      	movs	r0, #14
 8005464:	183b      	adds	r3, r7, r0
 8005466:	4940      	ldr	r1, [pc, #256]	; (8005568 <USB_EPClearStall+0x14c>)
 8005468:	400a      	ands	r2, r1
 800546a:	801a      	strh	r2, [r3, #0]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	18d3      	adds	r3, r2, r3
 8005476:	183a      	adds	r2, r7, r0
 8005478:	8812      	ldrh	r2, [r2, #0]
 800547a:	493c      	ldr	r1, [pc, #240]	; (800556c <USB_EPClearStall+0x150>)
 800547c:	430a      	orrs	r2, r1
 800547e:	b292      	uxth	r2, r2
 8005480:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	78db      	ldrb	r3, [r3, #3]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d068      	beq.n	800555c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	18d3      	adds	r3, r2, r3
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29a      	uxth	r2, r3
 8005498:	200c      	movs	r0, #12
 800549a:	183b      	adds	r3, r7, r0
 800549c:	4934      	ldr	r1, [pc, #208]	; (8005570 <USB_EPClearStall+0x154>)
 800549e:	400a      	ands	r2, r1
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	183b      	adds	r3, r7, r0
 80054a4:	183a      	adds	r2, r7, r0
 80054a6:	8812      	ldrh	r2, [r2, #0]
 80054a8:	2120      	movs	r1, #32
 80054aa:	404a      	eors	r2, r1
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	18d3      	adds	r3, r2, r3
 80054b8:	183a      	adds	r2, r7, r0
 80054ba:	8812      	ldrh	r2, [r2, #0]
 80054bc:	492d      	ldr	r1, [pc, #180]	; (8005574 <USB_EPClearStall+0x158>)
 80054be:	430a      	orrs	r2, r1
 80054c0:	b292      	uxth	r2, r2
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e04a      	b.n	800555c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	18d2      	adds	r2, r2, r3
 80054d0:	2116      	movs	r1, #22
 80054d2:	187b      	adds	r3, r7, r1
 80054d4:	8812      	ldrh	r2, [r2, #0]
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	881a      	ldrh	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	01db      	lsls	r3, r3, #7
 80054e0:	4013      	ands	r3, r2
 80054e2:	d016      	beq.n	8005512 <USB_EPClearStall+0xf6>
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	2014      	movs	r0, #20
 80054f4:	183b      	adds	r3, r7, r0
 80054f6:	491c      	ldr	r1, [pc, #112]	; (8005568 <USB_EPClearStall+0x14c>)
 80054f8:	400a      	ands	r2, r1
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	18d3      	adds	r3, r2, r3
 8005506:	183a      	adds	r2, r7, r0
 8005508:	8812      	ldrh	r2, [r2, #0]
 800550a:	491b      	ldr	r1, [pc, #108]	; (8005578 <USB_EPClearStall+0x15c>)
 800550c:	430a      	orrs	r2, r1
 800550e:	b292      	uxth	r2, r2
 8005510:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29a      	uxth	r2, r3
 8005520:	2012      	movs	r0, #18
 8005522:	183b      	adds	r3, r7, r0
 8005524:	4915      	ldr	r1, [pc, #84]	; (800557c <USB_EPClearStall+0x160>)
 8005526:	400a      	ands	r2, r1
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	183b      	adds	r3, r7, r0
 800552c:	183a      	adds	r2, r7, r0
 800552e:	8812      	ldrh	r2, [r2, #0]
 8005530:	2180      	movs	r1, #128	; 0x80
 8005532:	0149      	lsls	r1, r1, #5
 8005534:	404a      	eors	r2, r1
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	183b      	adds	r3, r7, r0
 800553a:	183a      	adds	r2, r7, r0
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	0189      	lsls	r1, r1, #6
 8005542:	404a      	eors	r2, r1
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	18d3      	adds	r3, r2, r3
 8005550:	183a      	adds	r2, r7, r0
 8005552:	8812      	ldrh	r2, [r2, #0]
 8005554:	4907      	ldr	r1, [pc, #28]	; (8005574 <USB_EPClearStall+0x158>)
 8005556:	430a      	orrs	r2, r1
 8005558:	b292      	uxth	r2, r2
 800555a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	0018      	movs	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	b006      	add	sp, #24
 8005564:	bd80      	pop	{r7, pc}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	ffff8f8f 	.word	0xffff8f8f
 800556c:	ffff80c0 	.word	0xffff80c0
 8005570:	ffff8fbf 	.word	0xffff8fbf
 8005574:	ffff8080 	.word	0xffff8080
 8005578:	ffffc080 	.word	0xffffc080
 800557c:	ffffbf8f 	.word	0xffffbf8f

08005580 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	000a      	movs	r2, r1
 800558a:	1cfb      	adds	r3, r7, #3
 800558c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800558e:	1cfb      	adds	r3, r7, #3
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	224c      	movs	r2, #76	; 0x4c
 800559a:	2180      	movs	r1, #128	; 0x80
 800559c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2258      	movs	r2, #88	; 0x58
 80055b4:	5a9b      	ldrh	r3, [r3, r2]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	4a05      	ldr	r2, [pc, #20]	; (80055d0 <USB_DevConnect+0x28>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	b299      	uxth	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2258      	movs	r2, #88	; 0x58
 80055c2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	0018      	movs	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b002      	add	sp, #8
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	ffff8000 	.word	0xffff8000

080055d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2244      	movs	r2, #68	; 0x44
 80055e0:	5a9b      	ldrh	r3, [r3, r2]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b004      	add	sp, #16
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	0019      	movs	r1, r3
 80055fc:	1dbb      	adds	r3, r7, #6
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	1c0a      	adds	r2, r1, #0
 8005604:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005618:	1dbb      	adds	r3, r7, #6
 800561a:	881a      	ldrh	r2, [r3, #0]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	18d3      	adds	r3, r2, r3
 8005620:	2280      	movs	r2, #128	; 0x80
 8005622:	00d2      	lsls	r2, r2, #3
 8005624:	4694      	mov	ip, r2
 8005626:	4463      	add	r3, ip
 8005628:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
 800562e:	e020      	b.n	8005672 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	2112      	movs	r1, #18
 8005636:	187b      	adds	r3, r7, r1
 8005638:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3301      	adds	r3, #1
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	b21a      	sxth	r2, r3
 8005644:	187b      	adds	r3, r7, r1
 8005646:	2000      	movs	r0, #0
 8005648:	5e1b      	ldrsh	r3, [r3, r0]
 800564a:	4313      	orrs	r3, r2
 800564c:	b21a      	sxth	r2, r3
 800564e:	187b      	adds	r3, r7, r1
 8005650:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	187a      	adds	r2, r7, r1
 8005656:	8812      	ldrh	r2, [r2, #0]
 8005658:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	3302      	adds	r3, #2
 800565e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3301      	adds	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3301      	adds	r3, #1
 800566a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	3b01      	subs	r3, #1
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1db      	bne.n	8005630 <USB_WritePMA+0x40>
  }
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b00a      	add	sp, #40	; 0x28
 8005680:	bd80      	pop	{r7, pc}

08005682 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b08a      	sub	sp, #40	; 0x28
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	0019      	movs	r1, r3
 800568e:	1dbb      	adds	r3, r7, #6
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	1c0a      	adds	r2, r1, #0
 8005696:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005698:	1d3b      	adds	r3, r7, #4
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	085b      	lsrs	r3, r3, #1
 800569e:	b29b      	uxth	r3, r3
 80056a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056aa:	1dbb      	adds	r3, r7, #6
 80056ac:	881a      	ldrh	r2, [r3, #0]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	18d3      	adds	r3, r2, r3
 80056b2:	2280      	movs	r2, #128	; 0x80
 80056b4:	00d2      	lsls	r2, r2, #3
 80056b6:	4694      	mov	ip, r2
 80056b8:	4463      	add	r3, ip
 80056ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	e018      	b.n	80056f4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	3302      	adds	r3, #2
 80056ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	3301      	adds	r3, #1
 80056dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	3301      	adds	r3, #1
 80056ec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	3b01      	subs	r3, #1
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e3      	bne.n	80056c2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	2201      	movs	r2, #1
 8005700:	4013      	ands	r3, r2
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	701a      	strb	r2, [r3, #0]
  }
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	b00a      	add	sp, #40	; 0x28
 800571e:	bd80      	pop	{r7, pc}

08005720 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	000a      	movs	r2, r1
 800572a:	1cfb      	adds	r3, r7, #3
 800572c:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	2304      	movs	r3, #4
 8005732:	2203      	movs	r2, #3
 8005734:	2181      	movs	r1, #129	; 0x81
 8005736:	f001 fe5a 	bl	80073ee <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005740:	2010      	movs	r0, #16
 8005742:	f001 ffd7 	bl	80076f4 <USBD_static_malloc>
 8005746:	0001      	movs	r1, r0
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	23ae      	movs	r3, #174	; 0xae
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	23ae      	movs	r3, #174	; 0xae
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	58d3      	ldr	r3, [r2, r3]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 800575c:	2302      	movs	r3, #2
 800575e:	e006      	b.n	800576e <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	23ae      	movs	r3, #174	; 0xae
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	58d3      	ldr	r3, [r2, r3]
 8005768:	2200      	movs	r2, #0
 800576a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	0018      	movs	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	b002      	add	sp, #8
 8005774:	bd80      	pop	{r7, pc}

08005776 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	000a      	movs	r2, r1
 8005780:	1cfb      	adds	r3, r7, #3
 8005782:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2181      	movs	r1, #129	; 0x81
 8005788:	0018      	movs	r0, r3
 800578a:	f001 fe67 	bl	800745c <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	23ae      	movs	r3, #174	; 0xae
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	58d3      	ldr	r3, [r2, r3]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	23ae      	movs	r3, #174	; 0xae
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	58d3      	ldr	r3, [r2, r3]
 80057a8:	0018      	movs	r0, r3
 80057aa:	f001 ffaf 	bl	800770c <USBD_static_free>
    pdev->pClassData = NULL;
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	23ae      	movs	r3, #174	; 0xae
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	2100      	movs	r1, #0
 80057b6:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	0018      	movs	r0, r3
 80057bc:	46bd      	mov	sp, r7
 80057be:	b002      	add	sp, #8
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	23ae      	movs	r3, #174	; 0xae
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	58d3      	ldr	r3, [r2, r3]
 80057d6:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80057d8:	231e      	movs	r3, #30
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	2200      	movs	r2, #0
 80057de:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80057e4:	230e      	movs	r3, #14
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	2200      	movs	r2, #0
 80057ea:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ec:	2317      	movs	r3, #23
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	001a      	movs	r2, r3
 80057fa:	2360      	movs	r3, #96	; 0x60
 80057fc:	4013      	ands	r3, r2
 80057fe:	d03a      	beq.n	8005876 <USBD_HID_Setup+0xb2>
 8005800:	2b20      	cmp	r3, #32
 8005802:	d000      	beq.n	8005806 <USBD_HID_Setup+0x42>
 8005804:	e0d6      	b.n	80059b4 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b0b      	cmp	r3, #11
 800580c:	d008      	beq.n	8005820 <USBD_HID_Setup+0x5c>
 800580e:	dc26      	bgt.n	800585e <USBD_HID_Setup+0x9a>
 8005810:	2b0a      	cmp	r3, #10
 8005812:	d013      	beq.n	800583c <USBD_HID_Setup+0x78>
 8005814:	dc23      	bgt.n	800585e <USBD_HID_Setup+0x9a>
 8005816:	2b02      	cmp	r3, #2
 8005818:	d019      	beq.n	800584e <USBD_HID_Setup+0x8a>
 800581a:	2b03      	cmp	r3, #3
 800581c:	d007      	beq.n	800582e <USBD_HID_Setup+0x6a>
 800581e:	e01e      	b.n	800585e <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	885b      	ldrh	r3, [r3, #2]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	001a      	movs	r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	601a      	str	r2, [r3, #0]
          break;
 800582c:	e022      	b.n	8005874 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800582e:	6939      	ldr	r1, [r7, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	0018      	movs	r0, r3
 8005836:	f001 fabf 	bl	8006db8 <USBD_CtlSendData>
          break;
 800583a:	e01b      	b.n	8005874 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	885b      	ldrh	r3, [r3, #2]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	b29b      	uxth	r3, r3
 8005844:	b2db      	uxtb	r3, r3
 8005846:	001a      	movs	r2, r3
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	605a      	str	r2, [r3, #4]
          break;
 800584c:	e012      	b.n	8005874 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1d19      	adds	r1, r3, #4
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	0018      	movs	r0, r3
 8005858:	f001 faae 	bl	8006db8 <USBD_CtlSendData>
          break;
 800585c:	e00a      	b.n	8005874 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	0011      	movs	r1, r2
 8005864:	0018      	movs	r0, r3
 8005866:	f001 fa29 	bl	8006cbc <USBD_CtlError>
          ret = USBD_FAIL;
 800586a:	2317      	movs	r3, #23
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	2202      	movs	r2, #2
 8005870:	701a      	strb	r2, [r3, #0]
          break;
 8005872:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005874:	e0a9      	b.n	80059ca <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b0b      	cmp	r3, #11
 800587c:	d100      	bne.n	8005880 <USBD_HID_Setup+0xbc>
 800587e:	e075      	b.n	800596c <USBD_HID_Setup+0x1a8>
 8005880:	dd00      	ble.n	8005884 <USBD_HID_Setup+0xc0>
 8005882:	e08b      	b.n	800599c <USBD_HID_Setup+0x1d8>
 8005884:	2b0a      	cmp	r3, #10
 8005886:	d057      	beq.n	8005938 <USBD_HID_Setup+0x174>
 8005888:	dd00      	ble.n	800588c <USBD_HID_Setup+0xc8>
 800588a:	e087      	b.n	800599c <USBD_HID_Setup+0x1d8>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <USBD_HID_Setup+0xd2>
 8005890:	2b06      	cmp	r3, #6
 8005892:	d019      	beq.n	80058c8 <USBD_HID_Setup+0x104>
 8005894:	e082      	b.n	800599c <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	23a7      	movs	r3, #167	; 0xa7
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	5cd3      	ldrb	r3, [r2, r3]
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d107      	bne.n	80058b2 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80058a2:	230e      	movs	r3, #14
 80058a4:	18f9      	adds	r1, r7, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f001 fa84 	bl	8006db8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058b0:	e07f      	b.n	80059b2 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0011      	movs	r1, r2
 80058b8:	0018      	movs	r0, r3
 80058ba:	f001 f9ff 	bl	8006cbc <USBD_CtlError>
            ret = USBD_FAIL;
 80058be:	2317      	movs	r3, #23
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	2202      	movs	r2, #2
 80058c4:	701a      	strb	r2, [r3, #0]
          break;
 80058c6:	e074      	b.n	80059b2 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	885b      	ldrh	r3, [r3, #2]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b22      	cmp	r3, #34	; 0x22
 80058d2:	d10b      	bne.n	80058ec <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	88db      	ldrh	r3, [r3, #6]
 80058d8:	221e      	movs	r2, #30
 80058da:	18ba      	adds	r2, r7, r2
 80058dc:	b299      	uxth	r1, r3
 80058de:	294a      	cmp	r1, #74	; 0x4a
 80058e0:	d900      	bls.n	80058e4 <USBD_HID_Setup+0x120>
 80058e2:	234a      	movs	r3, #74	; 0x4a
 80058e4:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 80058e6:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <USBD_HID_Setup+0x214>)
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	e01c      	b.n	8005926 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	885b      	ldrh	r3, [r3, #2]
 80058f0:	0a1b      	lsrs	r3, r3, #8
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b21      	cmp	r3, #33	; 0x21
 80058f6:	d10b      	bne.n	8005910 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 80058f8:	4b38      	ldr	r3, [pc, #224]	; (80059dc <USBD_HID_Setup+0x218>)
 80058fa:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	88db      	ldrh	r3, [r3, #6]
 8005900:	221e      	movs	r2, #30
 8005902:	18ba      	adds	r2, r7, r2
 8005904:	b299      	uxth	r1, r3
 8005906:	2909      	cmp	r1, #9
 8005908:	d900      	bls.n	800590c <USBD_HID_Setup+0x148>
 800590a:	2309      	movs	r3, #9
 800590c:	8013      	strh	r3, [r2, #0]
 800590e:	e00a      	b.n	8005926 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	0011      	movs	r1, r2
 8005916:	0018      	movs	r0, r3
 8005918:	f001 f9d0 	bl	8006cbc <USBD_CtlError>
            ret = USBD_FAIL;
 800591c:	2317      	movs	r3, #23
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	2202      	movs	r2, #2
 8005922:	701a      	strb	r2, [r3, #0]
            break;
 8005924:	e045      	b.n	80059b2 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005926:	231e      	movs	r3, #30
 8005928:	18fb      	adds	r3, r7, r3
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	0018      	movs	r0, r3
 8005932:	f001 fa41 	bl	8006db8 <USBD_CtlSendData>
          break;
 8005936:	e03c      	b.n	80059b2 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	23a7      	movs	r3, #167	; 0xa7
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	5cd3      	ldrb	r3, [r2, r3]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d108      	bne.n	8005956 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	3308      	adds	r3, #8
 8005948:	0019      	movs	r1, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	0018      	movs	r0, r3
 8005950:	f001 fa32 	bl	8006db8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005954:	e02d      	b.n	80059b2 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	0011      	movs	r1, r2
 800595c:	0018      	movs	r0, r3
 800595e:	f001 f9ad 	bl	8006cbc <USBD_CtlError>
            ret = USBD_FAIL;
 8005962:	2317      	movs	r3, #23
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	2202      	movs	r2, #2
 8005968:	701a      	strb	r2, [r3, #0]
          break;
 800596a:	e022      	b.n	80059b2 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	23a7      	movs	r3, #167	; 0xa7
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	5cd3      	ldrb	r3, [r2, r3]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d106      	bne.n	8005986 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	885b      	ldrh	r3, [r3, #2]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	001a      	movs	r2, r3
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005984:	e015      	b.n	80059b2 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	0011      	movs	r1, r2
 800598c:	0018      	movs	r0, r3
 800598e:	f001 f995 	bl	8006cbc <USBD_CtlError>
            ret = USBD_FAIL;
 8005992:	2317      	movs	r3, #23
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	2202      	movs	r2, #2
 8005998:	701a      	strb	r2, [r3, #0]
          break;
 800599a:	e00a      	b.n	80059b2 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0011      	movs	r1, r2
 80059a2:	0018      	movs	r0, r3
 80059a4:	f001 f98a 	bl	8006cbc <USBD_CtlError>
          ret = USBD_FAIL;
 80059a8:	2317      	movs	r3, #23
 80059aa:	18fb      	adds	r3, r7, r3
 80059ac:	2202      	movs	r2, #2
 80059ae:	701a      	strb	r2, [r3, #0]
          break;
 80059b0:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80059b2:	e00a      	b.n	80059ca <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	0011      	movs	r1, r2
 80059ba:	0018      	movs	r0, r3
 80059bc:	f001 f97e 	bl	8006cbc <USBD_CtlError>
      ret = USBD_FAIL;
 80059c0:	2317      	movs	r3, #23
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	2202      	movs	r2, #2
 80059c6:	701a      	strb	r2, [r3, #0]
      break;
 80059c8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80059ca:	2317      	movs	r3, #23
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	781b      	ldrb	r3, [r3, #0]
}
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b008      	add	sp, #32
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200000c8 	.word	0x200000c8
 80059dc:	200000b0 	.word	0x200000b0

080059e0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	1dbb      	adds	r3, r7, #6
 80059ec:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	23ae      	movs	r3, #174	; 0xae
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	58d3      	ldr	r3, [r2, r3]
 80059f6:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	23a7      	movs	r3, #167	; 0xa7
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	5cd3      	ldrb	r3, [r2, r3]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d10d      	bne.n	8005a20 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	7b1b      	ldrb	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d109      	bne.n	8005a20 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005a12:	1dbb      	adds	r3, r7, #6
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	2181      	movs	r1, #129	; 0x81
 8005a1c:	f001 fdfb 	bl	8007616 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	0018      	movs	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b006      	add	sp, #24
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2222      	movs	r2, #34	; 0x22
 8005a38:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005a3a:	4b02      	ldr	r3, [pc, #8]	; (8005a44 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b002      	add	sp, #8
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	20000044 	.word	0x20000044

08005a48 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2222      	movs	r2, #34	; 0x22
 8005a54:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005a56:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005a58:	0018      	movs	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000068 	.word	0x20000068

08005a64 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2222      	movs	r2, #34	; 0x22
 8005a70:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005a72:	4b02      	ldr	r3, [pc, #8]	; (8005a7c <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005a74:	0018      	movs	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	2000008c 	.word	0x2000008c

08005a80 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	000a      	movs	r2, r1
 8005a8a:	1cfb      	adds	r3, r7, #3
 8005a8c:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	23ae      	movs	r3, #174	; 0xae
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	58d3      	ldr	r3, [r2, r3]
 8005a96:	2200      	movs	r2, #0
 8005a98:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b002      	add	sp, #8
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	220a      	movs	r2, #10
 8005ab0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005ab2:	4b02      	ldr	r3, [pc, #8]	; (8005abc <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	200000bc 	.word	0x200000bc

08005ac0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	1dfb      	adds	r3, r7, #7
 8005acc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e020      	b.n	8005b1a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	23ad      	movs	r3, #173	; 0xad
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	58d3      	ldr	r3, [r2, r3]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	23ad      	movs	r3, #173	; 0xad
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	2100      	movs	r1, #0
 8005aec:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	23ac      	movs	r3, #172	; 0xac
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	23a7      	movs	r3, #167	; 0xa7
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	2101      	movs	r1, #1
 8005b06:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1dfa      	adds	r2, r7, #7
 8005b0c:	7812      	ldrb	r2, [r2, #0]
 8005b0e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	0018      	movs	r0, r3
 8005b14:	f001 fbf6 	bl	8007304 <USBD_LL_Init>

  return USBD_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b004      	add	sp, #16
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005b2c:	200f      	movs	r0, #15
 8005b2e:	183b      	adds	r3, r7, r0
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	23ad      	movs	r3, #173	; 0xad
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005b44:	183b      	adds	r3, r7, r0
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	e003      	b.n	8005b54 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005b4c:	230f      	movs	r3, #15
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	2202      	movs	r2, #2
 8005b52:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005b54:	230f      	movs	r3, #15
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	781b      	ldrb	r3, [r3, #0]
}
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b004      	add	sp, #16
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f001 fc19 	bl	80073a4 <USBD_LL_Start>

  return USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	0018      	movs	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b002      	add	sp, #8
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	0018      	movs	r0, r3
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	b002      	add	sp, #8
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b8e:	b590      	push	{r4, r7, lr}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	000a      	movs	r2, r1
 8005b98:	1cfb      	adds	r3, r7, #3
 8005b9a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b9c:	240f      	movs	r4, #15
 8005b9e:	193b      	adds	r3, r7, r4
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	23ad      	movs	r3, #173	; 0xad
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	58d3      	ldr	r3, [r2, r3]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	23ad      	movs	r3, #173	; 0xad
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	58d3      	ldr	r3, [r2, r3]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	1cfa      	adds	r2, r7, #3
 8005bbc:	7811      	ldrb	r1, [r2, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	0010      	movs	r0, r2
 8005bc2:	4798      	blx	r3
 8005bc4:	1e03      	subs	r3, r0, #0
 8005bc6:	d102      	bne.n	8005bce <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005bc8:	193b      	adds	r3, r7, r4
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005bce:	230f      	movs	r3, #15
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	781b      	ldrb	r3, [r3, #0]
}
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b005      	add	sp, #20
 8005bda:	bd90      	pop	{r4, r7, pc}

08005bdc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	000a      	movs	r2, r1
 8005be6:	1cfb      	adds	r3, r7, #3
 8005be8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	23ad      	movs	r3, #173	; 0xad
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	58d3      	ldr	r3, [r2, r3]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	1cfa      	adds	r2, r7, #3
 8005bf6:	7811      	ldrb	r1, [r2, #0]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	0010      	movs	r0, r2
 8005bfc:	4798      	blx	r3

  return USBD_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	0018      	movs	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	22aa      	movs	r2, #170	; 0xaa
 8005c16:	0092      	lsls	r2, r2, #2
 8005c18:	4694      	mov	ip, r2
 8005c1a:	4463      	add	r3, ip
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	0011      	movs	r1, r2
 8005c20:	0018      	movs	r0, r3
 8005c22:	f001 f810 	bl	8006c46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	23a5      	movs	r3, #165	; 0xa5
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a23      	ldr	r2, [pc, #140]	; (8005cc0 <USBD_LL_SetupStage+0xb8>)
 8005c34:	5a9b      	ldrh	r3, [r3, r2]
 8005c36:	0019      	movs	r1, r3
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	23a6      	movs	r3, #166	; 0xa6
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	23aa      	movs	r3, #170	; 0xaa
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	5cd3      	ldrb	r3, [r2, r3]
 8005c48:	001a      	movs	r2, r3
 8005c4a:	231f      	movs	r3, #31
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d019      	beq.n	8005c86 <USBD_LL_SetupStage+0x7e>
 8005c52:	d822      	bhi.n	8005c9a <USBD_LL_SetupStage+0x92>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <USBD_LL_SetupStage+0x56>
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d00a      	beq.n	8005c72 <USBD_LL_SetupStage+0x6a>
 8005c5c:	e01d      	b.n	8005c9a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	22aa      	movs	r2, #170	; 0xaa
 8005c62:	0092      	lsls	r2, r2, #2
 8005c64:	189a      	adds	r2, r3, r2
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	0011      	movs	r1, r2
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f000 fa10 	bl	8006090 <USBD_StdDevReq>
      break;
 8005c70:	e020      	b.n	8005cb4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	22aa      	movs	r2, #170	; 0xaa
 8005c76:	0092      	lsls	r2, r2, #2
 8005c78:	189a      	adds	r2, r3, r2
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0011      	movs	r1, r2
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f000 fa78 	bl	8006174 <USBD_StdItfReq>
      break;
 8005c84:	e016      	b.n	8005cb4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	22aa      	movs	r2, #170	; 0xaa
 8005c8a:	0092      	lsls	r2, r2, #2
 8005c8c:	189a      	adds	r2, r3, r2
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	0011      	movs	r1, r2
 8005c92:	0018      	movs	r0, r3
 8005c94:	f000 fac5 	bl	8006222 <USBD_StdEPReq>
      break;
 8005c98:	e00c      	b.n	8005cb4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	23aa      	movs	r3, #170	; 0xaa
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	5cd3      	ldrb	r3, [r2, r3]
 8005ca2:	227f      	movs	r2, #127	; 0x7f
 8005ca4:	4393      	bics	r3, r2
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	0011      	movs	r1, r2
 8005cac:	0018      	movs	r0, r3
 8005cae:	f001 fc00 	bl	80074b2 <USBD_LL_StallEP>
      break;
 8005cb2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	b002      	add	sp, #8
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	000002ae 	.word	0x000002ae

08005cc4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	607a      	str	r2, [r7, #4]
 8005cce:	200b      	movs	r0, #11
 8005cd0:	183b      	adds	r3, r7, r0
 8005cd2:	1c0a      	adds	r2, r1, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005cd6:	183b      	adds	r3, r7, r0
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d154      	bne.n	8005d88 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3355      	adds	r3, #85	; 0x55
 8005ce2:	33ff      	adds	r3, #255	; 0xff
 8005ce4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	23a5      	movs	r3, #165	; 0xa5
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	58d3      	ldr	r3, [r2, r3]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d139      	bne.n	8005d66 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d919      	bls.n	8005d32 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d203      	bcs.n	8005d20 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	e002      	b.n	8005d26 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	001a      	movs	r2, r3
 8005d2c:	f001 f877 	bl	8006e1e <USBD_CtlContinueRx>
 8005d30:	e045      	b.n	8005dbe <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	23ad      	movs	r3, #173	; 0xad
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	58d3      	ldr	r3, [r2, r3]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	23a7      	movs	r3, #167	; 0xa7
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d107      	bne.n	8005d5c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	23ad      	movs	r3, #173	; 0xad
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	58d3      	ldr	r3, [r2, r3]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	0010      	movs	r0, r2
 8005d5a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f001 f870 	bl	8006e44 <USBD_CtlSendStatus>
 8005d64:	e02b      	b.n	8005dbe <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	23a5      	movs	r3, #165	; 0xa5
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	58d3      	ldr	r3, [r2, r3]
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d125      	bne.n	8005dbe <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	23a5      	movs	r3, #165	; 0xa5
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	2100      	movs	r1, #0
 8005d7a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2100      	movs	r1, #0
 8005d80:	0018      	movs	r0, r3
 8005d82:	f001 fb96 	bl	80074b2 <USBD_LL_StallEP>
 8005d86:	e01a      	b.n	8005dbe <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	23ad      	movs	r3, #173	; 0xad
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	58d3      	ldr	r3, [r2, r3]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d011      	beq.n	8005dba <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	23a7      	movs	r3, #167	; 0xa7
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d10b      	bne.n	8005dba <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	23ad      	movs	r3, #173	; 0xad
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	58d3      	ldr	r3, [r2, r3]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	220b      	movs	r2, #11
 8005dae:	18ba      	adds	r2, r7, r2
 8005db0:	7811      	ldrb	r1, [r2, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	0010      	movs	r0, r2
 8005db6:	4798      	blx	r3
 8005db8:	e001      	b.n	8005dbe <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e000      	b.n	8005dc0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b006      	add	sp, #24
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	607a      	str	r2, [r7, #4]
 8005dd2:	200b      	movs	r0, #11
 8005dd4:	183b      	adds	r3, r7, r0
 8005dd6:	1c0a      	adds	r2, r1, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005dda:	183b      	adds	r3, r7, r0
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d000      	beq.n	8005de4 <USBD_LL_DataInStage+0x1c>
 8005de2:	e08e      	b.n	8005f02 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3314      	adds	r3, #20
 8005de8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	23a5      	movs	r3, #165	; 0xa5
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	58d3      	ldr	r3, [r2, r3]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d164      	bne.n	8005ec0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d915      	bls.n	8005e2e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 ffec 	bl	8006df8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	2300      	movs	r3, #0
 8005e24:	2200      	movs	r2, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	f001 fc2c 	bl	8007684 <USBD_LL_PrepareReceive>
 8005e2c:	e059      	b.n	8005ee2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	0019      	movs	r1, r3
 8005e38:	0010      	movs	r0, r2
 8005e3a:	f7fa f9eb 	bl	8000214 <__aeabi_uidivmod>
 8005e3e:	1e0b      	subs	r3, r1, #0
 8005e40:	d11f      	bne.n	8005e82 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d319      	bcc.n	8005e82 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	68f9      	ldr	r1, [r7, #12]
 8005e54:	23a6      	movs	r3, #166	; 0xa6
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d211      	bcs.n	8005e82 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	0018      	movs	r0, r3
 8005e66:	f000 ffc7 	bl	8006df8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	23a6      	movs	r3, #166	; 0xa6
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	2100      	movs	r1, #0
 8005e72:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	2300      	movs	r3, #0
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	f001 fc02 	bl	8007684 <USBD_LL_PrepareReceive>
 8005e80:	e02f      	b.n	8005ee2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	23ad      	movs	r3, #173	; 0xad
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	58d3      	ldr	r3, [r2, r3]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00d      	beq.n	8005eac <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	23a7      	movs	r3, #167	; 0xa7
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d107      	bne.n	8005eac <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	23ad      	movs	r3, #173	; 0xad
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	58d3      	ldr	r3, [r2, r3]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	0010      	movs	r0, r2
 8005eaa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f001 fafe 	bl	80074b2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 ffd7 	bl	8006e6c <USBD_CtlReceiveStatus>
 8005ebe:	e010      	b.n	8005ee2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	23a5      	movs	r3, #165	; 0xa5
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	58d3      	ldr	r3, [r2, r3]
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d005      	beq.n	8005ed8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	23a5      	movs	r3, #165	; 0xa5
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	0018      	movs	r0, r3
 8005ede:	f001 fae8 	bl	80074b2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	23a8      	movs	r3, #168	; 0xa8
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	5cd3      	ldrb	r3, [r2, r3]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d124      	bne.n	8005f38 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f7ff fe43 	bl	8005b7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	23a8      	movs	r3, #168	; 0xa8
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	2100      	movs	r1, #0
 8005efe:	54d1      	strb	r1, [r2, r3]
 8005f00:	e01a      	b.n	8005f38 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	23ad      	movs	r3, #173	; 0xad
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	58d3      	ldr	r3, [r2, r3]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d011      	beq.n	8005f34 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	23a7      	movs	r3, #167	; 0xa7
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d10b      	bne.n	8005f34 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	23ad      	movs	r3, #173	; 0xad
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	58d3      	ldr	r3, [r2, r3]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	220b      	movs	r2, #11
 8005f28:	18ba      	adds	r2, r7, r2
 8005f2a:	7811      	ldrb	r1, [r2, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	0010      	movs	r0, r2
 8005f30:	4798      	blx	r3
 8005f32:	e001      	b.n	8005f38 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f34:	2302      	movs	r3, #2
 8005f36:	e000      	b.n	8005f3a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b006      	add	sp, #24
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	2340      	movs	r3, #64	; 0x40
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2100      	movs	r1, #0
 8005f52:	f001 fa4c 	bl	80073ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	23ac      	movs	r3, #172	; 0xac
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	23b2      	movs	r3, #178	; 0xb2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	2140      	movs	r1, #64	; 0x40
 8005f68:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	2340      	movs	r3, #64	; 0x40
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2180      	movs	r1, #128	; 0x80
 8005f72:	f001 fa3c 	bl	80073ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2240      	movs	r2, #64	; 0x40
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	23a7      	movs	r3, #167	; 0xa7
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	2101      	movs	r1, #1
 8005f8a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	23a5      	movs	r3, #165	; 0xa5
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	2100      	movs	r1, #0
 8005f94:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	23a9      	movs	r3, #169	; 0xa9
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	23ae      	movs	r3, #174	; 0xae
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	58d3      	ldr	r3, [r2, r3]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	23ad      	movs	r3, #173	; 0xad
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	58d3      	ldr	r3, [r2, r3]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	b2d9      	uxtb	r1, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	4790      	blx	r2
  }

  return USBD_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	0018      	movs	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b002      	add	sp, #8
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	000a      	movs	r2, r1
 8005fdc:	1cfb      	adds	r3, r7, #3
 8005fde:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	1cfa      	adds	r2, r7, #3
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b002      	add	sp, #8
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	23a7      	movs	r3, #167	; 0xa7
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	5cd1      	ldrb	r1, [r2, r3]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a06      	ldr	r2, [pc, #24]	; (8006020 <USBD_LL_Suspend+0x2c>)
 8006008:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	23a7      	movs	r3, #167	; 0xa7
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	2104      	movs	r1, #4
 8006012:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b002      	add	sp, #8
 800601c:	bd80      	pop	{r7, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	0000029d 	.word	0x0000029d

08006024 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	23a7      	movs	r3, #167	; 0xa7
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	5cd3      	ldrb	r3, [r2, r3]
 8006034:	2b04      	cmp	r3, #4
 8006036:	d106      	bne.n	8006046 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a05      	ldr	r2, [pc, #20]	; (8006050 <USBD_LL_Resume+0x2c>)
 800603c:	5c99      	ldrb	r1, [r3, r2]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	23a7      	movs	r3, #167	; 0xa7
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	0018      	movs	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	b002      	add	sp, #8
 800604e:	bd80      	pop	{r7, pc}
 8006050:	0000029d 	.word	0x0000029d

08006054 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	23a7      	movs	r3, #167	; 0xa7
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	5cd3      	ldrb	r3, [r2, r3]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d10e      	bne.n	8006086 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	23ad      	movs	r3, #173	; 0xad
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	58d3      	ldr	r3, [r2, r3]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	23ad      	movs	r3, #173	; 0xad
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	58d3      	ldr	r3, [r2, r3]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	0010      	movs	r0, r2
 8006084:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b002      	add	sp, #8
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800609a:	230f      	movs	r3, #15
 800609c:	18fb      	adds	r3, r7, r3
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	001a      	movs	r2, r3
 80060a8:	2360      	movs	r3, #96	; 0x60
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	d004      	beq.n	80060ba <USBD_StdDevReq+0x2a>
 80060b0:	d84f      	bhi.n	8006152 <USBD_StdDevReq+0xc2>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <USBD_StdDevReq+0x3e>
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d14b      	bne.n	8006152 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	23ad      	movs	r3, #173	; 0xad
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	58d3      	ldr	r3, [r2, r3]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	0010      	movs	r0, r2
 80060ca:	4798      	blx	r3
      break;
 80060cc:	e048      	b.n	8006160 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b09      	cmp	r3, #9
 80060d4:	d835      	bhi.n	8006142 <USBD_StdDevReq+0xb2>
 80060d6:	009a      	lsls	r2, r3, #2
 80060d8:	4b25      	ldr	r3, [pc, #148]	; (8006170 <USBD_StdDevReq+0xe0>)
 80060da:	18d3      	adds	r3, r2, r3
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	0011      	movs	r1, r2
 80060e6:	0018      	movs	r0, r3
 80060e8:	f000 fa52 	bl	8006590 <USBD_GetDescriptor>
          break;
 80060ec:	e030      	b.n	8006150 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	0011      	movs	r1, r2
 80060f4:	0018      	movs	r0, r3
 80060f6:	f000 fbfd 	bl	80068f4 <USBD_SetAddress>
          break;
 80060fa:	e029      	b.n	8006150 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0011      	movs	r1, r2
 8006102:	0018      	movs	r0, r3
 8006104:	f000 fc4a 	bl	800699c <USBD_SetConfig>
          break;
 8006108:	e022      	b.n	8006150 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	0011      	movs	r1, r2
 8006110:	0018      	movs	r0, r3
 8006112:	f000 fce7 	bl	8006ae4 <USBD_GetConfig>
          break;
 8006116:	e01b      	b.n	8006150 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	0011      	movs	r1, r2
 800611e:	0018      	movs	r0, r3
 8006120:	f000 fd1b 	bl	8006b5a <USBD_GetStatus>
          break;
 8006124:	e014      	b.n	8006150 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	0011      	movs	r1, r2
 800612c:	0018      	movs	r0, r3
 800612e:	f000 fd4e 	bl	8006bce <USBD_SetFeature>
          break;
 8006132:	e00d      	b.n	8006150 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f000 fd5d 	bl	8006bfa <USBD_ClrFeature>
          break;
 8006140:	e006      	b.n	8006150 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	0011      	movs	r1, r2
 8006148:	0018      	movs	r0, r3
 800614a:	f000 fdb7 	bl	8006cbc <USBD_CtlError>
          break;
 800614e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006150:	e006      	b.n	8006160 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	0011      	movs	r1, r2
 8006158:	0018      	movs	r0, r3
 800615a:	f000 fdaf 	bl	8006cbc <USBD_CtlError>
      break;
 800615e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006160:	230f      	movs	r3, #15
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	781b      	ldrb	r3, [r3, #0]
}
 8006166:	0018      	movs	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	b004      	add	sp, #16
 800616c:	bd80      	pop	{r7, pc}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	0800786c 	.word	0x0800786c

08006174 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006174:	b5b0      	push	{r4, r5, r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800617e:	230f      	movs	r3, #15
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	001a      	movs	r2, r3
 800618c:	2360      	movs	r3, #96	; 0x60
 800618e:	4013      	ands	r3, r2
 8006190:	2b40      	cmp	r3, #64	; 0x40
 8006192:	d004      	beq.n	800619e <USBD_StdItfReq+0x2a>
 8006194:	d839      	bhi.n	800620a <USBD_StdItfReq+0x96>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <USBD_StdItfReq+0x2a>
 800619a:	2b20      	cmp	r3, #32
 800619c:	d135      	bne.n	800620a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	23a7      	movs	r3, #167	; 0xa7
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	5cd3      	ldrb	r3, [r2, r3]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d825      	bhi.n	80061f8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	889b      	ldrh	r3, [r3, #4]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d819      	bhi.n	80061ea <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	23ad      	movs	r3, #173	; 0xad
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	58d3      	ldr	r3, [r2, r3]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	250f      	movs	r5, #15
 80061c2:	197c      	adds	r4, r7, r5
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	0010      	movs	r0, r2
 80061ca:	4798      	blx	r3
 80061cc:	0003      	movs	r3, r0
 80061ce:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	88db      	ldrh	r3, [r3, #6]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d116      	bne.n	8006206 <USBD_StdItfReq+0x92>
 80061d8:	197b      	adds	r3, r7, r5
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d112      	bne.n	8006206 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	0018      	movs	r0, r3
 80061e4:	f000 fe2e 	bl	8006e44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061e8:	e00d      	b.n	8006206 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	0011      	movs	r1, r2
 80061f0:	0018      	movs	r0, r3
 80061f2:	f000 fd63 	bl	8006cbc <USBD_CtlError>
          break;
 80061f6:	e006      	b.n	8006206 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0011      	movs	r1, r2
 80061fe:	0018      	movs	r0, r3
 8006200:	f000 fd5c 	bl	8006cbc <USBD_CtlError>
          break;
 8006204:	e000      	b.n	8006208 <USBD_StdItfReq+0x94>
          break;
 8006206:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006208:	e006      	b.n	8006218 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	0011      	movs	r1, r2
 8006210:	0018      	movs	r0, r3
 8006212:	f000 fd53 	bl	8006cbc <USBD_CtlError>
      break;
 8006216:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	0018      	movs	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	b004      	add	sp, #16
 8006220:	bdb0      	pop	{r4, r5, r7, pc}

08006222 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006222:	b5b0      	push	{r4, r5, r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800622c:	230f      	movs	r3, #15
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	889a      	ldrh	r2, [r3, #4]
 8006238:	230e      	movs	r3, #14
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	001a      	movs	r2, r3
 8006244:	2360      	movs	r3, #96	; 0x60
 8006246:	4013      	ands	r3, r2
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d006      	beq.n	800625a <USBD_StdEPReq+0x38>
 800624c:	d900      	bls.n	8006250 <USBD_StdEPReq+0x2e>
 800624e:	e190      	b.n	8006572 <USBD_StdEPReq+0x350>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <USBD_StdEPReq+0x4c>
 8006254:	2b20      	cmp	r3, #32
 8006256:	d000      	beq.n	800625a <USBD_StdEPReq+0x38>
 8006258:	e18b      	b.n	8006572 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	23ad      	movs	r3, #173	; 0xad
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	58d3      	ldr	r3, [r2, r3]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	0010      	movs	r0, r2
 800626a:	4798      	blx	r3
      break;
 800626c:	e188      	b.n	8006580 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	001a      	movs	r2, r3
 8006274:	2360      	movs	r3, #96	; 0x60
 8006276:	4013      	ands	r3, r2
 8006278:	2b20      	cmp	r3, #32
 800627a:	d10f      	bne.n	800629c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	23ad      	movs	r3, #173	; 0xad
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	58d3      	ldr	r3, [r2, r3]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	250f      	movs	r5, #15
 8006288:	197c      	adds	r4, r7, r5
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	0010      	movs	r0, r2
 8006290:	4798      	blx	r3
 8006292:	0003      	movs	r3, r0
 8006294:	7023      	strb	r3, [r4, #0]

        return ret;
 8006296:	197b      	adds	r3, r7, r5
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	e174      	b.n	8006586 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d007      	beq.n	80062b4 <USBD_StdEPReq+0x92>
 80062a4:	dd00      	ble.n	80062a8 <USBD_StdEPReq+0x86>
 80062a6:	e15c      	b.n	8006562 <USBD_StdEPReq+0x340>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d100      	bne.n	80062ae <USBD_StdEPReq+0x8c>
 80062ac:	e092      	b.n	80063d4 <USBD_StdEPReq+0x1b2>
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d04b      	beq.n	800634a <USBD_StdEPReq+0x128>
 80062b2:	e156      	b.n	8006562 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	23a7      	movs	r3, #167	; 0xa7
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	5cd3      	ldrb	r3, [r2, r3]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d002      	beq.n	80062c6 <USBD_StdEPReq+0xa4>
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d01d      	beq.n	8006300 <USBD_StdEPReq+0xde>
 80062c4:	e039      	b.n	800633a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062c6:	220e      	movs	r2, #14
 80062c8:	18bb      	adds	r3, r7, r2
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d010      	beq.n	80062f2 <USBD_StdEPReq+0xd0>
 80062d0:	18bb      	adds	r3, r7, r2
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b80      	cmp	r3, #128	; 0x80
 80062d6:	d00c      	beq.n	80062f2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80062d8:	18bb      	adds	r3, r7, r2
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	0011      	movs	r1, r2
 80062e0:	0018      	movs	r0, r3
 80062e2:	f001 f8e6 	bl	80074b2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	0018      	movs	r0, r3
 80062ec:	f001 f8e1 	bl	80074b2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062f0:	e02a      	b.n	8006348 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	0011      	movs	r1, r2
 80062f8:	0018      	movs	r0, r3
 80062fa:	f000 fcdf 	bl	8006cbc <USBD_CtlError>
              break;
 80062fe:	e023      	b.n	8006348 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	885b      	ldrh	r3, [r3, #2]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d113      	bne.n	8006330 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006308:	220e      	movs	r2, #14
 800630a:	18bb      	adds	r3, r7, r2
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <USBD_StdEPReq+0x10e>
 8006312:	18bb      	adds	r3, r7, r2
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b80      	cmp	r3, #128	; 0x80
 8006318:	d00a      	beq.n	8006330 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88db      	ldrh	r3, [r3, #6]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006322:	18bb      	adds	r3, r7, r2
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	0011      	movs	r1, r2
 800632a:	0018      	movs	r0, r3
 800632c:	f001 f8c1 	bl	80074b2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	0018      	movs	r0, r3
 8006334:	f000 fd86 	bl	8006e44 <USBD_CtlSendStatus>

              break;
 8006338:	e006      	b.n	8006348 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0011      	movs	r1, r2
 8006340:	0018      	movs	r0, r3
 8006342:	f000 fcbb 	bl	8006cbc <USBD_CtlError>
              break;
 8006346:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006348:	e112      	b.n	8006570 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	23a7      	movs	r3, #167	; 0xa7
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	5cd3      	ldrb	r3, [r2, r3]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d002      	beq.n	800635c <USBD_StdEPReq+0x13a>
 8006356:	2b03      	cmp	r3, #3
 8006358:	d01d      	beq.n	8006396 <USBD_StdEPReq+0x174>
 800635a:	e032      	b.n	80063c2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800635c:	220e      	movs	r2, #14
 800635e:	18bb      	adds	r3, r7, r2
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d010      	beq.n	8006388 <USBD_StdEPReq+0x166>
 8006366:	18bb      	adds	r3, r7, r2
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d00c      	beq.n	8006388 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800636e:	18bb      	adds	r3, r7, r2
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	0011      	movs	r1, r2
 8006376:	0018      	movs	r0, r3
 8006378:	f001 f89b 	bl	80074b2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2180      	movs	r1, #128	; 0x80
 8006380:	0018      	movs	r0, r3
 8006382:	f001 f896 	bl	80074b2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006386:	e024      	b.n	80063d2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	0011      	movs	r1, r2
 800638e:	0018      	movs	r0, r3
 8006390:	f000 fc94 	bl	8006cbc <USBD_CtlError>
              break;
 8006394:	e01d      	b.n	80063d2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	885b      	ldrh	r3, [r3, #2]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d118      	bne.n	80063d0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800639e:	210e      	movs	r1, #14
 80063a0:	187b      	adds	r3, r7, r1
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	227f      	movs	r2, #127	; 0x7f
 80063a6:	4013      	ands	r3, r2
 80063a8:	d006      	beq.n	80063b8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80063aa:	187b      	adds	r3, r7, r1
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	0011      	movs	r1, r2
 80063b2:	0018      	movs	r0, r3
 80063b4:	f001 f8a8 	bl	8007508 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	0018      	movs	r0, r3
 80063bc:	f000 fd42 	bl	8006e44 <USBD_CtlSendStatus>
              }
              break;
 80063c0:	e006      	b.n	80063d0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	0011      	movs	r1, r2
 80063c8:	0018      	movs	r0, r3
 80063ca:	f000 fc77 	bl	8006cbc <USBD_CtlError>
              break;
 80063ce:	e000      	b.n	80063d2 <USBD_StdEPReq+0x1b0>
              break;
 80063d0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80063d2:	e0cd      	b.n	8006570 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	23a7      	movs	r3, #167	; 0xa7
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	5cd3      	ldrb	r3, [r2, r3]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d002      	beq.n	80063e6 <USBD_StdEPReq+0x1c4>
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d03c      	beq.n	800645e <USBD_StdEPReq+0x23c>
 80063e4:	e0b5      	b.n	8006552 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063e6:	220e      	movs	r2, #14
 80063e8:	18bb      	adds	r3, r7, r2
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <USBD_StdEPReq+0x1e4>
 80063f0:	18bb      	adds	r3, r7, r2
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d006      	beq.n	8006406 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	0011      	movs	r1, r2
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 fc5c 	bl	8006cbc <USBD_CtlError>
                break;
 8006404:	e0ac      	b.n	8006560 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006406:	220e      	movs	r2, #14
 8006408:	18bb      	adds	r3, r7, r2
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	b25b      	sxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	da0c      	bge.n	800642c <USBD_StdEPReq+0x20a>
 8006412:	18bb      	adds	r3, r7, r2
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	227f      	movs	r2, #127	; 0x7f
 8006418:	401a      	ands	r2, r3
 800641a:	0013      	movs	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	189b      	adds	r3, r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	3310      	adds	r3, #16
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	18d3      	adds	r3, r2, r3
 8006428:	3304      	adds	r3, #4
 800642a:	e00d      	b.n	8006448 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800642c:	230e      	movs	r3, #14
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	227f      	movs	r2, #127	; 0x7f
 8006434:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006436:	0013      	movs	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	189b      	adds	r3, r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	3351      	adds	r3, #81	; 0x51
 8006440:	33ff      	adds	r3, #255	; 0xff
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	18d3      	adds	r3, r2, r3
 8006446:	3304      	adds	r3, #4
 8006448:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006450:	68b9      	ldr	r1, [r7, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	0018      	movs	r0, r3
 8006458:	f000 fcae 	bl	8006db8 <USBD_CtlSendData>
              break;
 800645c:	e080      	b.n	8006560 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800645e:	220e      	movs	r2, #14
 8006460:	18bb      	adds	r3, r7, r2
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	b25b      	sxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	da14      	bge.n	8006494 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800646a:	18bb      	adds	r3, r7, r2
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	220f      	movs	r2, #15
 8006470:	401a      	ands	r2, r3
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	0013      	movs	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	189b      	adds	r3, r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	18cb      	adds	r3, r1, r3
 800647e:	3318      	adds	r3, #24
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d11e      	bne.n	80064c4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	0011      	movs	r1, r2
 800648c:	0018      	movs	r0, r3
 800648e:	f000 fc15 	bl	8006cbc <USBD_CtlError>
                  break;
 8006492:	e065      	b.n	8006560 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006494:	230e      	movs	r3, #14
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	220f      	movs	r2, #15
 800649c:	401a      	ands	r2, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	23ac      	movs	r3, #172	; 0xac
 80064a2:	0059      	lsls	r1, r3, #1
 80064a4:	0013      	movs	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	189b      	adds	r3, r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	18c3      	adds	r3, r0, r3
 80064ae:	185b      	adds	r3, r3, r1
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	0011      	movs	r1, r2
 80064bc:	0018      	movs	r0, r3
 80064be:	f000 fbfd 	bl	8006cbc <USBD_CtlError>
                  break;
 80064c2:	e04d      	b.n	8006560 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064c4:	220e      	movs	r2, #14
 80064c6:	18bb      	adds	r3, r7, r2
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da0c      	bge.n	80064ea <USBD_StdEPReq+0x2c8>
 80064d0:	18bb      	adds	r3, r7, r2
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	227f      	movs	r2, #127	; 0x7f
 80064d6:	401a      	ands	r2, r3
 80064d8:	0013      	movs	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	3310      	adds	r3, #16
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	18d3      	adds	r3, r2, r3
 80064e6:	3304      	adds	r3, #4
 80064e8:	e00d      	b.n	8006506 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064ea:	230e      	movs	r3, #14
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	227f      	movs	r2, #127	; 0x7f
 80064f2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064f4:	0013      	movs	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	189b      	adds	r3, r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	3351      	adds	r3, #81	; 0x51
 80064fe:	33ff      	adds	r3, #255	; 0xff
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	18d3      	adds	r3, r2, r3
 8006504:	3304      	adds	r3, #4
 8006506:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006508:	220e      	movs	r2, #14
 800650a:	18bb      	adds	r3, r7, r2
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <USBD_StdEPReq+0x2f8>
 8006512:	18bb      	adds	r3, r7, r2
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b80      	cmp	r3, #128	; 0x80
 8006518:	d103      	bne.n	8006522 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e010      	b.n	8006544 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006522:	230e      	movs	r3, #14
 8006524:	18fb      	adds	r3, r7, r3
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	0011      	movs	r1, r2
 800652c:	0018      	movs	r0, r3
 800652e:	f001 f816 	bl	800755e <USBD_LL_IsStallEP>
 8006532:	1e03      	subs	r3, r0, #0
 8006534:	d003      	beq.n	800653e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2201      	movs	r2, #1
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	e002      	b.n	8006544 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006544:	68b9      	ldr	r1, [r7, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	0018      	movs	r0, r3
 800654c:	f000 fc34 	bl	8006db8 <USBD_CtlSendData>
              break;
 8006550:	e006      	b.n	8006560 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	0011      	movs	r1, r2
 8006558:	0018      	movs	r0, r3
 800655a:	f000 fbaf 	bl	8006cbc <USBD_CtlError>
              break;
 800655e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006560:	e006      	b.n	8006570 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	0011      	movs	r1, r2
 8006568:	0018      	movs	r0, r3
 800656a:	f000 fba7 	bl	8006cbc <USBD_CtlError>
          break;
 800656e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006570:	e006      	b.n	8006580 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	0011      	movs	r1, r2
 8006578:	0018      	movs	r0, r3
 800657a:	f000 fb9f 	bl	8006cbc <USBD_CtlError>
      break;
 800657e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006580:	230f      	movs	r3, #15
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	781b      	ldrb	r3, [r3, #0]
}
 8006586:	0018      	movs	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	b004      	add	sp, #16
 800658c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006590 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800659a:	2308      	movs	r3, #8
 800659c:	18fb      	adds	r3, r7, r3
 800659e:	2200      	movs	r2, #0
 80065a0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065a6:	230b      	movs	r3, #11
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	885b      	ldrh	r3, [r3, #2]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b07      	cmp	r3, #7
 80065b8:	d900      	bls.n	80065bc <USBD_GetDescriptor+0x2c>
 80065ba:	e159      	b.n	8006870 <USBD_GetDescriptor+0x2e0>
 80065bc:	009a      	lsls	r2, r3, #2
 80065be:	4bcb      	ldr	r3, [pc, #812]	; (80068ec <USBD_GetDescriptor+0x35c>)
 80065c0:	18d3      	adds	r3, r2, r3
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	23ac      	movs	r3, #172	; 0xac
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	58d3      	ldr	r3, [r2, r3]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	7c12      	ldrb	r2, [r2, #16]
 80065d4:	2108      	movs	r1, #8
 80065d6:	1879      	adds	r1, r7, r1
 80065d8:	0010      	movs	r0, r2
 80065da:	4798      	blx	r3
 80065dc:	0003      	movs	r3, r0
 80065de:	60fb      	str	r3, [r7, #12]
      break;
 80065e0:	e153      	b.n	800688a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	7c1b      	ldrb	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	23ad      	movs	r3, #173	; 0xad
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	58d3      	ldr	r3, [r2, r3]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	2208      	movs	r2, #8
 80065f6:	18ba      	adds	r2, r7, r2
 80065f8:	0010      	movs	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	0003      	movs	r3, r0
 80065fe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3301      	adds	r3, #1
 8006604:	2202      	movs	r2, #2
 8006606:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006608:	e13f      	b.n	800688a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	23ad      	movs	r3, #173	; 0xad
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	58d3      	ldr	r3, [r2, r3]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	2208      	movs	r2, #8
 8006616:	18ba      	adds	r2, r7, r2
 8006618:	0010      	movs	r0, r2
 800661a:	4798      	blx	r3
 800661c:	0003      	movs	r3, r0
 800661e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	2202      	movs	r2, #2
 8006626:	701a      	strb	r2, [r3, #0]
      break;
 8006628:	e12f      	b.n	800688a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	885b      	ldrh	r3, [r3, #2]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b05      	cmp	r3, #5
 8006632:	d900      	bls.n	8006636 <USBD_GetDescriptor+0xa6>
 8006634:	e0d0      	b.n	80067d8 <USBD_GetDescriptor+0x248>
 8006636:	009a      	lsls	r2, r3, #2
 8006638:	4bad      	ldr	r3, [pc, #692]	; (80068f0 <USBD_GetDescriptor+0x360>)
 800663a:	18d3      	adds	r3, r2, r3
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	23ac      	movs	r3, #172	; 0xac
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	58d3      	ldr	r3, [r2, r3]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00d      	beq.n	800666a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	23ac      	movs	r3, #172	; 0xac
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	58d3      	ldr	r3, [r2, r3]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	7c12      	ldrb	r2, [r2, #16]
 800665c:	2108      	movs	r1, #8
 800665e:	1879      	adds	r1, r7, r1
 8006660:	0010      	movs	r0, r2
 8006662:	4798      	blx	r3
 8006664:	0003      	movs	r3, r0
 8006666:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006668:	e0c3      	b.n	80067f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	0011      	movs	r1, r2
 8006670:	0018      	movs	r0, r3
 8006672:	f000 fb23 	bl	8006cbc <USBD_CtlError>
            err++;
 8006676:	210b      	movs	r1, #11
 8006678:	187b      	adds	r3, r7, r1
 800667a:	781a      	ldrb	r2, [r3, #0]
 800667c:	187b      	adds	r3, r7, r1
 800667e:	3201      	adds	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]
          break;
 8006682:	e0b6      	b.n	80067f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	23ac      	movs	r3, #172	; 0xac
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	58d3      	ldr	r3, [r2, r3]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00d      	beq.n	80066ae <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	23ac      	movs	r3, #172	; 0xac
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	58d3      	ldr	r3, [r2, r3]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	7c12      	ldrb	r2, [r2, #16]
 80066a0:	2108      	movs	r1, #8
 80066a2:	1879      	adds	r1, r7, r1
 80066a4:	0010      	movs	r0, r2
 80066a6:	4798      	blx	r3
 80066a8:	0003      	movs	r3, r0
 80066aa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ac:	e0a1      	b.n	80067f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	0011      	movs	r1, r2
 80066b4:	0018      	movs	r0, r3
 80066b6:	f000 fb01 	bl	8006cbc <USBD_CtlError>
            err++;
 80066ba:	210b      	movs	r1, #11
 80066bc:	187b      	adds	r3, r7, r1
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	3201      	adds	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
          break;
 80066c6:	e094      	b.n	80067f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	23ac      	movs	r3, #172	; 0xac
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	58d3      	ldr	r3, [r2, r3]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00d      	beq.n	80066f2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	23ac      	movs	r3, #172	; 0xac
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	58d3      	ldr	r3, [r2, r3]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	7c12      	ldrb	r2, [r2, #16]
 80066e4:	2108      	movs	r1, #8
 80066e6:	1879      	adds	r1, r7, r1
 80066e8:	0010      	movs	r0, r2
 80066ea:	4798      	blx	r3
 80066ec:	0003      	movs	r3, r0
 80066ee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066f0:	e07f      	b.n	80067f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	0011      	movs	r1, r2
 80066f8:	0018      	movs	r0, r3
 80066fa:	f000 fadf 	bl	8006cbc <USBD_CtlError>
            err++;
 80066fe:	210b      	movs	r1, #11
 8006700:	187b      	adds	r3, r7, r1
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	187b      	adds	r3, r7, r1
 8006706:	3201      	adds	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
          break;
 800670a:	e072      	b.n	80067f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	23ac      	movs	r3, #172	; 0xac
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	58d3      	ldr	r3, [r2, r3]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00d      	beq.n	8006736 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	23ac      	movs	r3, #172	; 0xac
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	58d3      	ldr	r3, [r2, r3]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7c12      	ldrb	r2, [r2, #16]
 8006728:	2108      	movs	r1, #8
 800672a:	1879      	adds	r1, r7, r1
 800672c:	0010      	movs	r0, r2
 800672e:	4798      	blx	r3
 8006730:	0003      	movs	r3, r0
 8006732:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006734:	e05d      	b.n	80067f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	0011      	movs	r1, r2
 800673c:	0018      	movs	r0, r3
 800673e:	f000 fabd 	bl	8006cbc <USBD_CtlError>
            err++;
 8006742:	210b      	movs	r1, #11
 8006744:	187b      	adds	r3, r7, r1
 8006746:	781a      	ldrb	r2, [r3, #0]
 8006748:	187b      	adds	r3, r7, r1
 800674a:	3201      	adds	r2, #1
 800674c:	701a      	strb	r2, [r3, #0]
          break;
 800674e:	e050      	b.n	80067f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	23ac      	movs	r3, #172	; 0xac
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	58d3      	ldr	r3, [r2, r3]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00d      	beq.n	800677a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	23ac      	movs	r3, #172	; 0xac
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	58d3      	ldr	r3, [r2, r3]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	7c12      	ldrb	r2, [r2, #16]
 800676c:	2108      	movs	r1, #8
 800676e:	1879      	adds	r1, r7, r1
 8006770:	0010      	movs	r0, r2
 8006772:	4798      	blx	r3
 8006774:	0003      	movs	r3, r0
 8006776:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006778:	e03b      	b.n	80067f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	0011      	movs	r1, r2
 8006780:	0018      	movs	r0, r3
 8006782:	f000 fa9b 	bl	8006cbc <USBD_CtlError>
            err++;
 8006786:	210b      	movs	r1, #11
 8006788:	187b      	adds	r3, r7, r1
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	187b      	adds	r3, r7, r1
 800678e:	3201      	adds	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
          break;
 8006792:	e02e      	b.n	80067f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	23ac      	movs	r3, #172	; 0xac
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	58d3      	ldr	r3, [r2, r3]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00d      	beq.n	80067be <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	23ac      	movs	r3, #172	; 0xac
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	58d3      	ldr	r3, [r2, r3]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7c12      	ldrb	r2, [r2, #16]
 80067b0:	2108      	movs	r1, #8
 80067b2:	1879      	adds	r1, r7, r1
 80067b4:	0010      	movs	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	0003      	movs	r3, r0
 80067ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067bc:	e019      	b.n	80067f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	0011      	movs	r1, r2
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 fa79 	bl	8006cbc <USBD_CtlError>
            err++;
 80067ca:	210b      	movs	r1, #11
 80067cc:	187b      	adds	r3, r7, r1
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	3201      	adds	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]
          break;
 80067d6:	e00c      	b.n	80067f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	0011      	movs	r1, r2
 80067de:	0018      	movs	r0, r3
 80067e0:	f000 fa6c 	bl	8006cbc <USBD_CtlError>
          err++;
 80067e4:	210b      	movs	r1, #11
 80067e6:	187b      	adds	r3, r7, r1
 80067e8:	781a      	ldrb	r2, [r3, #0]
 80067ea:	187b      	adds	r3, r7, r1
 80067ec:	3201      	adds	r2, #1
 80067ee:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80067f0:	e04b      	b.n	800688a <USBD_GetDescriptor+0x2fa>
 80067f2:	e04a      	b.n	800688a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7c1b      	ldrb	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	23ad      	movs	r3, #173	; 0xad
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	58d3      	ldr	r3, [r2, r3]
 8006804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006806:	2208      	movs	r2, #8
 8006808:	18ba      	adds	r2, r7, r2
 800680a:	0010      	movs	r0, r2
 800680c:	4798      	blx	r3
 800680e:	0003      	movs	r3, r0
 8006810:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006812:	e03a      	b.n	800688a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	0011      	movs	r1, r2
 800681a:	0018      	movs	r0, r3
 800681c:	f000 fa4e 	bl	8006cbc <USBD_CtlError>
        err++;
 8006820:	210b      	movs	r1, #11
 8006822:	187b      	adds	r3, r7, r1
 8006824:	781a      	ldrb	r2, [r3, #0]
 8006826:	187b      	adds	r3, r7, r1
 8006828:	3201      	adds	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
      break;
 800682c:	e02d      	b.n	800688a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7c1b      	ldrb	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10f      	bne.n	8006856 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	23ad      	movs	r3, #173	; 0xad
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	58d3      	ldr	r3, [r2, r3]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	2208      	movs	r2, #8
 8006842:	18ba      	adds	r2, r7, r2
 8006844:	0010      	movs	r0, r2
 8006846:	4798      	blx	r3
 8006848:	0003      	movs	r3, r0
 800684a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	2207      	movs	r2, #7
 8006852:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006854:	e019      	b.n	800688a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	0011      	movs	r1, r2
 800685c:	0018      	movs	r0, r3
 800685e:	f000 fa2d 	bl	8006cbc <USBD_CtlError>
        err++;
 8006862:	210b      	movs	r1, #11
 8006864:	187b      	adds	r3, r7, r1
 8006866:	781a      	ldrb	r2, [r3, #0]
 8006868:	187b      	adds	r3, r7, r1
 800686a:	3201      	adds	r2, #1
 800686c:	701a      	strb	r2, [r3, #0]
      break;
 800686e:	e00c      	b.n	800688a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0011      	movs	r1, r2
 8006876:	0018      	movs	r0, r3
 8006878:	f000 fa20 	bl	8006cbc <USBD_CtlError>
      err++;
 800687c:	210b      	movs	r1, #11
 800687e:	187b      	adds	r3, r7, r1
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	187b      	adds	r3, r7, r1
 8006884:	3201      	adds	r2, #1
 8006886:	701a      	strb	r2, [r3, #0]
      break;
 8006888:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800688a:	230b      	movs	r3, #11
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d127      	bne.n	80068e4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006894:	2108      	movs	r1, #8
 8006896:	187b      	adds	r3, r7, r1
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d019      	beq.n	80068d2 <USBD_GetDescriptor+0x342>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d015      	beq.n	80068d2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	88da      	ldrh	r2, [r3, #6]
 80068aa:	187b      	adds	r3, r7, r1
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	1c18      	adds	r0, r3, #0
 80068b0:	1c11      	adds	r1, r2, #0
 80068b2:	b28a      	uxth	r2, r1
 80068b4:	b283      	uxth	r3, r0
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d900      	bls.n	80068bc <USBD_GetDescriptor+0x32c>
 80068ba:	1c01      	adds	r1, r0, #0
 80068bc:	b28a      	uxth	r2, r1
 80068be:	2108      	movs	r1, #8
 80068c0:	187b      	adds	r3, r7, r1
 80068c2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068c4:	187b      	adds	r3, r7, r1
 80068c6:	881a      	ldrh	r2, [r3, #0]
 80068c8:	68f9      	ldr	r1, [r7, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	0018      	movs	r0, r3
 80068ce:	f000 fa73 	bl	8006db8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	88db      	ldrh	r3, [r3, #6]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d105      	bne.n	80068e6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 fab1 	bl	8006e44 <USBD_CtlSendStatus>
 80068e2:	e000      	b.n	80068e6 <USBD_GetDescriptor+0x356>
    return;
 80068e4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b004      	add	sp, #16
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	08007894 	.word	0x08007894
 80068f0:	080078b4 	.word	0x080078b4

080068f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068f4:	b590      	push	{r4, r7, lr}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	889b      	ldrh	r3, [r3, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d13d      	bne.n	8006982 <USBD_SetAddress+0x8e>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	88db      	ldrh	r3, [r3, #6]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d139      	bne.n	8006982 <USBD_SetAddress+0x8e>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	885b      	ldrh	r3, [r3, #2]
 8006912:	2b7f      	cmp	r3, #127	; 0x7f
 8006914:	d835      	bhi.n	8006982 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	885b      	ldrh	r3, [r3, #2]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	230f      	movs	r3, #15
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	217f      	movs	r1, #127	; 0x7f
 8006922:	400a      	ands	r2, r1
 8006924:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	23a7      	movs	r3, #167	; 0xa7
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	5cd3      	ldrb	r3, [r2, r3]
 800692e:	2b03      	cmp	r3, #3
 8006930:	d106      	bne.n	8006940 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	0011      	movs	r1, r2
 8006938:	0018      	movs	r0, r3
 800693a:	f000 f9bf 	bl	8006cbc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693e:	e027      	b.n	8006990 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	240f      	movs	r4, #15
 8006944:	193a      	adds	r2, r7, r4
 8006946:	4914      	ldr	r1, [pc, #80]	; (8006998 <USBD_SetAddress+0xa4>)
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800694c:	193b      	adds	r3, r7, r4
 800694e:	781a      	ldrb	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	0011      	movs	r1, r2
 8006954:	0018      	movs	r0, r3
 8006956:	f000 fe33 	bl	80075c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0018      	movs	r0, r3
 800695e:	f000 fa71 	bl	8006e44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006962:	193b      	adds	r3, r7, r4
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	23a7      	movs	r3, #167	; 0xa7
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	2102      	movs	r1, #2
 8006972:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006974:	e00c      	b.n	8006990 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	23a7      	movs	r3, #167	; 0xa7
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	2101      	movs	r1, #1
 800697e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006980:	e006      	b.n	8006990 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	0011      	movs	r1, r2
 8006988:	0018      	movs	r0, r3
 800698a:	f000 f997 	bl	8006cbc <USBD_CtlError>
  }
}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	b005      	add	sp, #20
 8006996:	bd90      	pop	{r4, r7, pc}
 8006998:	0000029e 	.word	0x0000029e

0800699c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	885b      	ldrh	r3, [r3, #2]
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	4b4c      	ldr	r3, [pc, #304]	; (8006ae0 <USBD_SetConfig+0x144>)
 80069ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069b0:	4b4b      	ldr	r3, [pc, #300]	; (8006ae0 <USBD_SetConfig+0x144>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d906      	bls.n	80069c6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0011      	movs	r1, r2
 80069be:	0018      	movs	r0, r3
 80069c0:	f000 f97c 	bl	8006cbc <USBD_CtlError>
 80069c4:	e088      	b.n	8006ad8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	23a7      	movs	r3, #167	; 0xa7
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	5cd3      	ldrb	r3, [r2, r3]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d002      	beq.n	80069d8 <USBD_SetConfig+0x3c>
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d029      	beq.n	8006a2a <USBD_SetConfig+0x8e>
 80069d6:	e071      	b.n	8006abc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80069d8:	4b41      	ldr	r3, [pc, #260]	; (8006ae0 <USBD_SetConfig+0x144>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01f      	beq.n	8006a20 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80069e0:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <USBD_SetConfig+0x144>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	001a      	movs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	23a7      	movs	r3, #167	; 0xa7
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	2103      	movs	r1, #3
 80069f2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069f4:	4b3a      	ldr	r3, [pc, #232]	; (8006ae0 <USBD_SetConfig+0x144>)
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0011      	movs	r1, r2
 80069fc:	0018      	movs	r0, r3
 80069fe:	f7ff f8c6 	bl	8005b8e <USBD_SetClassConfig>
 8006a02:	0003      	movs	r3, r0
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d106      	bne.n	8006a16 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	0011      	movs	r1, r2
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f000 f954 	bl	8006cbc <USBD_CtlError>
            return;
 8006a14:	e060      	b.n	8006ad8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 fa13 	bl	8006e44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a1e:	e05b      	b.n	8006ad8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0018      	movs	r0, r3
 8006a24:	f000 fa0e 	bl	8006e44 <USBD_CtlSendStatus>
        break;
 8006a28:	e056      	b.n	8006ad8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a2a:	4b2d      	ldr	r3, [pc, #180]	; (8006ae0 <USBD_SetConfig+0x144>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d115      	bne.n	8006a5e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	23a7      	movs	r3, #167	; 0xa7
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	2102      	movs	r1, #2
 8006a3a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006a3c:	4b28      	ldr	r3, [pc, #160]	; (8006ae0 <USBD_SetConfig+0x144>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	001a      	movs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a46:	4b26      	ldr	r3, [pc, #152]	; (8006ae0 <USBD_SetConfig+0x144>)
 8006a48:	781a      	ldrb	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	0011      	movs	r1, r2
 8006a4e:	0018      	movs	r0, r3
 8006a50:	f7ff f8c4 	bl	8005bdc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	0018      	movs	r0, r3
 8006a58:	f000 f9f4 	bl	8006e44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a5c:	e03c      	b.n	8006ad8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006a5e:	4b20      	ldr	r3, [pc, #128]	; (8006ae0 <USBD_SetConfig+0x144>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	001a      	movs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d022      	beq.n	8006ab2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	0011      	movs	r1, r2
 8006a76:	0018      	movs	r0, r3
 8006a78:	f7ff f8b0 	bl	8005bdc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a7c:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <USBD_SetConfig+0x144>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	001a      	movs	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a86:	4b16      	ldr	r3, [pc, #88]	; (8006ae0 <USBD_SetConfig+0x144>)
 8006a88:	781a      	ldrb	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	0011      	movs	r1, r2
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f7ff f87d 	bl	8005b8e <USBD_SetClassConfig>
 8006a94:	0003      	movs	r3, r0
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d106      	bne.n	8006aa8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	0011      	movs	r1, r2
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f000 f90b 	bl	8006cbc <USBD_CtlError>
            return;
 8006aa6:	e017      	b.n	8006ad8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 f9ca 	bl	8006e44 <USBD_CtlSendStatus>
        break;
 8006ab0:	e012      	b.n	8006ad8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 f9c5 	bl	8006e44 <USBD_CtlSendStatus>
        break;
 8006aba:	e00d      	b.n	8006ad8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	0011      	movs	r1, r2
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f000 f8fa 	bl	8006cbc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <USBD_SetConfig+0x144>)
 8006aca:	781a      	ldrb	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	0011      	movs	r1, r2
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f7ff f883 	bl	8005bdc <USBD_ClrClassConfig>
        break;
 8006ad6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b002      	add	sp, #8
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	20000194 	.word	0x20000194

08006ae4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	88db      	ldrh	r3, [r3, #6]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d006      	beq.n	8006b04 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	0011      	movs	r1, r2
 8006afc:	0018      	movs	r0, r3
 8006afe:	f000 f8dd 	bl	8006cbc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b02:	e026      	b.n	8006b52 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	23a7      	movs	r3, #167	; 0xa7
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	5cd3      	ldrb	r3, [r2, r3]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	dc02      	bgt.n	8006b16 <USBD_GetConfig+0x32>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dc03      	bgt.n	8006b1c <USBD_GetConfig+0x38>
 8006b14:	e016      	b.n	8006b44 <USBD_GetConfig+0x60>
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d00c      	beq.n	8006b34 <USBD_GetConfig+0x50>
 8006b1a:	e013      	b.n	8006b44 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3308      	adds	r3, #8
 8006b26:	0019      	movs	r1, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 f943 	bl	8006db8 <USBD_CtlSendData>
        break;
 8006b32:	e00e      	b.n	8006b52 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	1d19      	adds	r1, r3, #4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f000 f93b 	bl	8006db8 <USBD_CtlSendData>
        break;
 8006b42:	e006      	b.n	8006b52 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	0011      	movs	r1, r2
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f000 f8b6 	bl	8006cbc <USBD_CtlError>
        break;
 8006b50:	46c0      	nop			; (mov r8, r8)
}
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	46bd      	mov	sp, r7
 8006b56:	b002      	add	sp, #8
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	23a7      	movs	r3, #167	; 0xa7
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	5cd3      	ldrb	r3, [r2, r3]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d822      	bhi.n	8006bb8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	88db      	ldrh	r3, [r3, #6]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d006      	beq.n	8006b88 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	0011      	movs	r1, r2
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 f89b 	bl	8006cbc <USBD_CtlError>
        break;
 8006b86:	e01e      	b.n	8006bc6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	23a9      	movs	r3, #169	; 0xa9
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	58d3      	ldr	r3, [r2, r3]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	0019      	movs	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f000 f901 	bl	8006db8 <USBD_CtlSendData>
      break;
 8006bb6:	e006      	b.n	8006bc6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	0011      	movs	r1, r2
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f000 f87c 	bl	8006cbc <USBD_CtlError>
      break;
 8006bc4:	46c0      	nop			; (mov r8, r8)
  }
}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b002      	add	sp, #8
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	885b      	ldrh	r3, [r3, #2]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d108      	bne.n	8006bf2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	23a9      	movs	r3, #169	; 0xa9
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	2101      	movs	r1, #1
 8006be8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f000 f929 	bl	8006e44 <USBD_CtlSendStatus>
  }
}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	b002      	add	sp, #8
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	23a7      	movs	r3, #167	; 0xa7
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	5cd3      	ldrb	r3, [r2, r3]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d80d      	bhi.n	8006c2e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	885b      	ldrh	r3, [r3, #2]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d110      	bne.n	8006c3c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	23a9      	movs	r3, #169	; 0xa9
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	2100      	movs	r1, #0
 8006c22:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	0018      	movs	r0, r3
 8006c28:	f000 f90c 	bl	8006e44 <USBD_CtlSendStatus>
      }
      break;
 8006c2c:	e006      	b.n	8006c3c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	0011      	movs	r1, r2
 8006c34:	0018      	movs	r0, r3
 8006c36:	f000 f841 	bl	8006cbc <USBD_CtlError>
      break;
 8006c3a:	e000      	b.n	8006c3e <USBD_ClrFeature+0x44>
      break;
 8006c3c:	46c0      	nop			; (mov r8, r8)
  }
}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	46bd      	mov	sp, r7
 8006c42:	b002      	add	sp, #8
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	785a      	ldrb	r2, [r3, #1]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	3302      	adds	r3, #2
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	3303      	adds	r3, #3
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	18d3      	adds	r3, r2, r3
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	3305      	adds	r3, #5
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	18d3      	adds	r3, r2, r3
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	3306      	adds	r3, #6
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	3307      	adds	r3, #7
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	18d3      	adds	r3, r2, r3
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	80da      	strh	r2, [r3, #6]

}
 8006cb4:	46c0      	nop			; (mov r8, r8)
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	b002      	add	sp, #8
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2180      	movs	r1, #128	; 0x80
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f000 fbf1 	bl	80074b2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f000 fbec 	bl	80074b2 <USBD_LL_StallEP>
}
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	b002      	add	sp, #8
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ce2:	b590      	push	{r4, r7, lr}
 8006ce4:	b087      	sub	sp, #28
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cee:	2417      	movs	r4, #23
 8006cf0:	193b      	adds	r3, r7, r4
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d03c      	beq.n	8006d76 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f000 f83d 	bl	8006d7e <USBD_GetLen>
 8006d04:	0003      	movs	r3, r0
 8006d06:	3301      	adds	r3, #1
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	18db      	adds	r3, r3, r3
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006d12:	193b      	adds	r3, r7, r4
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	193a      	adds	r2, r7, r4
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	7011      	strb	r1, [r2, #0]
 8006d1c:	001a      	movs	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	189b      	adds	r3, r3, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	7812      	ldrb	r2, [r2, #0]
 8006d26:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006d28:	193b      	adds	r3, r7, r4
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	193a      	adds	r2, r7, r4
 8006d2e:	1c59      	adds	r1, r3, #1
 8006d30:	7011      	strb	r1, [r2, #0]
 8006d32:	001a      	movs	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	189b      	adds	r3, r3, r2
 8006d38:	2203      	movs	r2, #3
 8006d3a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006d3c:	e017      	b.n	8006d6e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	60fa      	str	r2, [r7, #12]
 8006d44:	2417      	movs	r4, #23
 8006d46:	193a      	adds	r2, r7, r4
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	1939      	adds	r1, r7, r4
 8006d4c:	1c50      	adds	r0, r2, #1
 8006d4e:	7008      	strb	r0, [r1, #0]
 8006d50:	0011      	movs	r1, r2
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	1852      	adds	r2, r2, r1
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006d5a:	193b      	adds	r3, r7, r4
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	193a      	adds	r2, r7, r4
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	7011      	strb	r1, [r2, #0]
 8006d64:	001a      	movs	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	189b      	adds	r3, r3, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e3      	bne.n	8006d3e <USBD_GetString+0x5c>
    }
  }
}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	b007      	add	sp, #28
 8006d7c:	bd90      	pop	{r4, r7, pc}

08006d7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d86:	230f      	movs	r3, #15
 8006d88:	18fb      	adds	r3, r7, r3
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006d8e:	e008      	b.n	8006da2 <USBD_GetLen+0x24>
  {
    len++;
 8006d90:	210f      	movs	r1, #15
 8006d92:	187b      	adds	r3, r7, r1
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	187b      	adds	r3, r7, r1
 8006d98:	3201      	adds	r2, #1
 8006d9a:	701a      	strb	r2, [r3, #0]
    buf++;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f2      	bne.n	8006d90 <USBD_GetLen+0x12>
  }

  return len;
 8006daa:	230f      	movs	r3, #15
 8006dac:	18fb      	adds	r3, r7, r3
 8006dae:	781b      	ldrb	r3, [r3, #0]
}
 8006db0:	0018      	movs	r0, r3
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b004      	add	sp, #16
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	1dbb      	adds	r3, r7, #6
 8006dc4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	23a5      	movs	r3, #165	; 0xa5
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	2102      	movs	r1, #2
 8006dce:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006dd0:	1dbb      	adds	r3, r7, #6
 8006dd2:	881a      	ldrh	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006dd8:	1dbb      	adds	r3, r7, #6
 8006dda:	881a      	ldrh	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006de0:	1dbb      	adds	r3, r7, #6
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	2100      	movs	r1, #0
 8006dea:	f000 fc14 	bl	8007616 <USBD_LL_Transmit>

  return USBD_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	0018      	movs	r0, r3
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b004      	add	sp, #16
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	1dbb      	adds	r3, r7, #6
 8006e04:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e06:	1dbb      	adds	r3, r7, #6
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	2100      	movs	r1, #0
 8006e10:	f000 fc01 	bl	8007616 <USBD_LL_Transmit>

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	0018      	movs	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b004      	add	sp, #16
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	1dbb      	adds	r3, r7, #6
 8006e2a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e2c:	1dbb      	adds	r3, r7, #6
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	2100      	movs	r1, #0
 8006e36:	f000 fc25 	bl	8007684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b004      	add	sp, #16
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	23a5      	movs	r3, #165	; 0xa5
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	2104      	movs	r1, #4
 8006e54:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	f000 fbda 	bl	8007616 <USBD_LL_Transmit>

  return USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	0018      	movs	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b002      	add	sp, #8
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	23a5      	movs	r3, #165	; 0xa5
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	2105      	movs	r1, #5
 8006e7c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	2300      	movs	r3, #0
 8006e82:	2200      	movs	r2, #0
 8006e84:	2100      	movs	r1, #0
 8006e86:	f000 fbfd 	bl	8007684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	b002      	add	sp, #8
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e98:	490f      	ldr	r1, [pc, #60]	; (8006ed8 <MX_USB_DEVICE_Init+0x44>)
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <MX_USB_DEVICE_Init+0x48>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f7fe fe0e 	bl	8005ac0 <USBD_Init>
 8006ea4:	1e03      	subs	r3, r0, #0
 8006ea6:	d001      	beq.n	8006eac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ea8:	f7f9 fc1e 	bl	80006e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006eac:	4a0c      	ldr	r2, [pc, #48]	; (8006ee0 <MX_USB_DEVICE_Init+0x4c>)
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <MX_USB_DEVICE_Init+0x48>)
 8006eb0:	0011      	movs	r1, r2
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7fe fe35 	bl	8005b22 <USBD_RegisterClass>
 8006eb8:	1e03      	subs	r3, r0, #0
 8006eba:	d001      	beq.n	8006ec0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006ebc:	f7f9 fc14 	bl	80006e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ec0:	4b06      	ldr	r3, [pc, #24]	; (8006edc <MX_USB_DEVICE_Init+0x48>)
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f7fe fe4d 	bl	8005b62 <USBD_Start>
 8006ec8:	1e03      	subs	r3, r0, #0
 8006eca:	d001      	beq.n	8006ed0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ecc:	f7f9 fc0c 	bl	80006e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ed0:	46c0      	nop			; (mov r8, r8)
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	20000114 	.word	0x20000114
 8006edc:	20000198 	.word	0x20000198
 8006ee0:	2000000c 	.word	0x2000000c

08006ee4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	0002      	movs	r2, r0
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	1dfb      	adds	r3, r7, #7
 8006ef0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2212      	movs	r2, #18
 8006ef6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ef8:	4b02      	ldr	r3, [pc, #8]	; (8006f04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006efa:	0018      	movs	r0, r3
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b002      	add	sp, #8
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	20000130 	.word	0x20000130

08006f08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	0002      	movs	r2, r0
 8006f10:	6039      	str	r1, [r7, #0]
 8006f12:	1dfb      	adds	r3, r7, #7
 8006f14:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2204      	movs	r2, #4
 8006f1a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f1e:	0018      	movs	r0, r3
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b002      	add	sp, #8
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	20000144 	.word	0x20000144

08006f2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	0002      	movs	r2, r0
 8006f34:	6039      	str	r1, [r7, #0]
 8006f36:	1dfb      	adds	r3, r7, #7
 8006f38:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006f3a:	1dfb      	adds	r3, r7, #7
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	4908      	ldr	r1, [pc, #32]	; (8006f68 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006f46:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <USBD_FS_ProductStrDescriptor+0x40>)
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f7ff feca 	bl	8006ce2 <USBD_GetString>
 8006f4e:	e005      	b.n	8006f5c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	4905      	ldr	r1, [pc, #20]	; (8006f68 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <USBD_FS_ProductStrDescriptor+0x40>)
 8006f56:	0018      	movs	r0, r3
 8006f58:	f7ff fec3 	bl	8006ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f5c:	4b02      	ldr	r3, [pc, #8]	; (8006f68 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006f5e:	0018      	movs	r0, r3
 8006f60:	46bd      	mov	sp, r7
 8006f62:	b002      	add	sp, #8
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	46c0      	nop			; (mov r8, r8)
 8006f68:	2000045c 	.word	0x2000045c
 8006f6c:	08007808 	.word	0x08007808

08006f70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	0002      	movs	r2, r0
 8006f78:	6039      	str	r1, [r7, #0]
 8006f7a:	1dfb      	adds	r3, r7, #7
 8006f7c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4904      	ldr	r1, [pc, #16]	; (8006f94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f82:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8006f84:	0018      	movs	r0, r3
 8006f86:	f7ff feac 	bl	8006ce2 <USBD_GetString>
  return USBD_StrDesc;
 8006f8a:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b002      	add	sp, #8
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	2000045c 	.word	0x2000045c
 8006f98:	08007820 	.word	0x08007820

08006f9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	0002      	movs	r2, r0
 8006fa4:	6039      	str	r1, [r7, #0]
 8006fa6:	1dfb      	adds	r3, r7, #7
 8006fa8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	221a      	movs	r2, #26
 8006fae:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fb0:	f000 f84c 	bl	800704c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	b002      	add	sp, #8
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	20000148 	.word	0x20000148

08006fc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	0002      	movs	r2, r0
 8006fcc:	6039      	str	r1, [r7, #0]
 8006fce:	1dfb      	adds	r3, r7, #7
 8006fd0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8006fd2:	1dfb      	adds	r3, r7, #7
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	4908      	ldr	r1, [pc, #32]	; (8007000 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006fde:	4b09      	ldr	r3, [pc, #36]	; (8007004 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f7ff fe7e 	bl	8006ce2 <USBD_GetString>
 8006fe6:	e005      	b.n	8006ff4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	4905      	ldr	r1, [pc, #20]	; (8007000 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f7ff fe77 	bl	8006ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ff4:	4b02      	ldr	r3, [pc, #8]	; (8007000 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	b002      	add	sp, #8
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	2000045c 	.word	0x2000045c
 8007004:	08007834 	.word	0x08007834

08007008 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	0002      	movs	r2, r0
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	1dfb      	adds	r3, r7, #7
 8007014:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007016:	1dfb      	adds	r3, r7, #7
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	4908      	ldr	r1, [pc, #32]	; (8007044 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007022:	4b09      	ldr	r3, [pc, #36]	; (8007048 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007024:	0018      	movs	r0, r3
 8007026:	f7ff fe5c 	bl	8006ce2 <USBD_GetString>
 800702a:	e005      	b.n	8007038 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	4905      	ldr	r1, [pc, #20]	; (8007044 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007032:	0018      	movs	r0, r3
 8007034:	f7ff fe55 	bl	8006ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800703a:	0018      	movs	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	b002      	add	sp, #8
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	2000045c 	.word	0x2000045c
 8007048:	08007840 	.word	0x08007840

0800704c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <Get_SerialNum+0x48>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007058:	4b0f      	ldr	r3, [pc, #60]	; (8007098 <Get_SerialNum+0x4c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800705e:	4b0f      	ldr	r3, [pc, #60]	; (800709c <Get_SerialNum+0x50>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	18d3      	adds	r3, r2, r3
 800706a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007072:	490b      	ldr	r1, [pc, #44]	; (80070a0 <Get_SerialNum+0x54>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2208      	movs	r2, #8
 8007078:	0018      	movs	r0, r3
 800707a:	f000 f815 	bl	80070a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800707e:	4909      	ldr	r1, [pc, #36]	; (80070a4 <Get_SerialNum+0x58>)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2204      	movs	r2, #4
 8007084:	0018      	movs	r0, r3
 8007086:	f000 f80f 	bl	80070a8 <IntToUnicode>
  }
}
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	46bd      	mov	sp, r7
 800708e:	b004      	add	sp, #16
 8007090:	bd80      	pop	{r7, pc}
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	1ff80050 	.word	0x1ff80050
 8007098:	1ff80054 	.word	0x1ff80054
 800709c:	1ff80058 	.word	0x1ff80058
 80070a0:	2000014a 	.word	0x2000014a
 80070a4:	2000015a 	.word	0x2000015a

080070a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	1dfb      	adds	r3, r7, #7
 80070b4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80070b6:	2117      	movs	r1, #23
 80070b8:	187b      	adds	r3, r7, r1
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80070be:	187b      	adds	r3, r7, r1
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	e02f      	b.n	8007126 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	0f1b      	lsrs	r3, r3, #28
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	d80d      	bhi.n	80070ea <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	0f1b      	lsrs	r3, r3, #28
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	2317      	movs	r3, #23
 80070d6:	18fb      	adds	r3, r7, r3
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	0019      	movs	r1, r3
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	185b      	adds	r3, r3, r1
 80070e2:	3230      	adds	r2, #48	; 0x30
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	e00c      	b.n	8007104 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	0f1b      	lsrs	r3, r3, #28
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	2317      	movs	r3, #23
 80070f2:	18fb      	adds	r3, r7, r3
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	0019      	movs	r1, r3
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	185b      	adds	r3, r3, r1
 80070fe:	3237      	adds	r2, #55	; 0x37
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800710a:	2117      	movs	r1, #23
 800710c:	187b      	adds	r3, r7, r1
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	3301      	adds	r3, #1
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	18d3      	adds	r3, r2, r3
 8007118:	2200      	movs	r2, #0
 800711a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800711c:	187b      	adds	r3, r7, r1
 800711e:	781a      	ldrb	r2, [r3, #0]
 8007120:	187b      	adds	r3, r7, r1
 8007122:	3201      	adds	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	2317      	movs	r3, #23
 8007128:	18fa      	adds	r2, r7, r3
 800712a:	1dfb      	adds	r3, r7, #7
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d3c8      	bcc.n	80070c6 <IntToUnicode+0x1e>
  }
}
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	46bd      	mov	sp, r7
 800713a:	b006      	add	sp, #24
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <HAL_PCD_MspInit+0x38>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d10e      	bne.n	8007170 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <HAL_PCD_MspInit+0x3c>)
 8007154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <HAL_PCD_MspInit+0x3c>)
 8007158:	2180      	movs	r1, #128	; 0x80
 800715a:	0409      	lsls	r1, r1, #16
 800715c:	430a      	orrs	r2, r1
 800715e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	201f      	movs	r0, #31
 8007166:	f7f9 fc6d 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800716a:	201f      	movs	r0, #31
 800716c:	f7f9 fc7f 	bl	8000a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007170:	46c0      	nop			; (mov r8, r8)
 8007172:	46bd      	mov	sp, r7
 8007174:	b002      	add	sp, #8
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40005c00 	.word	0x40005c00
 800717c:	40021000 	.word	0x40021000

08007180 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	23bc      	movs	r3, #188	; 0xbc
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	58d2      	ldr	r2, [r2, r3]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	21ac      	movs	r1, #172	; 0xac
 8007194:	0089      	lsls	r1, r1, #2
 8007196:	468c      	mov	ip, r1
 8007198:	4463      	add	r3, ip
 800719a:	0019      	movs	r1, r3
 800719c:	0010      	movs	r0, r2
 800719e:	f7fe fd33 	bl	8005c08 <USBD_LL_SetupStage>
}
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	46bd      	mov	sp, r7
 80071a6:	b002      	add	sp, #8
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071aa:	b590      	push	{r4, r7, lr}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	000a      	movs	r2, r1
 80071b4:	1cfb      	adds	r3, r7, #3
 80071b6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	23bc      	movs	r3, #188	; 0xbc
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	58d4      	ldr	r4, [r2, r3]
 80071c0:	1cfb      	adds	r3, r7, #3
 80071c2:	781a      	ldrb	r2, [r3, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	23be      	movs	r3, #190	; 0xbe
 80071c8:	0059      	lsls	r1, r3, #1
 80071ca:	0013      	movs	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	189b      	adds	r3, r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	18c3      	adds	r3, r0, r3
 80071d4:	185b      	adds	r3, r3, r1
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	1cfb      	adds	r3, r7, #3
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	0019      	movs	r1, r3
 80071de:	0020      	movs	r0, r4
 80071e0:	f7fe fd70 	bl	8005cc4 <USBD_LL_DataOutStage>
}
 80071e4:	46c0      	nop			; (mov r8, r8)
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b003      	add	sp, #12
 80071ea:	bd90      	pop	{r4, r7, pc}

080071ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	000a      	movs	r2, r1
 80071f6:	1cfb      	adds	r3, r7, #3
 80071f8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	23bc      	movs	r3, #188	; 0xbc
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	58d0      	ldr	r0, [r2, r3]
 8007202:	1cfb      	adds	r3, r7, #3
 8007204:	781a      	ldrb	r2, [r3, #0]
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	0013      	movs	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	189b      	adds	r3, r3, r2
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	18cb      	adds	r3, r1, r3
 8007212:	333c      	adds	r3, #60	; 0x3c
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	1cfb      	adds	r3, r7, #3
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	0019      	movs	r1, r3
 800721c:	f7fe fdd4 	bl	8005dc8 <USBD_LL_DataInStage>
}
 8007220:	46c0      	nop			; (mov r8, r8)
 8007222:	46bd      	mov	sp, r7
 8007224:	b002      	add	sp, #8
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	23bc      	movs	r3, #188	; 0xbc
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	58d3      	ldr	r3, [r2, r3]
 8007238:	0018      	movs	r0, r3
 800723a:	f7fe ff0b 	bl	8006054 <USBD_LL_SOF>
}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	46bd      	mov	sp, r7
 8007242:	b002      	add	sp, #8
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800724e:	230f      	movs	r3, #15
 8007250:	18fb      	adds	r3, r7, r3
 8007252:	2201      	movs	r2, #1
 8007254:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d001      	beq.n	8007262 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800725e:	f7f9 fa43 	bl	80006e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	23bc      	movs	r3, #188	; 0xbc
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	58d2      	ldr	r2, [r2, r3]
 800726a:	230f      	movs	r3, #15
 800726c:	18fb      	adds	r3, r7, r3
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	0019      	movs	r1, r3
 8007272:	0010      	movs	r0, r2
 8007274:	f7fe fead 	bl	8005fd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	23bc      	movs	r3, #188	; 0xbc
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	58d3      	ldr	r3, [r2, r3]
 8007280:	0018      	movs	r0, r3
 8007282:	f7fe fe5e 	bl	8005f42 <USBD_LL_Reset>
}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	46bd      	mov	sp, r7
 800728a:	b004      	add	sp, #16
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	23bc      	movs	r3, #188	; 0xbc
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	58d3      	ldr	r3, [r2, r3]
 80072a0:	0018      	movs	r0, r3
 80072a2:	f7fe fea7 	bl	8005ff4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072ae:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <HAL_PCD_SuspendCallback+0x34>)
 80072b0:	691a      	ldr	r2, [r3, #16]
 80072b2:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <HAL_PCD_SuspendCallback+0x34>)
 80072b4:	2106      	movs	r1, #6
 80072b6:	430a      	orrs	r2, r1
 80072b8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	46bd      	mov	sp, r7
 80072be:	b002      	add	sp, #8
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	e000ed00 	.word	0xe000ed00

080072c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d007      	beq.n	80072e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072d8:	4b09      	ldr	r3, [pc, #36]	; (8007300 <HAL_PCD_ResumeCallback+0x38>)
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	4b08      	ldr	r3, [pc, #32]	; (8007300 <HAL_PCD_ResumeCallback+0x38>)
 80072de:	2106      	movs	r1, #6
 80072e0:	438a      	bics	r2, r1
 80072e2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80072e4:	f000 fa1a 	bl	800771c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	23bc      	movs	r3, #188	; 0xbc
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	58d3      	ldr	r3, [r2, r3]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f7fe fe97 	bl	8006024 <USBD_LL_Resume>
}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	46bd      	mov	sp, r7
 80072fa:	b002      	add	sp, #8
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	46c0      	nop			; (mov r8, r8)
 8007300:	e000ed00 	.word	0xe000ed00

08007304 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800730c:	4a23      	ldr	r2, [pc, #140]	; (800739c <USBD_LL_Init+0x98>)
 800730e:	23bc      	movs	r3, #188	; 0xbc
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	23b0      	movs	r3, #176	; 0xb0
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	491f      	ldr	r1, [pc, #124]	; (800739c <USBD_LL_Init+0x98>)
 800731e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007320:	4b1e      	ldr	r3, [pc, #120]	; (800739c <USBD_LL_Init+0x98>)
 8007322:	4a1f      	ldr	r2, [pc, #124]	; (80073a0 <USBD_LL_Init+0x9c>)
 8007324:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007326:	4b1d      	ldr	r3, [pc, #116]	; (800739c <USBD_LL_Init+0x98>)
 8007328:	2208      	movs	r2, #8
 800732a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800732c:	4b1b      	ldr	r3, [pc, #108]	; (800739c <USBD_LL_Init+0x98>)
 800732e:	2202      	movs	r2, #2
 8007330:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007332:	4b1a      	ldr	r3, [pc, #104]	; (800739c <USBD_LL_Init+0x98>)
 8007334:	2202      	movs	r2, #2
 8007336:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007338:	4b18      	ldr	r3, [pc, #96]	; (800739c <USBD_LL_Init+0x98>)
 800733a:	2200      	movs	r2, #0
 800733c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800733e:	4b17      	ldr	r3, [pc, #92]	; (800739c <USBD_LL_Init+0x98>)
 8007340:	2200      	movs	r2, #0
 8007342:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007344:	4b15      	ldr	r3, [pc, #84]	; (800739c <USBD_LL_Init+0x98>)
 8007346:	2200      	movs	r2, #0
 8007348:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800734a:	4b14      	ldr	r3, [pc, #80]	; (800739c <USBD_LL_Init+0x98>)
 800734c:	0018      	movs	r0, r3
 800734e:	f7f9 fbab 	bl	8000aa8 <HAL_PCD_Init>
 8007352:	1e03      	subs	r3, r0, #0
 8007354:	d001      	beq.n	800735a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007356:	f7f9 f9c7 	bl	80006e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	23b0      	movs	r3, #176	; 0xb0
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	58d0      	ldr	r0, [r2, r3]
 8007362:	2318      	movs	r3, #24
 8007364:	2200      	movs	r2, #0
 8007366:	2100      	movs	r1, #0
 8007368:	f7fb f952 	bl	8002610 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	23b0      	movs	r3, #176	; 0xb0
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	58d0      	ldr	r0, [r2, r3]
 8007374:	2358      	movs	r3, #88	; 0x58
 8007376:	2200      	movs	r2, #0
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	f7fb f949 	bl	8002610 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	23b0      	movs	r3, #176	; 0xb0
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	58d0      	ldr	r0, [r2, r3]
 8007386:	2380      	movs	r3, #128	; 0x80
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	2200      	movs	r2, #0
 800738c:	2181      	movs	r1, #129	; 0x81
 800738e:	f7fb f93f 	bl	8002610 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	0018      	movs	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	b002      	add	sp, #8
 800739a:	bd80      	pop	{r7, pc}
 800739c:	2000065c 	.word	0x2000065c
 80073a0:	40005c00 	.word	0x40005c00

080073a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ac:	210f      	movs	r1, #15
 80073ae:	187b      	adds	r3, r7, r1
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b4:	260e      	movs	r6, #14
 80073b6:	19bb      	adds	r3, r7, r6
 80073b8:	2200      	movs	r2, #0
 80073ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	23b0      	movs	r3, #176	; 0xb0
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	58d3      	ldr	r3, [r2, r3]
 80073c4:	000d      	movs	r5, r1
 80073c6:	187c      	adds	r4, r7, r1
 80073c8:	0018      	movs	r0, r3
 80073ca:	f7f9 fc6d 	bl	8000ca8 <HAL_PCD_Start>
 80073ce:	0003      	movs	r3, r0
 80073d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d2:	19bc      	adds	r4, r7, r6
 80073d4:	197b      	adds	r3, r7, r5
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	0018      	movs	r0, r3
 80073da:	f000 f9a6 	bl	800772a <USBD_Get_USB_Status>
 80073de:	0003      	movs	r3, r0
 80073e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80073e2:	19bb      	adds	r3, r7, r6
 80073e4:	781b      	ldrb	r3, [r3, #0]
}
 80073e6:	0018      	movs	r0, r3
 80073e8:	46bd      	mov	sp, r7
 80073ea:	b005      	add	sp, #20
 80073ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	000c      	movs	r4, r1
 80073f8:	0010      	movs	r0, r2
 80073fa:	0019      	movs	r1, r3
 80073fc:	1cfb      	adds	r3, r7, #3
 80073fe:	1c22      	adds	r2, r4, #0
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	1cbb      	adds	r3, r7, #2
 8007404:	1c02      	adds	r2, r0, #0
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	003b      	movs	r3, r7
 800740a:	1c0a      	adds	r2, r1, #0
 800740c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800740e:	260f      	movs	r6, #15
 8007410:	19bb      	adds	r3, r7, r6
 8007412:	2200      	movs	r2, #0
 8007414:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007416:	250e      	movs	r5, #14
 8007418:	197b      	adds	r3, r7, r5
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	23b0      	movs	r3, #176	; 0xb0
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	58d0      	ldr	r0, [r2, r3]
 8007426:	19bc      	adds	r4, r7, r6
 8007428:	1cbb      	adds	r3, r7, #2
 800742a:	781d      	ldrb	r5, [r3, #0]
 800742c:	003b      	movs	r3, r7
 800742e:	881a      	ldrh	r2, [r3, #0]
 8007430:	1cfb      	adds	r3, r7, #3
 8007432:	7819      	ldrb	r1, [r3, #0]
 8007434:	002b      	movs	r3, r5
 8007436:	f7f9 fdcc 	bl	8000fd2 <HAL_PCD_EP_Open>
 800743a:	0003      	movs	r3, r0
 800743c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800743e:	250e      	movs	r5, #14
 8007440:	197c      	adds	r4, r7, r5
 8007442:	19bb      	adds	r3, r7, r6
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	0018      	movs	r0, r3
 8007448:	f000 f96f 	bl	800772a <USBD_Get_USB_Status>
 800744c:	0003      	movs	r3, r0
 800744e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007450:	197b      	adds	r3, r7, r5
 8007452:	781b      	ldrb	r3, [r3, #0]
}
 8007454:	0018      	movs	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	b005      	add	sp, #20
 800745a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800745c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800745c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	000a      	movs	r2, r1
 8007466:	1cfb      	adds	r3, r7, #3
 8007468:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800746a:	210f      	movs	r1, #15
 800746c:	187b      	adds	r3, r7, r1
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007472:	260e      	movs	r6, #14
 8007474:	19bb      	adds	r3, r7, r6
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	23b0      	movs	r3, #176	; 0xb0
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	58d2      	ldr	r2, [r2, r3]
 8007482:	000d      	movs	r5, r1
 8007484:	187c      	adds	r4, r7, r1
 8007486:	1cfb      	adds	r3, r7, #3
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	0019      	movs	r1, r3
 800748c:	0010      	movs	r0, r2
 800748e:	f7f9 fe0f 	bl	80010b0 <HAL_PCD_EP_Close>
 8007492:	0003      	movs	r3, r0
 8007494:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007496:	19bc      	adds	r4, r7, r6
 8007498:	197b      	adds	r3, r7, r5
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	0018      	movs	r0, r3
 800749e:	f000 f944 	bl	800772a <USBD_Get_USB_Status>
 80074a2:	0003      	movs	r3, r0
 80074a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80074a6:	19bb      	adds	r3, r7, r6
 80074a8:	781b      	ldrb	r3, [r3, #0]
}
 80074aa:	0018      	movs	r0, r3
 80074ac:	46bd      	mov	sp, r7
 80074ae:	b005      	add	sp, #20
 80074b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074b2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	000a      	movs	r2, r1
 80074bc:	1cfb      	adds	r3, r7, #3
 80074be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c0:	210f      	movs	r1, #15
 80074c2:	187b      	adds	r3, r7, r1
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c8:	260e      	movs	r6, #14
 80074ca:	19bb      	adds	r3, r7, r6
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	23b0      	movs	r3, #176	; 0xb0
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	58d2      	ldr	r2, [r2, r3]
 80074d8:	000d      	movs	r5, r1
 80074da:	187c      	adds	r4, r7, r1
 80074dc:	1cfb      	adds	r3, r7, #3
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	0019      	movs	r1, r3
 80074e2:	0010      	movs	r0, r2
 80074e4:	f7f9 fea8 	bl	8001238 <HAL_PCD_EP_SetStall>
 80074e8:	0003      	movs	r3, r0
 80074ea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ec:	19bc      	adds	r4, r7, r6
 80074ee:	197b      	adds	r3, r7, r5
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	0018      	movs	r0, r3
 80074f4:	f000 f919 	bl	800772a <USBD_Get_USB_Status>
 80074f8:	0003      	movs	r3, r0
 80074fa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80074fc:	19bb      	adds	r3, r7, r6
 80074fe:	781b      	ldrb	r3, [r3, #0]
}
 8007500:	0018      	movs	r0, r3
 8007502:	46bd      	mov	sp, r7
 8007504:	b005      	add	sp, #20
 8007506:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007508 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	000a      	movs	r2, r1
 8007512:	1cfb      	adds	r3, r7, #3
 8007514:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007516:	210f      	movs	r1, #15
 8007518:	187b      	adds	r3, r7, r1
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751e:	260e      	movs	r6, #14
 8007520:	19bb      	adds	r3, r7, r6
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	23b0      	movs	r3, #176	; 0xb0
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	58d2      	ldr	r2, [r2, r3]
 800752e:	000d      	movs	r5, r1
 8007530:	187c      	adds	r4, r7, r1
 8007532:	1cfb      	adds	r3, r7, #3
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	0019      	movs	r1, r3
 8007538:	0010      	movs	r0, r2
 800753a:	f7f9 fed9 	bl	80012f0 <HAL_PCD_EP_ClrStall>
 800753e:	0003      	movs	r3, r0
 8007540:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007542:	19bc      	adds	r4, r7, r6
 8007544:	197b      	adds	r3, r7, r5
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	0018      	movs	r0, r3
 800754a:	f000 f8ee 	bl	800772a <USBD_Get_USB_Status>
 800754e:	0003      	movs	r3, r0
 8007550:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007552:	19bb      	adds	r3, r7, r6
 8007554:	781b      	ldrb	r3, [r3, #0]
}
 8007556:	0018      	movs	r0, r3
 8007558:	46bd      	mov	sp, r7
 800755a:	b005      	add	sp, #20
 800755c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800755e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	000a      	movs	r2, r1
 8007568:	1cfb      	adds	r3, r7, #3
 800756a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	23b0      	movs	r3, #176	; 0xb0
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	58d3      	ldr	r3, [r2, r3]
 8007574:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007576:	1cfb      	adds	r3, r7, #3
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	b25b      	sxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	da0d      	bge.n	800759c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007580:	1cfb      	adds	r3, r7, #3
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	227f      	movs	r2, #127	; 0x7f
 8007586:	4013      	ands	r3, r2
 8007588:	68f9      	ldr	r1, [r7, #12]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	0013      	movs	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	189b      	adds	r3, r3, r2
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	18cb      	adds	r3, r1, r3
 8007596:	3302      	adds	r3, #2
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	e00d      	b.n	80075b8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800759c:	1cfb      	adds	r3, r7, #3
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	227f      	movs	r2, #127	; 0x7f
 80075a2:	401a      	ands	r2, r3
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	23b5      	movs	r3, #181	; 0xb5
 80075a8:	0059      	lsls	r1, r3, #1
 80075aa:	0013      	movs	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	189b      	adds	r3, r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	18c3      	adds	r3, r0, r3
 80075b4:	185b      	adds	r3, r3, r1
 80075b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b004      	add	sp, #16
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	000a      	movs	r2, r1
 80075ca:	1cfb      	adds	r3, r7, #3
 80075cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ce:	210f      	movs	r1, #15
 80075d0:	187b      	adds	r3, r7, r1
 80075d2:	2200      	movs	r2, #0
 80075d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d6:	260e      	movs	r6, #14
 80075d8:	19bb      	adds	r3, r7, r6
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	23b0      	movs	r3, #176	; 0xb0
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	58d2      	ldr	r2, [r2, r3]
 80075e6:	000d      	movs	r5, r1
 80075e8:	187c      	adds	r4, r7, r1
 80075ea:	1cfb      	adds	r3, r7, #3
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	0019      	movs	r1, r3
 80075f0:	0010      	movs	r0, r2
 80075f2:	f7f9 fcc3 	bl	8000f7c <HAL_PCD_SetAddress>
 80075f6:	0003      	movs	r3, r0
 80075f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fa:	19bc      	adds	r4, r7, r6
 80075fc:	197b      	adds	r3, r7, r5
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	0018      	movs	r0, r3
 8007602:	f000 f892 	bl	800772a <USBD_Get_USB_Status>
 8007606:	0003      	movs	r3, r0
 8007608:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800760a:	19bb      	adds	r3, r7, r6
 800760c:	781b      	ldrb	r3, [r3, #0]
}
 800760e:	0018      	movs	r0, r3
 8007610:	46bd      	mov	sp, r7
 8007612:	b005      	add	sp, #20
 8007614:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007616 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007618:	b087      	sub	sp, #28
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	0008      	movs	r0, r1
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	0019      	movs	r1, r3
 8007624:	230b      	movs	r3, #11
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	1c02      	adds	r2, r0, #0
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	2408      	movs	r4, #8
 800762e:	193b      	adds	r3, r7, r4
 8007630:	1c0a      	adds	r2, r1, #0
 8007632:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007634:	2117      	movs	r1, #23
 8007636:	187b      	adds	r3, r7, r1
 8007638:	2200      	movs	r2, #0
 800763a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800763c:	2516      	movs	r5, #22
 800763e:	197b      	adds	r3, r7, r5
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	23b0      	movs	r3, #176	; 0xb0
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	58d0      	ldr	r0, [r2, r3]
 800764c:	193b      	adds	r3, r7, r4
 800764e:	881d      	ldrh	r5, [r3, #0]
 8007650:	000e      	movs	r6, r1
 8007652:	187c      	adds	r4, r7, r1
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	230b      	movs	r3, #11
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	7819      	ldrb	r1, [r3, #0]
 800765c:	002b      	movs	r3, r5
 800765e:	f7f9 fdaf 	bl	80011c0 <HAL_PCD_EP_Transmit>
 8007662:	0003      	movs	r3, r0
 8007664:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007666:	2516      	movs	r5, #22
 8007668:	197c      	adds	r4, r7, r5
 800766a:	19bb      	adds	r3, r7, r6
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	0018      	movs	r0, r3
 8007670:	f000 f85b 	bl	800772a <USBD_Get_USB_Status>
 8007674:	0003      	movs	r3, r0
 8007676:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007678:	197b      	adds	r3, r7, r5
 800767a:	781b      	ldrb	r3, [r3, #0]
}
 800767c:	0018      	movs	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	b007      	add	sp, #28
 8007682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007684 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	0008      	movs	r0, r1
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	0019      	movs	r1, r3
 8007692:	230b      	movs	r3, #11
 8007694:	18fb      	adds	r3, r7, r3
 8007696:	1c02      	adds	r2, r0, #0
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	2408      	movs	r4, #8
 800769c:	193b      	adds	r3, r7, r4
 800769e:	1c0a      	adds	r2, r1, #0
 80076a0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a2:	2117      	movs	r1, #23
 80076a4:	187b      	adds	r3, r7, r1
 80076a6:	2200      	movs	r2, #0
 80076a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076aa:	2516      	movs	r5, #22
 80076ac:	197b      	adds	r3, r7, r5
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	23b0      	movs	r3, #176	; 0xb0
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	58d0      	ldr	r0, [r2, r3]
 80076ba:	193b      	adds	r3, r7, r4
 80076bc:	881d      	ldrh	r5, [r3, #0]
 80076be:	000e      	movs	r6, r1
 80076c0:	187c      	adds	r4, r7, r1
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	230b      	movs	r3, #11
 80076c6:	18fb      	adds	r3, r7, r3
 80076c8:	7819      	ldrb	r1, [r3, #0]
 80076ca:	002b      	movs	r3, r5
 80076cc:	f7f9 fd41 	bl	8001152 <HAL_PCD_EP_Receive>
 80076d0:	0003      	movs	r3, r0
 80076d2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d4:	2516      	movs	r5, #22
 80076d6:	197c      	adds	r4, r7, r5
 80076d8:	19bb      	adds	r3, r7, r6
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	0018      	movs	r0, r3
 80076de:	f000 f824 	bl	800772a <USBD_Get_USB_Status>
 80076e2:	0003      	movs	r3, r0
 80076e4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80076e6:	197b      	adds	r3, r7, r5
 80076e8:	781b      	ldrb	r3, [r3, #0]
}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b007      	add	sp, #28
 80076f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080076f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80076fc:	4b02      	ldr	r3, [pc, #8]	; (8007708 <USBD_static_malloc+0x14>)
}
 80076fe:	0018      	movs	r0, r3
 8007700:	46bd      	mov	sp, r7
 8007702:	b002      	add	sp, #8
 8007704:	bd80      	pop	{r7, pc}
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	20000950 	.word	0x20000950

0800770c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

}
 8007714:	46c0      	nop			; (mov r8, r8)
 8007716:	46bd      	mov	sp, r7
 8007718:	b002      	add	sp, #8
 800771a:	bd80      	pop	{r7, pc}

0800771c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007720:	f7f8 ff56 	bl	80005d0 <SystemClock_Config>
}
 8007724:	46c0      	nop			; (mov r8, r8)
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	0002      	movs	r2, r0
 8007732:	1dfb      	adds	r3, r7, #7
 8007734:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007736:	230f      	movs	r3, #15
 8007738:	18fb      	adds	r3, r7, r3
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800773e:	1dfb      	adds	r3, r7, #7
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b03      	cmp	r3, #3
 8007744:	d017      	beq.n	8007776 <USBD_Get_USB_Status+0x4c>
 8007746:	dc1b      	bgt.n	8007780 <USBD_Get_USB_Status+0x56>
 8007748:	2b02      	cmp	r3, #2
 800774a:	d00f      	beq.n	800776c <USBD_Get_USB_Status+0x42>
 800774c:	dc18      	bgt.n	8007780 <USBD_Get_USB_Status+0x56>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <USBD_Get_USB_Status+0x2e>
 8007752:	2b01      	cmp	r3, #1
 8007754:	d005      	beq.n	8007762 <USBD_Get_USB_Status+0x38>
 8007756:	e013      	b.n	8007780 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007758:	230f      	movs	r3, #15
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
    break;
 8007760:	e013      	b.n	800778a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007762:	230f      	movs	r3, #15
 8007764:	18fb      	adds	r3, r7, r3
 8007766:	2202      	movs	r2, #2
 8007768:	701a      	strb	r2, [r3, #0]
    break;
 800776a:	e00e      	b.n	800778a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800776c:	230f      	movs	r3, #15
 800776e:	18fb      	adds	r3, r7, r3
 8007770:	2201      	movs	r2, #1
 8007772:	701a      	strb	r2, [r3, #0]
    break;
 8007774:	e009      	b.n	800778a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007776:	230f      	movs	r3, #15
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	2202      	movs	r2, #2
 800777c:	701a      	strb	r2, [r3, #0]
    break;
 800777e:	e004      	b.n	800778a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007780:	230f      	movs	r3, #15
 8007782:	18fb      	adds	r3, r7, r3
 8007784:	2202      	movs	r2, #2
 8007786:	701a      	strb	r2, [r3, #0]
    break;
 8007788:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800778a:	230f      	movs	r3, #15
 800778c:	18fb      	adds	r3, r7, r3
 800778e:	781b      	ldrb	r3, [r3, #0]
}
 8007790:	0018      	movs	r0, r3
 8007792:	46bd      	mov	sp, r7
 8007794:	b004      	add	sp, #16
 8007796:	bd80      	pop	{r7, pc}

08007798 <memset>:
 8007798:	0003      	movs	r3, r0
 800779a:	1882      	adds	r2, r0, r2
 800779c:	4293      	cmp	r3, r2
 800779e:	d100      	bne.n	80077a2 <memset+0xa>
 80077a0:	4770      	bx	lr
 80077a2:	7019      	strb	r1, [r3, #0]
 80077a4:	3301      	adds	r3, #1
 80077a6:	e7f9      	b.n	800779c <memset+0x4>

080077a8 <__libc_init_array>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	2600      	movs	r6, #0
 80077ac:	4c0c      	ldr	r4, [pc, #48]	; (80077e0 <__libc_init_array+0x38>)
 80077ae:	4d0d      	ldr	r5, [pc, #52]	; (80077e4 <__libc_init_array+0x3c>)
 80077b0:	1b64      	subs	r4, r4, r5
 80077b2:	10a4      	asrs	r4, r4, #2
 80077b4:	42a6      	cmp	r6, r4
 80077b6:	d109      	bne.n	80077cc <__libc_init_array+0x24>
 80077b8:	2600      	movs	r6, #0
 80077ba:	f000 f819 	bl	80077f0 <_init>
 80077be:	4c0a      	ldr	r4, [pc, #40]	; (80077e8 <__libc_init_array+0x40>)
 80077c0:	4d0a      	ldr	r5, [pc, #40]	; (80077ec <__libc_init_array+0x44>)
 80077c2:	1b64      	subs	r4, r4, r5
 80077c4:	10a4      	asrs	r4, r4, #2
 80077c6:	42a6      	cmp	r6, r4
 80077c8:	d105      	bne.n	80077d6 <__libc_init_array+0x2e>
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	00b3      	lsls	r3, r6, #2
 80077ce:	58eb      	ldr	r3, [r5, r3]
 80077d0:	4798      	blx	r3
 80077d2:	3601      	adds	r6, #1
 80077d4:	e7ee      	b.n	80077b4 <__libc_init_array+0xc>
 80077d6:	00b3      	lsls	r3, r6, #2
 80077d8:	58eb      	ldr	r3, [r5, r3]
 80077da:	4798      	blx	r3
 80077dc:	3601      	adds	r6, #1
 80077de:	e7f2      	b.n	80077c6 <__libc_init_array+0x1e>
 80077e0:	080078d4 	.word	0x080078d4
 80077e4:	080078d4 	.word	0x080078d4
 80077e8:	080078d8 	.word	0x080078d8
 80077ec:	080078d4 	.word	0x080078d4

080077f0 <_init>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f6:	bc08      	pop	{r3}
 80077f8:	469e      	mov	lr, r3
 80077fa:	4770      	bx	lr

080077fc <_fini>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr
